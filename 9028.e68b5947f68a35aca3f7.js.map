{"version":3,"file":"9028.e68b5947f68a35aca3f7.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/linking_landing_page/linking_landing_page.tsx","webpack://mattermost-webapp/./src/components/linking_landing_page/index.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, { PureComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport BrowserStore from 'stores/browser_store';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport desktopImg from 'images/deep-linking/infogito_graphic1.png';\nimport mobileImg from 'images/deep-linking/deeplinking-mobile-img.png';\nimport macOSIcon from 'images/icons/macOS.png';\nimport windowsIcon from 'images/icons/windows.png';\nimport WelcomeVideo from 'images/icons/welcome.mp4';\n\nimport MattermostLogoSvg from 'images/logo.svg';\nimport { LandingPreferenceTypes } from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\n\ntype Props = {\n    defaultTheme: any;\n    desktopAppLink?: string;\n    iosAppLink?: string;\n    androidAppLink?: string;\n    siteUrl?: string;\n    siteName?: string;\n    brandImageUrl?: string;\n    enableCustomBrand: boolean;\n}\n\ntype State = {\n    rememberChecked: boolean;\n    redirectPage: boolean;\n    location: string;\n    nativeLocation: string;\n    brandImageError: boolean;\n    navigating: boolean;\n    showVideo: boolean;\n}\n\nexport default class LinkingLandingPage extends PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const location = window.location.href.replace('/landing#', '');\n\n        this.state = {\n            rememberChecked: false,\n            redirectPage: false,\n            location,\n            nativeLocation: location.replace(/^(https|http)/, 'mattermost'),\n            brandImageError: false,\n            navigating: false,\n            showVideo: false,\n        };\n\n        if (!BrowserStore.hasSeenLandingPage()) {\n            BrowserStore.setLandingPageSeen(true);\n        }\n    }\n\n    componentDidMount() {\n        Utils.applyTheme(this.props.defaultTheme);\n        if (this.checkLandingPreferenceApp()) {\n            this.openMattermostApp();\n        }\n\n        window.addEventListener('beforeunload', this.clearLandingPreferenceIfNotChecked);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.clearLandingPreferenceIfNotChecked);\n    }\n\n    clearLandingPreferenceIfNotChecked = () => {\n        if (!this.state.navigating && !this.state.rememberChecked) {\n            BrowserStore.clearLandingPreference(this.props.siteUrl);\n        }\n    };\n\n    checkLandingPreferenceBrowser = () => {\n        const landingPreference = BrowserStore.getLandingPreference(this.props.siteUrl);\n        return landingPreference && landingPreference === LandingPreferenceTypes.BROWSER;\n    };\n\n    isEmbedded = () => {\n        // this cookie is set by any plugin that facilitates iframe embedding (e.g. mattermost-plugin-msteams-sync).\n        const cookieName = 'MMEMBED';\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            if (cookie.startsWith(cookieName + '=')) {\n                const value = cookie.substring(cookieName.length + 1);\n                return decodeURIComponent(value) === '1';\n            }\n        }\n        return false;\n    };\n\n    checkLandingPreferenceApp = () => {\n        const landingPreference = BrowserStore.getLandingPreference(this.props.siteUrl);\n        return landingPreference && landingPreference === LandingPreferenceTypes.MATTERMOSTAPP;\n    };\n\n    handleChecked = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({ rememberChecked: e.target.checked });\n\n        // If it was checked, and now we're unchecking it, clear the preference\n        if (!e.target.checked) {\n            BrowserStore.clearLandingPreference(this.props.siteUrl);\n        }\n    };\n\n    setPreference = (pref: string, clearIfNotChecked?: boolean) => {\n        if (!this.state.rememberChecked) {\n            if (clearIfNotChecked) {\n                BrowserStore.clearLandingPreference(this.props.siteUrl);\n            }\n            return;\n        }\n\n        switch (pref) {\n            case LandingPreferenceTypes.MATTERMOSTAPP:\n                BrowserStore.setLandingPreferenceToMattermostApp(this.props.siteUrl);\n                break;\n            case LandingPreferenceTypes.BROWSER:\n                BrowserStore.setLandingPreferenceToBrowser(this.props.siteUrl);\n                break;\n            default:\n                break;\n        }\n    };\n\n    openMattermostApp = () => {\n        this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP);\n        this.setState({ redirectPage: true });\n        window.location.href = this.state.nativeLocation;\n    };\n\n    openInBrowser = () => {\n        this.setPreference(LandingPreferenceTypes.BROWSER);\n        this.setState({ showVideo: true });\n    };\n\n    handleVideoEnd = () => {\n        window.location.href = '/login';\n    };\n\n    handleVideoClick = () => {\n        window.location.href = '/login';\n    };\n\n    renderSystemDialogMessage = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <FormattedMessage\n                    id='get_app.systemDialogMessageMobile'\n                    defaultMessage='View in App'\n                />\n            );\n        }\n\n        return (\n            <>\n                <img src={windowsIcon} alt='Windows Icon' className='download_btn_icons' />\n                <FormattedMessage\n                    id='get_app.systemDialogMessage'\n                    defaultMessage='Download Windows'\n                />\n            </>\n        );\n    };\n\n    renderGoNativeAppMessage = () => {\n        return (\n            <a\n                href={UserAgent.isMobile() ? '#' : this.state.nativeLocation}\n                onMouseDown={() => {\n                    this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP, true);\n                }}\n                onClick={() => {\n                    this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP, true);\n                    this.setState({ redirectPage: true, navigating: true });\n                    if (UserAgent.isMobile()) {\n                        if (UserAgent.isAndroidWeb()) {\n                            const timeout = setTimeout(() => {\n                                window.location.replace(this.getDownloadLink()!);\n                            }, 2000);\n                            window.addEventListener('blur', () => {\n                                clearTimeout(timeout);\n                            });\n                        }\n                        window.location.replace(this.state.nativeLocation);\n                    }\n                }}\n                className='btn btn-primary btn-lg get-app__download'\n            >\n                {this.renderSystemDialogMessage()}\n            </a>\n        );\n    };\n\n    getDownloadLink = () => {\n        if (UserAgent.isIosWeb()) {\n            return this.props.iosAppLink;\n        } else if (UserAgent.isAndroidWeb()) {\n            return this.props.androidAppLink;\n        }\n\n        return this.props.desktopAppLink;\n    };\n\n    handleBrandImageError = () => {\n        this.setState({ brandImageError: true });\n    };\n\n    renderGraphic = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <img src={mobileImg} />\n            );\n        }\n\n        return (\n            <img src={desktopImg} />\n        );\n    };\n\n    renderDownloadLinkText = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <FormattedMessage\n                    id='get_app.dontHaveTheMobileApp'\n                    defaultMessage={'Don\\'t have the Mobile App?'}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='get_app.dontHaveTheDesktopApp'\n                defaultMessage={'Don\\'t have the Desktop App?'}\n            />\n        );\n    };\n\n    renderDownloadLinkSection = () => {\n        const downloadLink = this.getDownloadLink();\n\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__download-link'>\n                    <FormattedMarkdownMessage\n                        id='get_app.openLinkInBrowser'\n                        defaultMessage='Or, [open this link in your browser.](!{link})'\n                        values={{\n                            link: this.state.location,\n                        }}\n                    />\n                </div>\n            );\n        } else if (downloadLink) {\n            return (\n                <div className='get-app__download-link'>\n                    {this.renderDownloadLinkText()}\n                    {'\\u00A0'}\n                    <br />\n                    <a href={downloadLink}>\n                        <FormattedMessage\n                            id='get_app.downloadTheAppNow'\n                            defaultMessage='Download the app now.'\n                        />\n                    </a>\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    renderDialogHeader = () => {\n        const downloadLink = this.getDownloadLink();\n        const isMobile = UserAgent.isMobile();\n\n        let openingLink = (\n            <FormattedMessage\n                id='get_app.openingLink'\n                defaultMessage='Opening link in Infogito...'\n            />\n        );\n        if (this.props.enableCustomBrand) {\n            openingLink = (\n                <FormattedMessage\n                    id='get_app.openingLinkWhiteLabel'\n                    defaultMessage='Opening link in {appName}...'\n                    values={{\n                        appName: this.props.siteName || 'Infogito',\n                    }}\n                />\n            );\n        }\n\n        if (this.state.redirectPage) {\n            return (\n                <h1 className='get-app__launching'>\n                    {openingLink}\n                    <div className={`get-app__alternative${this.state.redirectPage ? ' redirect-page' : ''}`}>\n                        <FormattedMessage\n                            id='get_app.redirectedInMoments'\n                            defaultMessage='You will be redirected in a few moments.'\n                        />\n                        <br />\n                        {this.renderDownloadLinkText()}\n                        {'\\u00A0'}\n                        <br className='mobile-only' />\n                        <a href={downloadLink}>\n                            <FormattedMessage\n                                id='get_app.downloadTheAppNow'\n                                defaultMessage='Download the app now.'\n                            />\n                        </a>\n                    </div>\n                </h1>\n            );\n        }\n\n        let viewApp = (\n            <FormattedMessage\n                id='get_app.ifNothingPrompts'\n                defaultMessage='You can view {siteName} in the desktop app or continue in your web browser.'\n                values={{\n                    siteName: this.props.enableCustomBrand ? '' : ' Infogito',\n                }}\n            />\n        );\n        if (isMobile) {\n            viewApp = (\n                <FormattedMessage\n                    id='get_app.ifNothingPromptsMobile'\n                    defaultMessage='You can view {siteName} in the mobile app or continue in your web browser.'\n                    values={{\n                        siteName: this.props.enableCustomBrand ? '' : ' Infogito',\n                    }}\n                />\n            );\n        }\n\n        return (\n            <div className='get-app__launching'>\n                <FormattedMessage\n                    id='get_app.launching'\n                    tagName='h1'\n                    defaultMessage='Where would you like to view this?'\n                />\n                <div className='get-app__alternative'>\n                    {viewApp}\n                </div>\n            </div>\n        );\n    };\n\n    renderDialogBody = () => {\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__dialog-body'>\n                    {this.renderDialogHeader()}\n                    {this.renderDownloadLinkSection()}\n                </div>\n            );\n        }\n\n        return (\n            <div className='get-app__dialog-body'>\n                {this.renderDialogHeader()}\n                <div className='get-app__buttons'>\n                    {this.renderGoNativeAppMessage()}\n                    <a\n                        href={this.state.location}\n                        onMouseDown={() => {\n                            this.setPreference(LandingPreferenceTypes.BROWSER, true);\n                        }}\n                        onClick={() => {\n                            this.setPreference(LandingPreferenceTypes.BROWSER, true);\n                            this.setState({ navigating: true });\n                        }}\n                        className='btn btn-primary  btn-lg'\n                    >\n                        <img src={macOSIcon} alt='macOs Icon' className='download_btn_icons' />\n                        <FormattedMessage\n                            id='get_app.systemDialogMessage1'\n                            defaultMessage='Download macOS'\n                        />\n                    </a>\n                    <a\n                        href='#'\n                        onMouseDown={() => {\n                            this.setPreference(LandingPreferenceTypes.BROWSER, true);\n                        }}\n                        onClick={() => {\n                            this.setPreference(LandingPreferenceTypes.BROWSER, true);\n                            this.setState({ showVideo: true });\n                        }}\n                        className='btn btn-tertiary view_in_browser_btn btn-lg'\n                    >\n                        <FormattedMessage\n                            id='get_app.continueToBrowser'\n                            defaultMessage='View in Browser'\n                        />\n                    </a>\n                </div>\n                <label className='get-app__preference'>\n                    <input\n                        type='checkbox'\n                        checked={this.state.rememberChecked}\n                        className='get-app__checkbox'\n                        onChange={this.handleChecked}\n                    />\n                    <FormattedMessage\n                        id='get_app.rememberMyPreference'\n                        defaultMessage='Remember my preference'\n                    />\n                </label>\n                {this.renderDownloadLinkSection()}\n            </div>\n        );\n    };\n\n    render() {\n        const isMobile = UserAgent.isMobile();\n\n        if (this.checkLandingPreferenceBrowser() || this.isEmbedded()) {\n            this.openInBrowser();\n            return null;\n        }\n\n        if (this.state.showVideo) {\n            return (\n                <video\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    autoPlay\n                    muted\n                    onEnded={this.handleVideoEnd}\n                    onClick={this.handleVideoClick}\n                >\n                    <source src={WelcomeVideo} type=\"video/mp4\" />\n                </video>\n            );\n        }\n\n        return (\n            <div className='get-app'>\n                <div className='get-app__dialog'>\n                    <div className={`get-app__graphic ${isMobile ? 'mobile' : ''}`}>\n                        {this.renderGraphic()}\n                    </div>\n                    {this.renderDialogBody()}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport type {GlobalState} from 'types/store';\n\nimport LinkingLandingPage from './linking_landing_page';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        desktopAppLink: config.AppDownloadLink,\n        iosAppLink: config.IosAppDownloadLink,\n        androidAppLink: config.AndroidAppDownloadLink,\n        defaultTheme: getTheme(state),\n        siteUrl: config.SiteURL,\n        siteName: config.SiteName,\n        brandImageUrl: Client4.getBrandImageUrl('0'),\n        enableCustomBrand: config.EnableCustomBrand === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(LinkingLandingPage);\n"],"names":["LinkingLandingPage","PureComponent","constructor","props","super","_defineProperty","this","state","navigating","rememberChecked","BrowserStore","siteUrl","landingPreference","LandingPreferenceTypes","cookies","document","cookie","split","i","length","trim","startsWith","cookieName","value","substring","decodeURIComponent","e","setState","target","checked","pref","clearIfNotChecked","setPreference","redirectPage","window","location","href","nativeLocation","showVideo","UserAgent","React","FormattedMessage","id","defaultMessage","src","windowsIcon","alt","className","onMouseDown","onClick","timeout","setTimeout","replace","getDownloadLink","addEventListener","clearTimeout","renderSystemDialogMessage","iosAppLink","androidAppLink","desktopAppLink","brandImageError","mobileImg","desktopImg","downloadLink","FormattedMarkdownMessage","values","link","renderDownloadLinkText","isMobile","openingLink","enableCustomBrand","appName","siteName","concat","viewApp","tagName","renderDialogHeader","renderDownloadLinkSection","renderGoNativeAppMessage","macOSIcon","type","onChange","handleChecked","componentDidMount","Utils","defaultTheme","checkLandingPreferenceApp","openMattermostApp","clearLandingPreferenceIfNotChecked","componentWillUnmount","removeEventListener","render","checkLandingPreferenceBrowser","isEmbedded","openInBrowser","style","width","height","autoPlay","muted","onEnded","handleVideoEnd","handleVideoClick","WelcomeVideo","renderGraphic","renderDialogBody","_pt","brandImageUrl","connect","config","getConfig","AppDownloadLink","IosAppDownloadLink","AndroidAppDownloadLink","getTheme","SiteURL","SiteName","Client4","EnableCustomBrand"],"sourceRoot":""}