{"version":3,"file":"7012.e618664c483f812b58b0.js","mappings":"+OA2FA,QA7EA,WACI,MAAMA,GAAWC,EAAAA,EAAAA,eAEXC,GAAyBC,EAAAA,EAAAA,QAAOC,OAAOC,WAAW,eAADC,OAAgBC,EAAAA,QAAAA,yBAAkC,SAAQC,QAC3GC,GAA0BN,EAAAA,EAAAA,QAAOC,OAAOC,WAAW,eAADC,OAAgBC,EAAAA,QAAAA,yBAAqC,EAAC,wBAAAD,OAAuBC,EAAAA,QAAAA,0BAAmC,SAAQC,QAC1KE,GAAyBP,EAAAA,EAAAA,QAAOC,OAAOC,WAAW,eAADC,OAAgBC,EAAAA,QAAAA,0BAAsC,EAAC,wBAAAD,OAAuBC,EAAAA,QAAAA,yBAAkC,SAAQC,QACzKG,GAA0BR,EAAAA,EAAAA,QAAOC,OAAOC,WAAW,eAADC,OAAgBC,EAAAA,QAAAA,yBAAqC,EAAC,SAAQC,QAEhHI,GAAoBC,EAAAA,EAAAA,cAAY,KAClC,QAAQ,GACR,KAAKF,EAAwBG,QACzBd,GAASe,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,SACpBhB,GAASiB,EAAAA,EAAAA,IAAWD,EAAAA,GAAAA,SACpB,MACJ,KAAKN,EAAuBI,QACxBd,GAASe,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,QACpBhB,GAASiB,EAAAA,EAAAA,IAAWD,EAAAA,GAAAA,QACpB,MACJ,KAAKP,EAAwBK,QACzBd,GAASe,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,SACpBhB,GAASiB,EAAAA,EAAAA,IAAWD,EAAAA,GAAAA,SACpB,MACJ,KAAKd,EAAuBY,QACxBd,GAASe,EAAAA,EAAAA,IAAWC,EAAAA,GAAAA,QACpBhB,GAASiB,EAAAA,EAAAA,IAAWD,EAAAA,GAAAA,QAExB,GACD,CAAChB,IAEEkB,GAAkCL,EAAAA,EAAAA,aAAYM,KAAS,KACzDnB,GAASe,EAAAA,EAAAA,OACTf,GAASiB,EAAAA,EAAAA,MAAa,GACvB,KAAM,IAEHG,GAAqCP,EAAAA,EAAAA,cAAaQ,IAChDA,EAAEP,SACFF,GACJ,GACD,CAACA,IAoCJ,OAlCAU,EAAAA,EAAAA,YAAU,KACNV,IAEIV,EAAuBqB,kBACvBZ,EAAwBY,iBAAiB,SAAUH,GACnDV,EAAuBa,iBAAiB,SAAUH,GAClDX,EAAwBc,iBAAiB,SAAUH,GACnDlB,EAAuBqB,iBAAiB,SAAUH,IAC3ClB,EAAuBsB,aAC9Bb,EAAwBa,YAAYJ,GACpCV,EAAuBc,YAAYJ,GACnCX,EAAwBe,YAAYJ,GACpClB,EAAuBsB,YAAYJ,IAEnChB,OAAOmB,iBAAiB,SAAUL,GAG/B,KACChB,EAAuBuB,qBACvBd,EAAwBc,oBAAoB,SAAUL,GACtDV,EAAuBe,oBAAoB,SAAUL,GACrDX,EAAwBgB,oBAAoB,SAAUL,GACtDlB,EAAuBuB,oBAAoB,SAAUL,IAC9ClB,EAAuBwB,gBAC9Bf,EAAwBe,eAAeN,GACvCV,EAAuBgB,eAAeN,GACtCX,EAAwBiB,eAAeN,GACvClB,EAAuBwB,eAAeN,IAEtChB,OAAOqB,oBAAoB,SAAUP,EACzC,IAEL,CAACE,EAAoCF,EAAiCN,IAElE,IACX,C","sources":["webpack://mattermost-webapp/./src/components/window_size_observer/WindowSizeObserver.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport throttle from 'lodash/throttle';\nimport {useCallback, useEffect, useRef} from 'react';\nimport {useDispatch} from 'react-redux';\n\nimport {setLhsSize} from 'actions/views/lhs';\nimport {setRhsSize} from 'actions/views/rhs';\n\nimport {SidebarSize} from 'components/resizable_sidebar/constants';\n\nimport Constants from 'utils/constants';\n\nfunction WindowSizeObserver() {\n    const dispatch = useDispatch();\n\n    const smallSidebarMediaQuery = useRef(window.matchMedia(`(max-width: ${Constants.SMALL_SIDEBAR_BREAKPOINT}px)`)).current;\n    const mediumSidebarMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.SMALL_SIDEBAR_BREAKPOINT + 1}px) and (max-width: ${Constants.MEDIUM_SIDEBAR_BREAKPOINT}px)`)).current;\n    const largeSidebarMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.MEDIUM_SIDEBAR_BREAKPOINT + 1}px) and (max-width: ${Constants.LARGE_SIDEBAR_BREAKPOINT}px)`)).current;\n    const xLargeSidebarMediaQuery = useRef(window.matchMedia(`(min-width: ${Constants.LARGE_SIDEBAR_BREAKPOINT + 1}px)`)).current;\n\n    const updateSidebarSize = useCallback(() => {\n        switch (true) {\n        case xLargeSidebarMediaQuery.matches:\n            dispatch(setLhsSize(SidebarSize.XLARGE));\n            dispatch(setRhsSize(SidebarSize.XLARGE));\n            break;\n        case largeSidebarMediaQuery.matches:\n            dispatch(setLhsSize(SidebarSize.LARGE));\n            dispatch(setRhsSize(SidebarSize.LARGE));\n            break;\n        case mediumSidebarMediaQuery.matches:\n            dispatch(setLhsSize(SidebarSize.MEDIUM));\n            dispatch(setRhsSize(SidebarSize.MEDIUM));\n            break;\n        case smallSidebarMediaQuery.matches:\n            dispatch(setLhsSize(SidebarSize.SMALL));\n            dispatch(setRhsSize(SidebarSize.SMALL));\n            break;\n        }\n    }, [dispatch]);\n\n    const setSidebarSizeWhenWindowResized = useCallback(throttle(() => {\n        dispatch(setLhsSize());\n        dispatch(setRhsSize());\n    }, 100), []);\n\n    const handleSidebarMediaQueryChangeEvent = useCallback((e: MediaQueryListEvent) => {\n        if (e.matches) {\n            updateSidebarSize();\n        }\n    }, [updateSidebarSize]);\n\n    useEffect(() => {\n        updateSidebarSize();\n\n        if (smallSidebarMediaQuery.addEventListener) {\n            xLargeSidebarMediaQuery.addEventListener('change', handleSidebarMediaQueryChangeEvent);\n            largeSidebarMediaQuery.addEventListener('change', handleSidebarMediaQueryChangeEvent);\n            mediumSidebarMediaQuery.addEventListener('change', handleSidebarMediaQueryChangeEvent);\n            smallSidebarMediaQuery.addEventListener('change', handleSidebarMediaQueryChangeEvent);\n        } else if (smallSidebarMediaQuery.addListener) {\n            xLargeSidebarMediaQuery.addListener(handleSidebarMediaQueryChangeEvent);\n            largeSidebarMediaQuery.addListener(handleSidebarMediaQueryChangeEvent);\n            mediumSidebarMediaQuery.addListener(handleSidebarMediaQueryChangeEvent);\n            smallSidebarMediaQuery.addListener(handleSidebarMediaQueryChangeEvent);\n        } else {\n            window.addEventListener('resize', setSidebarSizeWhenWindowResized);\n        }\n\n        return () => {\n            if (smallSidebarMediaQuery.removeEventListener) {\n                xLargeSidebarMediaQuery.removeEventListener('change', handleSidebarMediaQueryChangeEvent);\n                largeSidebarMediaQuery.removeEventListener('change', handleSidebarMediaQueryChangeEvent);\n                mediumSidebarMediaQuery.removeEventListener('change', handleSidebarMediaQueryChangeEvent);\n                smallSidebarMediaQuery.removeEventListener('change', handleSidebarMediaQueryChangeEvent);\n            } else if (smallSidebarMediaQuery.removeListener) {\n                xLargeSidebarMediaQuery.removeListener(handleSidebarMediaQueryChangeEvent);\n                largeSidebarMediaQuery.removeListener(handleSidebarMediaQueryChangeEvent);\n                mediumSidebarMediaQuery.removeListener(handleSidebarMediaQueryChangeEvent);\n                smallSidebarMediaQuery.removeListener(handleSidebarMediaQueryChangeEvent);\n            } else {\n                window.removeEventListener('resize', setSidebarSizeWhenWindowResized);\n            }\n        };\n    }, [handleSidebarMediaQueryChangeEvent, setSidebarSizeWhenWindowResized, updateSidebarSize]);\n\n    return null;\n}\n\nexport default WindowSizeObserver;\n"],"names":["dispatch","useDispatch","smallSidebarMediaQuery","useRef","window","matchMedia","concat","Constants","current","mediumSidebarMediaQuery","largeSidebarMediaQuery","xLargeSidebarMediaQuery","updateSidebarSize","useCallback","matches","setLhsSize","SidebarSize","setRhsSize","setSidebarSizeWhenWindowResized","throttle","handleSidebarMediaQueryChangeEvent","e","useEffect","addEventListener","addListener","removeEventListener","removeListener"],"sourceRoot":""}