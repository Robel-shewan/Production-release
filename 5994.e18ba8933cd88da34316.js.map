{"version":3,"file":"5994.e18ba8933cd88da34316.js","mappings":"8WA2BA,MAuLA,EAvL0B,CACtB,CACIA,KAAM,oBACNC,WAAW,EACXC,MACIC,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,sBACHC,eAAe,2BAGvBC,KACIJ,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,0BACHC,eAAe,sIACfE,OAAQ,CACJC,KAAOC,GACHP,IAAAA,cAACQ,EAAAA,EAAY,CACTC,KAAK,oDACLC,SAAS,kBAERH,MAMrBI,aAAa,EACbC,KAAMA,CAACC,EAAeC,MACdA,EAAOC,kBAAoB,IAAIC,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG,GAAGC,YAMzE,CACIpB,KAAM,uBACNC,WAAW,EACXC,MACIC,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,sBACHC,eAAe,2BAGvBC,KACIJ,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,iCACHC,eAAe,6JACfE,OAAQ,CACJC,KAAOC,GACHP,IAAAA,cAACQ,EAAAA,EAAY,CACTC,KAAMS,EAAAA,GAAAA,6BACNR,SAAS,kBAERH,MAMrBI,aAAa,EACbC,KAAMA,CAACC,EAAeC,EAAQK,MACC,UAAvBA,EAAQC,YAGRN,EAAOC,iBAAmB,IAAIC,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG,GAAGC,WAGrC,SAAvBE,EAAQC,YAAyBD,EAAQE,SAAW,IAAIL,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG,GAAGC,YAMlG,CACIpB,KAAM,oBACNC,WAAW,EACXC,MACIC,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,sBACHC,eAAe,2BAGvBC,KACIJ,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,uCACHC,eAAe,0GACfE,OAAQ,CACJC,KAAOC,GACHP,IAAAA,cAACQ,EAAAA,EAAY,CACTC,KAAK,qCACLC,SAAS,kBAERH,MAMrBI,aAAa,EACbC,KAAMA,CAACC,EAAeC,EAAQK,EAASG,MAI9BA,UAAAA,EAAWC,eAAe,gBAI3BD,EAAUE,aAAeF,EAAUE,YAPf,KAWG,SAAvBL,EAAQC,YAA6C,SAApBD,EAAQM,UAOrD,CACI5B,KAAM,mBACNE,MACIC,IAAAA,cAAC0B,EAAAA,EAAwB,CACrBxB,GAAG,sBACHC,eAAe,2BAGvBQ,aAAa,EACbP,KACIJ,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,sCACHC,eAAe,mJACfE,OAAQ,CACJC,KAAOC,GACHP,IAAAA,cAACQ,EAAAA,EAAY,CACTC,KAAK,yGACLC,SAAS,kBAERH,MAMrBK,KAAOC,IAECc,EAAAA,EAAkDd,EAAe,aAKhEe,EAAAA,MAOb,CAII/B,KAAM,SACNc,aAAa,EACbZ,MACIC,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,+BACHC,eAAe,8BAGvB0B,KAAO7B,IAAAA,cAAC8B,EAAAA,uBAAsB,MAC9B1B,KACIJ,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,8BACHC,eAAe,4MACfE,OAAQ,CAAC0B,GAAK/B,IAAAA,cAAA,cAGtBY,KAAMA,CAACC,EAAeC,EAAQK,EAASG,EAAWU,IACd,OAAzBA,aAAc,EAAdA,EAAgBC,Q,6dC5K5B,MAAMC,UAAqBlC,IAAAA,cAA2BmC,WAAAA,GAAA,IAAAC,EAAA,SAAAC,WAAAD,EAAAE,KAAAC,EAAA,yBAatC,KACf,IAAK,MAAMC,KAAUF,KAAKG,MAAMC,QAAS,KAAAC,EAErC,IAAIL,KAAKG,MAAMG,iBAAiBJ,EAAO3C,QAKnCyC,KAAKG,MAAMI,YAAYL,EAAO3C,SAI9B2C,EAAO1C,WAAcwC,KAAKG,MAAMK,gBAIpB,QAAZH,EAACH,EAAO5B,YAAI,IAAA+B,GAAXA,EAAAI,KAAAP,EACDF,KAAKG,MAAM5B,cACXyB,KAAKG,MAAM3B,OACXwB,KAAKG,MAAMtB,QACXmB,KAAKG,MAAMnB,UACXgB,KAAKG,MAAMT,gBAKf,OAAOQ,CACX,CACA,OAAO,IAAI,IACdD,EAAA,aAEM,WAAoB,IAAnBS,EAAMX,UAAAY,OAAA,QAAAC,IAAAb,UAAA,IAAAA,UAAA,GACV,MAAMG,EAASJ,EAAKe,mBACfX,IAIAQ,GACDZ,EAAKK,MAAMW,QAAQC,gBAAgBjB,EAAKK,MAAMa,cAAe,CAAC,CAC1DC,QAASnB,EAAKK,MAAMa,cACpBE,SAAUC,EAAAA,GAAAA,uBACV5D,KAAM2C,EAAO3C,KACb6D,MAAO,eAIftB,EAAKK,MAAMW,QAAQO,cAAcnB,EAAO3C,MAC5C,IAAC0C,EAAA,sBAEe,KACZD,KAAKsB,MAAK,EAAK,IAClBrB,EAAA,sBAEe,KACZD,KAAKsB,MAAK,EAAM,GACnB,CAnEDC,iBAAAA,GACQvB,KAAKG,MAAMK,eACXR,KAAKG,MAAMW,QAAQU,sBAE3B,CAEAC,kBAAAA,CAAmBC,GACXA,EAAUlB,gBAAkBR,KAAKG,MAAMK,eAAiBR,KAAKG,MAAMK,eACnER,KAAKG,MAAMW,QAAQU,sBAE3B,CA2DAG,MAAAA,GACI,MAAMzB,EAASF,KAAKa,mBAEpB,GAAc,MAAVX,EACA,OAAO,KAGX,IAAI0B,EACA1B,EAAO1C,YACPoE,EACIlE,IAAAA,cAAA,OAAKmE,UAAU,uBACXnE,IAAAA,cAAA,KACImE,UAAU,YACVpE,MAAOuC,KAAKG,MAAM2B,KAAKC,cAAc,CAACnE,GAAI,kCAAmCC,eAAgB,yCAEjGH,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,6BACHC,eAAe,oCAM/B,MAAM0B,EAAOW,EAAOX,MAAQ7B,IAAAA,cAACsE,EAAAA,EAAc,MAE3C,OACItE,IAAAA,cAAA,OACImE,UAAU,2BAEVnE,IAAAA,cAAA,OAAKmE,UAAU,uBACVtC,GAEL7B,IAAAA,cAAA,OAAKmE,UAAU,uBACXnE,IAAAA,cAAA,OAAKmE,UAAU,wBACV3B,EAAOzC,OAEXyC,EAAOpC,KACP8D,EACDlE,IAAAA,cAAA,OAAKmE,UAAU,yBACXnE,IAAAA,cAAA,UACIE,GAAG,wBACHiE,UAAU,yBACVI,QAASjC,KAAKkC,eAEdxE,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,0BACHC,eAAe,qBAGtBqC,EAAO7B,aACJX,IAAAA,cAAA,UACIE,GAAG,wBACHiE,UAAU,0BACVI,QAASjC,KAAKmC,eAEdzE,IAAAA,cAACC,EAAAA,iBAAgB,CACbC,GAAG,0BACHC,eAAe,wBAO/C,EACHoC,EAvIYL,EAAY,aAhBrBoB,cAAaoB,IAAAA,OAAAA,WACbhC,QAAOgC,IAAAA,MAAAA,WACP7B,YAAW6B,IAAAA,SAAAA,IAAAA,KAAAC,WACX/B,iBAAgB8B,IAAAA,IAAAA,WAChB5B,cAAa4B,IAAAA,KACb7D,cAAa6D,IAAAA,OAAAA,WAKbtB,QAAOsB,IAAAA,MAAA,IAAAC,aA+IX,SAAeC,EAAAA,EAAAA,YAAW1C,GC/IpB2C,GAA6BC,EAAAA,EAAAA,IAAgB,6BAA8BrB,EAAAA,GAAAA,wBAC3EsB,GAAuBC,EAAAA,EAAAA,IACzB,uBACAH,GACChC,IACG,MAAMoC,EAA2C,CAAC,EAIlD,OAHApC,EAAYqC,SAASC,IACjBF,EAAQE,EAAEtF,MAAQsF,CAAC,IAEhBF,CAAO,IAkCtB,GAAeG,EAAAA,EAAAA,UA9Bf,SAAyBC,GACrB,MAAMlE,GAAUmE,EAAAA,EAAAA,IAAWD,GACrBvE,GAASyE,EAAAA,EAAAA,IAAUF,GACnBxE,EAAgBwE,EAAMG,SAASC,QAAQ5E,cACvCS,EAAY+D,EAAMG,SAASE,MAAMpE,UAEvC,MAAO,CACHgC,cAAe+B,EAAMG,SAASG,MAAMrC,cACpCT,YAAakC,EAAqBM,GAClCzC,iBAAkByC,EAAMO,MAAMpD,OAAOqD,iBACrC/C,eAAegD,EAAAA,EAAAA,IAAsBT,EAAO,CAACU,WAAYC,EAAAA,GAAAA,gBACzDtD,QAASuD,EACTnF,SACAK,UACAN,gBACAS,YACAU,gBAAgBkE,EAAAA,EAAAA,IAAkBb,GAE1C,IAEA,SAA4Bc,GACxB,MAAO,CACH/C,SAASgD,EAAAA,EAAAA,oBAAmB,CACxB/C,gBAAe,KACfM,cAAa,IACbG,qBAAoBA,EAAAA,IACrBqC,GAEX,GAEA,CAA4DjE,E","sources":["webpack://mattermost-webapp/./src/components/system_notice/notices.tsx","webpack://mattermost-webapp/./src/components/system_notice/system_notice.tsx","webpack://mattermost-webapp/./src/components/system_notice/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {InformationOutlineIcon} from '@mattermost/compass-icons/components';\n\nimport ExternalLink from 'components/external_link';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport type {Notice} from 'components/system_notice/types';\n\nimport {DocLinks} from 'utils/constants';\nimport * as ServerVersion from 'utils/server_version';\nimport * as UserAgent from 'utils/user_agent';\n\n// Notices are objects with the following fields:\n//  - name - string identifier\n//  - adminOnly - set to true if only system admins should see this message\n//  - icon - the image to display for the notice icon\n//  - title - JSX node to display for the notice title\n//  - body - JSX node to display for the notice body\n//  - allowForget - boolean to allow forget the notice\n//  - show - function that check if we need to show the notice\n//\n// Order is important! The notices at the top are shown first.\n\nconst notices: Notice[] = [\n    {\n        name: 'apiv3_deprecation',\n        adminOnly: true,\n        title: (\n            <FormattedMessage\n                id='system_notice.title'\n                defaultMessage='Notice from Mattermost'\n            />\n        ),\n        body: (\n            <FormattedMessage\n                id='system_notice.body.api3'\n                defaultMessage='If youâ€™ve created or installed integrations in the last two years, find out how <link>recent changes</link> may have affected them.'\n                values={{\n                    link: (msg: React.ReactNode) => (\n                        <ExternalLink\n                            href='https://api.mattermost.com/#tag/APIv3-Deprecation'\n                            location='system_notices'\n                        >\n                            {msg}\n                        </ExternalLink>\n                    ),\n                }}\n            />\n        ),\n        allowForget: true,\n        show: (serverVersion, config) => {\n            if (config.InstallationDate >= new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            return true;\n        },\n    },\n    {\n        name: 'advanced_permissions',\n        adminOnly: true,\n        title: (\n            <FormattedMessage\n                id='system_notice.title'\n                defaultMessage='Notice from Mattermost'\n            />\n        ),\n        body: (\n            <FormattedMessage\n                id='system_notice.body.permissions'\n                defaultMessage='Some policy and permission System Console settings have moved with the release of <link>advanced permissions</link> into Mattermost Free and Professional.'\n                values={{\n                    link: (msg: React.ReactNode) => (\n                        <ExternalLink\n                            href={DocLinks.ONBOARD_ADVANCED_PERMISSIONS}\n                            location='system_notices'\n                        >\n                            {msg}\n                        </ExternalLink>\n                    ),\n                }}\n            />\n        ),\n        allowForget: true,\n        show: (serverVersion, config, license) => {\n            if (license.IsLicensed === 'false') {\n                return false;\n            }\n            if (config.InstallationDate > new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            if (license.IsLicensed === 'true' && license.IssuedAt > new Date(2018, 5, 16, 0, 0, 0, 0).getTime()) {\n                return false;\n            }\n            return true;\n        },\n    },\n    {\n        name: 'ee_upgrade_advice',\n        adminOnly: true,\n        title: (\n            <FormattedMessage\n                id='system_notice.title'\n                defaultMessage='Notice from Mattermost'\n            />\n        ),\n        body: (\n            <FormattedMessage\n                id='system_notice.body.ee_upgrade_advice'\n                defaultMessage='Enterprise Edition is recommended to ensure optimal operation and reliability. <link>Learn more</link>.'\n                values={{\n                    link: (msg: React.ReactNode) => (\n                        <ExternalLink\n                            href='https://mattermost.com/performance'\n                            location='system_notices'\n                        >\n                            {msg}\n                        </ExternalLink>\n                    ),\n                }}\n            />\n        ),\n        allowForget: false,\n        show: (serverVersion, config, license, analytics) => {\n            const USERS_THRESHOLD = 10000;\n\n            // If we don't have the analytics yet, don't show\n            if (!analytics?.hasOwnProperty('TOTAL_USERS')) {\n                return false;\n            }\n\n            if (analytics.TOTAL_USERS && analytics.TOTAL_USERS < USERS_THRESHOLD) {\n                return false;\n            }\n\n            if (license.IsLicensed === 'true' && license.Cluster === 'true') {\n                return false;\n            }\n\n            return true;\n        },\n    },\n    {\n        name: 'ie11_deprecation',\n        title: (\n            <FormattedMarkdownMessage\n                id='system_notice.title'\n                defaultMessage='Notice from Mattermost'\n            />\n        ),\n        allowForget: false,\n        body: (\n            <FormattedMessage\n                id='system_notice.body.ie11_deprecation'\n                defaultMessage='Your browser, IE11, will no longer be supported in an upcoming release. <link>Find out how to move to another browser in one simple step</link>.'\n                values={{\n                    link: (msg: React.ReactNode) => (\n                        <ExternalLink\n                            href='https://forum.mattermost.com/t/mattermost-is-dropping-support-for-internet-explorer-ie11-in-v5-16/7575'\n                            location='system_notices'\n                        >\n                            {msg}\n                        </ExternalLink>\n                    ),\n                }}\n            />\n        ),\n        show: (serverVersion) => {\n            // Don't show the notice after v5.16, show a different notice\n            if (ServerVersion.isServerVersionGreaterThanOrEqualTo(serverVersion, '5.16.0')) {\n                return false;\n            }\n\n            // Only show if they're using IE\n            if (!UserAgent.isInternetExplorer()) {\n                return false;\n            }\n\n            return true;\n        },\n    },\n    {\n\n        // This notice is marked as viewed by default for new users on the server.\n        // Any change on this notice should be handled also in the server side.\n        name: 'GMasDM',\n        allowForget: true,\n        title: (\n            <FormattedMessage\n                id='system_notice.title.gm_as_dm'\n                defaultMessage='Updates to Group Messages'\n            />\n        ),\n        icon: (<InformationOutlineIcon/>),\n        body: (\n            <FormattedMessage\n                id='system_noticy.body.gm_as_dm'\n                defaultMessage='You will now be notified for all activity in your group messages along with a notification badge for every new message.{br}{br}You can configure this in notification preferences for each group message.'\n                values={{br: (<br/>)}}\n            />\n        ),\n        show: (serverVersion, config, license, analytics, currentChannel) => {\n            return currentChannel?.type === 'G';\n        },\n    },\n];\n\nexport default notices;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, type WrappedComponentProps} from 'react-intl';\n\nimport type {AnalyticsState} from '@mattermost/types/admin';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {ClientConfig, ClientLicense} from '@mattermost/types/config';\nimport type {PreferenceType} from '@mattermost/types/preferences';\n\nimport type {Notice} from 'components/system_notice/types';\nimport MattermostLogo from 'components/widgets/icons/mattermost_logo';\n\nimport {Preferences} from 'utils/constants';\n\nexport interface Props extends WrappedComponentProps {\n    currentUserId: string;\n    notices: Notice[];\n    preferences: {[key: string]: any};\n    dismissedNotices: any;\n    isSystemAdmin?: boolean;\n    serverVersion: string;\n    config: Partial<ClientConfig>;\n    license: ClientLicense;\n    analytics?: AnalyticsState;\n    currentChannel?: Channel;\n    actions: {\n        savePreferences(userId: string, preferences: PreferenceType[]): void;\n        dismissNotice(type: string): void;\n        getStandardAnalytics(teamId?: string): void;\n    };\n}\nexport class SystemNotice extends React.PureComponent<Props> {\n    componentDidMount() {\n        if (this.props.isSystemAdmin) {\n            this.props.actions.getStandardAnalytics();\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.isSystemAdmin !== this.props.isSystemAdmin && this.props.isSystemAdmin) {\n            this.props.actions.getStandardAnalytics();\n        }\n    }\n\n    getCurrentNotice = () => {\n        for (const notice of this.props.notices) {\n            // Skip if dismissed previously this session\n            if (this.props.dismissedNotices[notice.name]) {\n                continue;\n            }\n\n            // Skip if dismissed forever\n            if (this.props.preferences[notice.name]) {\n                continue;\n            }\n\n            if (notice.adminOnly && !this.props.isSystemAdmin) {\n                continue;\n            }\n\n            if (!notice.show?.(\n                this.props.serverVersion,\n                this.props.config,\n                this.props.license,\n                this.props.analytics,\n                this.props.currentChannel,\n            )) {\n                continue;\n            }\n\n            return notice;\n        }\n        return null;\n    };\n\n    hide = (remind = false) => {\n        const notice = this.getCurrentNotice();\n        if (!notice) {\n            return;\n        }\n\n        if (!remind) {\n            this.props.actions.savePreferences(this.props.currentUserId, [{\n                user_id: this.props.currentUserId,\n                category: Preferences.CATEGORY_SYSTEM_NOTICE,\n                name: notice.name,\n                value: 'dismissed',\n            }]);\n        }\n\n        this.props.actions.dismissNotice(notice.name);\n    };\n\n    hideAndRemind = () => {\n        this.hide(true);\n    };\n\n    hideAndForget = () => {\n        this.hide(false);\n    };\n\n    render() {\n        const notice = this.getCurrentNotice();\n\n        if (notice == null) {\n            return null;\n        }\n\n        let visibleMessage;\n        if (notice.adminOnly) {\n            visibleMessage = (\n                <div className='system-notice__info'>\n                    <i\n                        className='fa fa-eye'\n                        title={this.props.intl.formatMessage({id: 'system_notice.adminVisible.icon', defaultMessage: 'Only visible to System Admins Icon'})}\n                    />\n                    <FormattedMessage\n                        id='system_notice.adminVisible'\n                        defaultMessage='Only visible to System Admins'\n                    />\n                </div>\n            );\n        }\n\n        const icon = notice.icon || <MattermostLogo/>;\n\n        return (\n            <div\n                className='system-notice bg--white'\n            >\n                <div className='system-notice__logo'>\n                    {icon}\n                </div>\n                <div className='system-notice__body'>\n                    <div className='system-notice__title'>\n                        {notice.title}\n                    </div>\n                    {notice.body}\n                    {visibleMessage}\n                    <div className='system-notice__footer'>\n                        <button\n                            id='systemnotice_remindme'\n                            className='btn btn-sm btn-primary'\n                            onClick={this.hideAndRemind}\n                        >\n                            <FormattedMessage\n                                id='system_notice.remind_me'\n                                defaultMessage='Remind Me Later'\n                            />\n                        </button>\n                        {notice.allowForget &&\n                            <button\n                                id='systemnotice_dontshow'\n                                className='btn btn-sm btn-tertiary'\n                                onClick={this.hideAndForget}\n                            >\n                                <FormattedMessage\n                                    id='system_notice.dont_show'\n                                    defaultMessage=\"Don't Show Again\"\n                                />\n                            </button>}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(SystemNotice);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {PreferenceType} from '@mattermost/types/preferences';\n\nimport {getStandardAnalytics} from 'mattermost-redux/actions/admin';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport {dismissNotice} from 'actions/views/notice';\n\nimport Notices from 'components/system_notice/notices';\nimport SystemNotice from 'components/system_notice/system_notice';\n\nimport {Preferences} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nconst getSystemNoticePreferences = makeGetCategory('getSystemNoticePreferences', Preferences.CATEGORY_SYSTEM_NOTICE);\nconst getPreferenceNameMap = createSelector(\n    'getPreferenceNameMap',\n    getSystemNoticePreferences,\n    (preferences) => {\n        const nameMap: {[key: string]: PreferenceType} = {};\n        preferences.forEach((p) => {\n            nameMap[p.name] = p;\n        });\n        return nameMap;\n    },\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const serverVersion = state.entities.general.serverVersion;\n    const analytics = state.entities.admin.analytics;\n\n    return {\n        currentUserId: state.entities.users.currentUserId,\n        preferences: getPreferenceNameMap(state),\n        dismissedNotices: state.views.notice.hasBeenDismissed,\n        isSystemAdmin: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n        notices: Notices,\n        config,\n        license,\n        serverVersion,\n        analytics,\n        currentChannel: getCurrentChannel(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            dismissNotice,\n            getStandardAnalytics,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemNotice);\n"],"names":["name","adminOnly","title","React","FormattedMessage","id","defaultMessage","body","values","link","msg","ExternalLink","href","location","allowForget","show","serverVersion","config","InstallationDate","Date","getTime","DocLinks","license","IsLicensed","IssuedAt","analytics","hasOwnProperty","TOTAL_USERS","Cluster","FormattedMarkdownMessage","ServerVersion","UserAgent","icon","InformationOutlineIcon","br","currentChannel","type","SystemNotice","constructor","_this","arguments","this","_defineProperty","notice","props","notices","_notice$show","dismissedNotices","preferences","isSystemAdmin","call","remind","length","undefined","getCurrentNotice","actions","savePreferences","currentUserId","user_id","category","Preferences","value","dismissNotice","hide","componentDidMount","getStandardAnalytics","componentDidUpdate","prevProps","render","visibleMessage","className","intl","formatMessage","MattermostLogo","onClick","hideAndRemind","hideAndForget","_pt","isRequired","injectIntl","getSystemNoticePreferences","makeGetCategory","getPreferenceNameMap","createSelector","nameMap","forEach","p","connect","state","getLicense","getConfig","entities","general","admin","users","views","hasBeenDismissed","haveISystemPermission","permission","Permissions","Notices","getCurrentChannel","dispatch","bindActionCreators"],"sourceRoot":""}