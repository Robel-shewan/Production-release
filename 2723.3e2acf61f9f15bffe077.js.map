{"version":3,"file":"2723.3e2acf61f9f15bffe077.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/widgets/icons/info_icon.tsx","webpack://mattermost-webapp/./src/components/channel_header_mobile/channel_info_button/channel_info_button.tsx","webpack://mattermost-webapp/./src/components/channel_header_mobile/channel_info_button/index.ts","webpack://mattermost-webapp/./src/components/notify_counts/notify_counts.tsx","webpack://mattermost-webapp/./src/components/notify_counts/index.ts","webpack://mattermost-webapp/./src/components/channel_header_mobile/collapse_lhs_button/collapse_lhs_button.tsx","webpack://mattermost-webapp/./src/components/channel_header_mobile/collapse_lhs_button/index.ts","webpack://mattermost-webapp/./src/components/channel_header_mobile/collapse_rhs_button/collapse_rhs_button.tsx","webpack://mattermost-webapp/./src/components/channel_header_mobile/collapse_rhs_button/index.ts","webpack://mattermost-webapp/./src/components/channel_header_mobile/show_search_button/show_search_button.tsx","webpack://mattermost-webapp/./src/components/channel_header_mobile/show_search_button/index.ts","webpack://mattermost-webapp/./src/components/channel_header_mobile/unmute_channel_button/unmute_channel_button.tsx","webpack://mattermost-webapp/./src/components/channel_header_mobile/unmute_channel_button/index.ts","webpack://mattermost-webapp/./src/components/channel_header_mobile/channel_header_mobile.tsx","webpack://mattermost-webapp/./src/components/channel_header_mobile/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/menu_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function InfoIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 22 22'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.info', defaultMessage: 'Info Icon'})}\n            >\n                <g\n                    stroke='none'\n                    strokeWidth='1'\n                    fill='inherit'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-388.000000, -18.000000)'\n                        fill='inherit'\n                    >\n                        <g>\n                            <g transform='translate(381.000000, 11.000000)'>\n                                <g transform='translate(7.000000, 7.000000)'>\n                                    <path d='M11,22 C4.92486775,22 0,17.0751322 0,11 C0,4.92486775 4.92486775,0 11,0 C17.0751322,0 22,4.92486775 22,11 C22,17.0751322 17.0751322,22 11,22 Z M11,20.7924685 C16.408231,20.7924685 20.7924685,16.408231 20.7924685,11 C20.7924685,5.59176898 16.408231,1.20753149 11,1.20753149 C5.59176898,1.20753149 1.20753149,5.59176898 1.20753149,11 C1.20753149,16.408231 5.59176898,20.7924685 11,20.7924685 Z M10.1572266,16.0625 L10.1572266,8.69335938 L11.3466797,8.69335938 L11.3466797,16.0625 L10.1572266,16.0625 Z M10.7519531,7.50390625 C10.3417969,7.50390625 10,7.16210938 10,6.75195312 C10,6.33496094 10.3417969,6 10.7519531,6 C11.1689453,6 11.5039062,6.33496094 11.5039062,6.75195312 C11.5039062,7.16210938 11.1689453,7.50390625 10.7519531,7.50390625 Z'/>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport InfoIcon from 'components/widgets/icons/info_icon';\n\nimport {localizeMessage} from 'utils/utils';\n\ntype Props = {\n    channel: Channel;\n    actions: {\n        showChannelInfo: (channelId: string) => void;\n    };\n};\n\nconst NavbarInfoButton: React.FunctionComponent<Props> = ({channel, actions}: Props): JSX.Element => (\n    <button\n        className='navbar-toggle navbar-right__icon navbar-info-button pull-right'\n        aria-label={localizeMessage('accessibility.button.Info', 'Info')}\n        onClick={() => actions.showChannelInfo(channel.id)}\n    >\n        <InfoIcon\n            className='icon icon__info'\n            aria-hidden='true'\n        />\n    </button>\n);\n\nexport default NavbarInfoButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {showChannelInfo} from 'actions/views/rhs';\n\nimport ChannelInfoButton from './channel_info_button';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            showChannelInfo,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ChannelInfoButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {BasicUnreadMeta} from 'mattermost-redux/selectors/entities/channels';\n\nconst NotifyCounts = ({unreadMentionCount, isUnread}: BasicUnreadMeta) => {\n    if (unreadMentionCount) {\n        return <span className='badge badge-notify'>{unreadMentionCount}</span>;\n    } else if (isUnread) {\n        return <span className='badge badge-notify'>{'•'}</span>;\n    }\n    return null;\n};\n\nexport default React.memo(NotifyCounts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getUnreadStatusInCurrentTeam, basicUnreadMeta} from 'mattermost-redux/selectors/entities/channels';\n\nimport type {GlobalState} from 'types/store';\n\nimport NotifyCounts from './notify_counts';\n\nfunction mapStateToProps(state: GlobalState) {\n    return basicUnreadMeta(getUnreadStatusInCurrentTeam(state));\n}\n\nexport default connect(mapStateToProps)(NotifyCounts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport NotifyCounts from 'components/notify_counts';\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\ntype Props = {\n    actions: {\n        toggleLhs: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    };\n}\n\nconst CollapseLhsButton: React.FunctionComponent<Props> = (props: Props) => (\n    <button\n        key='navbar-toggle-sidebar'\n        type='button'\n        className='navbar-toggle'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={props.actions.toggleLhs}\n    >\n        <span className='sr-only'>\n            <FormattedMessage\n                id='navbar.toggle2'\n                defaultMessage='Toggle sidebar'\n            />\n        </span>\n        <MenuIcon className='style--none icon icon__menu icon--sidebarHeaderTextColor'/>\n        <NotifyCounts/>\n    </button>\n);\n\nexport default CollapseLhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {toggle as toggleLhs} from 'actions/views/lhs';\n\nimport CollapseLhsButton from './collapse_lhs_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        toggleLhs,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseLhsButton);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\ntype Actions = {\n    toggleRhsMenu: (e?: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\ntype Props = {\n    actions: Actions;\n}\n\nconst CollapseRhsButton: React.FunctionComponent<Props> = (props: Props) => (\n    <button\n        key='navbar-toggle-menu'\n        type='button'\n        className='navbar-toggle navbar-right__icon menu-toggle pull-right'\n        data-toggle='collapse'\n        data-target='#sidebar-nav'\n        onClick={props.actions.toggleRhsMenu}\n    >\n        <MenuIcon/>\n    </button>\n);\n\nexport default CollapseRhsButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {toggleMenu as toggleRhsMenu} from 'actions/views/rhs';\n\nimport CollapseRhsButton from './collapse_rhs_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        toggleRhsMenu,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CollapseRhsButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport SearchIcon from 'components/widgets/icons/search_icon';\n\nimport {localizeMessage} from 'utils/utils';\n\ntype Actions = {\n    openRHSSearch: () => void;\n}\n\ntype Props = {\n    actions: Actions;\n}\n\nconst ShowSearchButton = ({actions}: Props) => {\n    const handleClick = () => {\n        actions.openRHSSearch();\n    };\n\n    return (\n        <button\n            type='button'\n            className='navbar-toggle navbar-right__icon navbar-search pull-right'\n            onClick={handleClick}\n            aria-label={localizeMessage('accessibility.button.Search', 'Search')}\n        >\n            <SearchIcon\n                className='icon icon__search'\n                aria-hidden='true'\n            />\n        </button>\n    );\n};\nexport default React.memo(ShowSearchButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {openRHSSearch} from 'actions/views/rhs';\n\nimport ShowSearchButton from './show_search_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        openRHSSearch,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(ShowSearchButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {ChannelNotifyProps} from '@mattermost/types/channels';\n\nimport {NotificationLevels} from 'utils/constants';\n\ntype Actions = {\n    updateChannelNotifyProps: (userId: string, channelId: string, props: Pick<ChannelNotifyProps, 'mark_unread'>) => void;\n};\n\ntype Props = {\n    user: { id: string };\n    channel: { id: string };\n    actions: Actions;\n};\n\nconst UnmuteChannelButton = ({user, channel, actions}: Props) => {\n    const handleClick = () => {\n        actions.updateChannelNotifyProps(user.id, channel.id, {mark_unread: NotificationLevels.ALL});\n    };\n\n    return (\n        <button\n            type='button'\n            className='navbar-toggle icon icon__mute'\n            onClick={handleClick}\n        >\n            <span className='fa fa-bell-slash-o icon'/>\n        </button>\n    );\n};\n\nexport default React.memo(UnmuteChannelButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport UnmuteChannelButton from './unmute_channel_button';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(UnmuteChannelButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {MobileChannelHeaderDropdown} from 'components/channel_header_dropdown';\n\nimport MobileChannelHeaderPlug from 'plugins/mobile_channel_header_plug';\n\nimport ChannelInfoButton from './channel_info_button';\nimport CollapseLhsButton from './collapse_lhs_button';\nimport CollapseRhsButton from './collapse_rhs_button';\nimport ShowSearchButton from './show_search_button';\nimport UnmuteChannelButton from './unmute_channel_button';\n\ntype Props = {\n    channel?: Channel;\n\n    /**\n     * Relative url for the team, used to redirect if a link in the channel header is clicked\n     */\n    currentRelativeTeamUrl?: string;\n\n    inGlobalThreads?: boolean;\n    inDrafts?: boolean;\n    isMobileView: boolean;\n    isMuted?: boolean;\n    isReadOnly?: boolean;\n    isRHSOpen?: boolean;\n    user: UserProfile;\n    actions: {\n        closeLhs: () => void;\n        closeRhs: () => void;\n        closeRhsMenu: () => void;\n    };\n}\n\nexport default class ChannelHeaderMobile extends React.PureComponent<Props> {\n    componentDidMount() {\n        document.querySelector('.inner-wrap')?.addEventListener('click', this.hideSidebars);\n    }\n\n    componentWillUnmount() {\n        document.querySelector('.inner-wrap')?.removeEventListener('click', this.hideSidebars);\n    }\n\n    hideSidebars = (e: Event) => {\n        if (this.props.isMobileView) {\n            if (this.props.isRHSOpen) {\n                this.props.actions.closeRhs();\n            }\n\n            const target = e.target as HTMLElement | undefined;\n\n            if (target && target.className !== 'navbar-toggle' && target.className !== 'icon-bar') {\n                this.props.actions.closeLhs();\n                this.props.actions.closeRhsMenu();\n            }\n        }\n    };\n\n    render() {\n        const {user, channel, isMuted, inGlobalThreads, inDrafts} = this.props;\n\n        let heading;\n        if (inGlobalThreads) {\n            heading = (\n                <FormattedMessage\n                    id='globalThreads.heading'\n                    defaultMessage='Followed threads'\n                />\n            );\n        } else if (inDrafts) {\n            heading = (\n                <FormattedMessage\n                    id='drafts.heading'\n                    defaultMessage='Drafts'\n                />\n            );\n        } else if (channel) {\n            heading = (\n                <>\n                    <MobileChannelHeaderDropdown/>\n                    {isMuted && (\n                        <UnmuteChannelButton\n                            user={user}\n                            channel={channel}\n                        />\n                    )}\n                </>\n            );\n        }\n\n        return (\n            <nav\n                id='navbar'\n                className='navbar navbar-default navbar-fixed-top'\n                role='navigation'\n            >\n                <div className='container-fluid theme'>\n                    <div className='navbar-header'>\n                        <CollapseLhsButton/>\n                        <div className={classNames('navbar-brand', {GlobalThreads___title: inGlobalThreads})}>\n                            {heading}\n                        </div>\n                        <div className='spacer'/>\n                        {channel && (\n                            <ChannelInfoButton\n                                channel={channel}\n                            />\n                        )}\n                        <ShowSearchButton/>\n                        {channel && (\n                            <MobileChannelHeaderPlug\n                                channel={channel}\n                                isDropdown={false}\n                            />\n                        )}\n                        <CollapseRhsButton/>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Location} from 'history';\nimport {connect} from 'react-redux';\nimport {withRouter, matchPath} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {\n    getCurrentChannel,\n    getMyCurrentChannelMembership,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {close as closeLhs} from 'actions/views/lhs';\nimport {\n    closeRightHandSide as closeRhs,\n    closeMenu as closeRhsMenu,\n} from 'actions/views/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelHeaderMobile from './channel_header_mobile';\n\nconst isCurrentChannelMuted = createSelector(\n    'isCurrentChannelMuted',\n    getMyCurrentChannelMembership,\n    (membership) => isChannelMuted(membership),\n);\n\ntype OwnProps = {\n    location: Location;\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps) => ({\n    user: getCurrentUser(state),\n    channel: getCurrentChannel(state),\n    isMobileView: getIsMobileView(state),\n    isMuted: isCurrentChannelMuted(state),\n    inGlobalThreads: Boolean(matchPath(ownProps.location.pathname, {path: '/:team/threads/:threadIdentifier?'})),\n    inDrafts: Boolean(matchPath(ownProps.location.pathname, {path: '/:team/drafts'})),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        closeLhs,\n        closeRhs,\n        closeRhsMenu,\n    }, dispatch),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ChannelHeaderMobile));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function MenuIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='16px'\n                height='10px'\n                viewBox='0 0 16 10'\n                version='1.1'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.menu', defaultMessage: 'Menu Icon'})}\n            >\n                <g\n                    stroke='none'\n                    strokeWidth='1'\n                    fill='inherit'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-188.000000, -38.000000)'\n                        fillRule='nonzero'\n                        fill='inherit'\n                    >\n                        <g>\n                            <g>\n                                <g transform='translate(188.000000, 38.000000)'>\n                                    <path d='M15.5,0 C15.776,0 16,0.224 16,0.5 L16,1.5 C16,1.776 15.776,2 15.5,2 L0.5,2 C0.224,2 0,1.776 0,1.5 L0,0.5 C0,0.224 0.224,0 0.5,0 L15.5,0 Z M15.5,4 C15.776,4 16,4.224 16,4.5 L16,5.5 C16,5.776 15.776,6 15.5,6 L0.5,6 C0.224,6 0,5.776 0,5.5 L0,4.5 C0,4.224 0.224,4 0.5,4 L15.5,4 Z M15.5,8 C15.776,8 16,8.224 16,8.5 L16,9.5 C16,9.776 15.776,10 15.5,10 L0.5,10 C0.224,10 0,9.776 0,9.5 L0,8.5 C0,8.224 0.224,8 0.5,8 L15.5,8 Z'/>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        </span>\n    );\n}\n"],"names":["InfoIcon","props","formatMessage","useIntl","React","width","height","viewBox","role","id","defaultMessage","stroke","strokeWidth","fill","fillRule","transform","d","NavbarInfoButton","_ref","channel","actions","className","localizeMessage","onClick","showChannelInfo","propTypes","_pt","isRequired","connect","dispatch","bindActionCreators","ChannelInfoButton","NotifyCounts","unreadMentionCount","isUnread","state","basicUnreadMeta","getUnreadStatusInCurrentTeam","CollapseLhsButton","key","type","toggleLhs","FormattedMessage","MenuIcon","CollapseRhsButton","toggleRhsMenu","ShowSearchButton","handleClick","openRHSSearch","SearchIcon","UnmuteChannelButton","user","updateChannelNotifyProps","mark_unread","NotificationLevels","ChannelHeaderMobile","constructor","arguments","_defineProperty","e","this","isMobileView","isRHSOpen","closeRhs","target","closeLhs","closeRhsMenu","componentDidMount","_document$querySelect","document","querySelector","addEventListener","hideSidebars","componentWillUnmount","_document$querySelect2","removeEventListener","render","isMuted","inGlobalThreads","inDrafts","heading","MobileChannelHeaderDropdown","classNames","GlobalThreads___title","MobileChannelHeaderPlug","isDropdown","currentRelativeTeamUrl","isReadOnly","isCurrentChannelMuted","createSelector","getMyCurrentChannelMembership","membership","isChannelMuted","withRouter","mapStateToProps","ownProps","getCurrentUser","getCurrentChannel","getIsMobileView","Boolean","matchPath","location","pathname","path","version"],"sourceRoot":""}