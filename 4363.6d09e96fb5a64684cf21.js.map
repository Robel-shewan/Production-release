{"version":3,"file":"4363.6d09e96fb5a64684cf21.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/common/svg_images_components/magnifying_glass_svg.tsx","webpack://mattermost-webapp/./src/components/searchable_channel_list.tsx","webpack://mattermost-webapp/./src/components/browse_channels/browse_channels.tsx","webpack://mattermost-webapp/./src/components/browse_channels/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/checkbox_checked_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {SVGProps} from 'react';\n\nconst SvgComponent = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        width={140}\n        height={141}\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        {...props}\n    >\n        <path\n            opacity={0.4}\n            d='M37.593 38.008c4.754-4.815 10.754-7.295 17.989-7.428 7.101.133 13.065 2.601 17.892 7.428 4.815 4.827 7.295 10.791 7.428 17.892-.133 7.235-2.601 13.223-7.428 17.99-4.827 4.754-10.791 7.27-17.892 7.512-7.235-.254-13.223-2.758-17.99-7.513-4.754-4.766-7.258-10.766-7.512-18 .254-7.102 2.758-13.066 7.513-17.881Z'\n            fill='#fff'\n        />\n        <path\n            d='M78.887 51.382c-2.151-6.992-6.225-12.225-12.226-15.69-6.001-3.465-12.57-4.376-19.701-2.743-3.9.995-7.297 2.717-10.22 5.162 3.269-3.567 7.415-6.037 12.428-7.416 7.13-1.633 13.732-.703 19.787 2.793s10.161 8.748 12.313 15.74c1.323 5.037 1.257 9.862-.21 14.47-1.454 4.614-4.066 8.49-7.84 11.611 2.833-3.087 4.783-6.713 5.844-10.894 1.05-4.187.991-8.522-.175-13.033Z'\n            fill='#000'\n            fillOpacity={0.4}\n        />\n        <path\n            d='M86.76 53.929c-.508-7.506-3.553-14.097-9.125-19.774-6.346-6.05-13.67-9.08-21.974-9.08-8.303 0-15.616 3.03-21.961 9.08-6.08 6.315-9.126 13.591-9.126 21.855 0 8.262 3.046 15.551 9.126 21.854 5.826 5.556 12.485 8.551 19.967 8.984 7.481.445 14.383-1.611 20.728-6.146l4.75 4.727 6.08-6.05-4.75-4.727c4.69-6.302 6.78-13.218 6.285-20.723Zm-13.126 19.87c-4.823 4.726-10.781 7.228-17.876 7.468-7.228-.252-13.21-2.742-17.973-7.469-4.75-4.727-7.252-10.692-7.506-17.885.254-7.06 2.756-12.99 7.506-17.789 4.75-4.787 10.745-7.252 17.973-7.385 7.095.133 13.053 2.586 17.876 7.385 4.81 4.8 7.288 10.73 7.421 17.79-.133 7.192-2.599 13.157-7.421 17.884Z'\n            fill='#BABEC9'\n        />\n        <path\n            d='M106.202 114.187c-1.567.449-2.728.291-3.482-.472L78.06 86.651c-.753-.762-1.064-1.743-.945-2.954.12-1.211.874-2.567 2.262-4.093 1.507-1.393 2.847-2.192 4.044-2.385 1.196-.194 2.165.157 2.92 1.053l26.921 24.957c.753.763.873 1.901.37 3.427-.502 1.525-1.447 3.051-2.823 4.577-1.496 1.526-3.039 2.506-4.607 2.954Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='m108.007 98.343-10.08 10.164-12.154-13.34 8.914-9.106 13.32 12.282Z'\n            fill='#7A5600'\n        />\n    </svg>\n);\n\nexport default SvgComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage, defineMessages, injectIntl, type WrappedComponentProps} from 'react-intl';\n\nimport {ArchiveOutlineIcon, CheckIcon, ChevronDownIcon, GlobeIcon, LockOutlineIcon, AccountOutlineIcon, GlobeCheckedIcon} from '@mattermost/compass-icons/components';\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {isPrivateChannel} from 'mattermost-redux/utils/channel_utils';\n\nimport MagnifyingGlassSVG from 'components/common/svg_images_components/magnifying_glass_svg';\nimport LoadingScreen from 'components/loading_screen';\nimport * as Menu from 'components/menu';\nimport QuickInput from 'components/quick_input';\nimport SharedChannelIndicator from 'components/shared_channel_indicator';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {isArchivedChannel} from 'utils/channel_utils';\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport * as UserAgent from 'utils/user_agent';\nimport {localizeMessage, localizeAndFormatMessage} from 'utils/utils';\n\nimport type {FilterType} from './browse_channels/browse_channels';\nimport {Filter} from './browse_channels/browse_channels';\n\nconst NEXT_BUTTON_TIMEOUT_MILLISECONDS = 500;\n\ninterface Props extends WrappedComponentProps {\n    channels: Channel[];\n    channelsPerPage: number;\n    nextPage: (page: number) => void;\n    isSearch: boolean;\n    search: (term: string) => void;\n    handleJoin: (channel: Channel, done: () => void) => void;\n    noResultsText: JSX.Element;\n    changeFilter: (filter: FilterType) => void;\n    filter: FilterType;\n    myChannelMemberships: RelationOneToOne<Channel, ChannelMembership>;\n    closeModal: (modalId: string) => void;\n    hideJoinedChannelsPreference: (shouldHideJoinedChannels: boolean) => void;\n    rememberHideJoinedChannelsChecked: boolean;\n    canShowArchivedChannels?: boolean;\n    loading?: boolean;\n    channelsMemberCount?: Record<string, number>;\n}\n\ntype State = {\n    joiningChannel: string;\n    page: number;\n    nextDisabled: boolean;\n    channelSearchValue: string;\n    isSearch?: boolean;\n}\n\nexport class SearchableChannelList extends React.PureComponent<Props, State> {\n    private nextTimeoutId: number | NodeJS.Timeout;\n    private filter: React.RefObject<HTMLInputElement>;\n    private channelListScroll: React.RefObject<HTMLDivElement>;\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        return {isSearch: props.isSearch, page: props.isSearch && !state.isSearch ? 0 : state.page};\n    }\n\n    constructor(props: Props) {\n        super(props);\n\n        this.nextTimeoutId = 0;\n\n        this.state = {\n            joiningChannel: '',\n            page: 0,\n            nextDisabled: false,\n            channelSearchValue: '',\n        };\n\n        this.filter = React.createRef();\n        this.channelListScroll = React.createRef();\n    }\n\n    componentDidMount() {\n        // only focus the search box on desktop so that we don't cause the keyboard to open on mobile\n        if (!UserAgent.isMobile() && this.filter.current) {\n            this.filter.current.focus();\n        }\n        document.addEventListener('keydown', this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown);\n    }\n\n    onKeyDown = (e: KeyboardEvent) => {\n        const target = e.target as HTMLElement;\n        const isEnterKeyPressed = isKeyPressed(e, Constants.KeyCodes.ENTER);\n        if (isEnterKeyPressed && (e.shiftKey || e.ctrlKey || e.altKey)) {\n            return;\n        }\n        if (isEnterKeyPressed && target?.classList.contains('more-modal__row')) {\n            target.click();\n        }\n    };\n\n    handleJoin = (channel: Channel, e: React.MouseEvent) => {\n        e.stopPropagation();\n        this.setState({joiningChannel: channel.id});\n        this.props.handleJoin(\n            channel,\n            () => {\n                this.setState({joiningChannel: ''});\n            },\n        );\n        if (this.isMemberOfChannel(channel.id)) {\n            this.props.closeModal(ModalIdentifiers.MORE_CHANNELS);\n        }\n    };\n\n    isMemberOfChannel(channelId: string) {\n        return this.props.myChannelMemberships[channelId];\n    }\n\n    createChannelRow = (channel: Channel) => {\n        const ariaLabel = `${channel.display_name}, ${channel.purpose}`.toLowerCase();\n        let channelTypeIcon;\n\n        if (isArchivedChannel(channel)) {\n            channelTypeIcon = <ArchiveOutlineIcon size={18}/>;\n        } else if (isPrivateChannel(channel)) {\n            channelTypeIcon = <LockOutlineIcon size={18}/>;\n        } else {\n            channelTypeIcon = <GlobeIcon size={18}/>;\n        }\n        let memberCount = 0;\n        if (this.props.channelsMemberCount?.[channel.id]) {\n            memberCount = this.props.channelsMemberCount[channel.id];\n        }\n\n        const membershipIndicator = this.isMemberOfChannel(channel.id) ? (\n            <div\n                id='membershipIndicatorContainer'\n                aria-label={localizeMessage('more_channels.membership_indicator', 'Membership Indicator: Joined')}\n            >\n                <CheckIcon size={14}/>\n                <FormattedMessage\n                    id={'more_channels.joined'}\n                    defaultMessage={'Joined'}\n                />\n            </div>\n        ) : null;\n\n        const channelPurposeContainerAriaLabel = localizeAndFormatMessage(\n            messages.channelPurpose.id,\n            messages.channelPurpose.defaultMessage,\n            {memberCount, channelPurpose: channel.purpose || ''},\n        );\n\n        const channelPurposeContainer = (\n            <div\n                id='channelPurposeContainer'\n                aria-label={channelPurposeContainerAriaLabel}\n            >\n                {membershipIndicator}\n                {membershipIndicator ? <span className='dot'/> : null}\n                <AccountOutlineIcon size={14}/>\n                <span data-testid={`channelMemberCount-${channel.name}`} >{memberCount}</span>\n                {channel.purpose.length > 0 ? <span className='dot'/> : null}\n                <span className='more-modal__description'>{channel.purpose}</span>\n            </div>\n        );\n\n        const joinViewChannelButtonClass = classNames('btn btn-sm', {\n            'btn-secondary outlineButton': this.isMemberOfChannel(channel.id),\n            'btn-primary primaryButton': !this.isMemberOfChannel(channel.id),\n        });\n\n        const joinViewChannelButton = (\n            <button\n                id='joinViewChannelButton'\n                onClick={(e) => this.handleJoin(channel, e)}\n                className={joinViewChannelButtonClass}\n                disabled={Boolean(this.state.joiningChannel)}\n                tabIndex={-1}\n                aria-label={this.isMemberOfChannel(channel.id) ? localizeMessage('more_channels.view', 'View') : localizeMessage('joinChannel.JoinButton', 'Join')}\n            >\n                <LoadingWrapper\n                    loading={this.state.joiningChannel === channel.id}\n                    text={localizeMessage('joinChannel.joiningButton', 'Joining...')}\n                >\n                    <FormattedMessage\n                        id={this.isMemberOfChannel(channel.id) ? 'more_channels.view' : 'joinChannel.JoinButton'}\n                        defaultMessage={this.isMemberOfChannel(channel.id) ? 'View' : 'Join'}\n                    />\n                </LoadingWrapper>\n            </button>\n        );\n\n        const sharedChannelIcon = channel.shared ? (\n            <SharedChannelIndicator\n                className='shared-channel-icon'\n                channelType={channel.type}\n                withTooltip={true}\n            />\n        ) : null;\n\n        return (\n            <div\n                className='more-modal__row'\n                key={channel.id}\n                id={`ChannelRow-${channel.name}`}\n                data-testid={`ChannelRow-${channel.name}`}\n                aria-label={ariaLabel}\n                onClick={(e) => this.handleJoin(channel, e)}\n                tabIndex={0}\n            >\n                <div className='more-modal__details'>\n                    <div className='style--none more-modal__name'>\n                        {channelTypeIcon}\n                        <span id='channelName'>{channel.display_name}</span>\n                        {sharedChannelIcon}\n                    </div>\n                    {channelPurposeContainer}\n                </div>\n                <div className='more-modal__actions'>\n                    {joinViewChannelButton}\n                </div>\n            </div>\n        );\n    };\n\n    nextPage = (e: React.MouseEvent) => {\n        e.preventDefault();\n        this.setState({page: this.state.page + 1, nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT_MILLISECONDS);\n        this.props.nextPage(this.state.page + 1);\n        this.channelListScroll.current?.scrollTo({top: 0});\n    };\n\n    previousPage = (e: React.MouseEvent) => {\n        e.preventDefault();\n        this.setState({page: this.state.page - 1});\n        this.channelListScroll.current?.scrollTo({top: 0});\n    };\n\n    doSearch = () => {\n        this.props.search(this.state.channelSearchValue);\n        if (this.state.channelSearchValue === '') {\n            this.setState({page: 0});\n        }\n    };\n    handleChange = (e?: React.FormEvent<HTMLInputElement>) => {\n        if (e?.currentTarget) {\n            this.setState({channelSearchValue: e?.currentTarget.value}, () => this.doSearch());\n        }\n    };\n    handleClear = () => {\n        this.setState({channelSearchValue: ''}, () => this.doSearch());\n    };\n    handleChecked = () => {\n        // If it was checked, and now we're unchecking it, clear the preference\n        if (this.props.rememberHideJoinedChannelsChecked) {\n            this.props.hideJoinedChannelsPreference(false);\n        } else {\n            this.props.hideJoinedChannelsPreference(true);\n        }\n    };\n    getEmptyStateMessage = () => {\n        if (this.state.channelSearchValue.length > 0) {\n            return (\n                <FormattedMessage\n                    id='more_channels.noMore'\n                    tagName='strong'\n                    defaultMessage='No results for {text}'\n                    values={{text: this.state.channelSearchValue}}\n                />\n            );\n        }\n        switch (this.props.filter) {\n        case Filter.Archived:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noArchived'}\n                    tagName='strong'\n                    defaultMessage={'No archived channels'}\n                />\n            );\n        case Filter.Private:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noPrivate'}\n                    tagName='strong'\n                    defaultMessage={'No private channels'}\n                />\n            );\n        case Filter.Public:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noPublic'}\n                    tagName='strong'\n                    defaultMessage={'No public channels'}\n                />\n            );\n        default:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noChannels'}\n                    tagName='strong'\n                    defaultMessage={'No channels'}\n                />\n            );\n        }\n    };\n    getFilterLabel = () => {\n        switch (this.props.filter) {\n        case Filter.Archived:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_archived_channels'\n                    defaultMessage='Channel Type: Archived'\n                />\n            );\n        case Filter.Public:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_public_channels'\n                    defaultMessage='Channel Type: Public'\n                />\n            );\n        case Filter.Private:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_private_channels'\n                    defaultMessage='Channel Type: Private'\n                />\n            );\n        default:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_all_channels'\n                    defaultMessage='Channel Type: All'\n                />\n            );\n        }\n    };\n\n    render() {\n        const channels = this.props.channels;\n        let listContent;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.loading && channels.length === 0) {\n            listContent = <LoadingScreen/>;\n        } else if (channels.length === 0) {\n            listContent = (\n                <div\n                    className='no-channel-message'\n                    aria-label={this.state.channelSearchValue.length > 0 ? localizeAndFormatMessage(messages.noMore.id, messages.noMore.defaultMessage, {text: this.state.channelSearchValue}) : localizeMessage('widgets.channels_input.empty', 'No channels found')\n                    }\n                >\n                    <MagnifyingGlassSVG/>\n                    <h3 className='primary-message'>\n                        {this.getEmptyStateMessage()}\n                    </h3>\n                    {this.props.noResultsText}\n                </div>\n            );\n        } else {\n            const pageStart = this.state.page * this.props.channelsPerPage;\n            const pageEnd = pageStart + this.props.channelsPerPage;\n            const channelsToDisplay = this.props.channels.slice(pageStart, pageEnd);\n            listContent = channelsToDisplay.map(this.createChannelRow);\n\n            if (channelsToDisplay.length >= this.props.channelsPerPage && pageEnd < this.props.channels.length) {\n                nextButton = (\n                    <button\n                        className='btn btn-sm btn-tertiary filter-control filter-control__next'\n                        onClick={this.nextPage}\n                        disabled={this.state.nextDisabled}\n                        aria-label={localizeMessage('more_channels.next', 'Next')}\n                    >\n                        <FormattedMessage\n                            id='more_channels.next'\n                            defaultMessage='Next'\n                        />\n                    </button>\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-sm btn-tertiary filter-control filter-control__prev'\n                        onClick={this.previousPage}\n                        aria-label={localizeMessage('more_channels.prev', 'Previous')}\n                    >\n                        <FormattedMessage\n                            id='more_channels.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        const input = (\n            <div className='filter-row filter-row--full'>\n                <span\n                    id='searchIcon'\n                    aria-hidden='true'\n                >\n                    <i className='icon icon-magnify'/>\n                </span>\n                <QuickInput\n                    id='searchChannelsTextbox'\n                    ref={this.filter}\n                    className='form-control filter-textbox'\n                    placeholder={this.props.intl.formatMessage({id: 'filtered_channels_list.search', defaultMessage: 'Search channels'})}\n                    onInput={this.handleChange}\n                    clearable={true}\n                    onClear={this.handleClear}\n                    value={this.state.channelSearchValue}\n                    aria-label={localizeMessage('filtered_channels_list.search', 'Search Channels')}\n                />\n            </div>\n        );\n\n        const checkIcon = (\n            <CheckIcon\n                size={18}\n                color={'var(--button-bg)'}\n            />\n        );\n        const channelDropdownItems = [\n            <Menu.Item\n                key='channelsMoreDropdownAll'\n                id='channelsMoreDropdownAll'\n                onClick={() => this.props.changeFilter(Filter.All)}\n                leadingElement={<GlobeCheckedIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.all'\n                        defaultMessage='All channel types'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.All ? checkIcon : null}\n                aria-label={localizeMessage('suggestion.all', 'All channel types')}\n            />,\n            <Menu.Item\n                key='channelsMoreDropdownPublic'\n                id='channelsMoreDropdownPublic'\n                onClick={() => this.props.changeFilter(Filter.Public)}\n                leadingElement={<GlobeIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.public'\n                        defaultMessage='Public channels'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.Public ? checkIcon : null}\n                aria-label={localizeMessage('suggestion.public', 'Public channels')}\n            />,\n            <Menu.Item\n                key='channelsMoreDropdownPrivate'\n                id='channelsMoreDropdownPrivate'\n                onClick={() => this.props.changeFilter(Filter.Private)}\n                leadingElement={<LockOutlineIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.private'\n                        defaultMessage='Private channels'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.Private ? checkIcon : null}\n                aria-label={localizeMessage('suggestion.private', 'Private channels')}\n            />,\n        ];\n\n        if (this.props.canShowArchivedChannels) {\n            channelDropdownItems.push(\n                <Menu.Separator key='channelsMoreDropdownSeparator'/>,\n                <Menu.Item\n                    key='channelsMoreDropdownArchived'\n                    id='channelsMoreDropdownArchived'\n                    onClick={() => this.props.changeFilter(Filter.Archived)}\n                    leadingElement={<ArchiveOutlineIcon size={16}/>}\n                    labels={\n                        <FormattedMessage\n                            id='suggestion.archive'\n                            defaultMessage='Archived channels'\n                        />\n                    }\n                    trailingElements={this.props.filter === Filter.Archived ? checkIcon : null}\n                    aria-label={localizeMessage('suggestion.archive', 'Archived channels')}\n                />,\n            );\n        }\n        const menuButton = (\n            <>\n                {this.getFilterLabel()}\n                <ChevronDownIcon\n                    color={'rgba(var(--center-channel-color-rgb), 0.64)'}\n                    size={16}\n                />\n            </>\n        );\n        const channelDropdown = (\n            <Menu.Container\n                menuButton={{\n                    id: 'menuWrapper',\n                    children: menuButton,\n                }}\n                menu={{\n                    id: 'browseChannelsDropdown',\n                    'aria-label': localizeMessage('more_channels.title', 'Browse channels'),\n                }}\n            >\n                {channelDropdownItems.map((item) => item)}\n            </Menu.Container >\n        );\n\n        const hideJoinedButtonClass = classNames('get-app__checkbox', {checked: this.props.rememberHideJoinedChannelsChecked});\n        const hideJoinedPreferenceCheckbox = (\n            <div\n                id={'hideJoinedPreferenceCheckbox'}\n                onClick={this.handleChecked}\n            >\n                <button\n                    className={hideJoinedButtonClass}\n                    aria-label={this.props.rememberHideJoinedChannelsChecked ? localizeMessage('more_channels.hide_joined_checked', 'Hide joined channels checkbox, checked') : localizeMessage('more_channels.hide_joined_not_checked', 'Hide joined channels checkbox, not checked')}\n                >\n                    {this.props.rememberHideJoinedChannelsChecked ? <CheckboxCheckedIcon/> : null}\n                </button>\n                <FormattedMessage\n                    id='more_channels.hide_joined'\n                    defaultMessage='Hide Joined'\n                />\n            </div>\n        );\n\n        let channelCountLabel;\n        if (channels.length === 0) {\n            channelCountLabel = localizeMessage('more_channels.count_zero', '0 Results');\n        } else if (channels.length === 1) {\n            channelCountLabel = localizeMessage('more_channels.count_one', '1 Result');\n        } else if (channels.length > 1) {\n            channelCountLabel = localizeAndFormatMessage(messages.channelCount.id, messages.channelCount.defaultMessage, {count: channels.length});\n        } else {\n            channelCountLabel = localizeMessage('more_channels.count_zero', '0 Results');\n        }\n\n        const dropDownContainer = (\n            <div className='more-modal__dropdown'>\n                <span id='channelCountLabel'>{channelCountLabel}</span>\n                <div id='modalPreferenceContainer'>\n                    {channelDropdown}\n                    {hideJoinedPreferenceCheckbox}\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='filtered-user-list'>\n                {input}\n                {dropDownContainer}\n                <div\n                    role='search'\n                    className='more-modal__list'\n                    tabIndex={-1}\n                >\n                    <div\n                        id='moreChannelsList'\n                        tabIndex={-1}\n                        ref={this.channelListScroll}\n                    >\n                        {listContent}\n                    </div>\n                </div>\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst messages = defineMessages({\n    channelCount: {\n        id: 'more_channels.count',\n        defaultMessage: '{count} Results',\n    },\n    channelPurpose: {\n        id: 'more_channels.channel_purpose',\n        defaultMessage: 'Channel Information: Membership Indicator: Joined, Member count {memberCount} , Purpose: {channelPurpose}',\n    },\n    noMore: {\n        id: 'more_channels.noMore',\n        defaultMessage: 'No results for {text}',\n    },\n});\n\nexport default injectIntl(SearchableChannelList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Channel, ChannelMembership, ChannelSearchOpts, ChannelsWithTotalCount} from '@mattermost/types/channels';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport LoadingScreen from 'components/loading_screen';\nimport NewChannelModal from 'components/new_channel_modal/new_channel_modal';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport SearchableChannelList from 'components/searchable_channel_list';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants, {ModalIdentifiers, RHSStates, StoragePrefixes} from 'utils/constants';\nimport {getRelativeChannelURL} from 'utils/url';\nimport {localizeMessage} from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\nimport type {RhsState} from 'types/store/rhs';\n\nimport './browse_channels.scss';\n\nconst CHANNELS_CHUNK_SIZE = 50;\nconst CHANNELS_PER_PAGE = 50;\nconst SEARCH_TIMEOUT_MILLISECONDS = 100;\nexport enum Filter {\n    All = 'All',\n    Public = 'Public',\n    Private = 'Private',\n    Archived = 'Archived',\n}\n\nexport type FilterType = keyof typeof Filter;\n\ntype Actions = {\n    getChannels: (teamId: string, page: number, perPage: number) => Promise<ActionResult<Channel[]>>;\n    getArchivedChannels: (teamId: string, page: number, channelsPerPage: number) => Promise<ActionResult<Channel[]>>;\n    joinChannel: (currentUserId: string, teamId: string, channelId: string) => Promise<ActionResult>;\n    searchAllChannels: (term: string, opts?: ChannelSearchOpts) => Promise<ActionResult<Channel[] | ChannelsWithTotalCount>>;\n    openModal: <P>(modalData: ModalData<P>) => void;\n    closeModal: (modalId: string) => void;\n\n    /*\n     * Function to set a key-value pair in the local storage\n     */\n    setGlobalItem: (name: string, value: string) => void;\n    closeRightHandSide: () => void;\n    getChannelsMemberCount: (channelIds: string[]) => Promise<ActionResult>;\n}\n\nexport type Props = {\n    channels: Channel[];\n    archivedChannels: Channel[];\n    privateChannels: Channel[];\n    currentUserId: string;\n    teamId: string;\n    teamName?: string;\n    channelsRequestStarted?: boolean;\n    canShowArchivedChannels?: boolean;\n    myChannelMemberships: RelationOneToOne<Channel, ChannelMembership>;\n    shouldHideJoinedChannels: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n    channelsMemberCount?: Record<string, number>;\n    actions: Actions;\n}\n\ntype State = {\n    loading: boolean;\n    filter: FilterType;\n    search: boolean;\n    searchedChannels: Channel[];\n    serverError: React.ReactNode | string;\n    searching: boolean;\n    searchTerm: string;\n}\n\nexport default class BrowseChannels extends React.PureComponent<Props, State> {\n    public searchTimeoutId: number;\n    activeChannels: Channel[] = [];\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n            filter: Filter.All,\n            search: false,\n            searchedChannels: [],\n            serverError: null,\n            searching: false,\n            searchTerm: '',\n        };\n    }\n\n    componentDidMount() {\n        if (!this.props.teamId) {\n            this.loadComplete();\n            return;\n        }\n\n        const promises = [\n            this.props.actions.getChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2),\n        ];\n\n        if (this.props.canShowArchivedChannels) {\n            promises.push(this.props.actions.getArchivedChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2));\n        }\n\n        Promise.all(promises).then((results) => {\n            const channelIDsForMemberCount = results.flatMap((result) => {\n                return result.data ? result.data.map((channel) => channel.id) : [];\n            },\n            );\n            this.props.privateChannels.forEach((channel) => channelIDsForMemberCount.push(channel.id));\n            if (channelIDsForMemberCount.length > 0) {\n                this.props.actions.getChannelsMemberCount(channelIDsForMemberCount);\n            }\n        });\n        this.loadComplete();\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    };\n\n    handleNewChannel = () => {\n        this.handleExit();\n        this.closeEditRHS();\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.NEW_CHANNEL_MODAL,\n            dialogType: NewChannelModal,\n        });\n    };\n\n    handleExit = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MORE_CHANNELS);\n    };\n\n    closeEditRHS = () => {\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n    };\n\n    onChange = (force: boolean) => {\n        if (this.state.search && !force) {\n            return;\n        }\n\n        this.setState({\n            searchedChannels: [],\n            serverError: null,\n        });\n    };\n\n    nextPage = (page: number) => {\n        this.props.actions.getChannels(this.props.teamId, page + 1, CHANNELS_PER_PAGE).then((result) => {\n            if (result.data && result.data.length > 0) {\n                this.props.actions.getChannelsMemberCount(result.data.map((channel) => channel.id));\n            }\n        });\n    };\n\n    handleJoin = async (channel: Channel, done: () => void) => {\n        const {actions, currentUserId, teamId, teamName} = this.props;\n        let result;\n\n        if (!this.isMemberOfChannel(channel.id)) {\n            result = await actions.joinChannel(currentUserId, teamId, channel.id);\n        }\n\n        if (result?.error) {\n            this.setState({serverError: result.error.message});\n        } else {\n            this.props.actions.getChannelsMemberCount([channel.id]);\n            getHistory().push(getRelativeChannelURL(teamName!, channel.name));\n            this.closeEditRHS();\n        }\n\n        if (done) {\n            done();\n        }\n    };\n\n    search = (term: string) => {\n        clearTimeout(this.searchTimeoutId);\n\n        if (term === '') {\n            this.onChange(true);\n            this.setState({search: false, searchedChannels: [], searching: false, searchTerm: term});\n            this.searchTimeoutId = 0;\n            return;\n        }\n        this.setState({search: true, searching: true, searchTerm: term});\n\n        const searchTimeoutId = window.setTimeout(\n            async () => {\n                try {\n                    const {data} = await this.props.actions.searchAllChannels(term, {team_ids: [this.props.teamId], nonAdminSearch: true, include_deleted: true}) as ActionResult<Channel[]>;\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    if (data) {\n                        const channelIDsForMemberCount = data.map((channel: Channel) => channel.id);\n                        if (channelIDsForMemberCount.length > 0) {\n                            this.props.actions.getChannelsMemberCount(channelIDsForMemberCount);\n                        }\n                        this.setSearchResults(data.filter((channel) => channel.team_id === this.props.teamId));\n                    } else {\n                        this.setState({searchedChannels: [], searching: false});\n                    }\n                } catch (ignoredErr) {\n                    this.setState({searchedChannels: [], searching: false});\n                }\n            },\n            SEARCH_TIMEOUT_MILLISECONDS,\n        );\n\n        this.searchTimeoutId = searchTimeoutId;\n    };\n\n    setSearchResults = (channels: Channel[]) => {\n        // filter out private channels that the user is not a member of\n        let searchedChannels = channels.filter((c) => c.type !== Constants.PRIVATE_CHANNEL || this.isMemberOfChannel(c.id));\n        if (this.state.filter === Filter.Private) {\n            searchedChannels = channels.filter((c) => c.type === Constants.PRIVATE_CHANNEL && this.isMemberOfChannel(c.id));\n        }\n        if (this.state.filter === Filter.Public) {\n            searchedChannels = channels.filter((c) => c.type === Constants.OPEN_CHANNEL && c.delete_at === 0);\n        }\n        if (this.state.filter === Filter.Archived) {\n            searchedChannels = channels.filter((c) => c.delete_at !== 0);\n        }\n        if (this.props.shouldHideJoinedChannels) {\n            searchedChannels = this.getChannelsWithoutJoined(searchedChannels);\n        }\n        this.setState({searchedChannels, searching: false});\n    };\n\n    changeFilter = (filter: FilterType) => {\n        // search again when switching channels to update search results\n        this.search(this.state.searchTerm);\n        this.setState({filter});\n    };\n\n    isMemberOfChannel(channelId: string) {\n        return this.props.myChannelMemberships[channelId];\n    }\n\n    handleShowJoinedChannelsPreference = (shouldHideJoinedChannels: boolean) => {\n        // search again when switching channels to update search results\n        this.search(this.state.searchTerm);\n        this.props.actions.setGlobalItem(StoragePrefixes.HIDE_JOINED_CHANNELS, shouldHideJoinedChannels.toString());\n    };\n\n    getChannelsWithoutJoined = (channelList: Channel[]) => channelList.filter((channel) => !this.isMemberOfChannel(channel.id));\n\n    getActiveChannels = () => {\n        const {channels, archivedChannels, shouldHideJoinedChannels, privateChannels} = this.props;\n        const {search, searchedChannels, filter} = this.state;\n\n        const allChannels = channels.concat(privateChannels).sort((a, b) => a.display_name.localeCompare(b.display_name));\n        const allChannelsWithoutJoined = this.getChannelsWithoutJoined(allChannels);\n        const publicChannelsWithoutJoined = this.getChannelsWithoutJoined(channels);\n        const archivedChannelsWithoutJoined = this.getChannelsWithoutJoined(archivedChannels);\n        const privateChannelsWithoutJoined = this.getChannelsWithoutJoined(privateChannels);\n\n        const filterOptions = {\n            [Filter.All]: shouldHideJoinedChannels ? allChannelsWithoutJoined : allChannels,\n            [Filter.Archived]: shouldHideJoinedChannels ? archivedChannelsWithoutJoined : archivedChannels,\n            [Filter.Private]: shouldHideJoinedChannels ? privateChannelsWithoutJoined : privateChannels,\n            [Filter.Public]: shouldHideJoinedChannels ? publicChannelsWithoutJoined : channels,\n        };\n\n        if (search) {\n            return searchedChannels;\n        }\n\n        return filterOptions[filter] || filterOptions[Filter.All];\n    };\n\n    render() {\n        const {teamId, channelsRequestStarted, shouldHideJoinedChannels} = this.props;\n        const {search, serverError: serverErrorState, searching} = this.state;\n\n        this.activeChannels = this.getActiveChannels();\n\n        let serverError;\n        if (serverErrorState) {\n            serverError =\n                <div className='form-group has-error'><label className='control-label'>{serverErrorState}</label></div>;\n        }\n\n        const createNewChannelButton = (className: string, icon?: JSX.Element) => {\n            const buttonClassName = classNames('btn', className);\n            return (\n                <TeamPermissionGate\n                    teamId={teamId}\n                    permissions={[Permissions.CREATE_PUBLIC_CHANNEL]}\n                >\n                    <button\n                        type='button'\n                        id='createNewChannelButton'\n                        className={buttonClassName}\n                        onClick={this.handleNewChannel}\n                        aria-label={localizeMessage('more_channels.create', 'Create New Channel')}\n                    >\n                        {icon}\n                        <FormattedMessage\n                            id='more_channels.create'\n                            defaultMessage='Create New Channel'\n                        />\n                    </button>\n                </TeamPermissionGate>\n            );\n        };\n\n        const noResultsText = (\n            <>\n                <p className='secondary-message'>\n                    <FormattedMessage\n                        id='more_channels.searchError'\n                        defaultMessage='Try searching different keywords, checking for typos or adjusting the filters.'\n                    />\n                </p>\n                {createNewChannelButton('btn-primary', <i className='icon-plus'/>)}\n            </>\n        );\n\n        const body = this.state.loading ? <LoadingScreen/> : (\n            <React.Fragment>\n                <SearchableChannelList\n                    channels={this.activeChannels}\n                    channelsPerPage={CHANNELS_PER_PAGE}\n                    nextPage={this.nextPage}\n                    isSearch={search}\n                    search={this.search}\n                    handleJoin={this.handleJoin}\n                    noResultsText={noResultsText}\n                    loading={search ? searching : channelsRequestStarted}\n                    changeFilter={this.changeFilter}\n                    filter={this.state.filter}\n                    canShowArchivedChannels={this.props.canShowArchivedChannels}\n                    myChannelMemberships={this.props.myChannelMemberships}\n                    closeModal={this.props.actions.closeModal}\n                    hideJoinedChannelsPreference={this.handleShowJoinedChannelsPreference}\n                    rememberHideJoinedChannelsChecked={shouldHideJoinedChannels}\n                    channelsMemberCount={this.props.channelsMemberCount}\n                />\n                {serverError}\n            </React.Fragment>\n        );\n\n        const title = (\n            <FormattedMessage\n                id='more_channels.title'\n                defaultMessage='Browse Channels'\n            />\n        );\n\n        return (\n            <GenericModal\n                onExited={this.handleExit}\n                id='browseChannelsModal'\n                aria-labelledby='browseChannelsModalLabel'\n                compassDesign={true}\n                modalHeaderText={title}\n                headerButton={createNewChannelButton('btn-secondary btn-sm')}\n                autoCloseOnConfirmButton={false}\n                aria-modal={true}\n                enforceFocus={false}\n                bodyPadding={false}\n            >\n                {body}\n            </GenericModal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getChannels, getArchivedChannels, joinChannel, getChannelsMemberCount, searchAllChannels} from 'mattermost-redux/actions/channels';\nimport {RequestStatus} from 'mattermost-redux/constants';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getChannelsInCurrentTeam, getMyChannelMemberships, getChannelsMemberCount as getChannelsMemberCountSelector} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {openModal, closeModal} from 'actions/views/modals';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {makeGetGlobalItem} from 'selectors/storage';\n\nimport Constants, {StoragePrefixes} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport BrowseChannels from './browse_channels';\n\nconst getChannelsWithoutArchived = createSelector(\n    'getChannelsWithoutArchived',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.delete_at === 0 && c.type !== Constants.PRIVATE_CHANNEL),\n);\n\nconst getArchivedOtherChannels = createSelector(\n    'getArchivedOtherChannels',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.delete_at !== 0),\n);\n\nconst getPrivateChannelsSelector = createSelector(\n    'getPrivateChannelsSelector',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.type === Constants.PRIVATE_CHANNEL),\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    const team = getCurrentTeam(state);\n    const getGlobalItem = makeGetGlobalItem(StoragePrefixes.HIDE_JOINED_CHANNELS, 'false');\n\n    return {\n        channels: getChannelsWithoutArchived(state) || [],\n        archivedChannels: getArchivedOtherChannels(state) || [],\n        privateChannels: getPrivateChannelsSelector(state) || [],\n        currentUserId: getCurrentUserId(state),\n        teamId: getCurrentTeamId(state),\n        teamName: team?.name,\n        channelsRequestStarted: state.requests.channels.getChannels.status === RequestStatus.STARTED,\n        canShowArchivedChannels: (getConfig(state).ExperimentalViewArchivedChannels === 'true'),\n        myChannelMemberships: getMyChannelMemberships(state) || {},\n        shouldHideJoinedChannels: getGlobalItem(state) === 'true',\n        rhsState: getRhsState(state),\n        rhsOpen: getIsRhsOpen(state),\n        channelsMemberCount: getChannelsMemberCountSelector(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getChannels,\n            getArchivedChannels,\n            joinChannel,\n            searchAllChannels,\n            openModal,\n            closeModal,\n            setGlobalItem,\n            closeRightHandSide,\n            getChannelsMemberCount,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowseChannels);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nconst CheckboxCheckedIcon = () => (\n    <svg\n        width='18px'\n        height='18px'\n        viewBox='0 0 18 18'\n    >\n        <g\n            id='Developer-Export'\n            stroke='none'\n            strokeWidth='1'\n            fillRule='evenodd'\n        >\n            <g\n                transform='translate(-285.000000, -933.000000)'\n                id='All-Team-Members'\n            >\n                <g transform='translate(245.000000, 698.000000)'>\n                    <g\n                        id='Channel-Administrators'\n                        transform='translate(0.000000, 106.000000)'\n                    >\n                        <g\n                            id='data-table/column-1'\n                            transform='translate(11.000000, 86.000000)'\n                        >\n                            <g\n                                id='row-checkbox---Public-Channels'\n                                transform='translate(12.000000, 35.000000)'\n                            >\n                                <g\n                                    id='Stacked-Group'\n                                    transform='translate(0.000000, 5.000000)'\n                                >\n                                    <g id='data-table/1st/row-checkbox-label-base'>\n                                        <g\n                                            id='check-on-copy-11'\n                                            transform='translate(14.000000, 0.000000)'\n                                        >\n                                            <path\n                                                d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                id='checkbox---checked'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </svg>\n);\n\nexport default memo(CheckboxCheckedIcon);\n"],"names":["props","React","Object","assign","width","height","fill","xmlns","opacity","d","fillOpacity","SearchableChannelList","getDerivedStateFromProps","state","isSearch","page","constructor","super","_defineProperty","e","target","isEnterKeyPressed","isKeyPressed","Constants","shiftKey","ctrlKey","altKey","classList","contains","click","channel","stopPropagation","this","setState","joiningChannel","id","handleJoin","isMemberOfChannel","closeModal","ModalIdentifiers","_this$props$channelsM","ariaLabel","concat","display_name","purpose","toLowerCase","channelTypeIcon","isArchivedChannel","ArchiveOutlineIcon","size","isPrivateChannel","LockOutlineIcon","GlobeIcon","memberCount","channelsMemberCount","membershipIndicator","localizeMessage","CheckIcon","FormattedMessage","defaultMessage","channelPurposeContainerAriaLabel","localizeAndFormatMessage","messages","channelPurpose","channelPurposeContainer","className","AccountOutlineIcon","name","length","joinViewChannelButtonClass","classNames","joinViewChannelButton","onClick","disabled","Boolean","tabIndex","LoadingWrapper","loading","text","sharedChannelIcon","shared","SharedChannelIndicator","channelType","type","withTooltip","key","_this$channelListScro","preventDefault","nextDisabled","nextTimeoutId","setTimeout","nextPage","channelListScroll","current","scrollTo","top","_this$channelListScro2","search","channelSearchValue","currentTarget","value","doSearch","rememberHideJoinedChannelsChecked","hideJoinedChannelsPreference","tagName","values","filter","Filter","Archived","Private","Public","componentDidMount","UserAgent","focus","document","addEventListener","onKeyDown","componentWillUnmount","removeEventListener","channelId","myChannelMemberships","render","channels","listContent","nextButton","previousButton","LoadingScreen","noMore","MagnifyingGlassSVG","getEmptyStateMessage","noResultsText","pageStart","channelsPerPage","pageEnd","channelsToDisplay","slice","map","createChannelRow","previousPage","input","QuickInput","ref","placeholder","intl","formatMessage","onInput","handleChange","clearable","onClear","handleClear","checkIcon","color","channelDropdownItems","Menu","changeFilter","All","leadingElement","GlobeCheckedIcon","labels","trailingElements","canShowArchivedChannels","push","menuButton","getFilterLabel","ChevronDownIcon","channelDropdown","children","menu","item","hideJoinedButtonClass","checked","hideJoinedPreferenceCheckbox","handleChecked","CheckboxCheckedIcon","channelCountLabel","channelCount","count","dropDownContainer","role","_pt","defineMessages","injectIntl","BrowseChannels","handleExit","closeEditRHS","actions","openModal","modalId","dialogType","NewChannelModal","rhsOpen","rhsState","RHSStates","closeRightHandSide","force","searchedChannels","serverError","getChannels","teamId","then","result","data","getChannelsMemberCount","async","done","_result","currentUserId","teamName","joinChannel","error","message","getHistory","getRelativeChannelURL","term","clearTimeout","searchTimeoutId","onChange","searching","searchTerm","window","searchAllChannels","team_ids","nonAdminSearch","include_deleted","channelIDsForMemberCount","setSearchResults","team_id","ignoredErr","c","delete_at","shouldHideJoinedChannels","getChannelsWithoutJoined","setGlobalItem","StoragePrefixes","toString","channelList","archivedChannels","privateChannels","allChannels","sort","a","b","localeCompare","allChannelsWithoutJoined","publicChannelsWithoutJoined","archivedChannelsWithoutJoined","privateChannelsWithoutJoined","filterOptions","loadComplete","promises","CHANNELS_CHUNK_SIZE","getArchivedChannels","Promise","all","results","flatMap","forEach","channelsRequestStarted","serverErrorState","activeChannels","getActiveChannels","createNewChannelButton","icon","buttonClassName","TeamPermissionGate","permissions","Permissions","handleNewChannel","body","handleShowJoinedChannelsPreference","title","GenericModal","onExited","compassDesign","modalHeaderText","headerButton","autoCloseOnConfirmButton","enforceFocus","bodyPadding","isRequired","getChannelsWithoutArchived","createSelector","getChannelsInCurrentTeam","getArchivedOtherChannels","getPrivateChannelsSelector","connect","team","getCurrentTeam","getGlobalItem","makeGetGlobalItem","getCurrentUserId","getCurrentTeamId","requests","status","RequestStatus","getConfig","ExperimentalViewArchivedChannels","getMyChannelMemberships","getRhsState","getIsRhsOpen","getChannelsMemberCountSelector","dispatch","bindActionCreators","viewBox","stroke","strokeWidth","fillRule","transform","memo"],"sourceRoot":""}