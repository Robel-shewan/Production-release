{"version":3,"file":"4557.0e7fa704a3d33c07c4f8.js","mappings":"gVAoBA,MAAMA,EAAoBC,IAA0C,IAAzC,SAACC,EAAQ,SAAEC,EAAQ,QAAEC,GAAeH,EAC3D,MAAMI,GAAOC,EAAAA,EAAAA,WAEPC,GAAUC,EAAAA,EAAAA,eAETC,EAAOC,IAAYC,EAAAA,EAAAA,UAA0B,MAE9CC,GAAgBC,EAAAA,EAAAA,QAAyB,MAoBzCC,EAAeL,EACjBM,IAAAA,cAAA,OAAKC,UAAU,wBACXD,IAAAA,cAAA,SAAOC,UAAU,iBACZP,IAGT,KAEJ,OACIM,IAAAA,cAAA,OAAKC,UAAU,aACXD,IAAAA,cAAA,OAAKC,UAAU,0BACXD,IAAAA,cAACE,EAAAA,iBAAgB,CACbC,GAAG,sBACHC,QAAQ,KACRC,eAAe,mBAEnBL,IAAAA,cAAA,QAAMM,SAlCUC,UACxBC,EAAEC,iBAEF,MAAMC,EAAWb,EAAcc,QAASC,MAClCC,EAAS,IAAIC,gBAAgB3B,EAAS4B,QAASC,IAAI,SAEzD,GAAqB,iBAAVH,EACP,MAAM,IAAII,MAAM,0BAEpB,MAAM,KAACC,EAAI,MAAExB,SAAeL,EAAQ8B,kBAAkBN,EAAOH,GACzDQ,GACA1B,EAAQ4B,KAAK,gBAAkBC,EAAAA,QAAAA,iBAC/B1B,EAAS,OACFD,GACPC,EAASD,EAAM4B,QACnB,GAoBYtB,IAAAA,cAAA,SACIA,IAAAA,cAACE,EAAAA,iBAAgB,CACbC,GAAG,sBACHE,eAAe,oDACfkB,OAAQ,CAACnC,eAGjBY,IAAAA,cAAA,OAAKC,UAAWuB,IAAW,aAAc,CAAC,YAAa9B,KACnDM,IAAAA,cAAA,SACIG,GAAG,qBACHsB,KAAK,WACLxB,UAAU,eACVyB,KAAK,WACLC,IAAK9B,EACL+B,YAAatC,EAAKuC,cAAc,CAC5B1B,GAAI,oBACJE,eAAgB,aAEpByB,WAAW,QACXC,WAAW,KAGlBhC,EACDC,IAAAA,cAAA,UACIG,GAAG,sBACHsB,KAAK,SACLxB,UAAU,mBAEVD,IAAAA,cAACE,EAAAA,iBAAgB,CACbC,GAAG,uBACHE,eAAe,0BAK7B,EAEZpB,EAAA+C,UAAA,CAxFE7C,SAAQ8C,IAAAA,MAAA,CAAGlB,OAAMkB,IAAAA,OAAAA,aAAAC,WACjB7C,QAAO4C,IAAAA,MAAA,CACHd,kBAAiBc,IAAAA,KAAAA,aAAAC,WAErB9C,SAAQ6C,IAAAA,QAsFZ,SAAeE,EAAAA,EAAAA,MAAKlD,GC/EpB,GAAemD,EAAAA,EAAAA,UAVf,SAAyBC,GACrB,MAAO,CAACjD,UAAUkD,EAAAA,EAAAA,IAAUD,GAAOE,SACvC,IAE4BC,IAAkB,CAC1CnD,SAASoD,EAAAA,EAAAA,oBAAmB,CACxBtB,kBAAiBA,EAAAA,IAClBqB,MAGP,CAA4DvD,E","sources":["webpack://mattermost-webapp/./src/components/password_reset_form/password_reset_form.tsx","webpack://mattermost-webapp/./src/components/password_reset_form/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useState, useRef, memo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport Constants from 'utils/constants';\n\nexport interface Props {\n    location: {search: string};\n    actions: {\n        resetUserPassword: (token: string, newPassword: string) => Promise<ActionResult>;\n    };\n    siteName?: string;\n}\n\nconst PasswordResetForm = ({location, siteName, actions}: Props) => {\n    const intl = useIntl();\n\n    const history = useHistory();\n\n    const [error, setError] = useState<React.ReactNode>(null);\n\n    const passwordInput = useRef<HTMLInputElement>(null);\n\n    const handlePasswordReset = async (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const password = passwordInput.current!.value;\n        const token = (new URLSearchParams(location.search)).get('token');\n\n        if (typeof token !== 'string') {\n            throw new Error('token must be a string');\n        }\n        const {data, error} = await actions.resetUserPassword(token, password);\n        if (data) {\n            history.push('/login?extra=' + Constants.PASSWORD_CHANGE);\n            setError(null);\n        } else if (error) {\n            setError(error.message);\n        }\n    };\n\n    const errorElement = error ? (\n        <div className='form-group has-error'>\n            <label className='control-label'>\n                {error}\n            </label>\n        </div>\n    ) : null;\n\n    return (\n        <div className='col-sm-12'>\n            <div className='signup-team__container'>\n                <FormattedMessage\n                    id='password_form.title'\n                    tagName='h1'\n                    defaultMessage='Password Reset'\n                />\n                <form onSubmit={handlePasswordReset}>\n                    <p>\n                        <FormattedMessage\n                            id='password_form.enter'\n                            defaultMessage='Enter a new password for your {siteName} account.'\n                            values={{siteName}}\n                        />\n                    </p>\n                    <div className={classNames('form-group', {'has-error': error})}>\n                        <input\n                            id='resetPasswordInput'\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={passwordInput}\n                            placeholder={intl.formatMessage({\n                                id: 'password_form.pwd',\n                                defaultMessage: 'Password',\n                            })}\n                            spellCheck='false'\n                            autoFocus={true}\n                        />\n                    </div>\n                    {errorElement}\n                    <button\n                        id='resetPasswordButton'\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='password_form.change'\n                            defaultMessage='Change my password'\n                        />\n                    </button>\n                </form>\n            </div>\n        </div>\n    );\n};\n\nexport default memo(PasswordResetForm);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {resetUserPassword} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport PasswordResetForm from './password_reset_form';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {siteName: getConfig(state).SiteName};\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        resetUserPassword,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetForm);\n"],"names":["PasswordResetForm","_ref","location","siteName","actions","intl","useIntl","history","useHistory","error","setError","useState","passwordInput","useRef","errorElement","React","className","FormattedMessage","id","tagName","defaultMessage","onSubmit","async","e","preventDefault","password","current","value","token","URLSearchParams","search","get","Error","data","resetUserPassword","push","Constants","message","values","classNames","type","name","ref","placeholder","formatMessage","spellCheck","autoFocus","propTypes","_pt","isRequired","memo","connect","state","getConfig","SiteName","dispatch","bindActionCreators"],"sourceRoot":""}