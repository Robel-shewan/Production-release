{"version":3,"file":"1644.6fb20af66c7c9cefe011.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/channel_bookmarks/bookmark_delete_modal.tsx","webpack://mattermost-webapp/./src/components/channel_bookmarks/bookmark_icon.tsx","webpack://mattermost-webapp/./src/components/channel_bookmarks/create_modal_name_input.tsx","webpack://mattermost-webapp/./src/components/channel_bookmarks/channel_bookmarks_create_modal.tsx","webpack://mattermost-webapp/./src/components/channel_bookmarks/bookmark_dot_menu.tsx","webpack://mattermost-webapp/./src/components/channel_bookmarks/bookmark_item.tsx","webpack://mattermost-webapp/./src/components/channel_bookmarks/channel_bookmarks_plus_menu.tsx","webpack://mattermost-webapp/./src/components/channel_bookmarks/channel_bookmarks.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\ntype Props = {\n    displayName: string;\n    onConfirm: () => void;\n    onCancel?: () => void;\n    onExited: () => void;\n}\n\nconst noop = () => {};\n\nfunction BookmarkDeleteModal({\n    displayName,\n    onExited,\n    onCancel,\n    onConfirm,\n}: Props) {\n    const {formatMessage} = useIntl();\n\n    const title = formatMessage({\n        id: 'channel_bookmarks.confirm.delete.title',\n        defaultMessage: 'Delete bookmark',\n    });\n\n    const confirmButtonText = formatMessage({\n        id: 'channel_bookmarks.confirm.delete.button',\n        defaultMessage: 'Yes, delete',\n    });\n\n    const message = (\n        <FormattedMessage\n            id={'channel_bookmarks.confirm.delete.text'}\n            defaultMessage={'Are you sure you want to delete the bookmark <strong>{displayName}</strong>?'}\n            values={{\n                strong: (chunk: string) => <strong>{chunk}</strong>,\n                displayName,\n            }}\n        />\n    );\n\n    return (\n        <GenericModal\n            confirmButtonText={confirmButtonText}\n            handleCancel={onCancel ?? noop}\n            handleConfirm={onConfirm}\n            modalHeaderText={title}\n            onExited={onExited}\n            compassDesign={true}\n            isDeleteModal={true}\n        >\n            {message}\n        </GenericModal>\n    );\n}\n\nexport default BookmarkDeleteModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useSelector} from 'react-redux';\nimport styled from 'styled-components';\n\nimport {FileGenericOutlineIcon, BookOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {ChannelBookmark} from '@mattermost/types/channel_bookmarks';\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport RenderEmoji from 'components/emoji/render_emoji';\nimport FileThumbnail from 'components/file_attachment/file_thumbnail';\nimport type {FilePreviewInfo} from 'components/file_preview/file_preview';\n\nimport {trimmedEmojiName} from 'utils/emoji_utils';\nimport {getImageSrc} from 'utils/post_utils';\n\nimport type {GlobalState} from 'types/store';\n\ntype Props = {\n    type: ChannelBookmark['type'];\n    emoji?: string;\n    imageUrl?: string;\n    fileInfo?: FileInfo | FilePreviewInfo;\n    size?: 16 | 24;\n}\n\nconst BookmarkIcon = ({\n    type,\n    emoji,\n    imageUrl,\n    fileInfo,\n    size = 16,\n}: Props) => {\n    let icon = type === 'link' ? <BookOutlineIcon size={size}/> : <FileGenericOutlineIcon size={size}/>;\n    const emojiName = emoji && trimmedEmojiName(emoji);\n    const hasImageProxy = useSelector((state: GlobalState) => getConfig(state).HasImageProxy === 'true');\n\n    if (emojiName) {\n        icon = (\n            <RenderEmoji\n                emojiName={emojiName}\n                size={size}\n            />\n        );\n    } else if (imageUrl) {\n        icon = (\n            <BookmarkIconImg\n                src={getImageSrc(imageUrl, hasImageProxy)}\n                size={size}\n            />\n        );\n    } else if (fileInfo) {\n        icon = (\n            <FileThumbnail\n                fileInfo={fileInfo}\n                disablePreview={true}\n            />\n        );\n    }\n\n    return (\n        <Icon $size={size}>\n            {icon}\n        </Icon>\n    );\n};\n\nexport default BookmarkIcon;\n\nconst Icon = styled.div<{$size: number}>`\n    padding: 3px 1px 3px 2px;\n    flex-shrink: 0;\n    display: flex;\n    align-items: center;\n\n    .file-icon {\n        width: ${({$size: size}) => size}px;\n        height: ${({$size: size}) => size}px;\n        background-size: ${({$size: size}) => size * 0.8}px ${({$size: size}) => size}px;\n        margin-top: 1px;\n    }\n\n`;\n\nconst BookmarkIconImg = styled.img<{size: number}>`\n    width: ${({size}) => size}px;\n    height: ${({size}) => size}px;\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ComponentProps} from 'react';\nimport React, {useCallback, useRef} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport {ChevronDownIcon} from '@mattermost/compass-icons/components';\nimport type {ChannelBookmark} from '@mattermost/types/channel_bookmarks';\nimport type {Emoji} from '@mattermost/types/emojis';\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport EmojiPickerOverlay from 'components/emoji_picker/emoji_picker_overlay';\nimport Input from 'components/widgets/inputs/input/input';\n\nimport Constants, {A11yCustomEventTypes, type A11yFocusEventDetail} from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nimport BookmarkIcon from './bookmark_icon';\n\ntype Props = {\n    type: ChannelBookmark['type'];\n    fileInfo: FileInfo | undefined;\n    imageUrl: string | undefined;\n    emoji: string | undefined;\n    setEmoji: React.Dispatch<React.SetStateAction<string>>;\n    placeholder: string | undefined;\n    displayName: string | undefined;\n    setDisplayName: React.Dispatch<React.SetStateAction<string | undefined>>;\n    showEmojiPicker: boolean;\n    setShowEmojiPicker: React.Dispatch<React.SetStateAction<boolean>>;\n    onAddCustomEmojiClick?: () => void;\n}\nconst CreateModalNameInput = ({\n    type,\n    imageUrl,\n    fileInfo,\n    emoji,\n    setEmoji,\n    placeholder,\n    displayName,\n    setDisplayName,\n    showEmojiPicker,\n    setShowEmojiPicker,\n    onAddCustomEmojiClick,\n}: Props) => {\n    const {formatMessage} = useIntl();\n\n    const targetRef = useRef<HTMLButtonElement>(null);\n    const getTargetRef = () => targetRef.current;\n\n    const icon = (\n        <BookmarkIcon\n            type={type}\n            size={24}\n            emoji={emoji}\n            fileInfo={fileInfo}\n            imageUrl={imageUrl}\n        />\n    );\n\n    const refocusEmojiButton = () => {\n        if (!targetRef.current) {\n            return;\n        }\n\n        document.dispatchEvent(new CustomEvent<A11yFocusEventDetail>(\n            A11yCustomEventTypes.FOCUS, {\n                detail: {\n                    target: targetRef.current,\n                    keyboardOnly: true,\n                },\n            },\n        ));\n    };\n\n    const toggleEmojiPicker = () => setShowEmojiPicker((prev) => !prev);\n\n    const handleEmojiClick = (selectedEmoji: Emoji) => {\n        setShowEmojiPicker(false);\n        const emojiName = ('short_name' in selectedEmoji) ? selectedEmoji.short_name : selectedEmoji.name;\n        setEmoji(`:${emojiName}:`);\n        refocusEmojiButton();\n    };\n\n    const handleEmojiClear = () => {\n        setEmoji('');\n    };\n\n    const handleEmojiClose = () => {\n        setShowEmojiPicker(false);\n        refocusEmojiButton();\n    };\n\n    const handleInputChange: ComponentProps<typeof Input>['onChange'] = useCallback((e) => {\n        setDisplayName(e.currentTarget.value);\n    }, []);\n\n    const handleEmojiKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            e.stopPropagation();\n        }\n    };\n\n    const handleEmojiResetKeyDown = (e: React.KeyboardEvent<HTMLAnchorElement>) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER) || isKeyPressed(e, Constants.KeyCodes.SPACE)) {\n            e.stopPropagation();\n            handleEmojiClear();\n        }\n    };\n\n    return (\n        <>\n            <NameWrapper>\n                {showEmojiPicker && (\n                    <EmojiPickerOverlay\n                        target={getTargetRef}\n                        show={showEmojiPicker}\n                        onHide={handleEmojiClose}\n                        onEmojiClick={handleEmojiClick}\n                        placement='right'\n                        onAddCustomEmojiClick={onAddCustomEmojiClick}\n                    />\n\n                )}\n                <button\n                    ref={targetRef}\n                    type='button'\n                    onClick={toggleEmojiPicker}\n                    onKeyDown={handleEmojiKeyDown}\n                    aria-label={formatMessage({id: 'emoji_picker.emojiPicker.button.ariaLabel', defaultMessage: 'select an emoji'})}\n                    aria-expanded={showEmojiPicker ? 'true' : 'false'}\n\n                    className='channelBookmarksMenuButton emoji-picker__container BookmarkCreateModal__emoji-button'\n                >\n                    {icon}\n                    <ChevronDownIcon size={'12px'}/>\n                </button>\n                <Input\n                    type='text'\n                    name='bookmark-display-name'\n                    onChange={handleInputChange}\n                    value={displayName ?? placeholder ?? ''}\n                    placeholder={placeholder}\n                    data-testid='titleInput'\n                    useLegend={false}\n                />\n                <Clear\n                    visible={Boolean(emoji)}\n                    tabIndex={0}\n                    onClick={handleEmojiClear}\n                    onKeyDown={handleEmojiResetKeyDown}\n                >\n                    <FormattedMessage\n                        id='channel_bookmarks.create.title_input.clear_emoji'\n                        defaultMessage='Remove emoji'\n                    />\n                </Clear>\n            </NameWrapper>\n        </>\n    );\n};\n\nconst Clear = styled.a<{visible: boolean}>`\n    font-size: 12px;\n    visibility: ${({visible}) => (visible ? 'visible' : 'hidden')};\n`;\n\nconst NameWrapper = styled.div`\n    position: relative;\n\n    > button {\n        position: absolute;\n        left: 1px;\n        top: 1px;\n        z-index: 5;\n        width: 57px;\n        height: 44px;\n        border-radius: 4px 0 0 4px;\n        border-right: 1px solid rgba(var(--center-channel-color-rgb), 0.16);\n\n        align-items: center;\n        justify-content: center;\n        gap: 0;\n        padding-left: 6px;\n        padding-right: 2px;\n\n        svg {\n            flex-shrink: 0;\n        }\n    }\n\n    .Input_container {\n\n    }\n\n    .Input_wrapper {\n        padding-left: 7rem;\n    }\n`;\n\nexport default CreateModalNameInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChangeEvent, ClipboardEventHandler, FocusEventHandler, MouseEvent} from 'react';\nimport React, {useCallback, useEffect, useRef, useState} from 'react';\nimport {FormattedMessage, defineMessages, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\nimport styled from 'styled-components';\n\nimport {PencilOutlineIcon} from '@mattermost/compass-icons/components';\nimport {GenericModal} from '@mattermost/components';\nimport type {ChannelBookmark, ChannelBookmarkCreate, ChannelBookmarkPatch} from '@mattermost/types/channel_bookmarks';\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {debounce} from 'mattermost-redux/actions/helpers';\nimport {getFile} from 'mattermost-redux/selectors/entities/files';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport type {UploadFile} from 'actions/file_actions';\nimport {uploadFile} from 'actions/file_actions';\n\nimport FileAttachment from 'components/file_attachment';\nimport type {FilePreviewInfo} from 'components/file_preview/file_preview';\nimport FileProgressPreview from 'components/file_preview/file_progress_preview';\nimport Input from 'components/widgets/inputs/input/input';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {isValidUrl, parseLink} from 'utils/url';\nimport {generateId} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport './bookmark_create_modal.scss';\n\nimport CreateModalNameInput from './create_modal_name_input';\nimport {useCanUploadFiles} from './utils';\n\ntype Props = {\n    channelId: string;\n    bookmarkType?: ChannelBookmark['type'];\n    file?: File;\n    onExited: () => void;\n    onHide: () => void;\n} & ({\n    bookmark: ChannelBookmark;\n    onConfirm: (data: ChannelBookmarkPatch) => Promise<ActionResult<boolean, any>> | ActionResult<boolean, any>;\n} | {\n    bookmark?: never;\n    onConfirm: (data: ChannelBookmarkCreate) => Promise<ActionResult<boolean, any>> | ActionResult<boolean, any>;\n});\n\nfunction validHttpUrl(input: string) {\n    const val = parseLink(input);\n\n    if (!val || !isValidUrl(val)) {\n        return null;\n    }\n\n    let url;\n    try {\n        url = new URL(val);\n    } catch {\n        return null;\n    }\n\n    return url;\n}\n\nfunction ChannelBookmarkCreateModal({\n    bookmark,\n    bookmarkType,\n    file: promptedFile,\n    channelId,\n    onExited,\n    onConfirm,\n    onHide,\n}: Props) {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n\n    // common\n    const type = bookmark?.type ?? bookmarkType ?? 'link';\n    const [showEmojiPicker, setShowEmojiPicker] = useState(false);\n    const [emoji, setEmoji] = useState(bookmark?.emoji ?? '');\n    const [displayName, setDisplayName] = useState<string | undefined>(bookmark?.display_name);\n    const [parsedDisplayName, setParsedDisplayName] = useState<string | undefined>();\n    const [saving, setSaving] = useState(false);\n    const [saveError, setSaveError] = useState('');\n\n    const handleKeyDown = useCallback((event: KeyboardEvent) => {\n        if (isKeyPressed(event, Constants.KeyCodes.ESCAPE) && !showEmojiPicker) {\n            onHide();\n        }\n    }, [showEmojiPicker, onHide]);\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [handleKeyDown]);\n\n    // type === 'link'\n    const [linkInputValue, setLinkInputValue] = useState(bookmark?.link_url ?? '');\n    const [link, setLinkImmediately] = useState(linkInputValue);\n    const [linkError, setLinkError] = useState('');\n    const [icon, setIcon] = useState(bookmark?.image_url);\n\n    const handleLinkChange = useCallback(({target: {value}}: ChangeEvent<HTMLInputElement>) => {\n        setLinkInputValue(value);\n        setLink(value);\n    }, []);\n\n    const setLink = debounce((val: string) => {\n        setLinkImmediately(val);\n    }, 250);\n\n    const handleLinkBlur: FocusEventHandler<HTMLInputElement> = useCallback(({target: {value}}) => {\n        setLinkImmediately(value);\n    }, []);\n\n    const handleLinkPasted: ClipboardEventHandler<HTMLInputElement> = useCallback(({clipboardData}) => {\n        setLinkImmediately(clipboardData.getData('text/plain'));\n    }, []);\n\n    const resetParsed = () => {\n        setParsedDisplayName(link || '');\n        setIcon('');\n    };\n\n    useEffect(() => {\n        if (link === bookmark?.link_url || !link) {\n            return;\n        }\n\n        const url = validHttpUrl(link);\n\n        (async () => {\n            resetParsed();\n\n            if (!url) {\n                setLinkError('Please enter a valid link. Could not parse: ' + link);\n                return;\n            }\n            setLinkError('');\n            setParsedDisplayName(link);\n        })();\n    }, [link, bookmark?.link_url, channelId]);\n\n    // type === 'file'\n    const canUploadFiles = useCanUploadFiles();\n    const [pendingFile, setPendingFile] = useState<FilePreviewInfo | null>();\n    const [fileError, setFileError] = useState('');\n    const [fileId, setFileId] = useState(bookmark?.file_id);\n    const uploadRequestRef = useRef<XMLHttpRequest>();\n    const fileInfo: FileInfo | undefined = useSelector((state: GlobalState) => (fileId && getFile(state, fileId)) || undefined);\n\n    const maxFileSize = useSelector((state: GlobalState) => {\n        const config = getConfig(state);\n        return parseInt(config.MaxFileSize || '', 10);\n    });\n    const maxFileSizeMB = maxFileSize / 1048576;\n\n    const handleEditFileClick = (e: MouseEvent<HTMLDivElement>) => {\n        const innerClick = document.querySelector(`\n            .channel-bookmarks-create-modal .post-image__download a,\n            .channel-bookmarks-create-modal a.file-preview__remove\n        `);\n        if (\n            innerClick === e.target ||\n            innerClick?.contains(e.target as HTMLElement)\n        ) {\n            return;\n        }\n\n        fileInputRef.current?.click();\n    };\n\n    const handleFileChanged = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        const file = e.target.files?.[0];\n        if (!file) {\n            return;\n        }\n\n        doUploadFile(file);\n    }, []);\n\n    const handleFileRemove = () => {\n        setPendingFile(null);\n        setFileId(bookmark?.file_id);\n        setParsedDisplayName(undefined);\n        uploadRequestRef.current?.abort();\n    };\n\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const fileInput = (\n        <input\n            type='file'\n            id='bookmark-create-file-input-in-modal'\n            className='bookmark-create-file-input'\n            ref={fileInputRef}\n            onChange={handleFileChanged}\n        />\n    );\n\n    const onProgress: UploadFile['onProgress'] = (preview) => {\n        setPendingFile(preview);\n    };\n    const onSuccess: UploadFile['onSuccess'] = ({file_infos: fileInfos}) => {\n        setPendingFile(null);\n        const newFile: FileInfo = fileInfos?.[0];\n        if (newFile) {\n            setFileId(newFile.id);\n        }\n        setFileError('');\n    };\n    const onError: UploadFile['onError'] = () => {\n        setPendingFile(null);\n        setFileError(formatMessage({id: 'file_upload.generic_error_file', defaultMessage: 'There was a problem uploading your file.'}));\n    };\n\n    const displayNameValue = displayName || parsedDisplayName || (type === 'file' ? fileInfo?.name : bookmark?.link_url) || '';\n\n    const doUploadFile = (file: File) => {\n        setPendingFile(null);\n        setFileId('');\n\n        if (file.size > maxFileSize) {\n            setFileError(formatMessage({\n                id: 'file_upload.fileAbove',\n                defaultMessage: 'File above {max}MB could not be uploaded: {filename}',\n            }, {max: maxFileSizeMB, filename: file.name}));\n\n            return;\n        }\n\n        if (file.size === 0) {\n            setFileError(formatMessage({\n                id: 'file_upload.zeroBytesFile',\n                defaultMessage: 'You are uploading an empty file: {filename}',\n            }, {filename: file.name}));\n\n            return;\n        }\n\n        setFileError('');\n        if (displayNameValue === fileInfo?.name) {\n            setDisplayName(file.name);\n        }\n        setParsedDisplayName(file.name);\n\n        const clientId = generateId();\n\n        uploadRequestRef.current = dispatch(uploadFile({\n            file,\n            name: file.name,\n            type: file.type,\n            rootId: '',\n            channelId,\n            clientId,\n            onProgress,\n            onSuccess,\n            onError,\n        }, true)) as unknown as XMLHttpRequest;\n    };\n\n    useEffect(() => {\n        if (promptedFile) {\n            doUploadFile(promptedFile);\n        }\n    }, [promptedFile]);\n\n    const handleOnExited = useCallback(() => {\n        uploadRequestRef.current?.abort();\n        onExited?.();\n    }, [onExited]);\n\n    // controls logic\n    const hasChanges = (() => {\n        if (displayNameValue !== bookmark?.display_name) {\n            return true;\n        }\n\n        if ((emoji || bookmark?.emoji) && emoji !== bookmark?.emoji) {\n            return true;\n        }\n\n        if (type === 'file') {\n            if (fileId && fileId !== bookmark?.file_id) {\n                return true;\n            }\n        }\n\n        if (type === 'link') {\n            return Boolean(link && link !== bookmark?.link_url);\n        }\n\n        return false;\n    })();\n    const isValid = (() => {\n        if (type === 'link') {\n            if (!link || linkError) {\n                return false;\n            }\n        }\n\n        if (type === 'file') {\n            if (!fileInfo || !displayNameValue || fileError) {\n                return false;\n            }\n        }\n\n        return true;\n    })();\n    const showControls = type === 'file' || (isValid || bookmark);\n\n    const cancel = useCallback(() => {\n        if (type === 'file') {\n            uploadRequestRef.current?.abort();\n        }\n    }, [type]);\n\n    const confirm = useCallback(async () => {\n        setSaving(true);\n        if (type === 'link') {\n            const url = validHttpUrl(link);\n\n            if (!url) {\n                setSaveError(formatMessage(msg.linkInvalid));\n                return;\n            }\n\n            let validLink = url.toString();\n\n            if (validLink.endsWith('/')) {\n                validLink = validLink.slice(0, -1);\n            }\n\n            const {data: success} = await onConfirm({\n                image_url: icon,\n                link_url: validLink,\n                emoji,\n                display_name: displayNameValue,\n                type: 'link',\n            });\n\n            setSaving(false);\n\n            if (success) {\n                setSaveError('');\n                onHide();\n            } else {\n                setSaveError(formatMessage(msg.saveError));\n            }\n        } else if (fileInfo) {\n            const {data: success} = await onConfirm({\n                file_id: fileInfo.id,\n                display_name: displayNameValue,\n                type: 'file',\n                emoji,\n            });\n\n            if (success) {\n                setSaveError('');\n                onHide();\n            } else {\n                setSaveError(formatMessage(msg.saveError));\n            }\n        }\n    }, [type, link, onConfirm, onHide, fileInfo, displayNameValue, emoji, icon]);\n\n    const confirmDisabled = saving || !isValid || !hasChanges;\n\n    return (\n        <GenericModal\n            enforceFocus={!showEmojiPicker}\n            keyboardEscape={false}\n            className='channel-bookmarks-create-modal'\n            modalHeaderText={formatMessage(bookmark ? msg.editHeading : msg.heading)}\n            confirmButtonText={formatMessage(bookmark ? msg.saveText : msg.addBookmarkText)}\n            handleCancel={(showControls && cancel) || undefined}\n            handleConfirm={(showControls && confirm) || undefined}\n            handleEnterKeyPress={(!confirmDisabled && confirm) || undefined}\n            onExited={handleOnExited}\n            compassDesign={true}\n            isConfirmDisabled={confirmDisabled}\n            autoCloseOnConfirmButton={false}\n            errorText={saveError}\n        >\n            <>\n                {type === 'link' ? (\n                    <Input\n                        type='text'\n                        name='bookmark-link'\n                        containerClassName='linkInput'\n                        placeholder={formatMessage(msg.linkPlaceholder)}\n                        onChange={handleLinkChange}\n                        onBlur={handleLinkBlur}\n                        onPaste={handleLinkPasted}\n                        value={linkInputValue}\n                        data-testid='linkInput'\n                        autoFocus={true}\n                        customMessage={linkError ? {type: 'error', value: linkError} : {value: formatMessage(msg.linkInfoMessage)}}\n                    />\n                ) : (\n                    <>\n                        <FieldLabel>\n                            <FormattedMessage\n                                id='channel_bookmarks.create.file_input.label'\n                                defaultMessage='Attachment'\n                            />\n                        </FieldLabel>\n                        <FileInputContainer\n                            tabIndex={0}\n                            role='button'\n                            disabled={!canUploadFiles}\n                            onClick={(canUploadFiles && handleEditFileClick) || undefined}\n                        >\n                            {!pendingFile && fileInfo && (\n                                <FileItemContainer>\n                                    <FileAttachment\n                                        key={fileInfo.id}\n                                        fileInfo={fileInfo}\n                                        index={0}\n                                    />\n                                </FileItemContainer>\n                            )}\n                            {pendingFile && (\n                                <FileProgressPreview\n                                    key={pendingFile.clientId}\n                                    clientId={pendingFile.clientId}\n                                    fileInfo={pendingFile}\n                                    handleRemove={handleFileRemove}\n                                />\n                            )}\n                            {!fileInfo && !pendingFile && (\n                                <div className='file-preview__container empty'/>\n                            )}\n                            <VisualButton>\n                                <PencilOutlineIcon size={24}/>\n                                {formatMessage(msg.fileInputEdit)}\n                            </VisualButton>\n                            {fileInput}\n                        </FileInputContainer>\n                        {fileError && (\n                            <div className='Input___customMessage Input___error'>\n                                <i className='icon error icon-alert-circle-outline'/>\n                                <span>{fileError}</span>\n                            </div>\n                        )}\n                    </>\n\n                )}\n\n                {showControls && (\n                    <TitleWrapper>\n                        <FieldLabel>\n                            <FormattedMessage\n                                id='channel_bookmarks.create.title_input.label'\n                                defaultMessage='Title'\n                            />\n                        </FieldLabel>\n                        <CreateModalNameInput\n                            type={type}\n                            imageUrl={icon}\n                            fileInfo={pendingFile || fileInfo}\n                            emoji={emoji}\n                            setEmoji={setEmoji}\n                            displayName={displayName}\n                            placeholder={displayNameValue}\n                            setDisplayName={setDisplayName}\n                            onAddCustomEmojiClick={onHide}\n                            showEmojiPicker={showEmojiPicker}\n                            setShowEmojiPicker={setShowEmojiPicker}\n                        />\n                    </TitleWrapper>\n                )}\n            </>\n        </GenericModal>\n    );\n}\n\nexport default ChannelBookmarkCreateModal;\n\nconst TitleWrapper = styled.div`\n    margin-top: 20px;\n`;\n\nconst FieldLabel = styled.span`\n    display: inline-block;\n    margin-bottom: 8px;\n    font-family: Open Sans;\n    font-size: 14px;\n    line-height: 16px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 20px;\n`;\n\nconst VisualButton = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 4px;\n    padding: 10px 24px;\n    color: rgba(var(--center-channel-color-rgb), 0.56);\n    font-size: 11px;\n    font-weight: 600;\n    font-family: Open Sans;\n`;\n\nconst FileInputContainer = styled.div`\n    display: block;\n    background: rgba(var(--center-channel-color-rgb), 0.04);\n    padding: 12px;\n    border-radius: 8px;\n    display: flex;\n\n    &:hover:not([disabled]) {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n        color: rgba(var(--center-channel-color-rgb), 0.72);\n        cursor: pointer;\n    }\n\n    &:disabled {\n        cursor: default;\n        ${VisualButton} {\n            opacity: 0.4;\n        }\n    }\n\n    input[type=\"file\"] {\n        opacity: 0;\n        width: 0;\n        height: 0;\n    }\n\n    .file-preview__container,\n    .file-preview {\n        width: auto;\n        height: auto;\n        flex: 1 1 auto;\n        padding: 0;\n\n        &.empty {\n            border: 2px dashed rgba(var(--center-channel-color-rgb), 0.16);\n            border-radius : 4px;\n        }\n\n        .post-image__column {\n            width: 100%;\n            margin: 0;\n        }\n    }\n`;\n\nconst FileItemContainer = styled.div`\n    display: flex;\n    flex: 1 1 auto;\n\n    > div {\n        width: 100%;\n        margin: 0;\n    }\n`;\n\nconst msg = defineMessages({\n    heading: {id: 'channel_bookmarks.create.title', defaultMessage: 'Add a bookmark'},\n    editHeading: {id: 'channel_bookmarks.create.edit.title', defaultMessage: 'Edit bookmark'},\n    linkPlaceholder: {id: 'channel_bookmarks.create.link_placeholder', defaultMessage: 'Link'},\n    linkInfoMessage: {id: 'channel_bookmarks.create.link_info', defaultMessage: 'Add a link to any post, file, or any external link'},\n    addBookmarkText: {id: 'channel_bookmarks.create.confirm_add.button', defaultMessage: 'Add bookmark'},\n    saveText: {id: 'channel_bookmarks.create.confirm_save.button', defaultMessage: 'Save bookmark'},\n    fileInputEdit: {id: 'channel_bookmarks.create.file_input.edit', defaultMessage: 'Edit'},\n    linkInvalid: {id: 'channel_bookmarks.create.error.invalid_url', defaultMessage: 'Please enter a valid link'},\n    saveError: {id: 'channel_bookmarks.create.error.generic_save', defaultMessage: 'There was an error trying to save the bookmark.'},\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {\n    DotsHorizontalIcon,\n    PencilOutlineIcon,\n    LinkVariantIcon,\n    TrashCanOutlineIcon,\n    ArrowExpandIcon,\n    OpenInNewIcon,\n    BookOutlineIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelBookmark, ChannelBookmarkPatch} from '@mattermost/types/channel_bookmarks';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport {editBookmark, deleteBookmark} from 'actions/channel_bookmarks';\nimport {openModal} from 'actions/views/modals';\n\nimport GetPublicModal from 'components/get_public_link_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {getSiteURL, shouldOpenInNewTab} from 'utils/url';\nimport {copyToClipboard} from 'utils/utils';\n\nimport BookmarkDeleteModal from './bookmark_delete_modal';\nimport ChannelBookmarksCreateModal from './channel_bookmarks_create_modal';\nimport {useCanGetPublicLink, useChannelBookmarkPermission} from './utils';\n\ntype Props = {bookmark: ChannelBookmark; open: () => void};\nconst BookmarkItemDotMenu = ({\n    bookmark,\n    open,\n}: Props) => {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n\n    const siteURL = getSiteURL();\n    const openInNewTab = bookmark.type === 'link' && bookmark.link_url && shouldOpenInNewTab(bookmark.link_url, siteURL);\n\n    let openIcon;\n    if (bookmark.type === 'file') {\n        openIcon = <ArrowExpandIcon size={18}/>;\n    } else if (bookmark.link_url) {\n        openIcon = openInNewTab ? <OpenInNewIcon size={18}/> : <BookOutlineIcon size={18}/>;\n    }\n\n    const canEdit = useChannelBookmarkPermission(bookmark.channel_id, 'edit');\n    const canDelete = useChannelBookmarkPermission(bookmark.channel_id, 'delete');\n    const canGetPublicLink = useCanGetPublicLink();\n\n    const editLabel = formatMessage({id: 'channel_bookmarks.edit', defaultMessage: 'Edit'});\n    const openLabel = formatMessage({id: 'channel_bookmarks.open', defaultMessage: 'Open'});\n    const copyLinkLabel = formatMessage({id: 'channel_bookmarks.copy', defaultMessage: 'Copy link'});\n    const copyFileLabel = formatMessage({id: 'channel_bookmarks.copyFilePublicLink', defaultMessage: 'Get a public link'});\n    const deleteLabel = formatMessage({id: 'channel_bookmarks.delete', defaultMessage: 'Delete'});\n\n    const handleEdit = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.CHANNEL_BOOKMARK_CREATE,\n            dialogType: ChannelBookmarksCreateModal,\n            dialogProps: {\n                bookmark,\n                channelId: bookmark.channel_id,\n                onConfirm: async (data: ChannelBookmarkPatch) => dispatch(editBookmark(bookmark.channel_id, bookmark.id, data)) as ActionResult<boolean>,\n            },\n        }));\n    }, [editBookmark, dispatch, bookmark]);\n\n    const copyLink = useCallback(() => {\n        if (bookmark.type === 'link' && bookmark.link_url) {\n            copyToClipboard(bookmark.link_url);\n        } else if (bookmark.type === 'file' && bookmark.file_id) {\n            copyToClipboard(getFileDownloadUrl(bookmark.file_id));\n        }\n    }, [bookmark.type, bookmark.link_url, bookmark.file_id]);\n\n    const handleDelete = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.CHANNEL_BOOKMARK_DELETE,\n            dialogType: BookmarkDeleteModal,\n            dialogProps: {\n                displayName: bookmark.display_name,\n                onConfirm: () => dispatch(deleteBookmark(bookmark.channel_id, bookmark.id)),\n            },\n        }));\n    }, [deleteBookmark, dispatch, bookmark]);\n\n    const handleGetPublicLink = useCallback(() => {\n        if (!bookmark.file_id) {\n            return;\n        }\n\n        dispatch(openModal({\n            modalId: ModalIdentifiers.GET_PUBLIC_LINK_MODAL,\n            dialogType: GetPublicModal,\n            dialogProps: {\n                fileId: bookmark.file_id,\n            },\n        }));\n    }, [bookmark.file_id, dispatch]);\n\n    return (\n        <Menu.Container\n            anchorOrigin={{vertical: 'bottom', horizontal: 'right'}}\n            transformOrigin={{vertical: 'top', horizontal: 'right'}}\n            menuButton={{\n                id: `channelBookmarksDotMenuButton-${bookmark.id}`,\n                class: 'channelBookmarksDotMenuButton',\n                children: <DotsHorizontalIcon size={18}/>,\n                'aria-label': formatMessage({id: 'channel_bookmarks.editBookmarkLabel', defaultMessage: 'Bookmark menu'}),\n            }}\n            menu={{\n                id: 'channelBookmarksDotMenuDropdown',\n            }}\n        >\n            <Menu.Item\n                key='channelBookmarksOpen'\n                id='channelBookmarksOpen'\n                onClick={open}\n                leadingElement={openIcon}\n                labels={<span>{openLabel}</span>}\n                aria-label={openLabel}\n            />\n            {canEdit && (\n                <Menu.Item\n                    key='channelBookmarksEdit'\n                    id='channelBookmarksEdit'\n                    onClick={handleEdit}\n                    leadingElement={<PencilOutlineIcon size={18}/>}\n                    labels={<span>{editLabel}</span>}\n                    aria-label={editLabel}\n                />\n            )}\n            {bookmark.type === 'link' && (\n                <Menu.Item\n                    key='channelBookmarksLinkCopy'\n                    id='channelBookmarksLinkCopy'\n                    onClick={copyLink}\n                    leadingElement={<LinkVariantIcon size={18}/>}\n                    labels={<span>{copyLinkLabel}</span>}\n                    aria-label={copyLinkLabel}\n                />\n            )}\n            {bookmark.type === 'file' && canGetPublicLink && (\n                <Menu.Item\n                    key='channelBookmarksFileCopy'\n                    id='channelBookmarksFileCopy'\n                    onClick={handleGetPublicLink}\n                    leadingElement={<LinkVariantIcon size={18}/>}\n                    labels={<span>{copyFileLabel}</span>}\n                    aria-label={copyFileLabel}\n                />\n            )}\n            {canDelete && (\n                <Menu.Item\n                    key='channelBookmarksDelete'\n                    id='channelBookmarksDelete'\n                    onClick={handleDelete}\n                    leadingElement={<TrashCanOutlineIcon size={18}/>}\n                    labels={<span>{deleteLabel}</span>}\n                    aria-label={deleteLabel}\n                    isDestructive={true}\n                />\n            )}\n        </Menu.Container>\n    );\n};\n\nexport default BookmarkItemDotMenu;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {HTMLAttributes} from 'react';\nimport React, {forwardRef, useRef} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Link} from 'react-router-dom';\nimport styled, {css} from 'styled-components';\n\nimport type {ChannelBookmark} from '@mattermost/types/channel_bookmarks';\nimport type {FileInfo} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getFile} from 'mattermost-redux/selectors/entities/files';\nimport {getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport {openModal} from 'actions/views/modals';\n\nimport ExternalLink from 'components/external_link';\nimport FilePreviewModal from 'components/file_preview_modal';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {getSiteURL, shouldOpenInNewTab} from 'utils/url';\n\nimport type {GlobalState} from 'types/store';\n\nimport BookmarkItemDotMenu from './bookmark_dot_menu';\nimport BookmarkIcon from './bookmark_icon';\n\ntype Props = {bookmark: ChannelBookmark};\nconst BookmarkItem = <T extends HTMLAnchorElement>({bookmark}: Props) => {\n    const linkRef = useRef<T>(null);\n    const dispatch = useDispatch();\n    const fileInfo: FileInfo | undefined = useSelector((state: GlobalState) => (bookmark?.file_id && getFile(state, bookmark.file_id)) || undefined);\n\n    const open = () => {\n        linkRef.current?.click();\n    };\n\n    const handleOpenFile = (e: React.MouseEvent<HTMLAnchorElement>) => {\n        e.preventDefault();\n\n        if (fileInfo) {\n            dispatch(openModal({\n                modalId: ModalIdentifiers.FILE_PREVIEW_MODAL,\n                dialogType: FilePreviewModal,\n                dialogProps: {\n                    post: {user_id: bookmark.owner_id, channel_id: bookmark.channel_id} as Post,\n                    fileInfos: [fileInfo],\n                    startIndex: 0,\n                },\n            }));\n        }\n    };\n\n    const icon = (\n        <BookmarkIcon\n            type={bookmark.type}\n            emoji={bookmark.emoji}\n            imageUrl={bookmark.image_url}\n            fileInfo={fileInfo}\n        />\n    );\n    let link;\n\n    if (bookmark.type === 'link' && bookmark.link_url) {\n        link = (\n            <DynamicLink\n                href={bookmark.link_url}\n                ref={linkRef}\n                isFile={false}\n            >\n                {icon}\n                <Label>{bookmark.display_name}</Label>\n            </DynamicLink>\n        );\n    } else if (bookmark.type === 'file' && bookmark.file_id) {\n        link = (\n            <DynamicLink\n                href={getFileDownloadUrl(bookmark.file_id)}\n                onClick={handleOpenFile}\n                ref={linkRef}\n                isFile={true}\n            >\n                {icon}\n                <Label>{bookmark.display_name}</Label>\n            </DynamicLink>\n        );\n    }\n\n    return (\n        <Chip>\n            {link}\n            <BookmarkItemDotMenu\n                bookmark={bookmark}\n                open={open}\n            />\n        </Chip>\n    );\n};\n\nconst Chip = styled.div`\n    position: relative;\n    border-radius: 12px;\n    overflow: hidden;\n    margin: 1px 0;\n    flex-shrink: 0;\n    min-width: 5rem;\n    max-width: 25rem;\n\n    button {\n        position: absolute;\n        visibility: hidden;\n        right: 6px;\n        top: 3px;\n    }\n\n    &:hover,\n    &:focus-within,\n    &:has([aria-expanded=\"true\"]) {\n        button {\n            visibility: visible;\n        }\n    }\n\n    &:hover,\n    &:focus-within {\n        a {\n            text-decoration: none;\n        }\n    }\n\n    &:hover,\n    &:focus-within,\n    &:has([aria-expanded=\"true\"]) {\n        a {\n            background: rgba(var(--center-channel-color-rgb), 0.08);\n            color: rgba(var(--center-channel-color-rgb), 1);\n        }\n    }\n\n    &:active:not(:has(button:active)),\n    &--active,\n    &--active:hover {\n        a {\n            background: rgba(var(--button-bg-rgb), 0.08);\n            color: rgb(var(--button-bg-rgb)) !important;\n\n            .icon__text {\n                color: rgb(var(--button-bg));\n            }\n\n            .icon {\n                color: rgb(var(--button-bg));\n            }\n        }\n\n    }\n`;\n\nconst Label = styled.span`\n    white-space: nowrap;\n    padding: 4px 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n`;\n\nconst TARGET_BLANK_URL_PREFIX = '!';\n\ntype DynamicLinkProps = {href: string; children: React.ReactNode; isFile: boolean; onClick?: HTMLAttributes<HTMLAnchorElement>['onClick']};\nconst DynamicLink = forwardRef<HTMLAnchorElement, DynamicLinkProps>(({href, children, isFile, onClick}, ref) => {\n    const siteURL = getSiteURL();\n    const openInNewTab = shouldOpenInNewTab(href, siteURL);\n\n    const prefixed = href[0] === TARGET_BLANK_URL_PREFIX;\n\n    if (prefixed || openInNewTab) {\n        return (\n            <StyledExternalLink\n                href={prefixed ? href.substring(1) : href}\n                rel='noopener noreferrer'\n                target='_blank'\n                location='channel_bookmarks.item'\n                ref={ref}\n            >\n                {children}\n            </StyledExternalLink>\n        );\n    }\n\n    if (href.startsWith(siteURL) && !isFile) {\n        return (\n            <StyledLink\n                to={href.slice(siteURL.length)}\n                ref={ref}\n                onClick={onClick}\n            >\n                {children}\n            </StyledLink>\n        );\n    }\n\n    return (\n        <StyledAnchor\n            href={href}\n            ref={ref}\n            onClick={onClick}\n        >\n            {children}\n        </StyledAnchor>\n    );\n});\n\nconst linkStyles = css`\n    display: flex;\n    padding: 0 12px 0 6px;\n    gap: 5px;\n\n    color: rgba(var(--center-channel-color-rgb), 1);\n    font-family: Open Sans;\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 16px;\n`;\n\nconst StyledAnchor = styled.a`\n    &&&& {\n        ${linkStyles}\n    }\n`;\n\nconst StyledLink = styled(Link)`\n    &&&& {\n        ${linkStyles}\n    }\n`;\n\nconst StyledExternalLink = styled(ExternalLink)`\n    &&&& {\n        ${linkStyles}\n    }\n`;\n\nexport default BookmarkItem;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport type {ChangeEvent} from 'react';\nimport React, {useCallback, useRef} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\nimport styled, {css} from 'styled-components';\n\nimport {\n    LinkVariantIcon,\n    PaperclipIcon,\n    PlusIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelBookmarkCreate} from '@mattermost/types/channel_bookmarks';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {createBookmark} from 'actions/channel_bookmarks';\nimport {openModal} from 'actions/views/modals';\n\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {clearFileInput} from 'utils/utils';\n\nimport ChannelBookmarkCreateModal from './channel_bookmarks_create_modal';\nimport {MAX_BOOKMARKS_PER_CHANNEL} from './utils';\n\ntype PlusMenuProps = {\n    channelId: string;\n    hasBookmarks: boolean;\n    limitReached: boolean;\n    canUploadFiles: boolean;\n};\nconst PlusMenu = ({\n    channelId,\n    hasBookmarks,\n    limitReached,\n    canUploadFiles,\n}: PlusMenuProps) => {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n    const showLabel = !hasBookmarks;\n\n    const handleCreate = useCallback((file?: File) => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.CHANNEL_BOOKMARK_CREATE,\n            dialogType: ChannelBookmarkCreateModal,\n            dialogProps: {\n                channelId,\n                bookmarkType: file ? 'file' : 'link',\n                file,\n                onConfirm: async (data: ChannelBookmarkCreate) => dispatch(createBookmark(channelId, data)) as ActionResult<boolean>,\n            },\n        }));\n    }, [channelId, dispatch]);\n\n    const handleFileChanged = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files?.length) {\n            const [file] = e.target.files;\n            handleCreate(file);\n            clearFileInput(e.target);\n        }\n    }, [handleCreate]);\n\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const fileInput = (\n        <input\n            type='file'\n            id='bookmark-create-file-input'\n            className='bookmark-create-file-input'\n            ref={fileInputRef}\n            onChange={handleFileChanged}\n        />\n    );\n\n    const handleCreateLink = useCallback(() => {\n        handleCreate();\n    }, [handleCreate]);\n\n    const handleCreateFile = useCallback(() => {\n        fileInputRef.current?.click();\n    }, [fileInputRef.current]);\n\n    const addBookmarkLabel = formatMessage({id: 'channel_bookmarks.addBookmark', defaultMessage: 'Add a bookmark'});\n\n    const addBookmarkLimitReached = formatMessage({id: 'channel_bookmarks.addBookmarkLimitReached', defaultMessage: 'Cannot add more than {limit} bookmarks'}, {limit: MAX_BOOKMARKS_PER_CHANNEL});\n    let addBookmarkTooltipText;\n\n    if (limitReached) {\n        addBookmarkTooltipText = addBookmarkLimitReached;\n    } else if (hasBookmarks) {\n        addBookmarkTooltipText = addBookmarkLabel;\n    }\n    const addLinkLabel = formatMessage({id: 'channel_bookmarks.addLink', defaultMessage: 'Add a link'});\n    const attachFileLabel = formatMessage({id: 'channel_bookmarks.attachFile', defaultMessage: 'Attach a file'});\n\n    return (\n        <PlusButtonContainer withLabel={showLabel}>\n            <Menu.Container\n                anchorOrigin={{vertical: 'bottom', horizontal: 'left'}}\n                transformOrigin={{vertical: 'top', horizontal: 'left'}}\n                menuButton={{\n                    id: 'channelBookmarksPlusMenuButton',\n                    class: classNames('channelBookmarksMenuButton', {withLabel: showLabel, disabled: limitReached}),\n                    children: (\n                        <>\n                            <PlusIcon size={showLabel ? 16 : 18}/>\n                            {showLabel && <span>{addBookmarkLabel}</span>}\n                        </>\n                    ),\n                    'aria-label': addBookmarkLabel,\n                    disabled: limitReached,\n                }}\n                menu={{\n                    id: 'channelBookmarksPlusMenuDropdown',\n                }}\n                menuButtonTooltip={addBookmarkTooltipText ? {\n                    id: 'channelBookmarksPlusMenuButtonTooltip',\n                    text: addBookmarkTooltipText,\n                } : undefined}\n            >\n                <Menu.Item\n                    key='channelBookmarksAddLink'\n                    id='channelBookmarksAddLink'\n                    onClick={handleCreateLink}\n                    leadingElement={<LinkVariantIcon size={18}/>}\n                    labels={<span>{addLinkLabel}</span>}\n                    aria-label={addLinkLabel}\n                />\n                {canUploadFiles && (\n                    <Menu.Item\n                        key='channelBookmarksAttachFile'\n                        id='channelBookmarksAttachFile'\n                        onClick={handleCreateFile}\n                        leadingElement={<PaperclipIcon size={18}/>}\n                        labels={<span>{attachFileLabel}</span>}\n                        aria-label={attachFileLabel}\n                    />\n                )}\n            </Menu.Container>\n            {fileInput}\n        </PlusButtonContainer>\n    );\n};\n\nexport default PlusMenu;\n\nconst PlusButtonContainer = styled.div<{withLabel: boolean}>`\n    position: sticky;\n    right: 0;\n    ${({withLabel}) => !withLabel && css`padding: 0 1rem;`}\n    background: linear-gradient(to right, rgba(var(--center-channel-bg-rgb), .16), rgba(var(--center-channel-bg-rgb), 1) 25%);\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport BookmarkItem from './bookmark_item';\nimport PlusMenu from './channel_bookmarks_plus_menu';\nimport {useChannelBookmarkPermission, useChannelBookmarks, MAX_BOOKMARKS_PER_CHANNEL, useCanUploadFiles} from './utils';\n\nimport './channel_bookmarks.scss';\n\ntype Props = {\n    channelId: string;\n};\n\nconst ChannelBookmarks = ({\n    channelId,\n}: Props) => {\n    const {order, bookmarks} = useChannelBookmarks(channelId);\n    const canUploadFiles = useCanUploadFiles();\n    const canAdd = useChannelBookmarkPermission(channelId, 'add');\n    const hasBookmarks = Boolean(order?.length);\n\n    if (!hasBookmarks && !canAdd) {\n        return null;\n    }\n\n    return (\n        <Container data-testid='channel-bookmarks-container'>\n            {order.map((id) => {\n                return (\n                    <BookmarkItem\n                        key={id}\n                        bookmark={bookmarks[id]}\n                    />\n                );\n            })}\n            {canAdd && (\n                <PlusMenu\n                    channelId={channelId}\n                    hasBookmarks={hasBookmarks}\n                    limitReached={order.length >= MAX_BOOKMARKS_PER_CHANNEL}\n                    canUploadFiles={canUploadFiles}\n                />\n            )}\n        </Container>\n    );\n};\n\nexport default ChannelBookmarks;\n\nconst Container = styled.div`\n    display: flex;\n    padding: 8px 6px;\n    padding-right: 0;\n    align-items: center;\n    border-bottom: 1px solid rgba(var(--center-channel-color-rgb), 0.12);\n    overflow-x: auto;\n    overflow-y: hidden;\n    overflow-y: clip;\n`;\n"],"names":["noop","BookmarkDeleteModal","_ref","displayName","onExited","onCancel","onConfirm","formatMessage","useIntl","title","id","defaultMessage","confirmButtonText","message","React","FormattedMessage","values","strong","chunk","GenericModal","handleCancel","handleConfirm","modalHeaderText","compassDesign","isDeleteModal","propTypes","_pt","BookmarkIcon","type","emoji","imageUrl","fileInfo","size","icon","BookOutlineIcon","FileGenericOutlineIcon","emojiName","trimmedEmojiName","hasImageProxy","useSelector","state","getConfig","HasImageProxy","RenderEmoji","BookmarkIconImg","src","getImageSrc","FileThumbnail","disablePreview","Icon","$size","styled","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7","CreateModalNameInput","setEmoji","placeholder","setDisplayName","showEmojiPicker","setShowEmojiPicker","onAddCustomEmojiClick","targetRef","useRef","refocusEmojiButton","current","document","dispatchEvent","CustomEvent","A11yCustomEventTypes","detail","target","keyboardOnly","handleEmojiClear","handleInputChange","useCallback","e","currentTarget","value","NameWrapper","EmojiPickerOverlay","getTargetRef","show","onHide","handleEmojiClose","onEmojiClick","selectedEmoji","short_name","name","concat","placement","ref","onClick","toggleEmojiPicker","prev","onKeyDown","isKeyPressed","Constants","stopPropagation","className","ChevronDownIcon","Input","onChange","useLegend","Clear","visible","Boolean","tabIndex","validHttpUrl","input","val","parseLink","isValidUrl","url","URL","_unused","ChannelBookmarkCreateModal","_bookmark$type","_bookmark$emoji","_bookmark$link_url","bookmark","bookmarkType","file","promptedFile","channelId","dispatch","useDispatch","useState","display_name","parsedDisplayName","setParsedDisplayName","saving","setSaving","saveError","setSaveError","handleKeyDown","event","useEffect","addEventListener","removeEventListener","linkInputValue","setLinkInputValue","link_url","link","setLinkImmediately","linkError","setLinkError","setIcon","image_url","handleLinkChange","setLink","debounce","handleLinkBlur","handleLinkPasted","clipboardData","getData","canUploadFiles","useCanUploadFiles","pendingFile","setPendingFile","fileError","setFileError","fileId","setFileId","file_id","uploadRequestRef","getFile","undefined","maxFileSize","config","parseInt","MaxFileSize","maxFileSizeMB","handleFileChanged","_e$target$files","files","doUploadFile","fileInputRef","fileInput","onProgress","preview","onSuccess","file_infos","fileInfos","newFile","onError","displayNameValue","max","filename","clientId","generateId","uploadFile","rootId","handleOnExited","_uploadRequestRef$cur2","abort","hasChanges","isValid","showControls","cancel","_uploadRequestRef$cur3","confirm","async","msg","linkInvalid","validLink","toString","endsWith","slice","data","success","confirmDisabled","enforceFocus","keyboardEscape","editHeading","heading","saveText","addBookmarkText","handleEnterKeyPress","isConfirmDisabled","autoCloseOnConfirmButton","errorText","containerClassName","linkPlaceholder","onBlur","onPaste","autoFocus","customMessage","linkInfoMessage","FieldLabel","FileInputContainer","role","disabled","_fileInputRef$current","innerClick","querySelector","contains","click","FileItemContainer","FileAttachment","key","index","FileProgressPreview","handleRemove","handleFileRemove","_uploadRequestRef$cur","VisualButton","PencilOutlineIcon","fileInputEdit","TitleWrapper","defineMessages","BookmarkItemDotMenu","open","siteURL","getSiteURL","openInNewTab","shouldOpenInNewTab","openIcon","ArrowExpandIcon","OpenInNewIcon","canEdit","useChannelBookmarkPermission","channel_id","canDelete","canGetPublicLink","useCanGetPublicLink","editLabel","openLabel","copyLinkLabel","copyFileLabel","deleteLabel","handleEdit","openModal","modalId","ModalIdentifiers","dialogType","ChannelBookmarksCreateModal","dialogProps","editBookmark","copyLink","copyToClipboard","getFileDownloadUrl","handleDelete","deleteBookmark","handleGetPublicLink","GetPublicModal","Menu","anchorOrigin","vertical","horizontal","transformOrigin","menuButton","class","children","DotsHorizontalIcon","menu","leadingElement","labels","LinkVariantIcon","TrashCanOutlineIcon","isDestructive","Chip","Label","DynamicLink","forwardRef","href","isFile","prefixed","StyledExternalLink","substring","rel","location","startsWith","StyledLink","to","length","StyledAnchor","linkStyles","css","Link","withConfig","ExternalLink","linkRef","preventDefault","FilePreviewModal","post","user_id","owner_id","startIndex","_linkRef$current","PlusMenu","hasBookmarks","limitReached","showLabel","handleCreate","createBookmark","clearFileInput","handleCreateLink","handleCreateFile","addBookmarkLabel","addBookmarkLimitReached","limit","MAX_BOOKMARKS_PER_CHANNEL","addBookmarkTooltipText","addLinkLabel","attachFileLabel","PlusButtonContainer","withLabel","classNames","PlusIcon","menuButtonTooltip","text","PaperclipIcon","ChannelBookmarks","order","bookmarks","useChannelBookmarks","canAdd","Container","map","BookmarkItem"],"sourceRoot":""}