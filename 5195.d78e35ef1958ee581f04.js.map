{"version":3,"file":"5195.d78e35ef1958ee581f04.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/actions/channel_bookmarks.ts","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/actions/channel_bookmarks.ts","webpack://mattermost-webapp/./src/actions/views/channel_sidebar.ts","webpack://mattermost-webapp/./src/components/add_groups_to_channel_modal/add_groups_to_channel_modal.tsx","webpack://mattermost-webapp/./src/components/add_groups_to_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/common/svg_images_components/magnifying_glass_svg.tsx","webpack://mattermost-webapp/./src/components/searchable_channel_list.tsx","webpack://mattermost-webapp/./src/components/browse_channels/browse_channels.tsx","webpack://mattermost-webapp/./src/components/browse_channels/index.ts","webpack://mattermost-webapp/./src/components/channel_bookmarks/utils.ts","webpack://mattermost-webapp/./src/components/edit_category_modal/edit_category_modal.tsx","webpack://mattermost-webapp/./src/components/edit_category_modal/index.ts","webpack://mattermost-webapp/./src/components/search_shortcut/search_shortcut.tsx","webpack://mattermost-webapp/./src/components/shop/components/dual_range_slider.tsx","webpack://mattermost-webapp/./src/components/shop/components/filter_menu.tsx","webpack://mattermost-webapp/./src/components/shop/components/product_info_card.tsx","webpack://mattermost-webapp/./src/components/shop/components/search_bar.tsx","webpack://mattermost-webapp/./src/components/shop/product_results.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/create_new_category_menu_item.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/mark_as_read_confirm_modal.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/mark_as_read_menu_item.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/sidebar_category_generic_menu.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category_header.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/channel_mention_badge.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/channel_pencil_icon/channel_pencil_icon.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/channel_pencil_icon/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_icon/sidebar_channel_icon.tsx","webpack://mattermost-webapp/./src/components/channel_move_to_sub_menu/index.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_menu/sidebar_channel_menu.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_menu/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_link/sidebar_channel_link.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel_link/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_base_channel/sidebar_base_channel_icon.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_base_channel/sidebar_base_channel.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_base_channel/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_direct_channel/sidebar_direct_channel.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_direct_channel/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_group_channel/sidebar_group_channel.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_group_channel/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_channel/sidebar_channel.tsx","webpack://mattermost-webapp/./src/components/team_controller/actions/index.ts","webpack://mattermost-webapp/./src/components/browser_view/browser/browser-tab.tsx","webpack://mattermost-webapp/./src/components/browser_view/browser_header/index.tsx","webpack://mattermost-webapp/./src/components/browser_view/browser_search_section/index.tsx","webpack://mattermost-webapp/./src/components/browser_view/browser/browser-iframe.tsx","webpack://mattermost-webapp/./src/components/browser_view/browser_body/index.tsx","webpack://mattermost-webapp/./src/components/browser_view/browser/contentDisplay.tsx","webpack://mattermost-webapp/./src/components/browser_view/index.tsx","webpack://mattermost-webapp/./src/components/channel_layout/channel_identifier_router/actions.ts","webpack://mattermost-webapp/./src/components/center_message_lock/index.tsx","webpack://mattermost-webapp/./src/components/common/svg_images_components/channel_intro_private_svg.tsx","webpack://mattermost-webapp/./src/components/common/svg_images_components/channel_intro_public_svg.tsx","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/add_members_button.tsx","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/pluggable_intro_buttons/pluggable_intro_buttons.tsx","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/pluggable_intro_buttons/index.ts","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/channel_intro_message.tsx","webpack://mattermost-webapp/./src/components/post_view/channel_intro_message/index.ts","webpack://mattermost-webapp/./src/components/post_view/post_list_row/post_list_row.tsx","webpack://mattermost-webapp/./src/components/post_view/post_list_row/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/scroll_to_bottom_icon.tsx","webpack://mattermost-webapp/./src/components/post_view/scroll_to_bottom_arrows.tsx","webpack://mattermost-webapp/./src/components/hint-toast/hint_toast.tsx","webpack://mattermost-webapp/./src/components/scroll_to_bottom_toast/scroll_to_bottom_toast.tsx","webpack://mattermost-webapp/./src/components/scroll_to_bottom_toast/index.tsx","webpack://mattermost-webapp/./src/components/toast_wrapper/toast_wrapper.tsx","webpack://mattermost-webapp/./src/components/toast_wrapper/index.ts","webpack://mattermost-webapp/./src/components/post_view/post_list_virtualized/latest_post_reader.tsx","webpack://mattermost-webapp/./src/components/post_view/post_list_virtualized/post_list_virtualized.tsx","webpack://mattermost-webapp/./src/components/post_view/post_list/post_list.tsx","webpack://mattermost-webapp/./src/components/post_view/post_list/index.tsx","webpack://mattermost-webapp/./src/components/post_view/post_view.tsx","webpack://mattermost-webapp/./src/components/post_view/index.ts","webpack://mattermost-webapp/./src/components/channel_view/input_loading.tsx","webpack://mattermost-webapp/./src/components/channel_view/channel_view.tsx","webpack://mattermost-webapp/./src/components/channel_view/index.ts","webpack://mattermost-webapp/./src/components/channel_layout/channel_identifier_router/channel_identifier_router.tsx","webpack://mattermost-webapp/./src/components/channel_layout/channel_identifier_router/index.ts","webpack://mattermost-webapp/./src/components/channel_layout/center_channel/center_channel.tsx","webpack://mattermost-webapp/./src/components/channel_layout/center_channel/index.ts","webpack://mattermost-webapp/./src/components/data_prefetch/actions.ts","webpack://mattermost-webapp/./src/components/data_prefetch/data_prefetch.tsx","webpack://mattermost-webapp/./src/components/data_prefetch/index.ts","webpack://mattermost-webapp/./src/components/messenger/audio_chat_bubble.tsx","webpack://mattermost-webapp/./src/components/messenger/chat_bubble.tsx","webpack://mattermost-webapp/./src/components/messenger/messenger.tsx","webpack://mattermost-webapp/./src/components/messenger/messenger_popup.tsx","webpack://mattermost-webapp/./src/components/resizable_sidebar/resizable_lhs/index.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_header/sidebar_header.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_header/index.ts","webpack://mattermost-webapp/./src/components/quick_switch_modal/quick_switch_modal.tsx","webpack://mattermost-webapp/./src/components/quick_switch_modal/index.tsx","webpack://mattermost-webapp/./src/components/sidebar/channel_filter/channel_filter.tsx","webpack://mattermost-webapp/./src/components/sidebar/channel_filter/index.ts","webpack://mattermost-webapp/./src/components/sidebar/channel_navigator/channel_navigator.tsx","webpack://mattermost-webapp/./src/components/sidebar/channel_navigator/index.ts","webpack://mattermost-webapp/./src/components/browse_apps/app_tabs.tsx","webpack://mattermost-webapp/./src/components/delete_category_modal/delete_category_modal.tsx","webpack://mattermost-webapp/./src/components/delete_category_modal/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_menu/index.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category_sorting_menu.tsx","webpack://mattermost-webapp/./src/selectors/views/add_channel_dropdown.ts","webpack://mattermost-webapp/./src/components/sidebar/add_channels_cta_button.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/sidebar_category.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_category/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar_list/sidebar_list.tsx","webpack://mattermost-webapp/./src/components/sidebar/sidebar_list/index.ts","webpack://mattermost-webapp/./src/components/sidebar/sidebar.tsx","webpack://mattermost-webapp/./src/components/sidebar/index.ts","webpack://mattermost-webapp/./src/components/threading/channel_threads/posts_channel_reset_watcher/posts_channel_reset_watcher.tsx","webpack://mattermost-webapp/./src/components/unreads_status_handler/unreads_status_handler.tsx","webpack://mattermost-webapp/./src/components/unreads_status_handler/index.ts","webpack://mattermost-webapp/./src/components/channel_layout/channel_controller.tsx","webpack://mattermost-webapp/./src/components/team_controller/team_controller.tsx","webpack://mattermost-webapp/./src/components/common/hooks/useTelemetryIdentifySync.tsx","webpack://mattermost-webapp/./src/components/team_controller/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/checkbox_checked_icon.tsx","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/selectors/entities/channel_bookmarks.ts","webpack://mattermost-webapp/./src/selectors/lhs.ts","webpack://mattermost-webapp/./src/types/actions.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChannelBookmarkCreate, ChannelBookmarkPatch} from '@mattermost/types/channel_bookmarks';\n\nimport * as ChannelBookmarkActions from 'mattermost-redux/actions/channel_bookmarks';\nimport type {DispatchFunc, GetStateFunc} from 'mattermost-redux/types/actions';\n\nimport {getConnectionId} from 'selectors/general';\n\nimport type {GlobalState} from 'types/store';\n\nexport function deleteBookmark(channelId: string, id: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const state = getState() as GlobalState;\n        const connectionId = getConnectionId(state);\n        return dispatch(ChannelBookmarkActions.deleteBookmark(channelId, id, connectionId));\n    };\n}\n\nexport function createBookmark(channelId: string, bookmark: ChannelBookmarkCreate) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const state = getState() as GlobalState;\n        const connectionId = getConnectionId(state);\n        return dispatch(ChannelBookmarkActions.createBookmark(channelId, bookmark, connectionId));\n    };\n}\n\nexport function editBookmark(channelId: string, id: string, patch: ChannelBookmarkPatch) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const state = getState() as GlobalState;\n        const connectionId = getConnectionId(state);\n        return dispatch(ChannelBookmarkActions.editBookmark(channelId, id, patch, connectionId));\n    };\n}\n\nexport function fetchChannelBookmarks(channelId: string) {\n    return ChannelBookmarkActions.fetchChannelBookmarks(channelId);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChannelBookmarkCreate, ChannelBookmarkPatch} from '@mattermost/types/channel_bookmarks';\n\nimport {ChannelBookmarkTypes} from 'mattermost-redux/action_types';\nimport {Client4} from 'mattermost-redux/client';\nimport {getChannelBookmark} from 'mattermost-redux/selectors/entities/channel_bookmarks';\nimport type {DispatchFunc, GetStateFunc} from 'mattermost-redux/types/actions';\n\nimport {logError} from './errors';\nimport {forceLogoutIfNecessary} from './helpers';\n\nexport function deleteBookmark(channelId: string, id: string, connectionId: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const state = getState();\n        const bookmark = getChannelBookmark(state, channelId, id);\n\n        try {\n            await Client4.deleteChannelBookmark(channelId, id, connectionId);\n\n            dispatch({\n                type: ChannelBookmarkTypes.BOOKMARK_DELETED,\n                data: bookmark,\n            });\n        } catch (error) {\n            return {\n                data: false,\n                error,\n            };\n        }\n\n        return {data: true};\n    };\n}\n\nexport function createBookmark(channelId: string, bookmark: ChannelBookmarkCreate, connectionId: string) {\n    return async (dispatch: DispatchFunc) => {\n        try {\n            const createdBookmark = await Client4.createChannelBookmark(channelId, bookmark, connectionId);\n\n            dispatch({\n                type: ChannelBookmarkTypes.RECEIVED_BOOKMARK,\n                data: createdBookmark,\n            });\n        } catch (error) {\n            return {\n                data: false,\n                error,\n            };\n        }\n\n        return {data: true};\n    };\n}\n\nexport function editBookmark(channelId: string, id: string, patch: ChannelBookmarkPatch, connectionId: string) {\n    return async (dispatch: DispatchFunc) => {\n        try {\n            const {updated, deleted} = await Client4.updateChannelBookmark(channelId, id, patch, connectionId);\n\n            if (updated) {\n                dispatch({\n                    type: ChannelBookmarkTypes.RECEIVED_BOOKMARK,\n                    data: updated,\n                });\n            }\n\n            if (deleted) {\n                dispatch({\n                    type: ChannelBookmarkTypes.BOOKMARK_DELETED,\n                    data: deleted,\n                });\n            }\n        } catch (error) {\n            return {\n                data: false,\n                error,\n            };\n        }\n\n        return {data: true};\n    };\n}\n\nexport function fetchChannelBookmarks(channelId: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        let bookmarks;\n        try {\n            bookmarks = await Client4.getChannelBookmarks(channelId);\n\n            dispatch({\n                type: ChannelBookmarkTypes.RECEIVED_BOOKMARKS,\n                data: {channelId, bookmarks},\n            });\n        } catch (error) {\n            forceLogoutIfNecessary(error, dispatch, getState);\n            dispatch(logError(error));\n            return {error};\n        }\n\n        return {data: bookmarks};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createCategory as createCategoryRedux, moveChannelsToCategory} from 'mattermost-redux/actions/channel_categories';\nimport {General} from 'mattermost-redux/constants';\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {getCategory, makeGetChannelIdsForCategory} from 'mattermost-redux/selectors/entities/channel_categories';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport type {ActionFunc, ActionFuncAsync} from 'mattermost-redux/types/actions';\nimport {insertMultipleWithoutDuplicates} from 'mattermost-redux/utils/array_utils';\n\nimport {getCategoriesForCurrentTeam, getChannelsInCategoryOrder, getDisplayedChannels} from 'selectors/views/channel_sidebar';\n\nimport {ActionTypes} from 'utils/constants';\n\nimport type {DraggingState, GlobalState} from 'types/store';\n\nexport function setUnreadFilterEnabled(enabled: boolean) {\n    return {\n        type: ActionTypes.SET_UNREAD_FILTER_ENABLED,\n        enabled,\n    };\n}\n\nexport function setDraggingState(data: DraggingState) {\n    return {\n        type: ActionTypes.SIDEBAR_DRAGGING_SET_STATE,\n        data,\n    };\n}\n\nexport function stopDragging() {\n    return {type: ActionTypes.SIDEBAR_DRAGGING_STOP};\n}\n\nexport function createCategory(teamId: string, displayName: string, channelIds?: string[]): ActionFuncAsync<unknown, GlobalState> {\n    return async (dispatch, getState) => {\n        if (channelIds) {\n            const state = getState() as GlobalState;\n            const multiSelectedChannelIds = state.views.channelSidebar.multiSelectedChannelIds;\n            channelIds.forEach((channelId) => {\n                if (multiSelectedChannelIds.indexOf(channelId) >= 0) {\n                    dispatch(multiSelectChannelAdd(channelId));\n                }\n            });\n        }\n\n        const result = await dispatch(createCategoryRedux(teamId, displayName, channelIds));\n        return dispatch({\n            type: ActionTypes.ADD_NEW_CATEGORY_ID,\n            data: result.data!.id,\n        });\n    };\n}\n\n// addChannelsInSidebar moves channels to a given category without specifying the order in the sidebar, so the channels\n// will always go to the first position in the category\nexport function addChannelsInSidebar(categoryId: string, channelId: string) {\n    return moveChannelsInSidebar(categoryId, 0, channelId, false);\n}\n\n// moveChannelsInSidebar moves channels to a given category in the sidebar, but it accounts for when the target index\n// may have changed due to archived channels not being shown in the sidebar.\nexport function moveChannelsInSidebar(categoryId: string, targetIndex: number, draggableChannelId: string, setManualSorting = true): ActionFuncAsync<unknown, GlobalState> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const multiSelectedChannelIds = state.views.channelSidebar.multiSelectedChannelIds;\n        let channelIds = [];\n\n        // Multi channel case\n        if (multiSelectedChannelIds.length && multiSelectedChannelIds.indexOf(draggableChannelId) !== -1) {\n            const categories = getCategoriesForCurrentTeam(state);\n            const displayedChannels = getDisplayedChannels(state);\n\n            let channelsToMove = [draggableChannelId];\n\n            // Filter out channels that can't go in the category specified\n            const targetCategory = categories.find((category) => category.id === categoryId);\n            channelsToMove = multiSelectedChannelIds.filter((channelId) => {\n                const selectedChannel = displayedChannels.find((channel) => channelId === channel.id);\n                const isDMGM = selectedChannel?.type === General.DM_CHANNEL || selectedChannel?.type === General.GM_CHANNEL;\n                return targetCategory?.type === CategoryTypes.CUSTOM || targetCategory?.type === CategoryTypes.FAVORITES || (isDMGM && targetCategory?.type === CategoryTypes.DIRECT_MESSAGES) || (!isDMGM && targetCategory?.type !== CategoryTypes.DIRECT_MESSAGES);\n            });\n\n            // Reorder such that the channels move in the order that they appear in the sidebar\n            const displayedChannelIds = displayedChannels.map((channel) => channel.id);\n            channelsToMove.sort((a, b) => displayedChannelIds.indexOf(a) - displayedChannelIds.indexOf(b));\n\n            // Remove selection from channels that were moved\n            channelsToMove.forEach((channelId) => dispatch(multiSelectChannelAdd(channelId)));\n            channelIds = channelsToMove;\n        } else {\n            channelIds = [draggableChannelId];\n        }\n\n        const newIndex = adjustTargetIndexForMove(state, categoryId, channelIds, targetIndex, draggableChannelId);\n        return dispatch(moveChannelsToCategory(categoryId, channelIds, newIndex, setManualSorting));\n    };\n}\n\nexport function adjustTargetIndexForMove(state: GlobalState, categoryId: string, channelIds: string[], targetIndex: number, draggableChannelId: string) {\n    if (targetIndex === 0) {\n        // The channel is being placed first, so there's nothing above that could affect the index\n        return 0;\n    }\n\n    const category = getCategory(state, categoryId);\n    const filteredChannelIds = makeGetChannelIdsForCategory()(state, category);\n\n    // When dragging multiple channels, we don't actually remove all of them from the list as react-beautiful-dnd doesn't support that\n    // Account for channels removed above the insert point, except the one currently being dragged which is already accounted for by react-beautiful-dnd\n    const removedChannelsAboveInsert = filteredChannelIds.filter((channel, index) => channel !== draggableChannelId && channelIds.indexOf(channel) !== -1 && index <= targetIndex);\n    const shiftedIndex = targetIndex - removedChannelsAboveInsert.length;\n\n    if (category.channel_ids.length === filteredChannelIds.length) {\n        // There are no archived channels in the category, so the shiftedIndex will be correct\n        return shiftedIndex;\n    }\n\n    const updatedChannelIds = insertMultipleWithoutDuplicates(filteredChannelIds, channelIds, shiftedIndex);\n\n    // After \"moving\" the channel in the sidebar, find what channel comes above it\n    const previousChannelId = updatedChannelIds[updatedChannelIds.indexOf(channelIds[0]) - 1];\n\n    // We want the channel to still be below that channel, so place the new index below it\n    let newIndex = category.channel_ids.indexOf(previousChannelId) + 1;\n\n    // If the channel is moving downwards, then the target index will need to be reduced by one to account for\n    // the channel being removed. For example, if we're moving channelA from [channelA, channelB, channelC] to\n    // [channelB, channelA, channelC], newIndex would currently be 2 (which comes after channelB), but we need\n    // it to be 1 (which comes after channelB once channelA is removed).\n    const sourceIndex = category.channel_ids.indexOf(channelIds[0]);\n    if (sourceIndex !== -1 && sourceIndex < newIndex) {\n        newIndex -= 1;\n    }\n\n    return Math.max(newIndex - removedChannelsAboveInsert.length, 0);\n}\n\nexport function clearChannelSelection(): ActionFunc<unknown, GlobalState> {\n    return (dispatch, getState) => {\n        const state = getState();\n\n        if (state.views.channelSidebar.multiSelectedChannelIds.length === 0) {\n            // No selection to clear\n            return {data: false};\n        }\n\n        dispatch({\n            type: ActionTypes.MULTISELECT_CHANNEL_CLEAR,\n        });\n\n        return {data: true};\n    };\n}\n\nexport function multiSelectChannelAdd(channelId: string): ActionFunc<unknown, GlobalState> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const multiSelectedChannelIds = state.views.channelSidebar.multiSelectedChannelIds;\n\n        // Nothing already selected, so we include the active channel\n        if (!multiSelectedChannelIds.length) {\n            const currentChannel = getCurrentChannelId(state);\n            dispatch({\n                type: ActionTypes.MULTISELECT_CHANNEL,\n                data: currentChannel,\n            });\n        }\n\n        return dispatch({\n            type: ActionTypes.MULTISELECT_CHANNEL_ADD,\n            data: channelId,\n        });\n    };\n}\n\n// Much of this logic was pulled from the react-beautiful-dnd sample multiselect implementation\n// Found here: https://github.com/atlassian/react-beautiful-dnd/tree/master/stories/src/multi-drag\nexport function multiSelectChannelTo(channelId: string): ActionFunc<unknown, GlobalState> {\n    return (dispatch, getState) => {\n        const state = getState();\n        const multiSelectedChannelIds = state.views.channelSidebar.multiSelectedChannelIds;\n        let lastSelected = state.views.channelSidebar.lastSelectedChannel;\n\n        // Nothing already selected, so start with the active channel\n        if (!multiSelectedChannelIds.length) {\n            const currentChannel = getCurrentChannelId(state);\n            dispatch({\n                type: ActionTypes.MULTISELECT_CHANNEL,\n                data: currentChannel,\n            });\n            lastSelected = currentChannel;\n        }\n\n        const allChannelsIdsInOrder = getChannelsInCategoryOrder(state).map((channel) => channel.id);\n        const indexOfNew: number = allChannelsIdsInOrder.indexOf(channelId);\n        const indexOfLast: number = allChannelsIdsInOrder.indexOf(lastSelected);\n\n        // multi selecting in the same column\n        // need to select everything between the last index and the current index inclusive\n\n        // nothing to do here\n        if (indexOfNew === indexOfLast) {\n            return {data: false};\n        }\n\n        const start: number = Math.min(indexOfLast, indexOfNew);\n        const end: number = Math.max(indexOfLast, indexOfNew);\n\n        const inBetween = allChannelsIdsInOrder.slice(start, end + 1);\n\n        // everything inbetween needs to have it's selection toggled.\n        // with the exception of the start and end values which will always be selected\n\n        return dispatch({\n            type: ActionTypes.MULTISELECT_CHANNEL_TO,\n            data: inBetween,\n        });\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport type {IntlShape} from 'react-intl';\nimport {injectIntl, FormattedMessage} from 'react-intl';\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {Group, SyncablePatch} from '@mattermost/types/groups';\nimport {SyncableType} from '@mattermost/types/groups';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport MultiSelect from 'components/multiselect/multiselect';\nimport type {Value} from 'components/multiselect/multiselect';\n\nimport groupsAvatar from 'images/groups-avatar.png';\nimport Constants from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\nconst GROUPS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 10;\n\ntype GroupValue = (Group & Value);\n\nexport type Props = {\n    currentChannelName: string;\n    currentChannelId: string;\n    intl: IntlShape;\n    teamID: string;\n    searchTerm: string;\n    groups: Group[];\n    excludeGroups?: Group[];\n    includeGroups?: Group[];\n    onExited: () => void;\n    skipCommit?: boolean;\n    onAddCallback?: (groupIDs: string[]) => void;\n\n    actions: {\n        getGroupsNotAssociatedToChannel: (channelID: string, q?: string, page?: number, perPage?: number, filterParentTeamPermitted?: boolean) => Promise<ActionResult>;\n        setModalSearchTerm: (term: string) => void;\n        linkGroupSyncable: (groupID: string, syncableID: string, syncableType: SyncableType, patch: Partial<SyncablePatch>) => Promise<ActionResult>;\n        getAllGroupsAssociatedToChannel: (channelID: string, filterAllowReference: boolean, includeMemberCount: boolean) => Promise<ActionResult>;\n        getTeam: (teamId: string) => Promise<ActionResult>;\n        getAllGroupsAssociatedToTeam: (teamID: string, filterAllowReference: boolean, includeMemberCount: boolean) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    values: GroupValue[];\n    show: boolean;\n    search: boolean;\n    saving: boolean;\n    addError: string | null;\n    loadingGroups: boolean;\n}\n\nexport class AddGroupsToChannelModal extends React.PureComponent<Props, State> {\n    private searchTimeoutId: number;\n    private selectedItemRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loadingGroups: true,\n        };\n\n        this.selectedItemRef = React.createRef();\n    }\n\n    componentDidMount() {\n        Promise.all([\n            this.props.actions.getTeam(this.props.teamID),\n            this.props.actions.getAllGroupsAssociatedToTeam(this.props.teamID, false, true),\n            this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, '', 0, GROUPS_PER_PAGE + 1, true),\n            this.props.actions.getAllGroupsAssociatedToChannel(this.props.currentChannelId, false, true),\n        ]).then(() => {\n            this.setGroupsLoadingState(false);\n        });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.searchTerm !== prevProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = window.setTimeout(\n                async () => {\n                    this.setGroupsLoadingState(true);\n                    await this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, searchTerm, undefined, undefined, true);\n                    this.setGroupsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    };\n\n    handleResponse = (err?: ServerError) => {\n        let addError = null;\n        if (err && err.message) {\n            addError = err.message;\n        }\n\n        this.setState({\n            saving: false,\n            addError,\n        });\n    };\n\n    handleSubmit = async () => {\n        const groupIDs = this.state.values.map((v) => v.id);\n        if (groupIDs.length === 0) {\n            return;\n        }\n\n        if (this.props.skipCommit) {\n            if (this.props.onAddCallback) {\n                this.props.onAddCallback(groupIDs);\n            }\n            this.handleHide();\n            return;\n        }\n\n        this.setState({saving: true});\n\n        await Promise.all(groupIDs.map(async (groupID) => {\n            const {error} = await this.props.actions.linkGroupSyncable(groupID, this.props.currentChannelId, SyncableType.Channel, {auto_add: true});\n            this.handleResponse(error);\n            if (!error) {\n                this.handleHide();\n            }\n        }));\n    };\n\n    addValue = (value: GroupValue) => {\n        const values = Object.assign([], this.state.values);\n        const userIds = values.map((v: Group) => v.id);\n        if (value && value.id && userIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    };\n\n    setGroupsLoadingState = (loadingState: boolean) => {\n        this.setState({\n            loadingGroups: loadingState,\n        });\n    };\n\n    handlePageChange = (page: number, prevPage: number) => {\n        if (page > prevPage) {\n            this.setGroupsLoadingState(true);\n            this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, this.props.searchTerm, page, GROUPS_PER_PAGE + 1, true).then(() => {\n                this.setGroupsLoadingState(false);\n            });\n        }\n    };\n\n    handleDelete = (values: GroupValue[]) => {\n        this.setState({values});\n    };\n\n    search = (term: string) => {\n        this.props.actions.setModalSearchTerm(term);\n    };\n\n    renderOption = (option: GroupValue, isSelected: boolean, onAdd: (value: GroupValue) => void, onMouseMove?: (value: GroupValue) => void) => {\n        const rowSelected = isSelected ? 'more-modal__row--selected' : '';\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? this.selectedItemRef : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => (onMouseMove ? onMouseMove(option) : undefined)}\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='more-modal__name'>\n                        {option.display_name}{'\\u00A0-\\u00A0'}<span className='more-modal__name_sub'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: option.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='icon icon-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    renderValue(props: { data: Partial<Value> }) {\n        return props.data.display_name;\n    }\n\n    render() {\n        const numRemainingText = (\n            <div id='numGroupsRemaining'>\n                <FormattedMessage\n                    id='multiselect.numGroupsRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {group} other {groups}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n        let groupsToShow = this.props.groups;\n        if (this.props.excludeGroups) {\n            const hasGroup = (og: Group) => !this.props.excludeGroups!.find((g) => g.id === og.id);\n            groupsToShow = groupsToShow.filter(hasGroup);\n        }\n        if (this.props.includeGroups) {\n            const hasGroup = (og: Group) => this.props.includeGroups!.find((g) => g.id === og.id);\n            groupsToShow = [...groupsToShow, ...this.props.includeGroups.filter(hasGroup)];\n        }\n        const groupsToShowValues = groupsToShow.map((group) => {\n            return {label: group.display_name, value: group.id, ...group};\n        });\n\n        return (\n            <Modal\n                id='addGroupsToChannelModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.props.onExited}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='add_groups_to_channel.title'\n                            defaultMessage='Add New Groups to {channelName} Channel'\n                            values={{\n                                channelName: (\n                                    <strong>{this.props.currentChannelName}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addGroupsToChannelKey'\n                        options={groupsToShowValues}\n                        optionRenderer={this.renderOption}\n                        intl={this.props.intl}\n                        selectedItemRef={this.selectedItemRef}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={GROUPS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loadingGroups}\n                        placeholderText={localizeMessage('multiselect.addGroupsPlaceholder', 'Search and add groups')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(AddGroupsToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Group} from '@mattermost/types/groups';\n\nimport {getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel, getAllGroupsAssociatedToTeam} from 'mattermost-redux/actions/groups';\nimport {getTeam} from 'mattermost-redux/actions/teams';\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel} from 'mattermost-redux/selectors/entities/groups';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport type {GlobalState} from 'types/store';\n\nimport AddGroupsToChannelModal from './add_groups_to_channel_modal';\n\ntype OwnProps = {\n    channel: Channel;\n    skipCommit: boolean;\n    onAddCallback: (groupIDs: string[]) => void;\n    excludeGroups: Group[];\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const channel = ownProps.channel || getCurrentChannel(state) || {};\n\n    let groups = selectGroupsNotAssociatedToChannel(state, channel.id, channel.team_id);\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n\n    return {\n        currentChannelName: channel.display_name,\n        currentChannelId: channel.id,\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n        teamID: channel.team_id,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getGroupsNotAssociatedToChannel,\n            setModalSearchTerm,\n            linkGroupSyncable,\n            getAllGroupsAssociatedToChannel,\n            getTeam,\n            getAllGroupsAssociatedToTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGroupsToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {SVGProps} from 'react';\n\nconst SvgComponent = (props: SVGProps<SVGSVGElement>) => (\n    <svg\n        width={140}\n        height={141}\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        {...props}\n    >\n        <path\n            opacity={0.4}\n            d='M37.593 38.008c4.754-4.815 10.754-7.295 17.989-7.428 7.101.133 13.065 2.601 17.892 7.428 4.815 4.827 7.295 10.791 7.428 17.892-.133 7.235-2.601 13.223-7.428 17.99-4.827 4.754-10.791 7.27-17.892 7.512-7.235-.254-13.223-2.758-17.99-7.513-4.754-4.766-7.258-10.766-7.512-18 .254-7.102 2.758-13.066 7.513-17.881Z'\n            fill='#fff'\n        />\n        <path\n            d='M78.887 51.382c-2.151-6.992-6.225-12.225-12.226-15.69-6.001-3.465-12.57-4.376-19.701-2.743-3.9.995-7.297 2.717-10.22 5.162 3.269-3.567 7.415-6.037 12.428-7.416 7.13-1.633 13.732-.703 19.787 2.793s10.161 8.748 12.313 15.74c1.323 5.037 1.257 9.862-.21 14.47-1.454 4.614-4.066 8.49-7.84 11.611 2.833-3.087 4.783-6.713 5.844-10.894 1.05-4.187.991-8.522-.175-13.033Z'\n            fill='#000'\n            fillOpacity={0.4}\n        />\n        <path\n            d='M86.76 53.929c-.508-7.506-3.553-14.097-9.125-19.774-6.346-6.05-13.67-9.08-21.974-9.08-8.303 0-15.616 3.03-21.961 9.08-6.08 6.315-9.126 13.591-9.126 21.855 0 8.262 3.046 15.551 9.126 21.854 5.826 5.556 12.485 8.551 19.967 8.984 7.481.445 14.383-1.611 20.728-6.146l4.75 4.727 6.08-6.05-4.75-4.727c4.69-6.302 6.78-13.218 6.285-20.723Zm-13.126 19.87c-4.823 4.726-10.781 7.228-17.876 7.468-7.228-.252-13.21-2.742-17.973-7.469-4.75-4.727-7.252-10.692-7.506-17.885.254-7.06 2.756-12.99 7.506-17.789 4.75-4.787 10.745-7.252 17.973-7.385 7.095.133 13.053 2.586 17.876 7.385 4.81 4.8 7.288 10.73 7.421 17.79-.133 7.192-2.599 13.157-7.421 17.884Z'\n            fill='#BABEC9'\n        />\n        <path\n            d='M106.202 114.187c-1.567.449-2.728.291-3.482-.472L78.06 86.651c-.753-.762-1.064-1.743-.945-2.954.12-1.211.874-2.567 2.262-4.093 1.507-1.393 2.847-2.192 4.044-2.385 1.196-.194 2.165.157 2.92 1.053l26.921 24.957c.753.763.873 1.901.37 3.427-.502 1.525-1.447 3.051-2.823 4.577-1.496 1.526-3.039 2.506-4.607 2.954Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='m108.007 98.343-10.08 10.164-12.154-13.34 8.914-9.106 13.32 12.282Z'\n            fill='#7A5600'\n        />\n    </svg>\n);\n\nexport default SvgComponent;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage, defineMessages, injectIntl, type WrappedComponentProps} from 'react-intl';\n\nimport {ArchiveOutlineIcon, CheckIcon, ChevronDownIcon, GlobeIcon, LockOutlineIcon, AccountOutlineIcon, GlobeCheckedIcon} from '@mattermost/compass-icons/components';\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {isPrivateChannel} from 'mattermost-redux/utils/channel_utils';\n\nimport MagnifyingGlassSVG from 'components/common/svg_images_components/magnifying_glass_svg';\nimport LoadingScreen from 'components/loading_screen';\nimport * as Menu from 'components/menu';\nimport QuickInput from 'components/quick_input';\nimport SharedChannelIndicator from 'components/shared_channel_indicator';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {isArchivedChannel} from 'utils/channel_utils';\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport * as UserAgent from 'utils/user_agent';\nimport {localizeMessage, localizeAndFormatMessage} from 'utils/utils';\n\nimport type {FilterType} from './browse_channels/browse_channels';\nimport {Filter} from './browse_channels/browse_channels';\n\nconst NEXT_BUTTON_TIMEOUT_MILLISECONDS = 500;\n\ninterface Props extends WrappedComponentProps {\n    channels: Channel[];\n    channelsPerPage: number;\n    nextPage: (page: number) => void;\n    isSearch: boolean;\n    search: (term: string) => void;\n    handleJoin: (channel: Channel, done: () => void) => void;\n    noResultsText: JSX.Element;\n    changeFilter: (filter: FilterType) => void;\n    filter: FilterType;\n    myChannelMemberships: RelationOneToOne<Channel, ChannelMembership>;\n    closeModal: (modalId: string) => void;\n    hideJoinedChannelsPreference: (shouldHideJoinedChannels: boolean) => void;\n    rememberHideJoinedChannelsChecked: boolean;\n    canShowArchivedChannels?: boolean;\n    loading?: boolean;\n    channelsMemberCount?: Record<string, number>;\n}\n\ntype State = {\n    joiningChannel: string;\n    page: number;\n    nextDisabled: boolean;\n    channelSearchValue: string;\n    isSearch?: boolean;\n}\n\nexport class SearchableChannelList extends React.PureComponent<Props, State> {\n    private nextTimeoutId: number | NodeJS.Timeout;\n    private filter: React.RefObject<HTMLInputElement>;\n    private channelListScroll: React.RefObject<HTMLDivElement>;\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        return {isSearch: props.isSearch, page: props.isSearch && !state.isSearch ? 0 : state.page};\n    }\n\n    constructor(props: Props) {\n        super(props);\n\n        this.nextTimeoutId = 0;\n\n        this.state = {\n            joiningChannel: '',\n            page: 0,\n            nextDisabled: false,\n            channelSearchValue: '',\n        };\n\n        this.filter = React.createRef();\n        this.channelListScroll = React.createRef();\n    }\n\n    componentDidMount() {\n        // only focus the search box on desktop so that we don't cause the keyboard to open on mobile\n        if (!UserAgent.isMobile() && this.filter.current) {\n            this.filter.current.focus();\n        }\n        document.addEventListener('keydown', this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown);\n    }\n\n    onKeyDown = (e: KeyboardEvent) => {\n        const target = e.target as HTMLElement;\n        const isEnterKeyPressed = isKeyPressed(e, Constants.KeyCodes.ENTER);\n        if (isEnterKeyPressed && (e.shiftKey || e.ctrlKey || e.altKey)) {\n            return;\n        }\n        if (isEnterKeyPressed && target?.classList.contains('more-modal__row')) {\n            target.click();\n        }\n    };\n\n    handleJoin = (channel: Channel, e: React.MouseEvent) => {\n        e.stopPropagation();\n        this.setState({joiningChannel: channel.id});\n        this.props.handleJoin(\n            channel,\n            () => {\n                this.setState({joiningChannel: ''});\n            },\n        );\n        if (this.isMemberOfChannel(channel.id)) {\n            this.props.closeModal(ModalIdentifiers.MORE_CHANNELS);\n        }\n    };\n\n    isMemberOfChannel(channelId: string) {\n        return this.props.myChannelMemberships[channelId];\n    }\n\n    createChannelRow = (channel: Channel) => {\n        const ariaLabel = `${channel.display_name}, ${channel.purpose}`.toLowerCase();\n        let channelTypeIcon;\n\n        if (isArchivedChannel(channel)) {\n            channelTypeIcon = <ArchiveOutlineIcon size={18}/>;\n        } else if (isPrivateChannel(channel)) {\n            channelTypeIcon = <LockOutlineIcon size={18}/>;\n        } else {\n            channelTypeIcon = <GlobeIcon size={18}/>;\n        }\n        let memberCount = 0;\n        if (this.props.channelsMemberCount?.[channel.id]) {\n            memberCount = this.props.channelsMemberCount[channel.id];\n        }\n\n        const membershipIndicator = this.isMemberOfChannel(channel.id) ? (\n            <div\n                id='membershipIndicatorContainer'\n                aria-label={localizeMessage('more_channels.membership_indicator', 'Membership Indicator: Joined')}\n            >\n                <CheckIcon size={14}/>\n                <FormattedMessage\n                    id={'more_channels.joined'}\n                    defaultMessage={'Joined'}\n                />\n            </div>\n        ) : null;\n\n        const channelPurposeContainerAriaLabel = localizeAndFormatMessage(\n            messages.channelPurpose.id,\n            messages.channelPurpose.defaultMessage,\n            {memberCount, channelPurpose: channel.purpose || ''},\n        );\n\n        const channelPurposeContainer = (\n            <div\n                id='channelPurposeContainer'\n                aria-label={channelPurposeContainerAriaLabel}\n            >\n                {membershipIndicator}\n                {membershipIndicator ? <span className='dot'/> : null}\n                <AccountOutlineIcon size={14}/>\n                <span data-testid={`channelMemberCount-${channel.name}`} >{memberCount}</span>\n                {channel.purpose.length > 0 ? <span className='dot'/> : null}\n                <span className='more-modal__description'>{channel.purpose}</span>\n            </div>\n        );\n\n        const joinViewChannelButtonClass = classNames('btn btn-sm', {\n            'btn-secondary outlineButton': this.isMemberOfChannel(channel.id),\n            'btn-primary primaryButton': !this.isMemberOfChannel(channel.id),\n        });\n\n        const joinViewChannelButton = (\n            <button\n                id='joinViewChannelButton'\n                onClick={(e) => this.handleJoin(channel, e)}\n                className={joinViewChannelButtonClass}\n                disabled={Boolean(this.state.joiningChannel)}\n                tabIndex={-1}\n                aria-label={this.isMemberOfChannel(channel.id) ? localizeMessage('more_channels.view', 'View') : localizeMessage('joinChannel.JoinButton', 'Join')}\n            >\n                <LoadingWrapper\n                    loading={this.state.joiningChannel === channel.id}\n                    text={localizeMessage('joinChannel.joiningButton', 'Joining...')}\n                >\n                    <FormattedMessage\n                        id={this.isMemberOfChannel(channel.id) ? 'more_channels.view' : 'joinChannel.JoinButton'}\n                        defaultMessage={this.isMemberOfChannel(channel.id) ? 'View' : 'Join'}\n                    />\n                </LoadingWrapper>\n            </button>\n        );\n\n        const sharedChannelIcon = channel.shared ? (\n            <SharedChannelIndicator\n                className='shared-channel-icon'\n                channelType={channel.type}\n                withTooltip={true}\n            />\n        ) : null;\n\n        return (\n            <div\n                className='more-modal__row'\n                key={channel.id}\n                id={`ChannelRow-${channel.name}`}\n                data-testid={`ChannelRow-${channel.name}`}\n                aria-label={ariaLabel}\n                onClick={(e) => this.handleJoin(channel, e)}\n                tabIndex={0}\n            >\n                <div className='more-modal__details'>\n                    <div className='style--none more-modal__name'>\n                        {channelTypeIcon}\n                        <span id='channelName'>{channel.display_name}</span>\n                        {sharedChannelIcon}\n                    </div>\n                    {channelPurposeContainer}\n                </div>\n                <div className='more-modal__actions'>\n                    {joinViewChannelButton}\n                </div>\n            </div>\n        );\n    };\n\n    nextPage = (e: React.MouseEvent) => {\n        e.preventDefault();\n        this.setState({page: this.state.page + 1, nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT_MILLISECONDS);\n        this.props.nextPage(this.state.page + 1);\n        this.channelListScroll.current?.scrollTo({top: 0});\n    };\n\n    previousPage = (e: React.MouseEvent) => {\n        e.preventDefault();\n        this.setState({page: this.state.page - 1});\n        this.channelListScroll.current?.scrollTo({top: 0});\n    };\n\n    doSearch = () => {\n        this.props.search(this.state.channelSearchValue);\n        if (this.state.channelSearchValue === '') {\n            this.setState({page: 0});\n        }\n    };\n    handleChange = (e?: React.FormEvent<HTMLInputElement>) => {\n        if (e?.currentTarget) {\n            this.setState({channelSearchValue: e?.currentTarget.value}, () => this.doSearch());\n        }\n    };\n    handleClear = () => {\n        this.setState({channelSearchValue: ''}, () => this.doSearch());\n    };\n    handleChecked = () => {\n        // If it was checked, and now we're unchecking it, clear the preference\n        if (this.props.rememberHideJoinedChannelsChecked) {\n            this.props.hideJoinedChannelsPreference(false);\n        } else {\n            this.props.hideJoinedChannelsPreference(true);\n        }\n    };\n    getEmptyStateMessage = () => {\n        if (this.state.channelSearchValue.length > 0) {\n            return (\n                <FormattedMessage\n                    id='more_channels.noMore'\n                    tagName='strong'\n                    defaultMessage='No results for {text}'\n                    values={{text: this.state.channelSearchValue}}\n                />\n            );\n        }\n        switch (this.props.filter) {\n        case Filter.Archived:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noArchived'}\n                    tagName='strong'\n                    defaultMessage={'No archived channels'}\n                />\n            );\n        case Filter.Private:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noPrivate'}\n                    tagName='strong'\n                    defaultMessage={'No private channels'}\n                />\n            );\n        case Filter.Public:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noPublic'}\n                    tagName='strong'\n                    defaultMessage={'No public channels'}\n                />\n            );\n        default:\n            return (\n                <FormattedMessage\n                    id={'more_channels.noChannels'}\n                    tagName='strong'\n                    defaultMessage={'No channels'}\n                />\n            );\n        }\n    };\n    getFilterLabel = () => {\n        switch (this.props.filter) {\n        case Filter.Archived:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_archived_channels'\n                    defaultMessage='Channel Type: Archived'\n                />\n            );\n        case Filter.Public:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_public_channels'\n                    defaultMessage='Channel Type: Public'\n                />\n            );\n        case Filter.Private:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_private_channels'\n                    defaultMessage='Channel Type: Private'\n                />\n            );\n        default:\n            return (\n                <FormattedMessage\n                    id='more_channels.show_all_channels'\n                    defaultMessage='Channel Type: All'\n                />\n            );\n        }\n    };\n\n    render() {\n        const channels = this.props.channels;\n        let listContent;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.loading && channels.length === 0) {\n            listContent = <LoadingScreen/>;\n        } else if (channels.length === 0) {\n            listContent = (\n                <div\n                    className='no-channel-message'\n                    aria-label={this.state.channelSearchValue.length > 0 ? localizeAndFormatMessage(messages.noMore.id, messages.noMore.defaultMessage, {text: this.state.channelSearchValue}) : localizeMessage('widgets.channels_input.empty', 'No channels found')\n                    }\n                >\n                    <MagnifyingGlassSVG/>\n                    <h3 className='primary-message'>\n                        {this.getEmptyStateMessage()}\n                    </h3>\n                    {this.props.noResultsText}\n                </div>\n            );\n        } else {\n            const pageStart = this.state.page * this.props.channelsPerPage;\n            const pageEnd = pageStart + this.props.channelsPerPage;\n            const channelsToDisplay = this.props.channels.slice(pageStart, pageEnd);\n            listContent = channelsToDisplay.map(this.createChannelRow);\n\n            if (channelsToDisplay.length >= this.props.channelsPerPage && pageEnd < this.props.channels.length) {\n                nextButton = (\n                    <button\n                        className='btn btn-sm btn-tertiary filter-control filter-control__next'\n                        onClick={this.nextPage}\n                        disabled={this.state.nextDisabled}\n                        aria-label={localizeMessage('more_channels.next', 'Next')}\n                    >\n                        <FormattedMessage\n                            id='more_channels.next'\n                            defaultMessage='Next'\n                        />\n                    </button>\n                );\n            }\n\n            if (this.state.page > 0) {\n                previousButton = (\n                    <button\n                        className='btn btn-sm btn-tertiary filter-control filter-control__prev'\n                        onClick={this.previousPage}\n                        aria-label={localizeMessage('more_channels.prev', 'Previous')}\n                    >\n                        <FormattedMessage\n                            id='more_channels.prev'\n                            defaultMessage='Previous'\n                        />\n                    </button>\n                );\n            }\n        }\n\n        const input = (\n            <div className='filter-row filter-row--full'>\n                <span\n                    id='searchIcon'\n                    aria-hidden='true'\n                >\n                    <i className='icon icon-magnify'/>\n                </span>\n                <QuickInput\n                    id='searchChannelsTextbox'\n                    ref={this.filter}\n                    className='form-control filter-textbox'\n                    placeholder={this.props.intl.formatMessage({id: 'filtered_channels_list.search', defaultMessage: 'Search channels'})}\n                    onInput={this.handleChange}\n                    clearable={true}\n                    onClear={this.handleClear}\n                    value={this.state.channelSearchValue}\n                    aria-label={localizeMessage('filtered_channels_list.search', 'Search Channels')}\n                />\n            </div>\n        );\n\n        const checkIcon = (\n            <CheckIcon\n                size={18}\n                color={'var(--button-bg)'}\n            />\n        );\n        const channelDropdownItems = [\n            <Menu.Item\n                key='channelsMoreDropdownAll'\n                id='channelsMoreDropdownAll'\n                onClick={() => this.props.changeFilter(Filter.All)}\n                leadingElement={<GlobeCheckedIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.all'\n                        defaultMessage='All channel types'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.All ? checkIcon : null}\n                aria-label={localizeMessage('suggestion.all', 'All channel types')}\n            />,\n            <Menu.Item\n                key='channelsMoreDropdownPublic'\n                id='channelsMoreDropdownPublic'\n                onClick={() => this.props.changeFilter(Filter.Public)}\n                leadingElement={<GlobeIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.public'\n                        defaultMessage='Public channels'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.Public ? checkIcon : null}\n                aria-label={localizeMessage('suggestion.public', 'Public channels')}\n            />,\n            <Menu.Item\n                key='channelsMoreDropdownPrivate'\n                id='channelsMoreDropdownPrivate'\n                onClick={() => this.props.changeFilter(Filter.Private)}\n                leadingElement={<LockOutlineIcon size={16}/>}\n                labels={\n                    <FormattedMessage\n                        id='suggestion.private'\n                        defaultMessage='Private channels'\n                    />\n                }\n                trailingElements={this.props.filter === Filter.Private ? checkIcon : null}\n                aria-label={localizeMessage('suggestion.private', 'Private channels')}\n            />,\n        ];\n\n        if (this.props.canShowArchivedChannels) {\n            channelDropdownItems.push(\n                <Menu.Separator key='channelsMoreDropdownSeparator'/>,\n                <Menu.Item\n                    key='channelsMoreDropdownArchived'\n                    id='channelsMoreDropdownArchived'\n                    onClick={() => this.props.changeFilter(Filter.Archived)}\n                    leadingElement={<ArchiveOutlineIcon size={16}/>}\n                    labels={\n                        <FormattedMessage\n                            id='suggestion.archive'\n                            defaultMessage='Archived channels'\n                        />\n                    }\n                    trailingElements={this.props.filter === Filter.Archived ? checkIcon : null}\n                    aria-label={localizeMessage('suggestion.archive', 'Archived channels')}\n                />,\n            );\n        }\n        const menuButton = (\n            <>\n                {this.getFilterLabel()}\n                <ChevronDownIcon\n                    color={'rgba(var(--center-channel-color-rgb), 0.64)'}\n                    size={16}\n                />\n            </>\n        );\n        const channelDropdown = (\n            <Menu.Container\n                menuButton={{\n                    id: 'menuWrapper',\n                    children: menuButton,\n                }}\n                menu={{\n                    id: 'browseChannelsDropdown',\n                    'aria-label': localizeMessage('more_channels.title', 'Browse channels'),\n                }}\n            >\n                {channelDropdownItems.map((item) => item)}\n            </Menu.Container >\n        );\n\n        const hideJoinedButtonClass = classNames('get-app__checkbox', {checked: this.props.rememberHideJoinedChannelsChecked});\n        const hideJoinedPreferenceCheckbox = (\n            <div\n                id={'hideJoinedPreferenceCheckbox'}\n                onClick={this.handleChecked}\n            >\n                <button\n                    className={hideJoinedButtonClass}\n                    aria-label={this.props.rememberHideJoinedChannelsChecked ? localizeMessage('more_channels.hide_joined_checked', 'Hide joined channels checkbox, checked') : localizeMessage('more_channels.hide_joined_not_checked', 'Hide joined channels checkbox, not checked')}\n                >\n                    {this.props.rememberHideJoinedChannelsChecked ? <CheckboxCheckedIcon/> : null}\n                </button>\n                <FormattedMessage\n                    id='more_channels.hide_joined'\n                    defaultMessage='Hide Joined'\n                />\n            </div>\n        );\n\n        let channelCountLabel;\n        if (channels.length === 0) {\n            channelCountLabel = localizeMessage('more_channels.count_zero', '0 Results');\n        } else if (channels.length === 1) {\n            channelCountLabel = localizeMessage('more_channels.count_one', '1 Result');\n        } else if (channels.length > 1) {\n            channelCountLabel = localizeAndFormatMessage(messages.channelCount.id, messages.channelCount.defaultMessage, {count: channels.length});\n        } else {\n            channelCountLabel = localizeMessage('more_channels.count_zero', '0 Results');\n        }\n\n        const dropDownContainer = (\n            <div className='more-modal__dropdown'>\n                <span id='channelCountLabel'>{channelCountLabel}</span>\n                <div id='modalPreferenceContainer'>\n                    {channelDropdown}\n                    {hideJoinedPreferenceCheckbox}\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='filtered-user-list'>\n                {input}\n                {dropDownContainer}\n                <div\n                    role='search'\n                    className='more-modal__list'\n                    tabIndex={-1}\n                >\n                    <div\n                        id='moreChannelsList'\n                        tabIndex={-1}\n                        ref={this.channelListScroll}\n                    >\n                        {listContent}\n                    </div>\n                </div>\n                <div className='filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst messages = defineMessages({\n    channelCount: {\n        id: 'more_channels.count',\n        defaultMessage: '{count} Results',\n    },\n    channelPurpose: {\n        id: 'more_channels.channel_purpose',\n        defaultMessage: 'Channel Information: Membership Indicator: Joined, Member count {memberCount} , Purpose: {channelPurpose}',\n    },\n    noMore: {\n        id: 'more_channels.noMore',\n        defaultMessage: 'No results for {text}',\n    },\n});\n\nexport default injectIntl(SearchableChannelList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Channel, ChannelMembership, ChannelSearchOpts, ChannelsWithTotalCount} from '@mattermost/types/channels';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport LoadingScreen from 'components/loading_screen';\nimport NewChannelModal from 'components/new_channel_modal/new_channel_modal';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport SearchableChannelList from 'components/searchable_channel_list';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants, {ModalIdentifiers, RHSStates, StoragePrefixes} from 'utils/constants';\nimport {getRelativeChannelURL} from 'utils/url';\nimport {localizeMessage} from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\nimport type {RhsState} from 'types/store/rhs';\n\nimport './browse_channels.scss';\n\nconst CHANNELS_CHUNK_SIZE = 50;\nconst CHANNELS_PER_PAGE = 50;\nconst SEARCH_TIMEOUT_MILLISECONDS = 100;\nexport enum Filter {\n    All = 'All',\n    Public = 'Public',\n    Private = 'Private',\n    Archived = 'Archived',\n}\n\nexport type FilterType = keyof typeof Filter;\n\ntype Actions = {\n    getChannels: (teamId: string, page: number, perPage: number) => Promise<ActionResult<Channel[]>>;\n    getArchivedChannels: (teamId: string, page: number, channelsPerPage: number) => Promise<ActionResult<Channel[]>>;\n    joinChannel: (currentUserId: string, teamId: string, channelId: string) => Promise<ActionResult>;\n    searchAllChannels: (term: string, opts?: ChannelSearchOpts) => Promise<ActionResult<Channel[] | ChannelsWithTotalCount>>;\n    openModal: <P>(modalData: ModalData<P>) => void;\n    closeModal: (modalId: string) => void;\n\n    /*\n     * Function to set a key-value pair in the local storage\n     */\n    setGlobalItem: (name: string, value: string) => void;\n    closeRightHandSide: () => void;\n    getChannelsMemberCount: (channelIds: string[]) => Promise<ActionResult>;\n}\n\nexport type Props = {\n    channels: Channel[];\n    archivedChannels: Channel[];\n    privateChannels: Channel[];\n    currentUserId: string;\n    teamId: string;\n    teamName?: string;\n    channelsRequestStarted?: boolean;\n    canShowArchivedChannels?: boolean;\n    myChannelMemberships: RelationOneToOne<Channel, ChannelMembership>;\n    shouldHideJoinedChannels: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n    channelsMemberCount?: Record<string, number>;\n    actions: Actions;\n}\n\ntype State = {\n    loading: boolean;\n    filter: FilterType;\n    search: boolean;\n    searchedChannels: Channel[];\n    serverError: React.ReactNode | string;\n    searching: boolean;\n    searchTerm: string;\n}\n\nexport default class BrowseChannels extends React.PureComponent<Props, State> {\n    public searchTimeoutId: number;\n    activeChannels: Channel[] = [];\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n            filter: Filter.All,\n            search: false,\n            searchedChannels: [],\n            serverError: null,\n            searching: false,\n            searchTerm: '',\n        };\n    }\n\n    componentDidMount() {\n        if (!this.props.teamId) {\n            this.loadComplete();\n            return;\n        }\n\n        const promises = [\n            this.props.actions.getChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2),\n        ];\n\n        if (this.props.canShowArchivedChannels) {\n            promises.push(this.props.actions.getArchivedChannels(this.props.teamId, 0, CHANNELS_CHUNK_SIZE * 2));\n        }\n\n        Promise.all(promises).then((results) => {\n            const channelIDsForMemberCount = results.flatMap((result) => {\n                return result.data ? result.data.map((channel) => channel.id) : [];\n            },\n            );\n            this.props.privateChannels.forEach((channel) => channelIDsForMemberCount.push(channel.id));\n            if (channelIDsForMemberCount.length > 0) {\n                this.props.actions.getChannelsMemberCount(channelIDsForMemberCount);\n            }\n        });\n        this.loadComplete();\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    };\n\n    handleNewChannel = () => {\n        this.handleExit();\n        this.closeEditRHS();\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.NEW_CHANNEL_MODAL,\n            dialogType: NewChannelModal,\n        });\n    };\n\n    handleExit = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MORE_CHANNELS);\n    };\n\n    closeEditRHS = () => {\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n    };\n\n    onChange = (force: boolean) => {\n        if (this.state.search && !force) {\n            return;\n        }\n\n        this.setState({\n            searchedChannels: [],\n            serverError: null,\n        });\n    };\n\n    nextPage = (page: number) => {\n        this.props.actions.getChannels(this.props.teamId, page + 1, CHANNELS_PER_PAGE).then((result) => {\n            if (result.data && result.data.length > 0) {\n                this.props.actions.getChannelsMemberCount(result.data.map((channel) => channel.id));\n            }\n        });\n    };\n\n    handleJoin = async (channel: Channel, done: () => void) => {\n        const {actions, currentUserId, teamId, teamName} = this.props;\n        let result;\n\n        if (!this.isMemberOfChannel(channel.id)) {\n            result = await actions.joinChannel(currentUserId, teamId, channel.id);\n        }\n\n        if (result?.error) {\n            this.setState({serverError: result.error.message});\n        } else {\n            this.props.actions.getChannelsMemberCount([channel.id]);\n            getHistory().push(getRelativeChannelURL(teamName!, channel.name));\n            this.closeEditRHS();\n        }\n\n        if (done) {\n            done();\n        }\n    };\n\n    search = (term: string) => {\n        clearTimeout(this.searchTimeoutId);\n\n        if (term === '') {\n            this.onChange(true);\n            this.setState({search: false, searchedChannels: [], searching: false, searchTerm: term});\n            this.searchTimeoutId = 0;\n            return;\n        }\n        this.setState({search: true, searching: true, searchTerm: term});\n\n        const searchTimeoutId = window.setTimeout(\n            async () => {\n                try {\n                    const {data} = await this.props.actions.searchAllChannels(term, {team_ids: [this.props.teamId], nonAdminSearch: true, include_deleted: true}) as ActionResult<Channel[]>;\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    if (data) {\n                        const channelIDsForMemberCount = data.map((channel: Channel) => channel.id);\n                        if (channelIDsForMemberCount.length > 0) {\n                            this.props.actions.getChannelsMemberCount(channelIDsForMemberCount);\n                        }\n                        this.setSearchResults(data.filter((channel) => channel.team_id === this.props.teamId));\n                    } else {\n                        this.setState({searchedChannels: [], searching: false});\n                    }\n                } catch (ignoredErr) {\n                    this.setState({searchedChannels: [], searching: false});\n                }\n            },\n            SEARCH_TIMEOUT_MILLISECONDS,\n        );\n\n        this.searchTimeoutId = searchTimeoutId;\n    };\n\n    setSearchResults = (channels: Channel[]) => {\n        // filter out private channels that the user is not a member of\n        let searchedChannels = channels.filter((c) => c.type !== Constants.PRIVATE_CHANNEL || this.isMemberOfChannel(c.id));\n        if (this.state.filter === Filter.Private) {\n            searchedChannels = channels.filter((c) => c.type === Constants.PRIVATE_CHANNEL && this.isMemberOfChannel(c.id));\n        }\n        if (this.state.filter === Filter.Public) {\n            searchedChannels = channels.filter((c) => c.type === Constants.OPEN_CHANNEL && c.delete_at === 0);\n        }\n        if (this.state.filter === Filter.Archived) {\n            searchedChannels = channels.filter((c) => c.delete_at !== 0);\n        }\n        if (this.props.shouldHideJoinedChannels) {\n            searchedChannels = this.getChannelsWithoutJoined(searchedChannels);\n        }\n        this.setState({searchedChannels, searching: false});\n    };\n\n    changeFilter = (filter: FilterType) => {\n        // search again when switching channels to update search results\n        this.search(this.state.searchTerm);\n        this.setState({filter});\n    };\n\n    isMemberOfChannel(channelId: string) {\n        return this.props.myChannelMemberships[channelId];\n    }\n\n    handleShowJoinedChannelsPreference = (shouldHideJoinedChannels: boolean) => {\n        // search again when switching channels to update search results\n        this.search(this.state.searchTerm);\n        this.props.actions.setGlobalItem(StoragePrefixes.HIDE_JOINED_CHANNELS, shouldHideJoinedChannels.toString());\n    };\n\n    getChannelsWithoutJoined = (channelList: Channel[]) => channelList.filter((channel) => !this.isMemberOfChannel(channel.id));\n\n    getActiveChannels = () => {\n        const {channels, archivedChannels, shouldHideJoinedChannels, privateChannels} = this.props;\n        const {search, searchedChannels, filter} = this.state;\n\n        const allChannels = channels.concat(privateChannels).sort((a, b) => a.display_name.localeCompare(b.display_name));\n        const allChannelsWithoutJoined = this.getChannelsWithoutJoined(allChannels);\n        const publicChannelsWithoutJoined = this.getChannelsWithoutJoined(channels);\n        const archivedChannelsWithoutJoined = this.getChannelsWithoutJoined(archivedChannels);\n        const privateChannelsWithoutJoined = this.getChannelsWithoutJoined(privateChannels);\n\n        const filterOptions = {\n            [Filter.All]: shouldHideJoinedChannels ? allChannelsWithoutJoined : allChannels,\n            [Filter.Archived]: shouldHideJoinedChannels ? archivedChannelsWithoutJoined : archivedChannels,\n            [Filter.Private]: shouldHideJoinedChannels ? privateChannelsWithoutJoined : privateChannels,\n            [Filter.Public]: shouldHideJoinedChannels ? publicChannelsWithoutJoined : channels,\n        };\n\n        if (search) {\n            return searchedChannels;\n        }\n\n        return filterOptions[filter] || filterOptions[Filter.All];\n    };\n\n    render() {\n        const {teamId, channelsRequestStarted, shouldHideJoinedChannels} = this.props;\n        const {search, serverError: serverErrorState, searching} = this.state;\n\n        this.activeChannels = this.getActiveChannels();\n\n        let serverError;\n        if (serverErrorState) {\n            serverError =\n                <div className='form-group has-error'><label className='control-label'>{serverErrorState}</label></div>;\n        }\n\n        const createNewChannelButton = (className: string, icon?: JSX.Element) => {\n            const buttonClassName = classNames('btn', className);\n            return (\n                <TeamPermissionGate\n                    teamId={teamId}\n                    permissions={[Permissions.CREATE_PUBLIC_CHANNEL]}\n                >\n                    <button\n                        type='button'\n                        id='createNewChannelButton'\n                        className={buttonClassName}\n                        onClick={this.handleNewChannel}\n                        aria-label={localizeMessage('more_channels.create', 'Create New Channel')}\n                    >\n                        {icon}\n                        <FormattedMessage\n                            id='more_channels.create'\n                            defaultMessage='Create New Channel'\n                        />\n                    </button>\n                </TeamPermissionGate>\n            );\n        };\n\n        const noResultsText = (\n            <>\n                <p className='secondary-message'>\n                    <FormattedMessage\n                        id='more_channels.searchError'\n                        defaultMessage='Try searching different keywords, checking for typos or adjusting the filters.'\n                    />\n                </p>\n                {createNewChannelButton('btn-primary', <i className='icon-plus'/>)}\n            </>\n        );\n\n        const body = this.state.loading ? <LoadingScreen/> : (\n            <React.Fragment>\n                <SearchableChannelList\n                    channels={this.activeChannels}\n                    channelsPerPage={CHANNELS_PER_PAGE}\n                    nextPage={this.nextPage}\n                    isSearch={search}\n                    search={this.search}\n                    handleJoin={this.handleJoin}\n                    noResultsText={noResultsText}\n                    loading={search ? searching : channelsRequestStarted}\n                    changeFilter={this.changeFilter}\n                    filter={this.state.filter}\n                    canShowArchivedChannels={this.props.canShowArchivedChannels}\n                    myChannelMemberships={this.props.myChannelMemberships}\n                    closeModal={this.props.actions.closeModal}\n                    hideJoinedChannelsPreference={this.handleShowJoinedChannelsPreference}\n                    rememberHideJoinedChannelsChecked={shouldHideJoinedChannels}\n                    channelsMemberCount={this.props.channelsMemberCount}\n                />\n                {serverError}\n            </React.Fragment>\n        );\n\n        const title = (\n            <FormattedMessage\n                id='more_channels.title'\n                defaultMessage='Browse Channels'\n            />\n        );\n\n        return (\n            <GenericModal\n                onExited={this.handleExit}\n                id='browseChannelsModal'\n                aria-labelledby='browseChannelsModalLabel'\n                compassDesign={true}\n                modalHeaderText={title}\n                headerButton={createNewChannelButton('btn-secondary btn-sm')}\n                autoCloseOnConfirmButton={false}\n                aria-modal={true}\n                enforceFocus={false}\n                bodyPadding={false}\n            >\n                {body}\n            </GenericModal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getChannels, getArchivedChannels, joinChannel, getChannelsMemberCount, searchAllChannels} from 'mattermost-redux/actions/channels';\nimport {RequestStatus} from 'mattermost-redux/constants';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getChannelsInCurrentTeam, getMyChannelMemberships, getChannelsMemberCount as getChannelsMemberCountSelector} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {openModal, closeModal} from 'actions/views/modals';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {makeGetGlobalItem} from 'selectors/storage';\n\nimport Constants, {StoragePrefixes} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport BrowseChannels from './browse_channels';\n\nconst getChannelsWithoutArchived = createSelector(\n    'getChannelsWithoutArchived',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.delete_at === 0 && c.type !== Constants.PRIVATE_CHANNEL),\n);\n\nconst getArchivedOtherChannels = createSelector(\n    'getArchivedOtherChannels',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.delete_at !== 0),\n);\n\nconst getPrivateChannelsSelector = createSelector(\n    'getPrivateChannelsSelector',\n    getChannelsInCurrentTeam,\n    (channels: Channel[]) => channels && channels.filter((c) => c.type === Constants.PRIVATE_CHANNEL),\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    const team = getCurrentTeam(state);\n    const getGlobalItem = makeGetGlobalItem(StoragePrefixes.HIDE_JOINED_CHANNELS, 'false');\n\n    return {\n        channels: getChannelsWithoutArchived(state) || [],\n        archivedChannels: getArchivedOtherChannels(state) || [],\n        privateChannels: getPrivateChannelsSelector(state) || [],\n        currentUserId: getCurrentUserId(state),\n        teamId: getCurrentTeamId(state),\n        teamName: team?.name,\n        channelsRequestStarted: state.requests.channels.getChannels.status === RequestStatus.STARTED,\n        canShowArchivedChannels: (getConfig(state).ExperimentalViewArchivedChannels === 'true'),\n        myChannelMemberships: getMyChannelMemberships(state) || {},\n        shouldHideJoinedChannels: getGlobalItem(state) === 'true',\n        rhsState: getRhsState(state),\n        rhsOpen: getIsRhsOpen(state),\n        channelsMemberCount: getChannelsMemberCountSelector(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getChannels,\n            getArchivedChannels,\n            joinChannel,\n            searchAllChannels,\n            openModal,\n            closeModal,\n            setGlobalItem,\n            closeRightHandSide,\n            getChannelsMemberCount,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BrowseChannels);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useEffect, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getChannelBookmarks} from 'mattermost-redux/selectors/entities/channel_bookmarks';\nimport {getChannel, getMyChannelMember} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig, getFeatureFlagValue, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\n\nimport {fetchChannelBookmarks} from 'actions/channel_bookmarks';\nimport {loadCustomEmojisIfNeeded} from 'actions/emoji_actions';\n\nimport Constants from 'utils/constants';\nimport {trimmedEmojiName} from 'utils/emoji_utils';\nimport {canUploadFiles, isPublicLinksEnabled} from 'utils/file_utils';\n\nexport const MAX_BOOKMARKS_PER_CHANNEL = 50;\n\nconst {OPEN_CHANNEL, PRIVATE_CHANNEL, GM_CHANNEL, DM_CHANNEL} = Constants as {OPEN_CHANNEL: 'O'; PRIVATE_CHANNEL: 'P'; GM_CHANNEL: 'G'; DM_CHANNEL: 'D'};\n\ntype TAction = 'add' | 'edit' | 'delete' | 'order';\ntype TActionKey = `${TAction}${typeof OPEN_CHANNEL | typeof PRIVATE_CHANNEL}`;\n\nconst key = (a: TAction, c: typeof OPEN_CHANNEL | typeof PRIVATE_CHANNEL): TActionKey => {\n    return `${a}${c}`;\n};\n\nconst BOOKMARK_PERMISSION = {\n\n    // open channel\n    [key('add', OPEN_CHANNEL)]: Permissions.ADD_BOOKMARK_PUBLIC_CHANNEL,\n    [key('edit', OPEN_CHANNEL)]: Permissions.EDIT_BOOKMARK_PUBLIC_CHANNEL,\n    [key('delete', OPEN_CHANNEL)]: Permissions.DELETE_BOOKMARK_PUBLIC_CHANNEL,\n    [key('order', OPEN_CHANNEL)]: Permissions.ORDER_BOOKMARK_PUBLIC_CHANNEL,\n\n    // private channel\n    [key('add', PRIVATE_CHANNEL)]: Permissions.ADD_BOOKMARK_PRIVATE_CHANNEL,\n    [key('edit', PRIVATE_CHANNEL)]: Permissions.EDIT_BOOKMARK_PRIVATE_CHANNEL,\n    [key('delete', PRIVATE_CHANNEL)]: Permissions.DELETE_BOOKMARK_PRIVATE_CHANNEL,\n    [key('order', PRIVATE_CHANNEL)]: Permissions.ORDER_BOOKMARK_PRIVATE_CHANNEL,\n} as const;\n\nexport const useChannelBookmarkPermission = (channelId: string, action: TAction) => {\n    return useSelector((state: GlobalState) => getHaveIChannelBookmarkPermission(state, channelId, action));\n};\n\nexport const getHaveIChannelBookmarkPermission = (state: GlobalState, channelId: string, action: TAction) => {\n    const channel: Channel | undefined = getChannel(state, channelId);\n\n    if (!channel) {\n        return false;\n    }\n    const {type} = channel;\n\n    if (type === 'threads') {\n        return false;\n    }\n\n    if (type === GM_CHANNEL || type === DM_CHANNEL) {\n        const myMembership = getMyChannelMember(state, channelId);\n        return myMembership?.channel_id === channelId;\n    }\n\n    const permission = BOOKMARK_PERMISSION[key(action, type)];\n\n    return channel && permission && haveIChannelPermission(state, channel.team_id, channelId, permission);\n};\n\nexport const useCanUploadFiles = () => {\n    return useSelector((state: GlobalState) => canUploadFiles(getConfig(state)));\n};\n\nexport const useCanGetPublicLink = () => {\n    return useSelector((state: GlobalState) => isPublicLinksEnabled(getConfig(state)));\n};\n\nexport const useCanGetLinkPreviews = () => {\n    return useSelector((state: GlobalState) => getConfig(state).EnableLinkPreviews === 'true');\n};\n\nexport const getIsChannelBookmarksEnabled = (state: GlobalState) => {\n    const isEnabled = getFeatureFlagValue(state, 'ChannelBookmarks') === 'true';\n\n    if (!isEnabled) {\n        return false;\n    }\n\n    const license = getLicense(state);\n\n    return license?.IsLicensed === 'true';\n};\n\nexport const useChannelBookmarks = (channelId: string) => {\n    const dispatch = useDispatch();\n    const bookmarks = useSelector((state: GlobalState) => getChannelBookmarks(state, channelId));\n\n    const order = useMemo(() => {\n        return Object.keys(bookmarks).sort((a, b) => bookmarks[a].sort_order - bookmarks[b].sort_order);\n    }, [bookmarks]);\n\n    useEffect(() => {\n        if (channelId) {\n            dispatch(fetchChannelBookmarks(channelId));\n        }\n    }, [channelId]);\n\n    useEffect(() => {\n        const emojis = Object.values(bookmarks).reduce<string[]>((result, {emoji}) => {\n            if (emoji) {\n                result.push(trimmedEmojiName(emoji));\n            }\n\n            return result;\n        }, []);\n\n        if (emojis.length) {\n            dispatch(loadCustomEmojisIfNeeded(emojis));\n        }\n    }, [bookmarks]);\n\n    return {\n        bookmarks,\n        order,\n    };\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport QuickInput, {MaxLengthInput} from 'components/quick_input';\n\nimport {localizeMessage} from 'utils/utils';\n\nimport '../category_modal.scss';\n\nconst MAX_LENGTH = 22;\nconst ACTION_WAIT_MS = 1000;\n\ntype Props = {\n    onExited: () => void;\n    currentTeamId: string;\n    categoryId?: string;\n    initialCategoryName?: string;\n    channelIdsToAdd?: string[];\n    actions: {\n        createCategory: (teamId: string, displayName: string, channelIds?: string[] | undefined) => void;\n        renameCategory: (categoryId: string, newName: string) => void;\n    };\n};\n\ntype State = {\n    categoryName: string;\n}\n\nexport default class EditCategoryModal extends React.PureComponent<Props, State> {\n    timeoutId: NodeJS.Timeout | null = null;\n    isProcessing = false;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            categoryName: props.initialCategoryName || '',\n        };\n    }\n\n    handleClear = () => {\n        this.setState({categoryName: ''});\n    };\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({categoryName: e.target.value});\n    };\n\n    handleCancel = () => {\n        this.handleClear();\n    };\n\n    componentWillUnmount() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n    }\n\n    handleConfirm = () => {\n        if (this.isProcessing) {\n            return;\n        }\n        this.isProcessing = true;\n        this.timeoutId = setTimeout(() => {\n            this.isProcessing = false;\n        }, ACTION_WAIT_MS);\n\n        if (this.props.categoryId) {\n            this.props.actions.renameCategory(this.props.categoryId, this.state.categoryName);\n        } else {\n            this.props.actions.createCategory(this.props.currentTeamId, this.state.categoryName, this.props.channelIdsToAdd);\n            trackEvent('ui', 'ui_sidebar_created_category');\n        }\n    };\n\n    isConfirmDisabled = () => {\n        return !this.state.categoryName ||\n            (Boolean(this.props.initialCategoryName) && this.props.initialCategoryName === this.state.categoryName) || this.state.categoryName.length > MAX_LENGTH;\n    };\n\n    getText = () => {\n        let modalHeaderText;\n        let editButtonText;\n        let helpText;\n\n        if (this.props.categoryId) {\n            modalHeaderText = (\n                <FormattedMessage\n                    id='rename_category_modal.renameCategory'\n                    defaultMessage='Rename Category'\n                />\n            );\n            editButtonText = (\n                <FormattedMessage\n                    id='rename_category_modal.rename'\n                    defaultMessage='Rename'\n                />\n            );\n        } else {\n            modalHeaderText = (\n                <FormattedMessage\n                    id='create_category_modal.createCategory'\n                    defaultMessage='Create New Category'\n                />\n            );\n            editButtonText = (\n                <FormattedMessage\n                    id='create_category_modal.create'\n                    defaultMessage='Create'\n                />\n            );\n            helpText = (\n                <FormattedMessage\n                    id='edit_category_modal.helpText'\n                    defaultMessage='Drag channels into this category to organize your sidebar.'\n                />\n            );\n        }\n\n        return {\n            modalHeaderText,\n            editButtonText,\n            helpText,\n        };\n    };\n\n    render() {\n        const {\n            modalHeaderText,\n            editButtonText,\n            helpText,\n        } = this.getText();\n\n        return (\n            <GenericModal\n                id='editCategoryModal'\n                ariaLabel={localizeMessage('rename_category_modal.renameCategory', 'Rename Category')}\n                modalHeaderText={modalHeaderText}\n                confirmButtonText={editButtonText}\n                compassDesign={true}\n                onExited={this.props.onExited}\n                handleEnterKeyPress={this.handleConfirm}\n                handleConfirm={this.handleConfirm}\n                handleCancel={this.handleCancel}\n                isConfirmDisabled={this.isConfirmDisabled()}\n            >\n                <QuickInput\n                    inputComponent={MaxLengthInput}\n                    autoFocus={true}\n                    className='form-control filter-textbox'\n                    type='text'\n                    value={this.state.categoryName}\n                    placeholder={localizeMessage('edit_category_modal.placeholder', 'Name your category')}\n                    clearable={true}\n                    onClear={this.handleClear}\n                    onChange={this.handleChange}\n                    maxLength={MAX_LENGTH}\n                />\n                {Boolean(helpText) && <span className='edit-category__helpText'>\n                    {helpText}\n                </span>}\n            </GenericModal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {renameCategory} from 'mattermost-redux/actions/channel_categories';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {createCategory} from 'actions/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport EditCategoryModal from './edit_category_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentTeamId: getCurrentTeamId(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            createCategory,\n            renameCategory,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditCategoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport {ShortcutKey, ShortcutKeyVariant} from 'components/shortcut_key';\n\nimport {isDesktopApp, isMac} from 'utils/user_agent';\n\nimport './search_shortcut.scss';\n\nexport type SearchShortcutProps = {\n    className?: string;\n    variant?: ShortcutKeyVariant;\n}\n\nexport const SearchShortcut = ({className, variant}: SearchShortcutProps) => {\n    const controlKey = isMac() ? '⌘' : 'Ctrl';\n    const shortcutKeyVariant = variant || ShortcutKeyVariant.Contrast;\n\n    return (\n        <span className={classNames('search-shortcut', className)}>\n            <ShortcutKey variant={shortcutKeyVariant}>{controlKey}</ShortcutKey>\n            {!isDesktopApp() && <ShortcutKey variant={shortcutKeyVariant}>{'Shift'}</ShortcutKey>}\n            <ShortcutKey variant={shortcutKeyVariant}>{'F'}</ShortcutKey>\n        </span>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classnames from 'classnames';\nimport React, {useCallback, useEffect, useState, useRef} from 'react';\nimport './dual_range_slider.scss';\n\ninterface MultiRangeSliderProps {\n    min: number;\n    max: number;\n    priceRangeHandler: (value: { min: number; max: number }) => void;\n}\n\nconst MultiRangeSlider = (props: MultiRangeSliderProps) => {\n    const {min, max, priceRangeHandler} = props;\n\n    const [minVal, setMinVal] = useState(min);\n    const [maxVal, setMaxVal] = useState(max);\n    const minValRef = useRef<HTMLInputElement>(null);\n    const maxValRef = useRef<HTMLInputElement>(null);\n    const range = useRef<HTMLDivElement>(null);\n\n    // Convert to percentage\n    const getPercent = useCallback(\n        (value) => Math.round(((value - min) / (max - min)) * 100),\n        [min, max],\n    );\n\n    // Set width of the range to decrease from the left side\n    useEffect(() => {\n        if (maxValRef.current) {\n            const minPercent = getPercent(minVal);\n            const maxPercent = getPercent(Number(maxValRef.current.value)); // Preceding with '+' converts the value from type string to type number\n\n            if (range.current) {\n                range.current.style.left = `${minPercent}%`;\n                range.current.style.width = `${maxPercent - minPercent}%`;\n            }\n        }\n    }, [minVal, getPercent]);\n\n    // Set width of the range to decrease from the right side\n    useEffect(() => {\n        if (minValRef.current) {\n            const minPercent = getPercent(Number(minValRef.current.value));\n            const maxPercent = getPercent(maxVal);\n\n            if (range.current) {\n                range.current.style.width = `${maxPercent - minPercent}%`;\n            }\n        }\n    }, [maxVal, getPercent]);\n\n    // Get min and max values when their state changes\n    useEffect(() => {\n        priceRangeHandler({min: minVal, max: maxVal});\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [minVal, maxVal]);\n\n    return (\n        <div className='range_slider_container'>\n            <div className='header_wrapper'>\n                <div className='header_label'>{'Label'}</div>\n                <div className='header_price'>{`$${minVal} - ${maxVal}`}</div>\n            </div>\n\n            <div className='search_container'>\n                <input\n                    type='range'\n                    min={min}\n                    max={max}\n                    value={minVal}\n                    ref={minValRef}\n                    onChange={(event) => {\n                        const value = Math.min(\n                            Number(event.target.value),\n                            maxVal - 1,\n                        );\n                        setMinVal(value);\n                        event.target.value = value.toString();\n                    }}\n                    className={classnames('thumb thumb--zindex-3', {\n                        'thumb--zindex-5': minVal > max - 100,\n                    })}\n                />\n                <input\n                    type='range'\n                    min={min}\n                    max={max}\n                    value={maxVal}\n                    ref={maxValRef}\n                    onChange={(event) => {\n                        const value = Math.max(\n                            Number(event.target.value),\n                            minVal + 1,\n                        );\n                        setMaxVal(value);\n                        event.target.value = value.toString();\n                    }}\n                    className='thumb thumb--zindex-4'\n                />\n\n                <div className='slider'>\n                    <div className='slider__track'/>\n                    <div\n                        ref={range}\n                        className='slider__range'\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MultiRangeSlider;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\n\nimport {CloseIcon, PlusBoxIcon} from '@mattermost/compass-icons/components';\n\nimport DualRangeSlider from './dual_range_slider';\nimport './filter_menu.scss';\nimport type {\n    FilterMenuProps,\n    IconLabelProps,\n    SelectedKeywordsProps,\n} from './types';\n\nconst IconLabel = (props: IconLabelProps) => {\n    const {label, description, onSelectedChange, value} = props;\n\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        onSelectedChange(value, e.target.checked);\n    };\n\n    return (\n        <div className='icon_label_container'>\n            <label className='checkbox style-c'>\n                <input\n                    type='checkbox'\n                    onChange={onChangeHandler}\n                />\n                <div className='checkbox__checkmark'/>\n                <div>\n                    <div className='checkbox__body'>{label}</div>\n                    <div className='checkbox_description'>{description}</div>\n                </div>\n            </label>\n        </div>\n    );\n};\n\nconst SelectedKeywords = (props: SelectedKeywordsProps) => {\n    const {\n        value,\n        handleKeywordRemove,\n        updateKeyword,\n        showUpdateKeyword,\n        setShowUpdateKeyword,\n    } = props;\n\n    const [inputValue, setInputValue] = useState(value);\n\n    const onKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            setShowUpdateKeyword('');\n            updateKeyword(inputValue);\n        }\n    };\n\n    return (\n        <>\n            {showUpdateKeyword === value ? (\n                <input\n                    className='add_keyword_input'\n                    placeholder='update keyword'\n                    value={inputValue}\n                    onFocus={() => {\n                        setShowUpdateKeyword(value);\n                    }}\n                    onBlur={() => {\n                        setShowUpdateKeyword('');\n                        updateKeyword(inputValue);\n                    }}\n                    onKeyPress={onKeyPress}\n                    onChange={(e) => {\n                        setInputValue(e.target.value);\n                    }}\n                />\n            ) : (\n                <div className='keyword_pill_container'>\n                    <div\n                        onClick={() => setShowUpdateKeyword(value)}\n                        className='keyword_pill_label'\n                    >\n                        {value}\n                    </div>\n\n                    <div className='keyword_pill_close'>\n                        <span\n                            className='keyword_pill_close_icon'\n                            onClick={() => {\n                                handleKeywordRemove(value);\n                            }}\n                        >\n                            <CloseIcon size={16}/>\n                        </span>\n                    </div>\n                </div>\n            )}\n        </>\n    );\n};\n\nconst FilterMenu = (props: FilterMenuProps) => {\n    const {\n        categories,\n        colors,\n        keywords,\n        sizes,\n        handleFilterChange,\n        priceRangeHandler,\n        handleKeywordRemove,\n        handleKeywordAdd,\n        handleKeywordUpdate,\n        priceRange,\n    } = props;\n\n    const [showAddKeyword, setShowAddKeyword] = React.useState(false);\n    const [showUpdateKeyword, setShowUpdateKeyword] = React.useState('');\n\n    const addKeyword = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') {\n            const keyword = e.currentTarget.value;\n            handleKeywordAdd(keyword);\n            e.currentTarget.value = '';\n        }\n    };\n\n    return (\n        <div className='filter_menu_container'>\n            <div className='label_check_container'>\n                <div className='filter_label'>{'Keywords'} </div>\n                <div className='filter_keyword_wrapper'>\n                    {keywords.map((keyword, index) => {\n                        return (\n                            <SelectedKeywords\n                                key={keyword}\n                                value={keyword}\n                                showUpdateKeyword={showUpdateKeyword}\n                                setShowUpdateKeyword={setShowUpdateKeyword}\n                                handleKeywordRemove={handleKeywordRemove}\n                                updateKeyword={(keyword) => {\n                                    handleKeywordUpdate({keyword, index});\n                                }}\n                            />\n                        );\n                    })}\n\n                    {showAddKeyword ? (\n                        <input\n                            className='add_keyword_input'\n                            placeholder='add keyword'\n                            onKeyPress={addKeyword}\n                            onFocus={() => {\n                                setShowAddKeyword(true);\n                            }}\n                            onBlur={() => {\n                                setShowAddKeyword(false);\n                            }}\n                        />\n                    ) : (\n                        <div\n                            className='add_keyword_icon'\n                            onClick={() => {\n                                setShowAddKeyword(true);\n                            }}\n                        >\n                            <PlusBoxIcon\n                                title='add keyword'\n                                size={24}\n                            />\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            <div className='label_check_container'>\n                <div className='label_check_container'>\n                    {categories.map((category) => {\n                        return (\n                            <div key={category.label}>\n                                <IconLabel\n                                    value={category.value}\n                                    label={category.label}\n                                    description={category.description}\n                                    onSelectedChange={(value, isChecked) => {\n                                        handleFilterChange({\n                                            filterType: 'categories',\n                                            value,\n                                            isChecked,\n                                        });\n                                    }}\n                                />\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n\n            <DualRangeSlider\n                min={priceRange.min}\n                max={priceRange.max}\n                priceRangeHandler={priceRangeHandler}\n            />\n\n            <div className='label_check_container'>\n                <div className='filter_label'>{'Color'}</div>\n                <div className='label_check_container'>\n                    {colors.map((color) => {\n                        return (\n                            <IconLabel\n                                key={color.label}\n                                value={color.value}\n                                label={color.label}\n                                onSelectedChange={(value, isChecked) => {\n                                    handleFilterChange({\n                                        filterType: 'color',\n                                        value,\n                                        isChecked,\n                                    });\n                                }}\n                            />\n                        );\n                    })}\n                </div>\n            </div>\n            <div className='label_check_container'>\n                <div className='filter_label'>{'Size'}</div>\n                <div className='label_check_container'>\n                    {sizes.map((size) => (\n                        <IconLabel\n                            key={size.label}\n                            value={size.value}\n                            label={size.label}\n                            onSelectedChange={(value, isChecked) => {\n                                handleFilterChange({\n                                    filterType: 'size',\n                                    value,\n                                    isChecked,\n                                });\n                            }}\n                        />\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FilterMenu;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport './product_info_card.scss';\nimport type {ProductInfoCardProps} from './types';\n\nconst ProductInfoCard = (props: ProductInfoCardProps) => {\n    const {url, description, price} = props;\n    return (\n        <div className='product_info_card_container'>\n            <div className='shop_card_image_container'>\n                <img\n                    src={url}\n                    alt='shop_card_image'\n                />\n            </div>\n            <div className='post_card_price_description'>{description}</div>\n            <div className='post_card_price_label'>{`$${price}`}</div>\n        </div>\n    );\n};\n\nexport default ProductInfoCard;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState} from 'react';\n\nimport './search_bar.scss';\nimport {CheckIcon} from '@mattermost/compass-icons/components';\n\nimport SearchIcon from 'components/widgets/icons/search_icon';\n\nimport type {IconButtonProps, SearchBarProps} from './types';\n\nconst IconButton = (props: IconButtonProps) => {\n    const {label, selected, onClickHandler, value} = props;\n\n    return (\n        <div\n            className='icon_button_wrapper'\n            style={{\n                backgroundColor: selected === value ? '#2C2C2C' : '#F5F5F5',\n            }}\n            onClick={() => onClickHandler(value || 'new')}\n        >\n            {selected === value && (\n                <CheckIcon\n                    size={18}\n                    color='white'\n                />\n            )}\n            <span\n                className='icon_button_label'\n                style={{\n                    color: selected === value ? '#FFFFFF' : '#757575',\n                }}\n            >\n                {label}\n            </span>\n        </div>\n    );\n};\n\nconst SearchBar = (props: SearchBarProps) => {\n    const {buttons, handleSearchTermChange, handleSortByChange} = props;\n    const [selected, setSelected] = useState(buttons[0].value);\n\n    const onClickHandler = (value: string) => {\n        setSelected(value);\n        handleSortByChange(value);\n    };\n\n    return (\n        <div className='search_bar_container'>\n            <div className='search_input_container'>\n                <input\n                    className='search_input_style'\n                    type='search'\n                    placeholder='Search'\n                    onChange={(event) =>\n                        handleSearchTermChange(event.target.value)\n                    }\n                />\n\n                <SearchIcon/>\n\n            </div>\n\n            <div className='sort_by_container'>\n                {buttons.map((button) => {\n                    return (\n                        <IconButton\n                            key={button.icon}\n                            label={button.label}\n                            selected={selected}\n                            value={button.value}\n                            onClickHandler={onClickHandler}\n                        />\n                    );\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default SearchBar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\n\nimport './product_results.scss';\nimport FilterMenu from './components/filter_menu';\nimport ProductInfoCard from './components/product_info_card';\nimport SearchBar from './components/search_bar';\nimport type {\n    HandleFilterChangeProps,\n    InitialFilterProps,\n    PriceRangeProps,\n    ProductInfoCardProps,\n    UpdateKeywordProps,\n} from './components/types';\n\n// note: dummy data to be replaced with actual data from the server\nconst DummyProducts = [\n    {\n        url: 'https://via.placeholder.com/250',\n        description: 'Product 1',\n        price: 100,\n    },\n    {\n        url: 'https://via.placeholder.com/250',\n        description: 'Product 2',\n        price: 200,\n    },\n    {\n        url: 'https://via.placeholder.com/250',\n        description: 'Product 3',\n        price: 300,\n    },\n    {\n        url: 'https://via.placeholder.com/250',\n        description: 'Product 4',\n        price: 400,\n    },\n    {\n        url: 'https://via.placeholder.com/250',\n        description: 'Product 5',\n        price: 500,\n    },\n    {\n        url: 'https://via.placeholder.com/250',\n        description: 'Product 6',\n        price: 600,\n    },\n    {\n        url: 'https://via.placeholder.com/250',\n        description: 'Product 7',\n        price: 700,\n    },\n    {\n        url: 'https://via.placeholder.com/250',\n        description: 'Product 8',\n        price: 800,\n    },\n];\n\n// note: placeholder categories to filter the products\nconst categories = [\n    {\n        label: 'Label 1',\n        value: 'category_1',\n        description: 'Description 1',\n    },\n    {\n        label: 'Label 2',\n        value: 'category_2',\n        description: 'Description 2',\n    },\n    {\n        label: 'Label 3',\n        value: 'category_3',\n        description: 'Description 3',\n    },\n];\n\n// note: placeholder colors to filter the products\nconst colors = [\n    {\n        label: 'Red',\n        value: 'red',\n    },\n    {\n        label: 'Blue',\n        value: 'blue',\n    },\n    {\n        label: 'Green',\n        value: 'green',\n    },\n];\n\n// note: placeholder keywords to filter the products\nconst keywords = ['spring', 'smart', 'modern', 'casual', 'formal'];\n\n// note: placeholder sizes to filter the products\nconst sizes = [\n    {\n        label: 'Small',\n        value: 'small',\n    },\n    {\n        label: 'Medium',\n        value: 'medium',\n    },\n    {\n        label: 'Large',\n        value: 'large',\n    },\n];\n\n// note: placeholder buttons to sort the products\nconst buttons = [\n    {\n        icon: 'icon1',\n        label: 'New',\n        value: 'new',\n    },\n    {\n        icon: 'icon2',\n        label: 'Price ascending',\n        value: 'ascending',\n    },\n    {\n        icon: 'icon3',\n        label: 'Price descending',\n        value: 'descending',\n    },\n    {\n        icon: 'icon4',\n        label: 'Rating',\n        value: 'rating',\n    },\n];\n\n// note: placeholder dummy price range\nconst DummyPriceRange = {\n    min: 0,\n    max: 100,\n};\n\nconst ProductResults = () => {\n    const [filters, setFilters] = useState<InitialFilterProps>({\n        size: [],\n        categories: [],\n        color: [],\n        keywords,\n        searchTerm: '',\n        sortBy: 'new',\n        priceRange: {\n            min: 0,\n            max: 100,\n        },\n    });\n\n    const [products, setProducts] = useState<ProductInfoCardProps[]>([]);\n\n    const fetchProducts = async () => {\n        try {\n            const response = DummyProducts;\n            setProducts(response);\n        } catch (error) {\n            // eslint-disable-next-line no-console\n            console.error('Error fetching products:', error);\n        }\n    };\n\n    const handleFilterChange = (values: HandleFilterChangeProps) => {\n        const {filterType, value, isChecked} = values;\n\n        setFilters((prevFilters) => {\n            const newFilters = {...prevFilters};\n\n            if (Array.isArray(newFilters[filterType])) {\n                if (isChecked) {\n                    newFilters[filterType] = [...newFilters[filterType], value];\n                }\n                if (!isChecked) {\n                    newFilters[filterType] = newFilters[filterType].filter(\n                        (item) => item !== value,\n                    );\n                }\n            }\n\n            return newFilters;\n        });\n    };\n\n    const handleKeywordAdd = (keyword: string) => {\n        if (filters.keywords.includes(keyword)) {\n            return;\n        }\n        setFilters((prevFilters) => ({\n            ...prevFilters,\n            keywords: [...prevFilters.keywords, keyword],\n        }));\n    };\n\n    const handleKeywordRemove = (keyword: string) => {\n        setFilters((prevFilters) => ({\n            ...prevFilters,\n            keywords: prevFilters.keywords.filter((k) => k !== keyword),\n        }));\n    };\n\n    const handleKeywordUpdate = (value: UpdateKeywordProps) => {\n        const {keyword, index} = value;\n\n        setFilters((prevFilters) => {\n            const newKeywords = [...prevFilters.keywords];\n            newKeywords[index] = keyword;\n            return {\n                ...prevFilters,\n                keywords: newKeywords,\n            };\n        });\n    };\n\n    const priceRangeHandler = (values: PriceRangeProps) => {\n        const {min, max} = values;\n\n        setFilters((prevFilters) => ({\n            ...prevFilters,\n            priceRange: {\n                min,\n                max,\n            },\n        }));\n    };\n\n    const handleSearchTermChange = (value: string) => {\n        setFilters((prevFilters) => ({\n            ...prevFilters,\n            searchTerm: value,\n        }));\n    };\n\n    const handleSortByChange = (value: string) => {\n        setFilters((prevFilters) => ({\n            ...prevFilters,\n            sortBy: value,\n        }));\n    };\n\n    useEffect(() => {\n        fetchProducts();\n    }, [filters]);\n\n    return (\n        <div className='product_result_container'>\n            <div>\n                <FilterMenu\n                    sizes={sizes}\n                    categories={categories}\n                    keywords={filters.keywords}\n                    colors={colors}\n                    priceRange={DummyPriceRange}\n                    handleKeywordAdd={handleKeywordAdd}\n                    handleKeywordRemove={handleKeywordRemove}\n                    handleFilterChange={handleFilterChange}\n                    priceRangeHandler={priceRangeHandler}\n                    handleKeywordUpdate={handleKeywordUpdate}\n                />\n            </div>\n            <div className='card_and_wrapper_container'>\n                <SearchBar\n                    buttons={buttons}\n                    handleSearchTermChange={handleSearchTermChange}\n                    handleSortByChange={handleSortByChange}\n                />\n                <div className='product_result_info_container'>\n                    {products.map((product) => {\n                        return (\n                            <ProductInfoCard\n                                key={product.description}\n                                url={product.url}\n                                description={product.description}\n                                price={product.price}\n                            />\n                        );\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ProductResults;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {FolderPlusOutlineIcon} from '@mattermost/compass-icons/components';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {openModal} from 'actions/views/modals';\n\nimport EditCategoryModal from 'components/edit_category_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\ntype Props = {\n    id: string;\n}\n\nconst CreateNewCategoryMenuItem = ({\n    id,\n    ...otherProps\n}: Props) => {\n    const dispatch = useDispatch();\n    const handleCreateCategory = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.EDIT_CATEGORY,\n            dialogType: EditCategoryModal,\n        }));\n        trackEvent('ui', 'ui_sidebar_category_menu_createCategory');\n    }, [dispatch]);\n\n    return (\n        <Menu.Item\n            id={`create-${id}`}\n            onClick={handleCreateCategory}\n            aria-haspopup={true}\n            leadingElement={<FolderPlusOutlineIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='sidebar_left.sidebar_category_menu.createCategory'\n                    defaultMessage='Create New Category'\n                />\n            )}\n            {...otherProps}\n        />\n    );\n};\n\nexport default CreateNewCategoryMenuItem;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\nimport 'components/category_modal.scss';\n\ntype Props = {\n    handleConfirm: () => void;\n    numChannels: number;\n    onExited: () => void;\n};\n\nconst handleCancel = () => null;\n\nconst MarkAsReadConfirmModal = ({\n    handleConfirm,\n    numChannels,\n    onExited,\n}: Props) => {\n    const intl = useIntl();\n\n    const header = intl.formatMessage({id: 'mark_as_read_confirm_modal.header', defaultMessage: 'Mark as read'});\n    const body = intl.formatMessage({id: 'mark_as_read_confirm_modal.body', defaultMessage: 'Are you sure you want to mark {numChannels} channels as read?'}, {numChannels});\n    const confirm = intl.formatMessage({id: 'mark_as_read_confirm_modal.confirm', defaultMessage: 'Mark as read'});\n\n    return (\n        <GenericModal\n            ariaLabel={header}\n            compassDesign={true}\n            modalHeaderText={header}\n            handleConfirm={handleConfirm}\n            handleCancel={handleCancel}\n            onExited={onExited}\n            confirmButtonText={confirm}\n        >\n            <span className='mark-as-read__helpText'>\n                {body}\n            </span>\n        </GenericModal>\n    );\n};\n\nexport default MarkAsReadConfirmModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {MarkAsUnreadIcon} from '@mattermost/compass-icons/components';\n\nimport {openModal} from 'actions/views/modals';\n\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport MarkAsReadConfirmModal from './mark_as_read_confirm_modal';\n\ntype Props = {\n    id: string;\n    handleViewCategory: () => void;\n    numChannels: number;\n}\n\nconst MarkAsUnreadItem = ({\n    id,\n    handleViewCategory,\n    numChannels,\n    ...otherProps\n}: Props) => {\n    const dispatch = useDispatch();\n\n    const onClick = useCallback(() => {\n        if (numChannels <= 0) {\n            return;\n        }\n\n        if (numChannels === 1) {\n            handleViewCategory();\n            return;\n        }\n\n        dispatch(openModal({\n            modalId: ModalIdentifiers.DELETE_CATEGORY,\n            dialogType: MarkAsReadConfirmModal,\n            dialogProps: {\n                handleConfirm: handleViewCategory,\n                numChannels,\n            },\n        }));\n    }, [dispatch, handleViewCategory, numChannels]);\n\n    return (\n        <Menu.Item\n            id={`view-${id}`}\n            onClick={onClick}\n            aria-haspopup={numChannels > 1}\n            leadingElement={<MarkAsUnreadIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='sidebar_left.sidebar_category_menu.viewCategory'\n                    defaultMessage='Mark category as read'\n                />\n            )}\n            {...otherProps}\n        />\n    );\n};\n\nexport default MarkAsUnreadItem;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {\n    DotsVerticalIcon,\n} from '@mattermost/compass-icons/components';\n\nimport * as Menu from 'components/menu';\n\ntype Props = {\n    id: string;\n    children: React.ReactNode[];\n};\n\nconst SidebarCategoryGenericMenu = ({\n    id,\n    children,\n}: Props) => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n    const {formatMessage} = useIntl();\n\n    function handleMenuToggle(isOpen: boolean) {\n        setIsMenuOpen(isOpen);\n    }\n\n    return (\n        <div\n            className={classNames(\n                'SidebarMenu',\n                'MenuWrapper',\n                {\n                    'MenuWrapper--open': isMenuOpen,\n                    menuOpen: isMenuOpen,\n                },\n            )}\n        >\n            <Menu.Container\n                menuButton={{\n                    id: `SidebarCategoryMenu-Button-${id}`,\n                    'aria-label': formatMessage({id: 'sidebar_left.sidebar_category_menu.editCategory', defaultMessage: 'Category options'}),\n                    class: 'SidebarMenu_menuButton',\n                    children: <DotsVerticalIcon size={16}/>,\n                }}\n                menuButtonTooltip={{\n                    id: `SidebarCategoryMenu-ButtonTooltip-${id}`,\n                    text: formatMessage({id: 'sidebar_left.sidebar_category_menu.editCategory', defaultMessage: 'Category options'}),\n                    class: 'hidden-xs',\n                }}\n                menu={{\n                    id: `SidebarChannelMenu-MenuList-${id}`,\n                    'aria-label': formatMessage({id: 'sidebar_left.sidebar_category_menu.dropdownAriaLabel', defaultMessage: 'Edit category menu'}),\n                    onToggle: handleMenuToggle,\n                }}\n            >\n                {children}\n            </Menu.Container>\n        </div>\n    );\n};\n\nexport default memo(SidebarCategoryGenericMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {DraggableProvidedDragHandleProps} from 'react-beautiful-dnd';\n\nimport {wrapEmojis} from 'utils/emoji_utils';\n\ntype StaticProps = {\n    children?: React.ReactNode;\n    displayName: string;\n}\n\nexport const SidebarCategoryHeaderStatic = React.forwardRef((props: StaticProps, ref?: React.Ref<HTMLDivElement>) => {\n    return (\n        <div className='SidebarChannelGroupHeader SidebarChannelGroupHeader--static'>\n            <div\n                ref={ref}\n                className='SidebarChannelGroupHeader_groupButton'\n            >\n                <div className='SidebarChannelGroupHeader_text'>\n                    {wrapEmojis(props.displayName)}\n                </div>\n                {props.children}\n            </div>\n        </div>\n    );\n});\nSidebarCategoryHeaderStatic.displayName = 'SidebarCategoryHeaderStatic';\n\ntype Props = StaticProps & {\n    dragHandleProps?: DraggableProvidedDragHandleProps;\n    isCollapsed: boolean;\n    isCollapsible: boolean;\n    isDragging?: boolean;\n    isDraggingOver?: boolean;\n    muted: boolean;\n    onClick: (event: React.MouseEvent<HTMLElement>) => void;\n}\n\nexport const SidebarCategoryHeader = React.forwardRef((props: Props, ref?: React.Ref<HTMLButtonElement>) => {\n    const {dragHandleProps} = props;\n\n    // (Accessibility) Ensures interactive controls are not nested as they are not always announced\n    // by screen readers or can cause focus problems for assistive technologies.\n    if (dragHandleProps && dragHandleProps.role) {\n        Reflect.deleteProperty(dragHandleProps, 'role');\n    }\n\n    return (\n        <div\n            className={classNames('SidebarChannelGroupHeader', {\n                muted: props.muted,\n                dragging: props.isDragging,\n            })}\n        >\n            <button\n                ref={ref}\n                className={classNames('SidebarChannelGroupHeader_groupButton')}\n                aria-label={props.displayName}\n                onClick={props.onClick}\n            >\n                <i\n                    className={classNames('icon icon-chevron-down', {\n                        'icon-rotate-minus-90': props.isCollapsed,\n                        'hide-arrow': !props.isCollapsible,\n                    })}\n                />\n                <div\n                    className='SidebarChannelGroupHeader_text'\n                    {...dragHandleProps}\n                >\n                    {wrapEmojis(props.displayName)}\n                </div>\n            </button>\n            {props.children}\n        </div>\n    );\n});\nSidebarCategoryHeader.defaultProps = {\n    isCollapsible: true,\n    isDragging: false,\n    isDraggingOver: false,\n};\nSidebarCategoryHeader.displayName = 'SidebarCategoryHeader';\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\ntype Props = {\n    unreadMentions: number;\n    hasUrgent?: boolean;\n};\n\nexport default function ChannelMentionBadge({unreadMentions, hasUrgent}: Props) {\n    if (unreadMentions > 0) {\n        return (\n            <span\n                id='unreadMentions'\n                className={classNames({badge: true, urgent: hasUrgent})}\n            >\n                {unreadMentions}\n            </span>\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport './channel_pencil_icon.scss';\n\ntype Props = {\n    hasDraft: boolean;\n};\n\nfunction ChannelPencilIcon({hasDraft}: Props) {\n    if (hasDraft) {\n        return (\n            <i\n                data-testid='draftIcon'\n                className='icon icon-pencil-outline channel-pencil-icon'\n            />\n        );\n    }\n    return null;\n}\n\nexport default memo(ChannelPencilIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getPostDraft} from 'selectors/rhs';\n\nimport {StoragePrefixes} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\nimport type {PostDraft} from 'types/store/draft';\n\nimport ChannelPencilIcon from './channel_pencil_icon';\n\ntype OwnProps = {\n    id: Channel['id'];\n}\n\nfunction hasDraft(draft: PostDraft|null, id: Channel['id'], currentChannelId?: string): boolean {\n    if (draft === null) {\n        return false;\n    }\n\n    return Boolean(draft.message.trim() || draft.fileInfos.length || draft.uploadsInProgress.length) && currentChannelId !== id;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const currentChannelId = getCurrentChannelId(state);\n    const draft = getPostDraft(state, StoragePrefixes.DRAFT, ownProps.id);\n\n    return {\n        hasDraft: hasDraft(draft, ownProps.id, currentChannelId),\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelPencilIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    icon: JSX.Element | null;\n    isDeleted: boolean;\n};\n\nfunction SidebarChannelIcon({isDeleted, icon}: Props) {\n    if (isDeleted) {\n        return (\n            <i className='icon icon-archive-outline'/>\n        );\n    }\n    return icon;\n}\n\nexport default SidebarChannelIcon;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport type {MouseEvent, KeyboardEvent} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {\n    FolderOutlineIcon,\n    StarOutlineIcon,\n    FolderMoveOutlineIcon,\n    ChevronRightIcon,\n    CheckIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {getCategoryInTeamWithChannel} from 'mattermost-redux/selectors/entities/channel_categories';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {addChannelsInSidebar} from 'actions/views/channel_sidebar';\nimport {openModal} from 'actions/views/modals';\nimport {getCategoriesForCurrentTeam} from 'selectors/views/channel_sidebar';\n\nimport EditCategoryModal from 'components/edit_category_modal';\nimport * as Menu from 'components/menu';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\ntype Props = {\n    channel: Channel;\n    inHeaderDropdown?: boolean;\n};\n\nconst ChannelMoveToSubMenu = (props: Props) => {\n    const {formatMessage} = useIntl();\n\n    const dispatch = useDispatch();\n\n    const allChannels = useSelector(getAllChannels);\n    const multiSelectedChannelIds = useSelector((state: GlobalState) => state.views.channelSidebar.multiSelectedChannelIds);\n\n    const currentTeam = useSelector(getCurrentTeam);\n    const categories = useSelector((state: GlobalState) => {\n        return currentTeam ? getCategoriesForCurrentTeam(state) : undefined;\n    });\n    const currentCategory = useSelector((state: GlobalState) => {\n        return currentTeam ? getCategoryInTeamWithChannel(state, currentTeam?.id || '', props.channel.id) : undefined;\n    });\n\n    function handleMoveToCategory(event: MouseEvent<HTMLLIElement> | KeyboardEvent<HTMLLIElement>, categoryId: string) {\n        event.preventDefault();\n\n        if (currentCategory?.id !== categoryId) {\n            dispatch(addChannelsInSidebar(categoryId, props.channel.id));\n            trackEvent('ui', 'ui_sidebar_channel_menu_moveToExistingCategory');\n        }\n    }\n\n    function handleMoveToNewCategory() {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.EDIT_CATEGORY,\n            dialogType: EditCategoryModal,\n            dialogProps: {\n                channelIdsToAdd: multiSelectedChannelIds.indexOf(props.channel.id) === -1 ? [props.channel.id] : multiSelectedChannelIds,\n            },\n        }));\n        trackEvent('ui', 'ui_sidebar_channel_menu_createCategory');\n    }\n\n    function createSubmenuItemsForCategoryArray(categories: ChannelCategory[], currentCategory?: ChannelCategory) {\n        const allCategories = categories.map((category: ChannelCategory) => {\n            let text = <span>{category.display_name}</span>;\n\n            if (category.type === CategoryTypes.FAVORITES) {\n                text = (\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.favorites'\n                        defaultMessage='Favorites'\n                    />\n                );\n            }\n            if (category.type === CategoryTypes.CHANNELS) {\n                text = (\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.channels'\n                        defaultMessage='Channels'\n                    />\n                );\n            }\n\n            let selectedCategory = null;\n            if (currentCategory && currentCategory.display_name === category.display_name) {\n                selectedCategory = (\n                    <CheckIcon\n                        color='var(--button-bg)'\n                        size={18}\n                    />\n                );\n            }\n\n            return (\n                <Menu.Item\n                    id={`moveToCategory-${props.channel.id}-${category.id}`}\n                    key={`moveToCategory-${props.channel.id}-${category.id}`}\n                    leadingElement={category.type === CategoryTypes.FAVORITES ? (<StarOutlineIcon size={18}/>) : (<FolderOutlineIcon size={18}/>)}\n                    labels={text}\n                    trailingElements={selectedCategory}\n                    onClick={(event) => handleMoveToCategory(event, category.id)}\n                />\n            );\n        });\n\n        const dividerAndNewCategory = [\n            <Menu.Separator key='ChannelMenu-moveToDivider'/>,\n            <Menu.Item\n                id={`moveToNewCategory-${props.channel.id}`}\n                key={`moveToNewCategory-${props.channel.id}`}\n                aria-haspopup={true}\n                leadingElement={<FolderMoveOutlineIcon size={18}/>}\n                labels={\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.moveToNewCategory'\n                        defaultMessage='New Category'\n                    />\n                }\n                onClick={handleMoveToNewCategory}\n            />,\n        ];\n\n        return [...allCategories, ...dividerAndNewCategory];\n    }\n\n    function filterCategoriesBasedOnChannelType(categories: ChannelCategory[], isDmOrGm = false) {\n        if (isDmOrGm) {\n            return categories.filter((category) => category.type !== CategoryTypes.CHANNELS);\n        }\n\n        return categories.filter((category) => category.type !== CategoryTypes.DIRECT_MESSAGES);\n    }\n\n    function getMoveToCategorySubmenuItems(categories: ChannelCategory[], currentCategory?: ChannelCategory) {\n        const isSubmenuOneOfSelectedChannels = multiSelectedChannelIds.includes(props.channel.id);\n\n        // If sub menu is in channel header dropdown OR If multiple channels are selected but the menu is open outside of those selected channels\n        if (props.inHeaderDropdown || !isSubmenuOneOfSelectedChannels) {\n            const isDmOrGm = props.channel.type === Constants.DM_CHANNEL || props.channel.type === Constants.GM_CHANNEL;\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, isDmOrGm);\n            return createSubmenuItemsForCategoryArray(filteredCategories, currentCategory);\n        }\n\n        const areAllSelectedChannelsDMorGM = multiSelectedChannelIds.every((channelId) => allChannels[channelId].type === Constants.DM_CHANNEL || allChannels[channelId].type === Constants.GM_CHANNEL);\n        if (areAllSelectedChannelsDMorGM) {\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, true);\n            return createSubmenuItemsForCategoryArray(filteredCategories, currentCategory);\n        }\n\n        const areAllSelectedChannelsAreNotDMorGM = multiSelectedChannelIds.every((channelId) => allChannels[channelId].type !== Constants.DM_CHANNEL && allChannels[channelId].type !== Constants.GM_CHANNEL);\n        if (areAllSelectedChannelsAreNotDMorGM) {\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, false);\n            return createSubmenuItemsForCategoryArray(filteredCategories, currentCategory);\n        }\n\n        // If we have a mix of channel types, we need to filter out both the DM and Channel categories\n        const filteredCategories = categories.filter((category) => category.type !== CategoryTypes.CHANNELS && category.type !== CategoryTypes.DIRECT_MESSAGES);\n        return createSubmenuItemsForCategoryArray(filteredCategories, currentCategory);\n    }\n\n    if (!categories) {\n        return null;\n    }\n\n    return (\n        <Menu.SubMenu\n            id={`moveTo-${props.channel.id}`}\n            labels={\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu.moveTo'\n                    defaultMessage='Move to...'\n                />\n            }\n            leadingElement={props.inHeaderDropdown ? null : <FolderMoveOutlineIcon size={18}/>}\n            trailingElements={<ChevronRightIcon size={16}/>}\n            menuId={`moveTo-${props.channel.id}-menu`}\n            menuAriaLabel={formatMessage({id: 'sidebar_left.sidebar_channel_menu.moveTo.dropdownAriaLabel', defaultMessage: 'Move to submenu'})}\n        >\n            {getMoveToCategorySubmenuItems(categories, currentCategory)}\n        </Menu.SubMenu>\n    );\n};\n\nexport default memo(ChannelMoveToSubMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useRef, memo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {\n    MarkAsUnreadIcon,\n    StarIcon,\n    StarOutlineIcon,\n    BellOutlineIcon,\n    BellOffOutlineIcon,\n    LinkVariantIcon,\n    AccountPlusOutlineIcon,\n    DotsVerticalIcon,\n    ExitToAppIcon,\n} from '@mattermost/compass-icons/components';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelMoveToSubmenu from 'components/channel_move_to_sub_menu';\nimport * as Menu from 'components/menu';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {copyToClipboard} from 'utils/utils';\n\nimport type {PropsFromRedux, OwnProps} from './index';\n\ntype Props = PropsFromRedux & OwnProps;\n\nconst SidebarChannelMenu = ({\n    channel,\n    channelLink,\n    currentUserId,\n    favoriteChannel,\n    isFavorite,\n    isMuted,\n    isUnread,\n    managePrivateChannelMembers,\n    managePublicChannelMembers,\n    markMultipleChannelsAsRead,\n    markMostRecentPostInChannelAsUnread,\n    muteChannel,\n    onMenuToggle,\n    openModal,\n    unfavoriteChannel,\n    unmuteChannel,\n    channelLeaveHandler,\n}: Props) => {\n    const isLeaving = useRef(false);\n\n    const {formatMessage} = useIntl();\n\n    let markAsReadUnreadMenuItem: JSX.Element | null = null;\n    if (isUnread) {\n        function handleMarkAsRead() {\n            // We use mark multiple to not update the active channel in the server\n            markMultipleChannelsAsRead({[channel.id]: Date.now()});\n            trackEvent('ui', 'ui_sidebar_channel_menu_markAsRead');\n        }\n\n        markAsReadUnreadMenuItem = (\n            <Menu.Item\n                id={`markAsRead-${channel.id}`}\n                onClick={handleMarkAsRead}\n                leadingElement={<MarkAsUnreadIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.markAsRead'\n                        defaultMessage='Mark as Read'\n                    />\n                )}\n            />\n\n        );\n    } else {\n        function handleMarkAsUnread() {\n            markMostRecentPostInChannelAsUnread(channel.id);\n            trackEvent('ui', 'ui_sidebar_channel_menu_markAsUnread');\n        }\n\n        markAsReadUnreadMenuItem = (\n            <Menu.Item\n                id={`markAsUnread-${channel.id}`}\n                onClick={handleMarkAsUnread}\n                leadingElement={<MarkAsUnreadIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.markAsUnread'\n                        defaultMessage='Mark as Unread'\n                    />\n                )}\n            />\n        );\n    }\n\n    let favoriteUnfavoriteMenuItem: JSX.Element | null = null;\n    if (isFavorite) {\n        function handleUnfavoriteChannel() {\n            unfavoriteChannel(channel.id);\n            trackEvent('ui', 'ui_sidebar_channel_menu_unfavorite');\n        }\n\n        favoriteUnfavoriteMenuItem = (\n            <Menu.Item\n                id={`unfavorite-${channel.id}`}\n                onClick={handleUnfavoriteChannel}\n                leadingElement={<StarIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.unfavoriteChannel'\n                        defaultMessage='Unfavorite'\n                    />\n                )}\n            />\n        );\n    } else {\n        function handleFavoriteChannel() {\n            favoriteChannel(channel.id);\n            trackEvent('ui', 'ui_sidebar_channel_menu_favorite');\n        }\n\n        favoriteUnfavoriteMenuItem = (\n\n            <Menu.Item\n                id={`favorite-${channel.id}`}\n                onClick={handleFavoriteChannel}\n                leadingElement={<StarOutlineIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.favoriteChannel'\n                        defaultMessage='Favorite'\n                    />\n                )}\n            />\n        );\n    }\n\n    let muteUnmuteChannelMenuItem: JSX.Element | null = null;\n    if (isMuted) {\n        let muteChannelText = (\n            <FormattedMessage\n                id='sidebar_left.sidebar_channel_menu.unmuteChannel'\n                defaultMessage='Unmute Channel'\n            />\n        );\n        if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n            muteChannelText = (\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu.unmuteConversation'\n                    defaultMessage='Unmute Conversation'\n                />\n            );\n        }\n\n        function handleUnmuteChannel() {\n            unmuteChannel(currentUserId, channel.id);\n        }\n\n        muteUnmuteChannelMenuItem = (\n            <Menu.Item\n                id={`unmute-${channel.id}`}\n                onClick={handleUnmuteChannel}\n                leadingElement={<BellOffOutlineIcon size={18}/>}\n                labels={muteChannelText}\n            />\n        );\n    } else {\n        let muteChannelText = (\n            <FormattedMessage\n                id='sidebar_left.sidebar_channel_menu.muteChannel'\n                defaultMessage='Mute Channel'\n            />\n        );\n        if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n            muteChannelText = (\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu.muteConversation'\n                    defaultMessage='Mute Conversation'\n                />\n            );\n        }\n\n        function handleMuteChannel() {\n            muteChannel(currentUserId, channel.id);\n        }\n\n        muteUnmuteChannelMenuItem = (\n            <Menu.Item\n                id={`mute-${channel.id}`}\n                onClick={handleMuteChannel}\n                leadingElement={<BellOutlineIcon size={18}/>}\n                labels={muteChannelText}\n            />\n        );\n    }\n\n    let copyLinkMenuItem: JSX.Element | null = null;\n    if (channel.type === Constants.OPEN_CHANNEL || channel.type === Constants.PRIVATE_CHANNEL) {\n        function handleCopyLink() {\n            copyToClipboard(channelLink);\n        }\n\n        copyLinkMenuItem = (\n            <Menu.Item\n                id={`copyLink-${channel.id}`}\n                onClick={handleCopyLink}\n                leadingElement={<LinkVariantIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.copyLink'\n                        defaultMessage='Copy Link'\n                    />\n                )}\n            />\n        );\n    }\n\n    let addMembersMenuItem: JSX.Element | null = null;\n    if ((channel.type === Constants.PRIVATE_CHANNEL && managePrivateChannelMembers) || (channel.type === Constants.OPEN_CHANNEL && managePublicChannelMembers)) {\n        function handleAddMembers() {\n            openModal({\n                modalId: ModalIdentifiers.CHANNEL_INVITE,\n                dialogType: ChannelInviteModal,\n                dialogProps: {channel},\n            });\n            trackEvent('ui', 'ui_sidebar_channel_menu_addMembers');\n        }\n\n        addMembersMenuItem = (\n            <Menu.Item\n                id={`addMembers-${channel.id}`}\n                onClick={handleAddMembers}\n                aria-haspopup='true'\n                leadingElement={<AccountPlusOutlineIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel_menu.addMembers'\n                        defaultMessage='Add Members'\n                    />\n                )}\n            />\n        );\n    }\n\n    let leaveChannelMenuItem: JSX.Element | null = null;\n    if (channel.name !== Constants.DEFAULT_CHANNEL) {\n        let leaveChannelText = (\n            <FormattedMessage\n                id='sidebar_left.sidebar_channel_menu.leaveChannel'\n                defaultMessage='Leave Channel'\n            />\n        );\n        if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n            leaveChannelText = (\n                <FormattedMessage\n                    id='sidebar_left.sidebar_channel_menu.leaveConversation'\n                    defaultMessage='Close Conversation'\n                />\n            );\n        }\n\n        function handleLeaveChannel() {\n            if (isLeaving.current || !channelLeaveHandler) {\n                return;\n            }\n\n            isLeaving.current = true;\n\n            channelLeaveHandler(() => {\n                isLeaving.current = false;\n            });\n            trackEvent('ui', 'ui_sidebar_channel_menu_leave');\n        }\n\n        leaveChannelMenuItem = (\n            <Menu.Item\n                id={`leave-${channel.id}`}\n                onClick={handleLeaveChannel}\n                leadingElement={<ExitToAppIcon size={18}/>}\n                labels={leaveChannelText}\n                isDestructive={true}\n            />\n        );\n    }\n\n    return (\n        <Menu.Container\n            menuButton={{\n                id: `SidebarChannelMenu-Button-${channel.id}`,\n                class: 'SidebarMenu_menuButton',\n                'aria-label': formatMessage({\n                    id: 'sidebar_left.sidebar_channel_menu.editChannel.ariaLabel',\n                    defaultMessage: 'Channel options for {channelName}',\n                }, {channelName: channel.name}),\n                children: <DotsVerticalIcon size={16}/>,\n            }}\n            menuButtonTooltip={{\n                id: `SidebarChannelMenu-ButtonTooltip-${channel.id}`,\n                class: 'hidden-xs',\n                text: formatMessage({id: 'sidebar_left.sidebar_channel_menu.editChannel', defaultMessage: 'Channel options'}),\n            }}\n            menu={{\n                id: `SidebarChannelMenu-MenuList-${channel.id}`,\n                'aria-label': formatMessage({id: 'sidebar_left.sidebar_channel_menu.dropdownAriaLabel', defaultMessage: 'Edit channel menu'}),\n                onToggle: onMenuToggle,\n            }}\n        >\n            {markAsReadUnreadMenuItem}\n            {favoriteUnfavoriteMenuItem}\n            {muteUnmuteChannelMenuItem}\n            <Menu.Separator/>\n            <ChannelMoveToSubmenu channel={channel}/>\n            {(copyLinkMenuItem || addMembersMenuItem) && <Menu.Separator/>}\n            {copyLinkMenuItem}\n            {addMembersMenuItem}\n            {leaveChannelMenuItem && <Menu.Separator/>}\n            {leaveChannelMenuItem}\n        </Menu.Container>\n    );\n};\n\nexport default memo(SidebarChannelMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {favoriteChannel, unfavoriteChannel, markMultipleChannelsAsRead} from 'mattermost-redux/actions/channels';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {isFavoriteChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships, getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {unmuteChannel, muteChannel} from 'actions/channel_actions';\nimport {markMostRecentPostInChannelAsUnread} from 'actions/post_actions';\nimport {openModal} from 'actions/views/modals';\n\nimport {getSiteURL} from 'utils/url';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarChannelMenu from './sidebar_channel_menu';\n\nexport type OwnProps = {\n    channel: Channel;\n    channelLink: string;\n    isUnread: boolean;\n    channelLeaveHandler?: (callback: () => void) => void;\n    onMenuToggle: (open: boolean) => void;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const member = getMyChannelMemberships(state)[ownProps.channel.id];\n    const currentTeam = getCurrentTeam(state);\n\n    let managePublicChannelMembers = false;\n    let managePrivateChannelMembers = false;\n\n    if (currentTeam) {\n        managePublicChannelMembers = haveIChannelPermission(state, currentTeam.id, ownProps.channel.id, Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS);\n        managePrivateChannelMembers = haveIChannelPermission(state, currentTeam.id, ownProps.channel.id, Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS);\n    }\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        isFavorite: isFavoriteChannel(state, ownProps.channel.id),\n        isMuted: isChannelMuted(member),\n        channelLink: `${getSiteURL()}${ownProps.channelLink}`,\n        managePublicChannelMembers,\n        managePrivateChannelMembers,\n    };\n}\n\nconst mapDispatchToProps = {\n    markMultipleChannelsAsRead,\n    markMostRecentPostInChannelAsUnread,\n    favoriteChannel,\n    unfavoriteChannel,\n    muteChannel,\n    unmuteChannel,\n    openModal,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(SidebarChannelMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {mark, trackEvent} from 'actions/telemetry_actions';\n\nimport CustomStatusEmoji from 'components/custom_status/custom_status_emoji';\nimport SharedChannelIndicator from 'components/shared_channel_indicator';\nimport {ChannelsAndDirectMessagesTour} from 'components/tours/onboarding_tour';\nimport WithTooltip from 'components/with_tooltip';\n\nimport Pluggable from 'plugins/pluggable';\nimport Constants, {RHSStates} from 'utils/constants';\nimport {wrapEmojis} from 'utils/emoji_utils';\nimport {cmdOrCtrlPressed} from 'utils/keyboard';\nimport {Mark} from 'utils/performance_telemetry';\nimport {localizeMessage} from 'utils/utils';\n\nimport type {RhsState} from 'types/store/rhs';\n\nimport ChannelMentionBadge from '../channel_mention_badge';\nimport ChannelPencilIcon from '../channel_pencil_icon';\nimport SidebarChannelIcon from '../sidebar_channel_icon';\nimport SidebarChannelMenu from '../sidebar_channel_menu';\n\ntype Props = {\n    channel: Channel;\n    link: string;\n    label: string;\n    ariaLabelPrefix?: string;\n    channelLeaveHandler?: (callback: () => void) => void;\n    icon: JSX.Element | null;\n\n    /**\n     * Number of unread mentions in this channel\n     */\n    unreadMentions: number;\n\n    /**\n     * Whether or not the channel is shown as unread\n     */\n    isUnread: boolean;\n\n    /**\n     * Checks if the current channel is muted\n     */\n    isMuted: boolean;\n\n    isChannelSelected: boolean;\n\n    teammateId?: string;\n\n    firstChannelName?: string;\n\n    showChannelsTutorialStep: boolean;\n\n    hasUrgent: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n    isSharedChannel?: boolean;\n\n    actions: {\n        markMostRecentPostInChannelAsUnread: (channelId: string) => void;\n        clearChannelSelection: () => void;\n        multiSelectChannelTo: (channelId: string) => void;\n        multiSelectChannelAdd: (channelId: string) => void;\n        unsetEditingPost: () => void;\n        closeRightHandSide: () => void;\n    };\n};\n\ntype State = {\n    isMenuOpen: boolean;\n    showTooltip: boolean;\n};\n\nexport default class SidebarChannelLink extends React.PureComponent<Props, State> {\n    labelRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.labelRef = React.createRef();\n\n        this.state = {\n            isMenuOpen: false,\n            showTooltip: false,\n        };\n    }\n\n    componentDidMount(): void {\n        this.enableToolTipIfNeeded();\n    }\n\n    componentDidUpdate(prevProps: Props): void {\n        if (prevProps.label !== this.props.label) {\n            this.enableToolTipIfNeeded();\n        }\n    }\n\n    enableToolTipIfNeeded = (): void => {\n        const element = this.labelRef.current;\n        const showTooltip = element && element.offsetWidth < element.scrollWidth;\n        this.setState({showTooltip: Boolean(showTooltip)});\n    };\n\n    getAriaLabel = (): string => {\n        const {label, ariaLabelPrefix, unreadMentions} = this.props;\n\n        let ariaLabel = label;\n\n        if (ariaLabelPrefix) {\n            ariaLabel += ` ${ariaLabelPrefix}`;\n        }\n\n        if (unreadMentions === 1) {\n            ariaLabel += ` ${unreadMentions} ${localizeMessage('accessibility.sidebar.types.mention', 'mention')}`;\n        } else if (unreadMentions > 1) {\n            ariaLabel += ` ${unreadMentions} ${localizeMessage('accessibility.sidebar.types.mentions', 'mentions')}`;\n        }\n\n        if (this.props.isUnread && unreadMentions === 0) {\n            ariaLabel += ` ${localizeMessage('accessibility.sidebar.types.unread', 'unread')}`;\n        }\n\n        return ariaLabel.toLowerCase();\n    };\n\n    handleChannelClick = (event: React.MouseEvent<HTMLAnchorElement>): void => {\n        mark(Mark.ChannelLinkClicked);\n        this.handleSelectChannel(event);\n\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n\n        setTimeout(() => {\n            trackEvent('ui', 'ui_channel_selected_v2');\n        }, 0);\n    };\n\n    handleSelectChannel = (event: React.MouseEvent<HTMLAnchorElement>): void => {\n        if (event.defaultPrevented || event.button !== 0) {\n            return;\n        }\n\n        if (cmdOrCtrlPressed(event as unknown as React.KeyboardEvent)) {\n            event.preventDefault();\n            this.props.actions.multiSelectChannelAdd(this.props.channel.id);\n        } else if (event.shiftKey) {\n            event.preventDefault();\n            this.props.actions.multiSelectChannelTo(this.props.channel.id);\n        } else if (event.altKey && !this.props.isUnread) {\n            event.preventDefault();\n            this.props.actions.markMostRecentPostInChannelAsUnread(this.props.channel.id);\n        } else {\n            this.props.actions.clearChannelSelection();\n        }\n    };\n\n    handleMenuToggle = (isMenuOpen: boolean) => {\n        this.setState({isMenuOpen});\n    };\n\n    render(): JSX.Element {\n        const {\n            channel,\n            icon,\n            isChannelSelected,\n            isMuted,\n            isUnread,\n            label,\n            link,\n            unreadMentions,\n            firstChannelName,\n            showChannelsTutorialStep,\n            hasUrgent,\n        } = this.props;\n\n        let channelsTutorialTip: JSX.Element | null = null;\n\n        // firstChannelName is based on channel.name,\n        // but we want to display `display_name` to the user, so we check against `.name` for channel equality but pass in the .display_name value\n        if (firstChannelName === channel.name || (!firstChannelName && showChannelsTutorialStep && channel.name === Constants.DEFAULT_CHANNEL)) {\n            channelsTutorialTip = firstChannelName ? (<ChannelsAndDirectMessagesTour firstChannelName={channel.display_name}/>) : <ChannelsAndDirectMessagesTour/>;\n        }\n\n        let labelElement: JSX.Element = (\n            <span\n                ref={this.labelRef}\n                className='SidebarChannelLinkLabel'\n            >\n                {wrapEmojis(label)}\n            </span>\n        );\n        if (this.state.showTooltip) {\n            labelElement = (\n                <WithTooltip\n                    id='channel-displayname__tooltip'\n                    title={label}\n                    placement={'top'}\n                >\n                    {labelElement}\n                </WithTooltip>\n            );\n        }\n\n        const customStatus = this.props.teammateId ? (\n            <CustomStatusEmoji\n                userID={this.props.teammateId}\n                showTooltip={true}\n                spanStyle={{\n                    height: 18,\n                }}\n                emojiStyle={{\n                    marginTop: -4,\n                    marginBottom: 0,\n                    opacity: 0.8,\n                }}\n            />\n        ) : null;\n\n        const sharedChannelIcon = this.props.isSharedChannel ? (\n            <SharedChannelIndicator\n                className='icon'\n                channelType={channel.type}\n                withTooltip={true}\n            />\n        ) : null;\n\n        const content = (\n            <>\n                <SidebarChannelIcon\n                    isDeleted={channel.delete_at !== 0}\n                    icon={icon}\n                />\n                <div\n                    className='SidebarChannelLinkLabel_wrapper'\n                >\n                    {labelElement}\n                    {customStatus}\n                    <Pluggable\n                        pluggableName='SidebarChannelLinkLabel'\n                        channel={this.props.channel}\n                    />\n                    {sharedChannelIcon}\n                </div>\n                <ChannelPencilIcon id={channel.id}/>\n                <ChannelMentionBadge\n                    unreadMentions={unreadMentions}\n                    hasUrgent={hasUrgent}\n                />\n                <div\n                    className={classNames(\n                        'SidebarMenu',\n                        'MenuWrapper',\n                        {menuOpen: this.state.isMenuOpen},\n                        {'MenuWrapper--open': this.state.isMenuOpen},\n                    )}\n                >\n                    <SidebarChannelMenu\n                        channel={channel}\n                        channelLink={link}\n                        isUnread={isUnread}\n                        channelLeaveHandler={this.props.channelLeaveHandler}\n                        onMenuToggle={this.handleMenuToggle}\n                    />\n                </div>\n            </>\n        );\n\n        // NOTE: class added to temporarily support the desktop app's at-mention DOM scraping of the old sidebar\n        const className = classNames([\n            'SidebarLink',\n            {\n                menuOpen: this.state.isMenuOpen,\n                muted: isMuted,\n                'unread-title': this.props.isUnread,\n                selected: isChannelSelected,\n            },\n        ]);\n        return (\n            <Link\n                className={className}\n                id={`sidebarItem_${channel.name}`}\n                aria-label={this.getAriaLabel()}\n                to={link}\n                onClick={this.handleChannelClick}\n                tabIndex={0}\n            >\n                {content}\n                {channelsTutorialTip}\n            </Link>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {makeGetChannelUnreadCount} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId, getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getInt} from 'mattermost-redux/selectors/entities/preferences';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\n\nimport {markMostRecentPostInChannelAsUnread, unsetEditingPost} from 'actions/post_actions';\nimport {clearChannelSelection, multiSelectChannelAdd, multiSelectChannelTo} from 'actions/views/channel_sidebar';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getFirstChannelName} from 'selectors/onboarding';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {isChannelSelected} from 'selectors/views/channel_sidebar';\n\nimport {\n    GenericTaskSteps,\n    OnboardingTaskCategory,\n    OnboardingTasksName,\n} from 'components/onboarding_tasks';\nimport {FINISHED, OnboardingTourSteps, TutorialTourName} from 'components/tours';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarChannelLink from './sidebar_channel_link';\n\ntype OwnProps = {\n    channel: Channel;\n}\n\nfunction makeMapStateToProps() {\n    const getUnreadCount = makeGetChannelUnreadCount();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const member = getMyChannelMemberships(state)[ownProps.channel.id];\n        const unreadCount = getUnreadCount(state, ownProps.channel.id);\n        const config = getConfig(state);\n        const enableTutorial = config.EnableTutorial === 'true';\n        const currentUserId = getCurrentUserId(state);\n        const tutorialStep = getInt(state, TutorialTourName.ONBOARDING_TUTORIAL_STEP, currentUserId, 0);\n        const triggerStep = getInt(state, OnboardingTaskCategory, OnboardingTasksName.CHANNELS_TOUR, FINISHED);\n        const channelTourTriggered = triggerStep === GenericTaskSteps.STARTED;\n        const isOnboardingFlowEnabled = config.EnableOnboardingFlow;\n        const showChannelsTour = enableTutorial && tutorialStep === OnboardingTourSteps.CHANNELS_AND_DIRECT_MESSAGES;\n        const showChannelsTutorialStep = showChannelsTour && channelTourTriggered && isOnboardingFlowEnabled === 'true';\n        return {\n            unreadMentions: unreadCount.mentions,\n            unreadMsgs: unreadCount.messages,\n            isUnread: unreadCount.showUnread,\n            isMuted: isChannelMuted(member),\n            hasUrgent: unreadCount.hasUrgent,\n            isChannelSelected: isChannelSelected(state, ownProps.channel.id),\n            firstChannelName: showChannelsTutorialStep ? getFirstChannelName(state) : '',\n            showChannelsTutorialStep,\n            rhsState: getRhsState(state),\n            rhsOpen: getIsRhsOpen(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            markMostRecentPostInChannelAsUnread,\n            unsetEditingPost,\n            clearChannelSelection,\n            multiSelectChannelTo,\n            multiSelectChannelAdd,\n            closeRightHandSide,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SidebarChannelLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {ChannelType} from '@mattermost/types/channels';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    channelType: ChannelType;\n}\n\nconst SidebarBaseChannelIcon = ({\n    channelType,\n}: Props) => {\n    if (channelType === Constants.OPEN_CHANNEL) {\n        return (\n            <i className='icon icon-globe'/>\n        );\n    }\n    if (channelType === Constants.PRIVATE_CHANNEL) {\n        return (\n            <i className='icon icon-lock-outline'/>\n        );\n    }\n    return null;\n};\n\nexport default SidebarBaseChannelIcon;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport LeaveChannelModal from 'components/leave_channel_modal';\nimport SidebarChannelLink from 'components/sidebar/sidebar_channel/sidebar_channel_link';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport SidebarBaseChannelIcon from './sidebar_base_channel_icon';\n\nimport type {PropsFromRedux} from './index';\n\nexport interface Props extends PropsFromRedux {\n    channel: Channel;\n    currentTeamName: string;\n}\n\nconst SidebarBaseChannel = ({\n    channel,\n    currentTeamName,\n    actions,\n}: Props) => {\n    const intl = useIntl();\n\n    const handleLeavePublicChannel = useCallback((callback: () => void) => {\n        actions.leaveChannel(channel.id);\n        trackEvent('ui', 'ui_public_channel_x_button_clicked');\n        callback();\n    }, [channel.id, actions.leaveChannel]);\n\n    const handleLeavePrivateChannel = useCallback((callback: () => void) => {\n        actions.openModal({modalId: ModalIdentifiers.LEAVE_PRIVATE_CHANNEL_MODAL, dialogType: LeaveChannelModal, dialogProps: {channel}});\n        trackEvent('ui', 'ui_private_channel_x_button_clicked');\n        callback();\n    }, [channel, actions.openModal]);\n\n    let channelLeaveHandler = null;\n    if (channel.type === Constants.OPEN_CHANNEL && channel.name !== Constants.DEFAULT_CHANNEL) {\n        channelLeaveHandler = handleLeavePublicChannel;\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        channelLeaveHandler = handleLeavePrivateChannel;\n    }\n\n    const channelIcon = (\n        <SidebarBaseChannelIcon\n            channelType={channel.type}\n        />\n    );\n\n    let ariaLabelPrefix;\n    if (channel.type === Constants.OPEN_CHANNEL) {\n        ariaLabelPrefix = intl.formatMessage({id: 'accessibility.sidebar.types.public', defaultMessage: 'public channel'});\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        ariaLabelPrefix = intl.formatMessage({id: 'accessibility.sidebar.types.private', defaultMessage: 'private channel'});\n    }\n\n    return (\n        <SidebarChannelLink\n            channel={channel}\n            link={`/${currentTeamName}/channels/${channel.name}`}\n            label={channel.display_name}\n            ariaLabelPrefix={ariaLabelPrefix}\n            channelLeaveHandler={channelLeaveHandler!}\n            icon={channelIcon}\n            isSharedChannel={channel.shared}\n        />\n    );\n};\n\nexport default SidebarBaseChannel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {leaveChannel} from 'actions/views/channel';\nimport {openModal} from 'actions/views/modals';\n\nimport SidebarBaseChannel from './sidebar_base_channel';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            leaveChannel,\n            openModal,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(SidebarBaseChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Client4} from 'mattermost-redux/client';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport ProfilePicture from 'components/profile_picture';\n\nimport {getHistory} from 'utils/browser_history';\nimport {Constants} from 'utils/constants';\n\nimport SidebarChannelLink from '../sidebar_channel_link';\n\ntype Props = {\n    intl: IntlShape;\n    channel: Channel;\n    teammate?: UserProfile;\n    currentTeamName: string;\n    currentUserId: string;\n    redirectChannel: string;\n    active: boolean;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n        leaveDirectChannel: (channelId: string) => Promise<ActionResult>;\n    };\n};\n\nclass SidebarDirectChannel extends React.PureComponent<Props> {\n    handleLeaveChannel = (callback: () => void) => {\n        const id = this.props.channel.teammate_id;\n        const category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n\n        const currentUserId = this.props.currentUserId;\n        this.props.actions.savePreferences(currentUserId, [{user_id: currentUserId, category, name: id!, value: 'false'}]).then(callback);\n        this.props.actions.leaveDirectChannel(this.props.channel.name);\n\n        trackEvent('ui', 'ui_direct_channel_x_button_clicked');\n\n        if (this.props.active) {\n            getHistory().push(`/${this.props.currentTeamName}/channels/${this.props.redirectChannel}`);\n        }\n    };\n\n    getIcon = () => {\n        const {channel, teammate} = this.props;\n\n        if (!teammate) {\n            return null;\n        }\n\n        if (teammate.id && teammate.delete_at) {\n            return (\n                <i className='icon icon-archive-outline'/>\n            );\n        }\n\n        let className = '';\n        if (channel.status === 'online') {\n            className = 'status-online';\n        } else if (channel.status === 'away') {\n            className = 'status-away';\n        } else if (channel.status === 'dnd') {\n            className = 'status-dnd';\n        }\n\n        return (\n            <ProfilePicture\n                src={Client4.getProfilePictureUrl(teammate.id, teammate.last_picture_update)}\n                size={'xs'}\n                status={teammate.is_bot ? '' : channel.status}\n                wrapperClass='DirectChannel__profile-picture'\n                newStatusIcon={true}\n                statusClass={`DirectChannel__status-icon ${className}`}\n            />\n        );\n    };\n\n    render() {\n        const {channel, teammate, currentTeamName} = this.props;\n\n        if (!teammate) {\n            return null;\n        }\n\n        let displayName = channel.display_name;\n        if (this.props.currentUserId === teammate.id) {\n            displayName = this.props.intl.formatMessage({\n                id: 'sidebar.directchannel.you',\n                defaultMessage: '{displayname} (you)',\n            }, {\n                displayname: channel.display_name,\n            });\n        }\n\n        return (\n            <SidebarChannelLink\n                teammateId={teammate.id}\n                channel={channel}\n                link={`/${currentTeamName}/messages/@${teammate.username}`}\n                label={displayName}\n                channelLeaveHandler={this.handleLeaveChannel}\n                icon={this.getIcon()}\n                isSharedChannel={teammate.remote_id !== undefined}\n            />\n        );\n    }\n}\n\nexport default injectIntl(SidebarDirectChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentChannelId, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser, getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {leaveDirectChannel} from 'actions/views/channel';\n\nimport SidebarDirectChannel from './sidebar_direct_channel';\n\ntype OwnProps = {\n    channel: Channel;\n    currentTeamName: string;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const teammate = getUser(state, ownProps.channel.teammate_id!);\n    const currentUser = getCurrentUser(state);\n    const currentTeam = getCurrentTeam(state);\n    const redirectChannel = currentTeam ? getRedirectChannelNameForTeam(state, currentTeam.id) : '';\n    const currentChannelId = getCurrentChannelId(state);\n    const active = ownProps.channel.id === currentChannelId;\n\n    return {\n        teammate,\n        currentUserId: currentUser.id,\n        redirectChannel,\n        active,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            leaveDirectChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarDirectChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {PreferenceType} from '@mattermost/types/preferences';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport SidebarChannelLink from 'components/sidebar/sidebar_channel/sidebar_channel_link';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\n\ntype Props = {\n    channel: Channel;\n    currentTeamName: string;\n    currentUserId: string;\n    redirectChannel: string;\n    active: boolean;\n    membersCount: number;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n    };\n};\n\nconst SidebarGroupChannel = ({\n    channel,\n    currentUserId,\n    actions,\n    active,\n    currentTeamName,\n    redirectChannel,\n    membersCount,\n}: Props) => {\n    const handleLeaveChannel = useCallback((callback: () => void) => {\n        const id = channel.id;\n        const category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n\n        actions.savePreferences(currentUserId, [{user_id: currentUserId, category, name: id, value: 'false'}]).then(callback);\n\n        trackEvent('ui', 'ui_direct_channel_x_button_clicked');\n\n        if (active) {\n            getHistory().push(`/${currentTeamName}/channels/${redirectChannel}`);\n        }\n    }, [channel.id, actions, active, currentTeamName, redirectChannel, currentUserId]);\n\n    const getIcon = () => {\n        return (\n            <div className='status status--group'>{membersCount}</div>\n        );\n    };\n\n    return (\n        <SidebarChannelLink\n            channel={channel}\n            link={`/${currentTeamName}/messages/${channel.name}`}\n            label={channel.display_name}\n            channelLeaveHandler={handleLeaveChannel}\n            icon={getIcon()}\n        />\n    );\n};\n\nexport default memo(SidebarGroupChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentChannelId, getRedirectChannelNameForTeam, makeGetGmChannelMemberCount} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport SidebarGroupChannel from './sidebar_group_channel';\n\ntype OwnProps = {\n    channel: Channel;\n}\n\nfunction makeMapStateToProps() {\n    const getMemberCount = makeGetGmChannelMemberCount();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const currentUserId = getCurrentUserId(state);\n        const currentTeam = getCurrentTeam(state);\n        const redirectChannel = currentTeam ? getRedirectChannelNameForTeam(state, currentTeam.id) : '';\n        const currentChannelId = getCurrentChannelId(state);\n        const membersCount = getMemberCount(state, ownProps.channel);\n        const active = ownProps.channel.id === currentChannelId;\n\n        return {\n            currentUserId,\n            redirectChannel,\n            active,\n            membersCount,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SidebarGroupChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport {getCurrentChannelId, makeGetChannel, makeGetChannelUnreadCount} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getAutoSortedCategoryIds, getDraggingState, isChannelSelected} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarChannel from './sidebar_channel';\n\ntype OwnProps = {\n    channelId: string;\n    channelIndex: number;\n    isCategoryCollapsed: boolean;\n    isCategoryDragged: boolean;\n    isDraggable: boolean;\n    isAutoSortedCategory: boolean;\n\n    /**\n     * Sets the ref for the sidebar channel div element, so that it can be used by parent components\n     */\n    setChannelRef: (channelId: string, ref: HTMLLIElement) => void;\n}\n\nfunction makeMapStateToProps() {\n    const getChannel = makeGetChannel();\n    const getUnreadCount = makeGetChannelUnreadCount();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const channel = getChannel(state, {id: ownProps.channelId});\n        const currentTeam = getCurrentTeam(state);\n\n        const currentChannelId = getCurrentChannelId(state);\n\n        const unreadCount = getUnreadCount(state, channel?.id || '');\n\n        return {\n            channel,\n            isCurrentChannel: channel?.id === currentChannelId,\n            currentTeamName: currentTeam?.name,\n            unreadMentions: unreadCount.mentions,\n            isUnread: unreadCount.showUnread,\n            draggingState: getDraggingState(state),\n            isChannelSelected: isChannelSelected(state, ownProps.channelId),\n            multiSelectedChannelIds: state.views.channelSidebar.multiSelectedChannelIds,\n            autoSortedCategoryIds: getAutoSortedCategoryIds(state),\n        };\n    };\n}\n\nconst connector = connect(makeMapStateToProps);\n\ntype PropsFromRedux = Omit<ConnectedProps<typeof connector>, 'dispatch'>;\n\nexport type Props = OwnProps & PropsFromRedux;\n\nexport default connector(SidebarChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useState} from 'react';\nimport type {AnimationEvent, ReactNode} from 'react';\nimport {Draggable} from 'react-beautiful-dnd';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\n\nimport SidebarBaseChannel from './sidebar_base_channel';\nimport SidebarDirectChannel from './sidebar_direct_channel';\nimport SidebarGroupChannel from './sidebar_group_channel';\n\nimport type {Props} from './index';\n\nfunction SidebarChannel({\n    isCategoryCollapsed,\n    isCategoryDragged,\n    isUnread,\n    isCurrentChannel,\n    setChannelRef,\n    channel,\n    currentTeamName,\n    isDraggable,\n    isChannelSelected,\n    draggingState,\n    multiSelectedChannelIds,\n    channelIndex,\n    isAutoSortedCategory,\n    autoSortedCategoryIds,\n}: Props) {\n    const [show, setShow] = useState(true);\n    if (!channel) {\n        return null;\n    }\n\n    if (!currentTeamName) {\n        return null;\n    }\n\n    function isCollapsed() {\n        return (\n            isCategoryDragged ||\n            (isCategoryCollapsed && !isUnread && !isCurrentChannel)\n        );\n    }\n\n    function setRef(refMethod?: (element: HTMLLIElement) => void) {\n        return (ref: HTMLLIElement) => {\n            setChannelRef(channel?.id || '', ref);\n            refMethod?.(ref);\n        };\n    }\n\n    function handleAnimationStart(event: AnimationEvent) {\n        if (\n            event &&\n            event.animationName === 'toOpaqueAnimation' &&\n            !isCollapsed()\n        ) {\n            setShow(true);\n        }\n    }\n\n    function handleAnimationEnd(event: AnimationEvent) {\n        if (\n            event &&\n            event.animationName === 'toTransparentAnimation' &&\n            isCollapsed()\n        ) {\n            setShow(false);\n        }\n    }\n\n    let component: ReactNode;\n    if (!show) {\n        component = null;\n    } else if (channel.type === Constants.DM_CHANNEL) {\n        component = (\n            <SidebarDirectChannel\n                channel={channel}\n                currentTeamName={currentTeamName}\n            />\n        );\n    } else if (channel.type === Constants.GM_CHANNEL) {\n        component = (\n            <SidebarGroupChannel\n                channel={channel}\n                currentTeamName={currentTeamName}\n            />\n        );\n    } else {\n        component = (\n            <SidebarBaseChannel\n                channel={channel}\n                currentTeamName={currentTeamName}\n            />\n        );\n    }\n\n    if (isDraggable) {\n        let selectedCount: React.ReactNode;\n        if (\n            isChannelSelected &&\n            draggingState.state &&\n            draggingState.id === channel.id &&\n            multiSelectedChannelIds.length > 1\n        ) {\n            selectedCount = show ? (\n                <div className='SidebarChannel__selectedCount'>\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_channel.selectedCount'\n                        defaultMessage='{count} selected'\n                        values={{count: multiSelectedChannelIds.length}}\n                    />\n                </div>\n            ) : null;\n        }\n\n        return (\n            <Draggable\n                draggableId={channel.id}\n                index={channelIndex}\n            >\n                {(provided, snapshot) => {\n                    return (\n                        <li\n                            draggable='false'\n                            ref={setRef(provided.innerRef)}\n                            className={classNames('SidebarChannel', {\n                                collapsed: isCollapsed(),\n                                expanded: !isCollapsed(),\n                                unread: isUnread,\n                                active: isCurrentChannel,\n                                dragging: snapshot.isDragging,\n                                selectedDragging:\n                                    isChannelSelected &&\n                                    draggingState.state &&\n                                    draggingState.id !== channel.id,\n                                fadeOnDrop:\n                                    snapshot.isDropAnimating &&\n                                    snapshot.draggingOver &&\n                                    autoSortedCategoryIds.has(\n                                        snapshot.draggingOver,\n                                    ),\n                                noFloat:\n                                    isAutoSortedCategory &&\n                                    !snapshot.isDragging,\n                            })}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            onAnimationStart={handleAnimationStart}\n                            onAnimationEnd={handleAnimationEnd}\n                            role='listitem'\n                            tabIndex={-1}\n                        >\n                            {component}\n                            {selectedCount}\n                        </li>\n                    );\n                }}\n            </Draggable>\n        );\n    }\n\n    return (\n        <li\n            ref={setRef()}\n            className={classNames('SidebarChannel', {\n                collapsed: isCollapsed(),\n                expanded: !isCollapsed(),\n                unread: isUnread,\n                active: isCurrentChannel,\n            })}\n            onAnimationStart={handleAnimationStart}\n            onAnimationEnd={handleAnimationEnd}\n            role='listitem'\n        >\n            {component}\n        </li>\n    );\n}\n\nexport default SidebarChannel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {GetGroupsForUserParams, GetGroupsParams} from '@mattermost/types/groups';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {fetchChannelsAndMembers} from 'mattermost-redux/actions/channels';\nimport {logError} from 'mattermost-redux/actions/errors';\nimport {getGroups, getAllGroupsAssociatedToChannelsInTeam, getAllGroupsAssociatedToTeam, getGroupsByUserIdPaginated} from 'mattermost-redux/actions/groups';\nimport {forceLogoutIfNecessary} from 'mattermost-redux/actions/helpers';\nimport {getTeamByName, selectTeam} from 'mattermost-redux/actions/teams';\nimport {getIsUserStatusesConfigEnabled} from 'mattermost-redux/selectors/entities/common';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {isCustomGroupsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport type {ActionFuncAsync} from 'mattermost-redux/types/actions';\n\nimport {addVisibleUsersInCurrentChannelToStatusPoll} from 'actions/status_actions';\nimport {addUserToTeam} from 'actions/team_actions';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {isSuccess} from 'types/actions';\nimport type {GlobalState} from 'types/store';\n\nexport function initializeTeam(team: Team): ActionFuncAsync<Team, GlobalState> {\n    return async (dispatch, getState) => {\n        dispatch(selectTeam(team.id));\n\n        const state = getState();\n        const currentUser = getCurrentUser(state);\n        LocalStorageStore.setPreviousTeamId(currentUser.id, team.id);\n\n        try {\n            await dispatch(fetchChannelsAndMembers(team.id));\n        } catch (error) {\n            forceLogoutIfNecessary(error as ServerError, dispatch, getState);\n            dispatch(logError(error as ServerError));\n            return {error: error as ServerError};\n        }\n\n        const enabledUserStatuses = getIsUserStatusesConfigEnabled(state);\n        if (enabledUserStatuses) {\n            dispatch(addVisibleUsersInCurrentChannelToStatusPoll());\n        }\n\n        const license = getLicense(state);\n        const customGroupEnabled = isCustomGroupsEnabled(state);\n        if (license &&\n            license.IsLicensed === 'true' &&\n            (license.LDAPGroups === 'true' || customGroupEnabled)) {\n            const groupsParams: GetGroupsParams = {\n                filter_allow_reference: false,\n                page: 0,\n                per_page: 60,\n                include_member_count: true,\n                include_member_ids: true,\n                include_archived: false,\n            };\n            const myGroupsParams: GetGroupsForUserParams = {\n                ...groupsParams,\n                filter_has_member: currentUser.id,\n            };\n\n            if (currentUser) {\n                dispatch(getGroupsByUserIdPaginated(myGroupsParams));\n            }\n\n            if (license.LDAPGroups === 'true') {\n                dispatch(getAllGroupsAssociatedToChannelsInTeam(team.id, true));\n            }\n\n            if (team.group_constrained && license.LDAPGroups === 'true') {\n                dispatch(getAllGroupsAssociatedToTeam(team.id, true));\n            } else {\n                dispatch(getGroups(groupsParams));\n            }\n        }\n\n        return {data: team};\n    };\n}\n\nexport function joinTeam(teamname: string, joinedOnFirstLoad: boolean): ActionFuncAsync<Team, GlobalState> {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const currentUser = getCurrentUser(state);\n\n        try {\n            const teamByNameResult = await dispatch(getTeamByName(teamname));\n            if (isSuccess(teamByNameResult)) {\n                const team = teamByNameResult.data;\n\n                if (currentUser && team && team.delete_at === 0) {\n                    const addUserToTeamResult = await dispatch(addUserToTeam(team.id, currentUser.id));\n                    if (isSuccess(addUserToTeamResult)) {\n                        if (joinedOnFirstLoad) {\n                            LocalStorageStore.setTeamIdJoinedOnLoad(team.id);\n                        }\n\n                        await dispatch(initializeTeam(team));\n\n                        return {data: team};\n                    }\n                    throw addUserToTeamResult.error;\n                }\n                throw new Error('Team not found or deleted');\n            } else {\n                throw teamByNameResult.error;\n            }\n        } catch (error) {\n            forceLogoutIfNecessary(error as ServerError, dispatch, getState);\n            dispatch(logError(error as ServerError));\n            return {error: error as ServerError};\n        }\n    };\n}\n","// src/components/UrlTabs.tsx\nimport React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    setActivebrowserTab,\n    addbrowserTab,\n    removebrowserTab,\n} from \"./browser-state\";\nimport \"./browsertabs.scss\";\nimport { LuPlus } from \"react-icons/lu\";\n\nconst UrlTabs: React.FC = () => {\n    const { tabs, activeTabIndex } = useSelector(\n        (state: any) => state.urlManager\n    );\n    const dispatch = useDispatch();\n    const state = useSelector((state: any) => state);\n    const idnumber = state.tabs.length;\n    return (\n        <div className=\"tabs-wrapper\">\n            {tabs.map((tab: any, index: any) => (\n                <div\n                    key={tab.id}\n                    className={\n                        activeTabIndex === index\n                            ? \"active-browser custom-tabs\"\n                            : \"custom-tabs\"\n                    }\n                >\n                    <button\n                        style={{\n                            width: \"80%\",\n                            textAlign: \"left\",\n                            overflow: \"hidden\",\n                        }}\n                        onClick={() => dispatch(setActivebrowserTab(index))}\n                    >\n                        {tab.url ? tab.url : \"New Tab\"}\n                    </button>\n                    <button\n                        style={{ width: \"20%\" }}\n                        onClick={() => dispatch(removebrowserTab(index))}\n                    >\n                        x\n                    </button>\n                </div>\n            ))}\n            <LuPlus\n                onClick={() => dispatch(addbrowserTab(idnumber))}\n                className=\"icon\"\n            />\n        </div>\n    );\n};\n\nexport default UrlTabs;\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LuPlus } from \"react-icons/lu\";\nimport { LiaCompass } from \"react-icons/lia\";\nimport UrlTabs from \"../browser/browser-tab\";\nimport \"./browser-header.scss\";\nimport { addbrowserTab } from \"../browser/browser-state\";\n\nconst BrowserHeader = () => {\n    const dispatch = useDispatch();\n    const { urls, activeTabIndex, isBrowserTabActive } = useSelector(\n        (state: any) => state.urlManager\n    );\n\n    return (\n        <div className=\"browser-header\">\n            {/* Default BrowserTab (Infogito) */}\n            {/* <div className={`browser-tab`}>\n                <LiaCompass className=\"icon\" /> <span>Infogito</span>\n            </div> */}\n\n            <UrlTabs />\n\n            {/* <LuPlus\n                onClick={() => dispatch(addbrowserTab(idnumber))}\n                className=\"icon\"\n            /> */}\n        </div>\n    );\n};\n\nexport default BrowserHeader;\n","import React, { useState } from \"react\";\nimport \"./browser-search-section.scss\";\nimport { LiaAngleLeftSolid } from \"react-icons/lia\";\nimport { LiaAngleRightSolid } from \"react-icons/lia\";\nimport { IoRefresh } from \"react-icons/io5\";\nimport { RxHamburgerMenu } from \"react-icons/rx\";\nimport { CiLock } from \"react-icons/ci\";\n\nconst Browser_Search_Section = () => {\n    const style = {\n        color: \"#F1F3F4\",\n        width: \"20px\",\n        height: \"20px\",\n        \"&:hover\": { cursor: \"pointer\" },\n    };\n    const defaultUrl = \"www.infogito.com\";\n\n    // const [searchValue, setSearchValue] = useState(\"\");\n    return (\n        <div className=\"browser-search-section\">\n            <LiaAngleLeftSolid className=\"icon\" />\n            <LiaAngleRightSolid className=\"icon\" />\n            <IoRefresh className=\"refresh-icon\" />\n            <div className=\"search-bar\">\n                <CiLock className=\"lock-icon\" />\n                <input\n                    className=\"input-field\"\n                    type=\"text\"\n                    defaultValue={defaultUrl}\n                />\n            </div>\n\n            <RxHamburgerMenu className=\"hamburg-icon\" />\n        </div>\n    );\n};\n\nexport default Browser_Search_Section;\n","import React from \"react\";\n\ninterface UrlIframeProps {\n    url: string;\n}\n\nconst UrlIframe: React.FC<UrlIframeProps> = ({ url }) => {\n    return (\n        <div className=\"iframe-container\">\n            <iframe\n                src={url}\n                width=\"100%\"\n                height=\"100%\"\n                title={`URL Iframe - ${url}`}\n                sandbox=\"allow-scripts allow-same-origin allow-popups allow-forms\"\n                style={{ border: \"none\" }}\n            />\n        </div>\n    );\n};\n\nexport default UrlIframe;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, { useState } from \"react\";\n\nimport CameraOutlineIcon from \"@mattermost/compass-icons/components/camera-outline\";\n\nimport \"./browser_body.scss\";\n\nimport logoImage from \"../../../images/infogito.png\";\nimport backgroundImage from \"../../../images/internet_browser_background.png\";\nimport robotImage from \"../../../images/internet_browser_robot.png\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setTabUrl } from \"../browser/browser-state\";\n\nconst BrowserBody = () => {\n    const [url, setUrl] = useState(\"\");\n    const dispatch = useDispatch();\n    const { activeTabIndex } = useSelector((state: any) => state.urlManager);\n    const handleSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n        if (url) {\n            dispatch(setTabUrl(activeTabIndex, url));\n            setUrl(\"\");\n        }\n    };\n    return (\n        <div id=\"BrowserBody\" className=\"BrowserBody\">\n            <img className=\"background\" src={backgroundImage} loading=\"lazy\" />\n\n            <div className=\"BrowserBody__content\">\n                <div className=\"searchbar\">\n                    <i className=\"icon icon-magnify\" />\n                    <form className=\"form-input\" onSubmit={handleSubmit}>\n                        <input\n                            type=\"text\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                            placeholder=\"Search google or type a URL\"\n                            required\n                        />\n                    </form>\n\n                    <i className=\"icon icon-microphone\" />\n                    <CameraOutlineIcon className=\"icon\" color=\"black\" />\n                </div>\n\n                <img className=\"logo\" src={logoImage} />\n                <img className=\"robot\" src={robotImage} />\n            </div>\n        </div>\n    );\n};\n\nexport default BrowserBody;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport UrlIframe from \"./browser-iframe\";\nimport BrowserBody from \"../browser_body\";\n\nconst ContentDisplay: React.FC = () => {\n    const { tabs, activeTabIndex } = useSelector(\n        (state: any) => state.urlManager\n    );\n\n    return (\n        <div className=\"tab-content-browser\">\n            {tabs.map((tab: any, index: number) => (\n                <div\n                    key={index}\n                    style={{\n                        display: activeTabIndex === index ? \"flex\" : \"none\",\n                        width: \"100%\",\n                        height: \"100%\",\n                    }} // Hide inactive tabs\n                >\n                    {tab.url ? <UrlIframe url={tab.url} /> : <BrowserBody />}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default ContentDisplay;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport UrlIframe from \"./browser/browser-iframe\";\nimport BrowserBody from \"./browser_body\";\nimport BrowserHeader from \"./browser_header\";\nimport BrowserSearchSection from \"./browser_search_section\";\nimport UrlTabs from \"./browser/browser-tab\";\nimport ContentDisplay from \"./browser/contentDisplay\";\n\nconst BrowserView = () => {\n    // Access the URLs, active tab index, and browser tab active state from the Redux store\n    const { urls, activeTabIndex, isBrowserTabActive } = useSelector(\n        (state: any) => state.urlManager\n    );\n\n    return (\n        <div\n            style={{\n                marginLeft: \"-1px\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                height: \"100%\",\n            }}\n        >\n            <BrowserHeader />\n            <BrowserSearchSection />\n\n            <ContentDisplay />\n        </div>\n    );\n};\n\nexport default BrowserView;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {History} from 'history';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {joinChannel, getChannelByNameAndTeamName, getChannelMember, markGroupChannelOpen, fetchChannelsAndMembers} from 'mattermost-redux/actions/channels';\nimport {getUser, getUserByUsername, getUserByEmail} from 'mattermost-redux/actions/users';\nimport {Client4} from 'mattermost-redux/client';\nimport {getChannelByName, getOtherChannels, getChannel, getChannelsNameMapInTeam, getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser, getCurrentUserId, getUserByUsername as selectUserByUsername, getUser as selectUser, getUserByEmail as selectUserByEmail} from 'mattermost-redux/selectors/entities/users';\nimport type {ActionFuncAsync} from 'mattermost-redux/types/actions';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions';\nimport * as GlobalActions from 'actions/global_actions';\n\nimport {joinPrivateChannelPrompt} from 'utils/channel_utils';\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport type {Match, MatchAndHistory} from './channel_identifier_router';\n\nconst LENGTH_OF_ID = 26;\nconst LENGTH_OF_GROUP_ID = 40;\nconst LENGTH_OF_USER_ID_PAIR = 54;\nconst USER_ID_PAIR_REGEXP = new RegExp(`^[a-zA-Z0-9]{${LENGTH_OF_ID}}__[a-zA-Z0-9]{${LENGTH_OF_ID}}$`);\n\nexport function onChannelByIdentifierEnter({match, history}: MatchAndHistory): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {path, identifier, team} = match.params;\n\n        if (!identifier) {\n            return {data: undefined};\n        }\n\n        const teamObj = getTeamByName(state, team);\n        if (!teamObj) {\n            return {data: undefined};\n        }\n\n        const channelPath = await getPathFromIdentifier(state, path, identifier);\n\n        switch (channelPath) {\n        case 'channel_name':\n            dispatch(goToChannelByChannelName(match, history));\n            break;\n        case 'channel_id':\n            dispatch(goToChannelByChannelId(match, history));\n            break;\n        case 'group_channel_group_id':\n            dispatch(goToGroupChannelByGroupId(match, history));\n            break;\n        case 'direct_channel_username':\n            dispatch(goToDirectChannelByUsername(match, history));\n            break;\n        case 'direct_channel_email':\n            dispatch(goToDirectChannelByEmail(match, history));\n            break;\n        case 'direct_channel_user_ids':\n            dispatch(goToDirectChannelByUserIds(match, history));\n            break;\n        case 'direct_channel_user_id':\n            dispatch(goToDirectChannelByUserId(match, history, identifier));\n            break;\n        case 'error':\n            await dispatch(fetchChannelsAndMembers(teamObj!.id));\n            handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n            break;\n        }\n        return {data: undefined};\n    };\n}\n\nexport async function getPathFromIdentifier(state: GlobalState, path: string, identifier: string) {\n    if (path === 'channels') {\n        // It's hard to tell an ID apart from a channel name of the same length, so check first if\n        // the identifier matches a channel that we have\n        const channelsByName = getChannelByName(state, identifier);\n        const moreChannelsByName = getOtherChannels(state).find((chan) => chan.name === identifier);\n\n        if (identifier.length === LENGTH_OF_ID) {\n            if (!channelsByName && !moreChannelsByName) {\n                try {\n                    await Client4.getChannel(identifier);\n                    return 'channel_id';\n                } catch (e) {\n                    if (e.status_code === 404) {\n                        return 'channel_name';\n                    }\n                    return 'error';\n                }\n            }\n            return 'channel_name';\n        } else if (\n            (!channelsByName && !moreChannelsByName && identifier.length === LENGTH_OF_GROUP_ID) ||\n            (\n                (channelsByName && channelsByName.type === Constants.GM_CHANNEL) ||\n                (moreChannelsByName && moreChannelsByName.type === Constants.GM_CHANNEL)\n            )\n        ) {\n            return 'group_channel_group_id';\n        } else if (isDirectChannelIdentifier(identifier)) {\n            return 'direct_channel_user_ids';\n        }\n        return 'channel_name';\n    } else if (path === 'messages') {\n        if (identifier.indexOf('@') === 0) {\n            return 'direct_channel_username';\n        } else if (identifier.indexOf('@') > 0) {\n            return 'direct_channel_email';\n        } else if (identifier.length === LENGTH_OF_ID) {\n            return 'direct_channel_user_id';\n        } else if (identifier.length === LENGTH_OF_GROUP_ID) {\n            return 'group_channel_group_id';\n        }\n        return 'error';\n    }\n\n    return 'error';\n}\n\nexport function goToChannelByChannelId(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const channelId = identifier.toLowerCase();\n\n        let channel = getChannel(state, channelId);\n        const member = state.entities.channels.myMembers[channelId];\n        const teamObj = getTeamByName(state, team);\n        if (!channel || !member) {\n            const dispatchResult = await dispatch(joinChannel(getCurrentUserId(state), teamObj!.id, channelId, ''));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleChannelJoinError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            channel = dispatchResult.data!.channel;\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            dispatch(goToDirectChannelByUserId(match, history, Utils.getUserIdFromChannelId(channel.name, getCurrentUserId(state))));\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            history.replace(`/${team}/messages/${channel.name}`);\n        } else {\n            history.replace(`/${team}/channels/${channel.name}`);\n        }\n        return {data: undefined};\n    };\n}\n\nexport function goToChannelByChannelName(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const channelName = identifier.toLowerCase();\n\n        const teamObj = getTeamByName(state, team);\n        if (!teamObj) {\n            return {data: undefined};\n        }\n\n        let channel = getChannelsNameMapInTeam(state, teamObj!.id)[channelName];\n        if (!channel) {\n            const getChannelDispatchResult = await dispatch(getChannelByNameAndTeamName(team, channelName, true));\n            if ('data' in getChannelDispatchResult) {\n                channel = getChannelDispatchResult.data!;\n            }\n        }\n\n        let member;\n        if (channel) {\n            member = state.entities.channels.myMembers[channel.id];\n            if (!member) {\n                const membership = await dispatch(getChannelMember(channel.id, getCurrentUserId(state)));\n                if ('data' in membership) {\n                    member = membership.data;\n                }\n            }\n        }\n\n        if (!channel || !member) {\n            // Prompt system admin before joining the private channel\n            const user = getCurrentUser(getState());\n            const isSystemAdmin = UserUtils.isSystemAdmin(user?.roles);\n            if (isSystemAdmin) {\n                if (channel?.type === Constants.PRIVATE_CHANNEL) {\n                    const joinPromptResult = await dispatch(joinPrivateChannelPrompt(teamObj, channel.display_name));\n                    if ('data' in joinPromptResult && !joinPromptResult.data!.join) {\n                        return {data: undefined};\n                    }\n                }\n            }\n\n            const joinChannelDispatchResult = await dispatch(joinChannel(getCurrentUserId(state), teamObj!.id, '', channelName));\n            if ('error' in joinChannelDispatchResult) {\n                if (!channel) {\n                    const getChannelDispatchResult = await dispatch(getChannelByNameAndTeamName(team, channelName, true));\n                    if ('error' in getChannelDispatchResult || getChannelDispatchResult.data!.delete_at === 0) {\n                        await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                        handleChannelJoinError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                        return {data: undefined};\n                    }\n                    channel = getChannelDispatchResult.data!;\n                }\n            } else {\n                channel = joinChannelDispatchResult.data!.channel;\n            }\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            dispatch(goToDirectChannelByUserIds(match, history));\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            history.replace(`/${team}/messages/${channel.name}`);\n        } else {\n            doChannelChange(channel);\n        }\n        return {data: undefined};\n    };\n}\n\nfunction goToDirectChannelByUsername(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const username = identifier.slice(1, identifier.length).toLowerCase();\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUserByUsername(state, username);\n        if (!user) {\n            const dispatchResult = await dispatch(getUserByUsername(username));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            user = dispatchResult.data!;\n        }\n\n        const directChannelDispatchRes = await dispatch(openDirectChannelToUserId(user.id));\n        if ('error' in directChannelDispatchRes) {\n            await dispatch(fetchChannelsAndMembers(teamObj!.id));\n            handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n            return {data: undefined};\n        }\n\n        doChannelChange(directChannelDispatchRes.data!);\n        return {data: undefined};\n    };\n}\n\nexport function goToDirectChannelByUserId(match: Match, history: History, userId: string): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team} = match.params;\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUser(state, userId);\n        if (!user) {\n            const dispatchResult = await dispatch(getUser(userId));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            user = dispatchResult.data!;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n        return {data: undefined};\n    };\n}\n\nexport function goToDirectChannelByUserIds(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const userId = Utils.getUserIdFromChannelId(identifier.toLowerCase(), getCurrentUserId(getState()));\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUser(state, userId);\n        if (!user) {\n            const dispatchResult = await dispatch(getUser(userId));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            user = dispatchResult.data!;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n        return {data: undefined};\n    };\n}\n\nexport function goToDirectChannelByEmail(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {team, identifier} = match.params;\n        const email = identifier.toLowerCase();\n        const teamObj = getTeamByName(state, team);\n\n        let user = selectUserByEmail(state, email);\n        if (!user) {\n            const dispatchResult = await dispatch(getUserByEmail(email));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            user = dispatchResult.data!;\n        }\n\n        history.replace(`/${team}/messages/@${user.username}`);\n        return {data: undefined};\n    };\n}\n\nfunction goToGroupChannelByGroupId(match: Match, history: History): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        const state = getState();\n        const {identifier, team} = match.params;\n        const groupId = identifier.toLowerCase();\n\n        history.replace(match.url.replace('/channels/', '/messages/'));\n\n        let channel = getChannelByName(state, groupId);\n        const teamObj = getTeamByName(state, team);\n        if (!channel) {\n            const dispatchResult = await dispatch(joinChannel(getCurrentUserId(state), teamObj!.id, '', groupId));\n            if ('error' in dispatchResult) {\n                await dispatch(fetchChannelsAndMembers(teamObj!.id));\n                handleError(match, history, getRedirectChannelNameForTeam(state, teamObj!.id));\n                return {data: undefined};\n            }\n            channel = dispatchResult.data!.channel;\n        }\n\n        dispatch(markGroupChannelOpen(channel!.id));\n\n        doChannelChange(channel!);\n        return {data: undefined};\n    };\n}\n\nfunction doChannelChange(channel: Channel) {\n    GlobalActions.emitChannelClickEvent(channel);\n}\n\nfunction handleError(match: Match, history: History, defaultChannel: string) {\n    const {team} = match.params;\n    history.push(team ? `/${team}/channels/${defaultChannel}` : '/');\n}\n\nfunction isDirectChannelIdentifier(identifier: string) {\n    return identifier.length === LENGTH_OF_USER_ID_PAIR && USER_ID_PAIR_REGEXP.test(identifier);\n}\n\nasync function handleChannelJoinError(match: Match, history: History, defaultChannel: string) {\n    const {team} = match.params;\n    history.push(team ? `/error?type=channel_not_found&returnTo=/${team}/channels/${defaultChannel}` : '/');\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport type {FormatDateOptions} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {EyeOffOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getOldestPostTimeInChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {isAdmin} from 'mattermost-redux/utils/user_utils';\n\nimport useGetLimits from 'components/common/hooks/useGetLimits';\nimport {NotifyStatus} from 'components/common/hooks/useGetNotifyAdmin';\nimport useOpenPricingModal from 'components/common/hooks/useOpenPricingModal';\nimport {useNotifyAdmin} from 'components/notify_admin_cta/notify_admin_cta';\n\nimport {LicenseSkus, MattermostFeatures} from 'utils/constants';\n\nimport './index.scss';\n\nconst ONE_DAY_MS = 1000 * 60 * 60 * 24;\nconst ONE_YEAR_MS = ONE_DAY_MS * 365;\n\ninterface Props {\n    channelId?: string;\n    firstInaccessiblePostTime?: number;\n}\n\n// returns the same time on the next day.\nfunction getNextDay(timestamp?: number): number {\n    if (timestamp === undefined) {\n        return 0;\n    }\n\n    return timestamp + ONE_DAY_MS;\n}\n\nexport default function CenterMessageLock(props: Props) {\n    const intl = useIntl();\n\n    const openPricingModal = useOpenPricingModal();\n    const isAdminUser = isAdmin(useSelector(getCurrentUser).roles);\n    const [cloudLimits, limitsLoaded] = useGetLimits();\n    const currentTeam = useSelector(getCurrentTeam);\n\n    // firstInaccessiblePostTime is the most recently inaccessible post's created at date.\n    // It is used as a backup for when there are no available posts in the channel;\n    // The message then shows that the user can retrieve messages prior to the day\n    // **after** the most recent day with inaccessible posts.\n    const oldestPostTime = useSelector((state: GlobalState) => getOldestPostTimeInChannel(state, props.channelId || '')) || getNextDay(props.firstInaccessiblePostTime);\n    const [notifyAdminBtnText, notifyAdmin, notifyRequestStatus] = useNotifyAdmin({\n        ctaText: intl.formatMessage({\n            id: 'workspace_limits.message_history.locked.cta.end_user',\n            defaultMessage: 'Notify Admin',\n        }),\n    }, {\n        required_feature: MattermostFeatures.UNLIMITED_MESSAGES,\n        required_plan: LicenseSkus.Professional,\n        trial_notification: false,\n    });\n\n    if (!limitsLoaded) {\n        return null;\n    }\n\n    const dateFormat: FormatDateOptions = {month: 'long', day: 'numeric'};\n    if (Date.now() - oldestPostTime >= ONE_YEAR_MS) {\n        dateFormat.year = 'numeric';\n    }\n    const titleValues = {\n        date: intl.formatDate(oldestPostTime, dateFormat),\n        team: currentTeam?.display_name,\n    };\n\n    const limit = intl.formatNumber(cloudLimits?.messages?.history || 0);\n\n    let title = intl.formatMessage(\n        {\n            id: 'workspace_limits.message_history.locked.title.end_user',\n            defaultMessage: 'Notify your admin to unlock messages prior to {date} in {team}',\n        },\n        titleValues,\n    );\n    let description: React.ReactNode = intl.formatMessage(\n        {\n            id: 'workspace_limits.message_history.locked.description.end_user',\n            defaultMessage: 'Some older messages may not be shown because your workspace has over {limit} messages. Select Notify Admin to send an automatic request to your System Admins to upgrade.',\n        },\n        {\n            limit,\n        },\n    );\n\n    let cta = (\n        <button\n            className='btn btn-primary'\n            onClick={(e) => notifyAdmin(e, 'center_channel_posts_over_limit_banner')}\n            disabled={notifyRequestStatus === NotifyStatus.AlreadyComplete}\n        >\n            {notifyAdminBtnText}\n        </button>);\n\n    if (isAdminUser) {\n        title = intl.formatMessage({\n            id: 'workspace_limits.message_history.locked.title.admin',\n            defaultMessage: 'Unlock messages prior to {date} in {team}',\n        }, titleValues);\n\n        description = intl.formatMessage(\n            {\n                id: 'workspace_limits.message_history.locked.description.admin',\n                defaultMessage: 'To view and search all of the messages in your workspace’s history, rather than just the most recent {limit} messages, upgrade to one of our paid plans. <a>Review our plan options and pricing.</a>',\n            },\n            {\n                limit,\n                a: (chunks: React.ReactNode | React.ReactNodeArray) => (\n                    <a\n                        href='#'\n                        onClick={(e: React.MouseEvent) => {\n                            e.preventDefault();\n                            openPricingModal({trackingLocation: 'center_channel_posts_over_limit_banner'});\n                        }}\n                    >\n                        {chunks}\n                    </a>\n                ),\n            },\n        );\n\n        cta = (\n            <button\n                className='btn is-admin'\n                onClick={() => openPricingModal({trackingLocation: 'center_channel_posts_over_limit_banner'})}\n            >\n                {\n                    intl.formatMessage({\n                        id: 'workspace_limits.message_history.locked.cta.admin',\n                        defaultMessage: 'Upgrade now',\n                    })\n                }\n            </button>\n        );\n    }\n\n    return (<div className='CenterMessageLock'>\n        <div className='CenterMessageLock__left'>\n            <EyeOffOutlineIcon color={'rgba(var(--center-channel-color-rgb), 0.75)'}/>\n        </div>\n        <div className='CenterMessageLock__right'>\n            <div className='CenterMessageLock__title'>\n                {title}\n            </div>\n            <div className='CenterMessageLock__description'>\n                {description}\n            </div>\n            <div className='CenterMessageLock__cta'>\n                {cta}\n            </div>\n        </div>\n    </div>);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n};\n\nconst PrivateChannelIntroSvg = (props: SvgProps) => (\n    <svg\n        width={props.width ?? '151'}\n        height={props.height ?? '149'}\n        viewBox='0 0 220 218'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        xmlnsXlink='http://www.w3.org/1999/xlink'\n        {...props}\n    >\n        <path\n            d='M198.504 122.404a70.65 70.65 0 0 0 21.494-50.184A70.65 70.65 0 0 0 199.311 21.7a70.65 70.65 0 0 0-100.702.789L-33 154.084 66.913 254l131.591-131.596Z'\n            fill='url(#b)'\n            fillOpacity={0.12}\n        />\n        <ellipse\n            cx={90.15}\n            cy={214.903}\n            rx={37.683}\n            ry={1.903}\n            fill='#000'\n            fillOpacity={0.12}\n        />\n        <path\n            d='m77.95 52.356.4-11.97-.91-4.74c1.665-4.31 4.111-4.008 5.611-4.145 3.42-.31 5.702-2.196 7.275-.53.855.997 1.818 5.07 1.973 8.235.109 1.675.691 3.102-.546 3.944-.852.468-1.744.86-2.664 1.172l.455 8.959-11.594-.925Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M91.244 35.418a17.311 17.311 0 0 1 3.083 2.745c.282 1.254-3.146 1.894-3.146 1.894l.063-4.64Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M85.452 44.797a7.792 7.792 0 0 0 3.583-.448c.427-.174-.791.604-1.228.76a3.5 3.5 0 0 1-1.819.384c-.436-.073-1-.732-.536-.696Z'\n            fill='#7A5600'\n        />\n        <path\n            d='M94.936 29.543a1.57 1.57 0 0 0-.767-.82 1.555 1.555 0 0 0-1.115-.095c-3.228.54-2.62-2.288-7.375-1.483-3.31.559-6.801 0-9.73 1.693a6.266 6.266 0 0 0-2.873 2.874 2.982 2.982 0 0 0-.166 2.009c.18.668.586 1.252 1.148 1.651.2.119.437.22.537.43a.92.92 0 0 1-.055.659c-.409 1.235-.773 2.745.146 3.66.509.513 1.364.75 1.564 1.446.109.385 0 .796.045 1.2.191 1.06 1.819 1.234 2.592.484a4.594 4.594 0 0 0 1.01-3.02c.08-.96.108-2.068-.601-2.745-.327-.311-.791-.494-.964-.915a1.252 1.252 0 0 1 .518-1.373 2.51 2.51 0 0 1 3.692.915c.264.604.346 1.4.91 1.693.736.366 1.573-.457 1.673-1.272a14.106 14.106 0 0 0-.246-2.452c0-.824.418-1.83 1.237-1.83.27.014.537.07.79.164 1.607.456 3.301.5 4.93.129a5.04 5.04 0 0 0 2.236-.916 2.186 2.186 0 0 0 .864-2.086Z'\n            fill='#4A2407'\n        />\n        <path\n            d='m88.698 34.65.046-.092c-2.428-.22-5.456-.412-7.53-.385-2.073.028-3.028.32-4.11 2.197-.181.32.346.549.537.228a2.998 2.998 0 0 1 1.02-1.28 2.97 2.97 0 0 1 1.535-.55c1.055-.082 2.146 0 3.192 0 1.336 0 3.41.192 5.137.357.055-.165.11-.32.173-.476Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M89.016 36.434a1.765 1.765 0 0 1-.681-1.767c.127-.96.836-1.656 1.573-1.555.395.113.731.377.937.736.205.359.264.784.163 1.185-.127.916-.837 1.657-1.573 1.556a1.014 1.014 0 0 1-.419-.155Zm1.092-2.746a.535.535 0 0 0-.255-.091c-.5-.073-.982.448-1.082 1.162-.1.714.227 1.354.727 1.428.5.073.973-.458 1.073-1.172a1.335 1.335 0 0 0-.463-1.363v.036Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M84.543 51.578c23.642.183 23.578-2.05 25.951 26.017 2.373 28.066 2.41 29.081-20.968 30.628-15.586 1.034-24.788 7.321-25.597-1.3-.819-8.784-1.337-8.528-2.728-23.453-3.155-33.026-2.619-32.093 23.342-31.892Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M95.163 72.324c6.747 7.705 21.987 13.662 33.763 13.662 1.682.01 3.357-.205 4.983-.64a16.561 16.561 0 0 0 2.9-1.09c9.694-4.767 12.576-19.482 14.686-24.533 2.6-6.214-.1-2.352 1.655-5.902.627-1.273 2.173-2.096 2.673-2.746.718-.915-.655-2.15-5.838 1.382-8.184 5.49-7.274 16.554-15.331 17.716a12.045 12.045 0 0 1-3.046 0 19.195 19.195 0 0 1-2.682-.485c-14.376-3.569-15.595-17.24-29.743-17.798 0-.037-10.776 12.674-4.02 20.434ZM21.246 62.047c-.273.769.91 4.576 1.228 8.062.782 8.4 3.346 21.294 15.258 26.218a14 14 0 0 0 4.737 1.006 16.815 16.815 0 0 0 3.092-.146c7.274-.915 15.267-6.25 19.232-14.569 5.455-11.484 7.674-30.966 7.674-30.966-5.256 0-18.186-1.016-22.887 19.885a11.266 11.266 0 0 1-1.9 4.522 11.18 11.18 0 0 1-3.638 3.274c-.9.479-1.88.789-2.891.915a7.63 7.63 0 0 1-4.038-.578 7.685 7.685 0 0 1-3.173-2.579c-7.056-9.507-7.93-19.738-13.012-20.745-5.083-1.006 1.646 1.958.318 5.701Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M99.182 51.853c14.149.558 15.368 14.23 29.744 17.799 1.5.4 3.048.591 4.601.567.664 4.878 1.145 9.782 1.609 14.696-1.996.7-4.097 1.05-6.21 1.034-11.776 0-27.016-5.957-33.763-13.671-6.747-7.714 4.02-20.425 4.02-20.425ZM42.824 79.855c3.037-1.034 5.765-3.853 6.756-8.318 4.665-20.901 17.631-19.895 22.878-19.885 0 0-2.192 19.482-7.665 30.967-4.42 9.26-13.786 14.778-21.697 14.724a59.965 59.965 0 0 0-.272-17.488Z'\n            fill='#1E325C'\n        />\n        <path\n            d='M111.549 93.938c13.785 40.667 14.622 57.368 13.339 71.378-1.282 14.01-11.439 28.423-24.687 38.974-2.792 1.995-6.283 3.404-4.074 8.84 3.21 7.906-5.237-2.48-7.347-7.651-2.11-5.17 20.259-14.165 15.094-41.774-5.164-27.608-19.022-38.901-27.688-58.438s35.363-11.329 35.363-11.329Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M111.549 93.938c13.785 40.667 14.622 57.368 13.339 71.378-1.282 14.01-11.439 28.423-24.687 38.974-2.792 1.995-6.283 3.404-4.074 8.84 3.21 7.906-5.237-2.48-7.347-7.651-2.11-5.17 20.259-14.165 15.094-41.774-5.164-27.608-19.022-38.901-27.688-58.438s35.363-11.329 35.363-11.329Z'\n            fill='#000'\n            fillOpacity={0.16}\n        />\n        <path\n            d='M93.827 126.818c1.218 2.333 2.618 4.831 4.092 7.412l-.5.412c-1.537-2.746-3.001-5.363-4.12-7.513-.182-.348.337-.659.528-.311ZM101.337 192.997c-.909 1.016-1.818 2.023-2.682 3.029l-.382-.421c.91-.979 1.764-1.967 2.628-2.964l.436.356Z'\n            fill='#1E325C'\n        />\n        <path\n            d='M95.454 96.647c1.674 45.572-2.664 66.537-22.278 81.279-19.613 14.742-34.817 15.273-35.408 22.703-.59 7.431-2.364 5.729-3.055-1.894-.91-10.35-5.201-2.663 17.595-20.361s12.03-64.331 10.912-78.149c-1.119-13.818 32.234-3.578 32.234-3.578Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M37.486 193.043c11.44-5.673 23.333-11.997 28.643-24.387 5.91-13.791 3.392-29.283 3.019-43.76-.218-8.73 0-17.469.564-26.181 0-.394.636-.394.609 0-.482 8.007-.737 16.023-.6 24.049.136 8.025.91 16.051.91 24.094-.046 6.964-.801 14.029-3.302 20.572a36.272 36.272 0 0 1-11.075 15.172c-5.556 4.575-12.02 7.806-18.413 10.981-.4.165-.71-.366-.355-.54ZM105.184 188.276a64.163 64.163 0 0 1-1.173 1.519 49.519 49.519 0 0 1-1.819 2.159l-.436-.348a66.933 66.933 0 0 0 2.864-3.578l.564.248ZM108.185 183.627a41.36 41.36 0 0 1-2.21 3.514l-.527-.238c.772-1.116 1.5-2.26 2.164-3.45l.573.174ZM109.885 178.31l.591.147a27.344 27.344 0 0 1-1.609 3.925l-.582-.174c.372-.759.736-1.528 1.045-2.333.21-.485.382-1.043.555-1.565ZM111.567 166.661a35.5 35.5 0 0 1 .173 3.66l-.6-.064a34.013 34.013 0 0 0-.182-3.596h.609ZM110.367 160.173c.127.476.245.915.354 1.4.291 1.235.519 2.498.691 3.761h-.618a43.044 43.044 0 0 0-1.027-4.978l.6-.183ZM108.794 155.396a55.344 55.344 0 0 1 1.191 3.413l-.6.211a56.088 56.088 0 0 0-1.155-3.413l.564-.211ZM106.503 150.107c.636 1.345 1.236 2.69 1.818 4.026l-.545.211a62.06 62.06 0 0 0-1.774-4.045l.501-.192ZM100.783 139.254a233.79 233.79 0 0 1 2.537 4.575l-.509.375c-.801-1.445-1.665-2.983-2.556-4.575l.528-.375ZM98.61 135.465c.49.861.99 1.73 1.491 2.617l-.519.394a375.76 375.76 0 0 1-1.473-2.599l.5-.412ZM103.966 145.046a117.118 117.118 0 0 1 1.936 3.798l-.536.192a68.798 68.798 0 0 0-.828-1.629 753.93 753.93 0 0 0-1.063-1.995l.491-.366ZM111.685 171.721a27.304 27.304 0 0 1-.827 5.409l-.591-.138c.451-1.746.725-3.533.818-5.335l.6.064ZM97.746 197.06c-.691.787-1.382 1.565-2.055 2.371a9.449 9.449 0 0 0-.419-.431 128.89 128.89 0 0 1 2.083-2.361c.127.138.263.275.39.421ZM94.381 200.053l.428.439a65.667 65.667 0 0 0-2.2 2.791c-.228.311-.755 0-.528-.311.736-.997 1.555-1.958 2.3-2.919Z'\n            fill='#1E325C'\n        />\n        <path\n            d='M77.996 51.533a5.046 5.046 0 0 0 2.482 2.114c3.737 1.546 8.493 1.546 10.584-2.05 17.186 0 17.341.768 19.469 25.998 1.072 12.683 1.664 19.839-.155 24.021-9.484 4.127-20.387 5.491-30.325 7.431a276.323 276.323 0 0 1-13.03 2.187c-1.765-.43-2.81-1.666-3.056-4.31-.818-8.785-1.337-8.53-2.728-23.454-2.9-29.96-2.728-31.974 16.759-31.937Z'\n            fill='#fff'\n        />\n        <path\n            d='M77.996 51.533a5.046 5.046 0 0 0 2.482 2.114c3.737 1.546 8.493 1.546 10.584-2.05 17.186 0 17.341.768 19.469 25.998 1.072 12.683 1.664 19.839-.155 24.021-9.484 4.127-20.387 5.491-30.325 7.431a276.323 276.323 0 0 1-13.03 2.187c-1.765-.43-2.81-1.666-3.056-4.31-.818-8.785-1.337-8.53-2.728-23.454-2.9-29.96-2.728-31.974 16.759-31.937Z'\n            fill='var(--center-channel-color)'\n            fillOpacity={0.08}\n        />\n        <path\n            d='M101.101 99.621a68.896 68.896 0 0 1-6.083-15.264 185.738 185.738 0 0 1-4.965-32.77c18.186 0 20.005-.667 22.214 25.047.11 1.244-1.327 3.477-.909 4.75 3.519 9.937 16.122 20.131 15.086 22.419-1.446 3.276-6.966 6.772-13.913 9.517a59.502 59.502 0 0 1-5.547 1.135 88.873 88.873 0 0 0-5.883-14.834ZM61.056 101.918c-.519 6.085-1.2 11.292-.773 15.95 3.991-.668 8.001-1.089 12.03-1.373a85.83 85.83 0 0 0 7.801-29.438c.528-6.086 2.155-29.457 1.755-32.944-.254-2.342-3.155-.366-3.746-2.599-19.605 0-21.705 1.464-18.832 31.489.137 1.5 2.146 3.404 2.21 4.822.164 4.703.015 9.41-.445 14.093Z'\n            fill='#1E325C'\n        />\n        <path\n            d='M91.308 50.416c1.346 1.09 1.1.787.182 2.498-.919 1.712-1.382 3.258-2.137 1.181-.755-2.077-.855-1.748.127-2.983.982-1.236 1.146-1.254 1.828-.696ZM80.05 50.764c3.047 1.345 1.928 1.034 2.51 3.056 1.264 4.347-.5 2.041-4.82-.466-2.936-1.712-2.59-1.977-1.563-3.02s.718-.998 3.71.43c2.991 1.427-2.892-1.318.163 0ZM41.187 80.431a45.816 45.816 0 0 1 1.282 16.902 16.823 16.823 0 0 0 3.092-.146 49.5 49.5 0 0 0-1.419-17.57 1.061 1.061 0 0 0-.1-.284 8.382 8.382 0 0 1-2.891.915c.008.062.02.123.036.183ZM131.608 70.137a185.107 185.107 0 0 0 2.301 15.172 16.609 16.609 0 0 0 2.901-1.089 175.18 175.18 0 0 1-2.155-14.093 12.048 12.048 0 0 1-3.047.01Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M96.418 207.209c-1.046 1.299-1.446 3.038-.291 5.875 3.21 7.906-5.238-2.48-7.347-7.65-.519-1.282.454-2.791 2.136-4.759 1.883 2.141 3.701 4.338 5.502 6.534ZM37.35 189.227c.127.311.254.613.372.915.91 2.068 1.728 4.137 2.637 6.186a5.968 5.968 0 0 0-1.786 1.858 6.013 6.013 0 0 0-.841 2.443c-.582 7.422-2.365 5.729-3.056-1.894-.627-6.891-2.719-5.792 2.674-9.508Z'\n            fill='#1E325C'\n        />\n        <path\n            d='M5.54 14.596h38.906a5.439 5.439 0 0 1 3.844 1.574 5.416 5.416 0 0 1 1.604 3.825V44.67a5.41 5.41 0 0 1-1.604 3.826 5.43 5.43 0 0 1-3.844 1.573h-5.742v9.237l-8.612-9.236H5.554a5.439 5.439 0 0 1-3.844-1.574A5.418 5.418 0 0 1 .106 44.67V19.995a5.412 5.412 0 0 1 1.599-3.82 5.435 5.435 0 0 1 3.835-1.58Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M30.092 50.07H5.554a5.439 5.439 0 0 1-3.845-1.575A5.417 5.417 0 0 1 .106 44.67V29.69S1.82 43.542 2.127 44.761c.308 1.22.919 3.044 3.813 3.347 2.894.302 24.152 1.962 24.152 1.962Z'\n            fill='#000'\n            fillOpacity={0.16}\n        />\n        <path\n            d='M38.282 28.805a3.51 3.51 0 0 0-3.238 2.16 3.49 3.49 0 0 0 .76 3.81 3.508 3.508 0 0 0 5.982-2.472 3.487 3.487 0 0 0-2.162-3.233 3.506 3.506 0 0 0-1.342-.265ZM24.993 28.805a3.51 3.51 0 0 0-3.238 2.16 3.49 3.49 0 0 0 .76 3.81 3.508 3.508 0 0 0 5.983-2.472 3.487 3.487 0 0 0-2.163-3.233 3.506 3.506 0 0 0-1.342-.265ZM11.718 28.805a3.51 3.51 0 0 0-3.24 2.156 3.49 3.49 0 0 0 .756 3.813 3.507 3.507 0 0 0 5.985-2.471 3.487 3.487 0 0 0-2.16-3.231 3.507 3.507 0 0 0-1.34-.267Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M45.856 24.928a10.99 10.99 0 0 0-5.26-6.628.38.38 0 0 1 .157-.72c2.453-.147 7.404.376 5.852 7.311a.385.385 0 0 1-.602.241.385.385 0 0 1-.147-.204Z'\n            fill='#fff'\n            fillOpacity={0.16}\n        />\n        <path\n            d='M146.892 70.45h56.197a7.926 7.926 0 0 1 3.003.58 7.85 7.85 0 0 1 2.55 1.671 7.75 7.75 0 0 1 1.708 2.509c.398.939.604 1.946.608 2.964v35.298a7.67 7.67 0 0 1-.608 2.964 7.748 7.748 0 0 1-1.708 2.509 7.868 7.868 0 0 1-2.55 1.672 7.941 7.941 0 0 1-3.003.58h-8.294v13.213l-12.44-13.213h-35.443a7.879 7.879 0 0 1-5.554-2.252 7.748 7.748 0 0 1-1.708-2.509 7.65 7.65 0 0 1-.607-2.964V78.174a7.706 7.706 0 0 1 2.308-5.466 7.892 7.892 0 0 1 5.541-2.258Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='M182.355 121.197h-35.443a7.879 7.879 0 0 1-5.554-2.252 7.748 7.748 0 0 1-1.708-2.509 7.65 7.65 0 0 1-.607-2.964v-21.43s2.474 19.817 2.919 21.561c.445 1.744 1.327 4.354 5.507 4.787 4.18.433 34.886 2.807 34.886 2.807Z'\n            fill='#CC8F00'\n        />\n        <path\n            d='M194.185 90.777c-1.001 0-1.98.293-2.813.843a5.018 5.018 0 0 0-1.864 2.246 4.953 4.953 0 0 0-.288 2.89c.195.97.677 1.862 1.385 2.562a5.08 5.08 0 0 0 2.592 1.369c.982.193 2 .094 2.925-.284a5.052 5.052 0 0 0 2.272-1.843 4.964 4.964 0 0 0-.627-6.32 5.104 5.104 0 0 0-3.582-1.463ZM174.99 90.777c-1.002 0-1.98.293-2.813.843a5.018 5.018 0 0 0-1.864 2.246 4.937 4.937 0 0 0-.288 2.89c.195.97.677 1.862 1.385 2.562a5.08 5.08 0 0 0 2.592 1.369c.982.193 2 .094 2.925-.284a5.052 5.052 0 0 0 2.272-1.843 4.964 4.964 0 0 0-.628-6.32 5.05 5.05 0 0 0-1.643-1.084 5.108 5.108 0 0 0-1.938-.379ZM155.816 90.777a5.102 5.102 0 0 0-2.814.84 5.013 5.013 0 0 0-1.868 2.244 4.955 4.955 0 0 0 1.093 5.455 5.11 5.11 0 0 0 5.518 1.087 5.05 5.05 0 0 0 2.273-1.842 4.959 4.959 0 0 0-.625-6.318 5.052 5.052 0 0 0-1.641-1.085 5.11 5.11 0 0 0-1.936-.38Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M205.125 85.23a15.668 15.668 0 0 0-2.84-5.491 15.868 15.868 0 0 0-4.756-3.991.545.545 0 0 1-.29-.601.545.545 0 0 1 .515-.429c3.543-.21 10.695.538 8.453 10.46a.553.553 0 0 1-.52.445.563.563 0 0 1-.562-.393Z'\n            fill='#FFD470'\n        />\n        <defs>\n            <linearGradient\n                id='b'\n                x1={93.5}\n                y1={1}\n                x2={-66.697}\n                y2={161.197}\n                gradientUnits='userSpaceOnUse'\n            >\n                <stop\n                    offset={0.01}\n                    stopColor='var(--button-bg)'\n                />\n                <stop\n                    offset={0.766}\n                    stopColor='var(--button-bg)'\n                    stopOpacity={0}\n                />\n            </linearGradient>\n        </defs>\n    </svg>\n);\n\nexport default PrivateChannelIntroSvg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n};\n\nconst PublicChannelIntroSvg = (props: SvgProps) => (\n    <svg\n        width={props.width ?? '151'}\n        height={props.height ?? '149'}\n        viewBox='0 0 220 218'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        xmlnsXlink='http://www.w3.org/1999/xlink'\n    >\n        <path\n            d='M198.504 121.404C205.236 114.883 210.603 107.088 214.293 98.4721C217.984 89.8565 219.923 80.5927 219.998 71.2204C220.073 61.848 218.283 52.5543 214.731 43.8807C211.18 35.207 205.938 27.3266 199.311 20.6985C192.685 14.0705 184.805 8.82714 176.133 5.27394C167.46 1.72074 158.167 -0.0713105 148.795 0.00213777C139.423 0.0755861 130.159 2.01307 121.543 5.70176C112.927 9.39045 105.131 14.7566 98.6093 21.4877L-33 153.084L66.9127 253L198.504 121.404Z'\n            fill='url(#paint0_linear_522_36531)'\n            fillOpacity='0.12'\n        />\n        <path\n            d='M110.977 59.1699C107.992 64.1563 98.3678 60.1672 96.5466 69.6413C100.09 69.6413 113.157 71.4462 113.157 71.4462L110.977 59.1699Z'\n            fill='#4A2407'\n        />\n        <path\n            d='M96.1184 108.824C91.9085 116.313 57.7621 131.093 65.9031 169.199C71.6655 196.195 84.8125 206.966 81.5382 211.474C79.1098 214.765 77.199 218.773 82.9713 214.036C89.938 208.342 92.4161 212.122 87.8978 198.399C83.5884 185.335 79.7966 150.53 101.323 138.184C122.85 125.838 129.877 119.664 119.238 104.506C115.346 98.941 96.1184 108.824 96.1184 108.824Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M78.9806 202.139C79.6972 201.94 85.788 200.005 88.097 199.028C92.3367 211.992 89.8088 208.432 82.9715 214.037C77.1992 218.774 79.11 214.765 81.5384 211.474C82.8521 209.639 81.4986 206.747 78.9806 202.139Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M120.83 70.6089L121.377 59.5291L122.86 55.4404C121.945 51.3715 119.586 49.4566 118.262 49.0976C115.277 48.3596 113.585 48.2399 111.953 49.5164C111.057 50.2843 109.674 53.7948 109.076 56.5472C108.758 58.0332 108.081 59.22 109.076 60.1375C109.758 60.6741 110.48 61.1575 111.236 61.5835L111.395 68.5645L120.83 70.6089Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M110.977 52.3286C110.007 52.803 109.1 53.3996 108.28 54.1037C107.942 55.101 110.559 56.0983 110.559 56.0983L110.977 52.3286Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M114.421 62.5006C113.318 62.45 112.242 62.1464 111.276 61.6132C110.927 61.3938 111.913 62.2613 112.271 62.4607C112.729 62.7861 113.264 62.9856 113.824 63.0392C114.242 63.0392 114.839 62.5306 114.421 62.5006Z'\n            fill='#8B6918'\n        />\n        <path\n            d='M133.858 112.723C135.848 140.328 136.535 177.356 161.376 183.529C186.217 189.703 185.262 186.651 185.262 195.906C185.262 205.16 183.341 203.794 182.206 197.9C180.753 190.281 153.613 203.884 135.202 188.685C116.79 173.487 109.017 144.107 106.21 113.97C104.24 92.6279 133.858 112.723 133.858 112.723Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M175.07 186.602C185.819 188.885 185.271 188.816 185.271 195.866C185.271 205.121 183.351 203.755 182.216 197.861C181.709 195.218 178.106 195.128 172.851 195.507C173.91 192.628 174.654 189.642 175.07 186.602Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M48.8448 72.9125C49.4221 71.9152 54.239 71.7559 59.9019 76.3633C65.5648 80.9707 74.7707 86.7049 85.0116 74.2389C94.1976 63.0396 100.308 67.2581 109.614 67.6271C112.918 68.046 126.254 69.7513 129.658 70.0604C134.634 69.9707 143.123 72.3442 148.995 58.6317C151.244 53.3761 153.573 45.8167 156.808 40.6807C159.027 37.1703 161.207 35.0262 163.267 34.1685C164.789 33.5402 163.944 34.747 162.769 36.4922C161.983 37.679 162.859 37.5392 162.421 39.0451C162.162 39.9227 162.043 40.4414 161.754 41.1993C161.506 41.8807 161.3 42.5767 161.137 43.2835C161.008 43.822 160.878 44.3904 160.769 44.9988L160.679 45.4178C159.485 51.9799 158.838 61.6034 157.942 65.4729C154.817 78.7865 147.99 86.645 135.52 89.4075C135.43 91.2923 135.301 93.3966 135.132 95.6304C132.892 127.045 136.077 118.568 115.695 118.568C95.3123 118.568 89.8882 130.814 92.9535 113.252C94.3966 105.025 93.9488 95.461 95.5312 85.7076C92.4261 87.6423 87.4101 91.6114 82.3742 92.858C66.6993 96.7075 52.2386 76.2135 52.0993 74.907C51.8803 72.8926 48.2775 73.9397 48.8448 72.9125Z'\n            fill='#AD831F'\n        />\n        <path\n            d='M91.1424 90.3054C93.2224 88.9989 94.0783 86.6054 95.5313 85.7078C94.9521 89.4286 94.5635 93.1766 94.3669 96.9372C94.1978 99.5999 94.0684 102.223 93.8892 104.766C93.7239 107.612 93.4117 110.448 92.9537 113.263C89.8884 130.815 95.3124 118.588 115.695 118.558C133.539 118.558 133.32 125.07 134.495 105.593V105.464C134.554 104.626 134.604 103.748 134.664 102.821C134.793 100.687 134.943 98.3034 135.132 95.6207C135.291 93.3469 135.43 91.2825 135.52 89.3977C140.984 88.181 145.373 87.7823 148.846 84.5611C147.055 79.4051 144.756 72.6736 141.322 68.3953C137.65 70.5195 133.908 70.1604 130.982 70.0606H129.658L127.896 69.8812C126.612 69.7416 124.911 69.5421 123.109 69.3227C122.114 74.4287 114.212 73.6708 111.604 71.8857C110.04 70.7852 108.805 69.2784 108.031 67.5275C106.927 67.4278 105.872 67.2983 104.847 67.1586C103.822 67.019 102.926 66.8893 102 66.7796C96.3972 66.1014 91.4609 66.3806 85.0118 74.2392C84.6137 74.7278 84.2156 75.1667 83.8274 75.5956C85.9528 80.6489 88.396 85.5621 91.1424 90.3054Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M91.1424 90.3054C93.2224 88.9989 94.0783 86.6054 95.5313 85.7078C94.9521 89.4286 94.5635 93.1766 94.3669 96.9372C94.1977 99.5999 94.0684 102.223 93.8892 104.766C93.7239 107.612 93.4117 110.448 92.9537 113.263C89.8884 130.815 95.3124 118.588 115.695 118.558C133.539 118.558 133.32 125.07 134.495 105.593V105.464C134.554 104.626 134.604 103.748 134.664 102.821C134.793 100.687 134.943 98.3034 135.132 95.6207C135.291 93.3469 135.43 91.2825 135.52 89.3977C140.984 88.181 145.373 87.7823 148.846 84.5611C147.055 79.4051 144.756 72.6736 141.322 68.3953C137.65 70.5195 133.908 70.1604 130.982 70.0606H129.658L127.896 69.8812C126.612 69.7416 124.911 69.5421 123.109 69.3227C122.114 74.4287 114.212 73.6708 111.604 71.8857C110.04 70.7852 108.805 69.2784 108.031 67.5275C106.927 67.4278 105.872 67.2983 104.847 67.1586C103.822 67.019 102.926 66.8893 102 66.7796C96.3972 66.1014 91.4609 66.3806 85.0118 74.2392C84.6137 74.7278 84.2156 75.1667 83.8274 75.5956C85.9528 80.6489 88.396 85.5621 91.1424 90.3054Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M91.1424 90.3054C93.2224 88.9989 94.0783 86.6054 95.5313 85.7078C94.9521 89.4286 94.5635 93.1766 94.3669 96.9372C94.1977 99.5999 94.0684 102.223 93.8892 104.766C93.7239 107.612 93.4117 110.448 92.9537 113.263C89.8884 130.815 95.3124 118.588 115.695 118.558C133.539 118.558 133.32 125.07 134.495 105.593V105.464C134.554 104.626 134.604 103.748 134.664 102.821C134.793 100.687 134.943 98.3034 135.132 95.6207C135.291 93.3469 135.43 91.2825 135.52 89.3977C140.984 88.181 145.373 87.7823 148.846 84.5611C147.055 79.4051 144.756 72.6736 141.322 68.3953C137.65 70.5195 133.908 70.1604 130.982 70.0606H129.658L127.896 69.8812C126.612 69.7416 124.911 69.5421 123.109 69.3227C122.114 74.4287 114.212 73.6708 111.604 71.8857C110.04 70.7852 108.805 69.2784 108.031 67.5275C106.927 67.4278 105.872 67.2983 104.847 67.1586C103.822 67.019 102.926 66.8893 102 66.7796C96.3972 66.1014 91.4609 66.3806 85.0118 74.2392C84.6137 74.7278 84.2156 75.1667 83.8274 75.5956C85.9528 80.6489 88.396 85.5621 91.1424 90.3054Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.08'\n        />\n        <path\n            d='M76.7511 127.124C80.6011 132.559 85.0294 137.558 89.9579 142.033L90.3858 142.412C91.3811 143.3 92.3763 144.157 93.3715 145.005C93.7726 144.53 94.2156 144.093 94.6952 143.699L95.1331 143.33C96.7454 141.973 99.0543 140.338 101.353 138.712C104.588 136.479 107.783 134.414 108.897 133.726C109.713 138.234 110.679 142.702 111.813 146.94L111.962 147.508C112.152 148.176 112.331 148.845 112.52 149.503C120.04 149.349 127.516 148.308 134.793 146.401L135.35 146.242L136.495 145.893C136.625 145.851 136.758 145.818 136.893 145.793C136.754 144.925 136.624 143.968 136.495 142.931C136.495 142.731 136.495 142.542 136.425 142.342C135.052 130.495 134.335 109.143 134.495 105.633V105.503C134.063 105.151 133.654 104.771 133.27 104.366C133.105 104.193 132.935 104.014 132.763 103.828C129.051 99.6589 127.219 93.6055 126.154 89.9156C126.523 81.7579 127.279 77.4298 130.981 70.0998C130.514 70.0998 128.623 69.9702 127.896 69.8905C125.501 75.3418 124.035 81.1566 123.557 87.0934C116.59 85.8269 109.624 84.6998 102.657 83.6227C102.903 78.0868 103.619 72.582 104.797 67.1677C103.802 67.038 102.876 66.8985 101.95 66.7888C100.616 72.9064 99.9814 79.1563 100.059 85.4178C99.6614 86.4151 98.8752 89.407 98.2979 90.504C97.097 92.7304 95.7678 94.8848 94.317 96.9564C94.1478 99.6191 94.0184 102.242 93.8393 104.785C93.6602 107.328 93.4312 109.771 93.073 112.155C89.6195 115.266 84.0363 119.335 78.7217 124.91C78.5923 125.05 78.453 125.189 78.3236 125.339C77.826 125.897 77.2886 126.496 76.7511 127.124Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M120.92 110.739C121.694 110.796 122.466 110.6 123.119 110.18C123.985 109.542 124.314 108.335 124.552 106.6C125.15 102.361 124.861 102.003 123.288 100.008C122.781 99.3697 122.144 98.5718 121.358 97.405C120.701 96.4579 120.125 95.4571 119.636 94.4132C118.641 92.2989 118.233 91.8204 113.157 90.8331C104.946 89.2375 104.309 89.716 101.921 92.8873C101.483 93.4657 100.995 94.114 100.378 94.8819C96.7257 99.21 96.6958 99.7587 96.5863 101.793C96.5863 102.342 96.5167 103.02 96.3972 103.917C96.2181 105.194 96.2082 106.041 96.6859 106.67C97.4323 107.667 99.154 107.856 103.294 108.365C104.996 108.574 107.116 108.834 109.713 109.223C111.704 109.522 113.446 109.801 114.958 110.05C116.928 110.415 118.919 110.645 120.92 110.739ZM113.097 91.0625V91.3417C118.073 92.339 118.253 92.7078 119.168 94.6126C119.669 95.6963 120.259 96.7371 120.93 97.7242C121.736 98.9109 122.373 99.7186 122.92 100.367C124.443 102.282 124.632 102.531 124.075 106.52C123.816 108.395 123.488 109.263 122.87 109.721C121.796 110.509 119.576 110.14 115.137 109.402C113.625 109.153 111.913 108.874 109.883 108.574C107.275 108.185 105.155 107.926 103.453 107.717C99.7114 107.258 97.8304 107.019 97.2333 106.241C96.875 105.772 96.8949 105.034 97.0541 103.917C97.1835 103 97.2133 102.302 97.2432 101.743C97.3527 99.8584 97.3726 99.3597 100.906 95.1711C101.533 94.4232 102.03 93.7649 102.458 93.1766C104.648 90.2845 105.046 89.756 113.137 91.3317L113.097 91.0625Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M117.834 93.7353C118.042 94.1682 118.281 94.5848 118.551 94.9819C118.75 95.291 118.262 95.5803 118.053 95.2711C117.784 94.8741 117.544 94.4574 117.337 94.0245C117.177 93.6954 117.685 93.4062 117.834 93.7353Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M119.407 96.6076C119.745 97.1361 120.084 97.6049 120.452 98.1435C120.661 98.4426 120.173 98.7319 119.954 98.4327C119.596 97.9341 119.248 97.4354 118.959 96.8968C118.68 96.5877 119.218 96.2984 119.407 96.6076Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M121.895 99.998C122.154 100.352 122.441 100.685 122.751 100.995C123.019 101.245 122.611 101.653 122.343 101.394C122.03 101.086 121.744 100.752 121.487 100.397C121.268 100.108 121.666 99.6988 121.895 99.998Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M123.029 103.788C123.029 103.419 123.577 103.419 123.597 103.788C123.627 104.17 123.627 104.553 123.597 104.935C123.597 105.304 123 105.304 123.029 104.935C123.059 104.553 123.059 104.17 123.029 103.788Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M122.522 106.87C122.582 106.501 123.139 106.66 123.069 107.019C123 107.378 122.91 108.017 122.82 108.505C122.731 108.994 122.213 108.715 122.273 108.346L122.522 106.87Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M118.043 107.817C118.771 108.017 119.513 108.157 120.263 108.236C120.621 108.236 120.631 108.844 120.263 108.804C119.463 108.727 118.67 108.583 117.894 108.375C117.822 108.354 117.762 108.305 117.725 108.239C117.688 108.174 117.679 108.096 117.698 108.024C117.718 107.951 117.765 107.889 117.829 107.85C117.893 107.812 117.97 107.8 118.043 107.817Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M112.48 107.179C113.207 107.225 113.932 107.312 114.65 107.438C115.018 107.498 114.859 108.046 114.5 107.986C113.841 107.876 113.177 107.8 112.51 107.757C112.112 107.727 112.112 107.179 112.48 107.179Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M107.036 106.55L109.027 106.8C109.385 106.8 109.385 107.418 109.027 107.368L107.036 107.129C106.678 107.079 106.668 106.5 107.036 106.55Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M101.642 105.992L103.314 106.181C103.672 106.181 103.682 106.8 103.314 106.76L101.642 106.56C101.284 106.52 101.274 105.952 101.642 105.992Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M98.776 104.686L99.393 105.254C99.6617 105.503 99.2636 105.912 98.985 105.663L98.3679 105.084C98.0693 104.835 98.4674 104.436 98.776 104.686Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M98.0591 101.345C98.0591 100.986 98.6761 100.976 98.6363 101.345C98.5674 102.008 98.5342 102.674 98.5368 103.34C98.5244 103.406 98.4892 103.466 98.4374 103.509C98.3856 103.552 98.3205 103.576 98.2532 103.576C98.1859 103.576 98.1207 103.552 98.0689 103.509C98.0171 103.466 97.982 103.406 97.9695 103.34C97.9584 102.674 97.9883 102.008 98.0591 101.345Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M99.2933 98.333L99.8705 97.4755C100.07 97.1663 100.567 97.4755 100.358 97.7647L99.7909 98.6223C99.5819 98.9314 99.0942 98.6422 99.2933 98.333Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M113.436 92.2194C114.105 92.2522 114.77 92.3356 115.426 92.4687C115.784 92.5485 115.635 93.0971 115.277 93.0273C114.675 92.8963 114.062 92.8196 113.446 92.7979C113.067 92.768 113.067 92.2194 113.436 92.2194Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M109.086 91.4412C109.72 91.471 110.352 91.5409 110.977 91.6506C111.346 91.7105 111.186 92.259 110.828 92.1992C110.252 92.0994 109.67 92.0395 109.086 92.0197C108.728 91.9998 108.728 91.4313 109.086 91.4412Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M105.334 91.222C105.772 91.1488 106.215 91.1154 106.658 91.1222C106.724 91.1347 106.784 91.1699 106.827 91.2218C106.87 91.2737 106.893 91.3392 106.893 91.4066C106.893 91.474 106.87 91.5392 106.827 91.5911C106.784 91.643 106.724 91.6782 106.658 91.6907C106.268 91.6851 105.878 91.7152 105.494 91.7806C105.125 91.8304 104.976 91.2819 105.334 91.222Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M102.757 94.0245L103.423 93.0272C103.632 92.728 104.13 93.0272 103.911 93.3164L103.244 94.3137C103.015 94.6129 102.518 94.3336 102.757 94.0245Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M101.104 96.9185L101.682 96.1505C101.901 95.8613 102.398 96.1506 102.179 96.4398L101.602 97.2077C101.383 97.5168 100.885 97.2376 101.104 96.9185Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M124.722 84.6503C126.901 85.2486 127.249 84.8 126.971 87.7918C126.692 90.7837 126.971 90.4944 124.154 89.9658C122.164 89.5769 122.572 88.9687 122.91 87.0938C123.249 85.2189 123.507 84.3212 124.722 84.6503Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='M100.876 81.4888C103.115 81.798 103.404 81.2994 103.523 84.3012C103.643 87.303 103.036 87.0836 101.015 86.8244C98.9949 86.5651 99.3233 86.0862 99.403 84.1515C99.4826 82.2168 99.6319 81.3193 100.876 81.4888Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='M119.277 62.3013C119.277 62.3013 116.869 63.7374 117.954 68.0157C115.028 63.6476 118.869 57.6541 118.869 57.6541C118.961 57.7858 119.083 57.8932 119.225 57.9675C119.367 58.0417 119.525 58.0804 119.685 58.0804C119.846 58.0804 120.004 58.0417 120.146 57.9675C120.288 57.8932 120.41 57.7858 120.502 57.6541C123.408 54.6623 121.328 53.6649 120.502 54.0139C119.466 54.3603 118.394 54.588 117.307 54.6922C115.615 54.9715 113.963 52.2288 113.963 52.2288L114.391 53.4753C113.68 53.0728 113.083 52.4953 112.656 51.7973C112.229 51.0994 111.987 50.304 111.953 49.4862C113.495 44.5497 123 43.6723 126.543 51.1219C130.086 58.5716 126.543 71.4263 136.893 69.9304C116.332 79.0555 119.277 62.3013 119.277 62.3013Z'\n            fill='#4A2407'\n        />\n        <path\n            d='M78.7719 124.89C84.6537 133.217 95.1235 143.31 95.1235 143.31'\n            stroke='#1E325C'\n            strokeWidth='0.58'\n            strokeMiterlimit='10'\n        />\n        <path\n            d='M111.813 146.92C122.074 147.309 136.495 142.931 136.495 142.931'\n            stroke='#1E325C'\n            strokeWidth='0.58'\n            strokeMiterlimit='10'\n        />\n        <path\n            d='M61.8512 14.2181H99.1357C99.819 14.2158 100.496 14.3497 101.128 14.6122C101.76 14.8748 102.335 15.2608 102.82 15.7483C103.305 16.2358 103.69 16.8152 103.954 17.4533C104.217 18.0915 104.354 18.776 104.356 19.4678V43.4568C104.354 44.1485 104.217 44.833 103.954 45.4712C103.69 46.1094 103.305 46.6888 102.82 47.1762C102.335 47.6637 101.76 48.0497 101.128 48.3123C100.496 48.5748 99.819 48.7088 99.1357 48.7064H93.6333V57.6861L85.3797 48.7064H61.8645C61.1812 48.7088 60.5041 48.5748 59.872 48.3123C59.2398 48.0497 58.6649 47.6637 58.1801 47.1762C57.6954 46.6888 57.3102 46.1094 57.0465 45.4712C56.7829 44.833 56.646 44.1485 56.6437 43.4568V19.4678C56.6484 18.0731 57.1992 16.7372 58.1755 15.753C59.1517 14.7689 60.4736 14.2169 61.8512 14.2181Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M85.3796 48.7064H61.8645C61.1812 48.7088 60.5041 48.5748 59.872 48.3123C59.2398 48.0497 58.6649 47.6637 58.1801 47.1762C57.6954 46.6887 57.3102 46.1094 57.0465 45.4712C56.7829 44.833 56.6461 44.1485 56.6438 43.4567V28.8931C56.6438 28.8931 58.2857 42.3605 58.5806 43.5459C58.8755 44.7313 59.461 46.5049 62.2342 46.7991C65.0074 47.0932 85.3796 48.7064 85.3796 48.7064Z'\n            fill='black'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M93.2285 28.033C92.5642 28.033 91.9148 28.2324 91.3625 28.606C90.8101 28.9796 90.3796 29.5107 90.1254 30.132C89.8712 30.7533 89.8047 31.437 89.9343 32.0966C90.0639 32.7562 90.3838 33.362 90.8535 33.8376C91.3232 34.3131 91.9217 34.6369 92.5732 34.7681C93.2247 34.8993 93.9001 34.832 94.5138 34.5746C95.1275 34.3173 95.6521 33.8815 96.0211 33.3223C96.3902 32.7631 96.5872 32.1057 96.5872 31.4332C96.5877 30.9865 96.5013 30.5441 96.3327 30.1313C96.1641 29.7185 95.9167 29.3434 95.6047 29.0276C95.2927 28.7117 94.9222 28.4613 94.5145 28.2906C94.1067 28.1199 93.6697 28.0324 93.2285 28.033Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M80.4931 28.033C79.8288 28.033 79.1795 28.2324 78.6271 28.606C78.0748 28.9796 77.6443 29.5107 77.3901 30.132C77.1359 30.7533 77.0694 31.437 77.199 32.0966C77.3286 32.7562 77.6485 33.362 78.1182 33.8376C78.5879 34.3131 79.1864 34.6369 79.8379 34.7681C80.4894 34.8993 81.1647 34.832 81.7784 34.5746C82.3922 34.3173 82.9167 33.8815 83.2858 33.3223C83.6548 32.7631 83.8518 32.1057 83.8518 31.4332C83.8524 30.9865 83.7659 30.5441 83.5973 30.1313C83.4287 29.7185 83.1814 29.3434 82.8694 29.0276C82.5574 28.7117 82.1869 28.4613 81.7791 28.2906C81.3714 28.1199 80.9344 28.0324 80.4931 28.033Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M67.7719 28.033C67.1075 28.0321 66.4577 28.2308 65.9048 28.6038C65.3518 28.9769 64.9207 29.5077 64.6658 30.1289C64.4109 30.7501 64.3437 31.434 64.4728 32.0938C64.6019 32.7537 64.9215 33.36 65.391 33.836C65.8606 34.312 66.459 34.6362 67.1107 34.7678C67.7623 34.8994 68.4379 34.8323 69.0518 34.5751C69.6658 34.3178 70.1906 33.882 70.5599 33.3228C70.9291 32.7635 71.1262 32.1059 71.1262 31.4332C71.1268 30.9869 71.0405 30.5448 70.8722 30.1323C70.7038 29.7198 70.4569 29.3449 70.1453 29.0291C69.8338 28.7133 69.4638 28.4628 69.0566 28.2919C68.6493 28.1209 68.2128 28.033 67.7719 28.033Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M100.487 24.263C100.108 22.9055 99.4678 21.6372 98.6028 20.5313C97.7378 19.4253 96.6652 18.5035 95.4468 17.819C95.3747 17.7821 95.3166 17.7219 95.2818 17.648C95.2471 17.5741 95.2375 17.4906 95.2546 17.4106C95.2717 17.3306 95.3145 17.2586 95.3764 17.2059C95.4383 17.1532 95.5157 17.1227 95.5965 17.1193C97.9471 16.9767 102.692 17.4848 101.205 24.2274C101.189 24.3097 101.146 24.3842 101.084 24.4392C101.021 24.4941 100.942 24.5262 100.86 24.5303C100.777 24.5344 100.695 24.5103 100.628 24.4618C100.56 24.4134 100.511 24.3434 100.487 24.263Z'\n            fill='var(--center-channel-bg)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M55.5543 38.8059H7.46272C6.58138 38.8029 5.70809 38.9732 4.8927 39.307C4.07732 39.6408 3.3358 40.1316 2.71049 40.7514C2.08518 41.3712 1.58833 42.1079 1.2483 42.9193C0.908278 43.7307 0.731737 44.601 0.72876 45.4805V75.9807C0.731737 76.8602 0.908278 77.7305 1.2483 78.5419C1.58833 79.3534 2.08518 80.09 2.71049 80.7098C3.3358 81.3296 4.07732 81.8204 4.8927 82.1542C5.70809 82.488 6.58138 82.6583 7.46272 82.6553H14.5601V94.0724L25.2061 82.6553H55.5373C56.4186 82.6583 57.2919 82.488 58.1073 82.1542C58.9227 81.8204 59.6642 81.3296 60.2895 80.7098C60.9148 80.09 61.4117 79.3534 61.7517 78.5419C62.0917 77.7305 62.2683 76.8602 62.2712 75.9807V45.4805C62.2652 43.7072 61.5547 42.0087 60.2955 40.7574C59.0364 39.5062 57.3313 38.8044 55.5543 38.8059Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='M25.2061 82.6553H55.5372C56.4186 82.6583 57.2919 82.488 58.1073 82.1542C58.9226 81.8204 59.6642 81.3295 60.2895 80.7098C60.9148 80.09 61.4116 79.3533 61.7516 78.5419C62.0917 77.7305 62.2682 76.8602 62.2712 75.9807V57.4641C62.2712 57.4641 60.1533 74.5869 59.7729 76.094C59.3925 77.6012 58.6374 79.8563 55.0603 80.2302C51.4832 80.6042 25.2061 82.6553 25.2061 82.6553Z'\n            fill='#CC8F00'\n        />\n        <path\n            d='M15.0822 56.3705C15.9391 56.3705 16.7766 56.624 17.4891 57.0991C18.2015 57.5741 18.7568 58.2493 19.0847 59.0393C19.4126 59.8292 19.4984 60.6985 19.3312 61.5371C19.164 62.3757 18.7514 63.146 18.1456 63.7506C17.5397 64.3552 16.7678 64.767 15.9274 64.9338C15.087 65.1006 14.216 65.015 13.4244 64.6878C12.6327 64.3606 11.9561 63.8064 11.4801 63.0955C11.0041 62.3845 10.75 61.5487 10.75 60.6937C10.7493 60.1257 10.8608 59.5632 11.0783 59.0384C11.2957 58.5135 11.6148 58.0366 12.0172 57.635C12.4196 57.2335 12.8975 56.915 13.4235 56.698C13.9494 56.481 14.5131 56.3697 15.0822 56.3705Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M31.509 56.3705C32.3658 56.3705 33.2034 56.624 33.9158 57.0991C34.6283 57.5741 35.1835 58.2493 35.5114 59.0393C35.8393 59.8292 35.9251 60.6985 35.7579 61.5371C35.5908 62.3757 35.1782 63.146 34.5723 63.7506C33.9664 64.3552 33.1945 64.767 32.3542 64.9338C31.5138 65.1006 30.6427 65.015 29.8511 64.6878C29.0595 64.3606 28.3829 63.8064 27.9069 63.0955C27.4308 62.3845 27.1768 61.5487 27.1768 60.6937C27.176 60.1257 27.2876 59.5632 27.505 59.0384C27.7225 58.5135 28.0415 58.0366 28.444 57.635C28.8464 57.2335 29.3243 56.915 29.8502 56.698C30.3762 56.481 30.9399 56.3697 31.509 56.3705Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M47.9174 56.3705C48.7744 56.3694 49.6126 56.622 50.3258 57.0963C51.0389 57.5707 51.5951 58.2455 51.9238 59.0353C52.2526 59.8252 52.3392 60.6946 52.1727 61.5336C52.0062 62.3726 51.594 63.1434 50.9884 63.7486C50.3827 64.3538 49.6108 64.7661 48.7703 64.9334C47.9298 65.1006 47.0584 65.0154 46.2665 64.6883C45.4745 64.3613 44.7976 63.8071 44.3213 63.0961C43.845 62.385 43.5908 61.549 43.5908 60.6937C43.5901 60.1262 43.7014 59.5642 43.9185 59.0397C44.1356 58.5152 44.4542 58.0386 44.856 57.6371C45.2579 57.2355 45.7351 56.917 46.2603 56.6997C46.7856 56.4824 47.3487 56.3705 47.9174 56.3705Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M5.71976 51.5772C6.20841 49.8512 7.0344 48.2387 8.15016 46.8326C9.26591 45.4265 10.6494 44.2545 12.2209 43.3841C12.314 43.3372 12.3889 43.2607 12.4337 43.1668C12.4786 43.0728 12.491 42.9667 12.4689 42.8649C12.4468 42.7632 12.3915 42.6716 12.3117 42.6046C12.2319 42.5376 12.1321 42.4989 12.0279 42.4946C8.99589 42.3133 2.87515 42.9592 4.79427 51.5319C4.81451 51.6366 4.86936 51.7314 4.95003 51.8012C5.0307 51.8711 5.13252 51.9119 5.23919 51.9171C5.34586 51.9223 5.4512 51.8917 5.53833 51.83C5.62547 51.7684 5.68935 51.6794 5.71976 51.5772Z'\n            fill='#FFD470'\n        />\n        <ellipse\n            cx='119.099'\n            cy='216.167'\n            rx='38.5938'\n            ry='1.95397'\n            fill='black'\n            fillOpacity='0.12'\n        />\n        <defs>\n            <linearGradient\n                id='paint0_linear_522_36531'\n                x1='93.5'\n                y1='-1.73437e-05'\n                x2='-66.6967'\n                y2='160.197'\n                gradientUnits='userSpaceOnUse'\n            >\n                <stop\n                    offset='0.0104167'\n                    stopColor='var(--button-bg)'\n                />\n                <stop\n                    offset='0.765625'\n                    stopColor='var(--button-bg)'\n                    stopOpacity='0'\n                />\n            </linearGradient>\n        </defs>\n    </svg>\n);\n\nexport default PublicChannelIntroSvg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport InvitationModal from 'components/invitation_modal';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\n\nimport './add_members_button.scss';\n\nexport interface AddMembersButtonProps {\n    totalUsers?: number;\n    usersLimit: number;\n    channel: Channel;\n    pluginButtons?: React.ReactNode;\n}\n\nconst AddMembersButton: React.FC<AddMembersButtonProps> = ({totalUsers, usersLimit, channel, pluginButtons}: AddMembersButtonProps) => {\n    const currentTeamId = useSelector(getCurrentTeamId);\n\n    if (!totalUsers) {\n        return (<LoadingSpinner/>);\n    }\n\n    const inviteUsers = totalUsers < usersLimit;\n\n    return (\n        <TeamPermissionGate\n            teamId={currentTeamId}\n            permissions={[Permissions.ADD_USER_TO_TEAM, Permissions.INVITE_GUEST]}\n        >\n            {inviteUsers ? (\n                <LessThanMaxFreeUsers\n                    pluginButtons={pluginButtons}\n                />\n            ) : (\n                <MoreThanMaxFreeUsers\n                    channel={channel}\n                    pluginButtons={pluginButtons}\n                />\n            )}\n        </TeamPermissionGate>\n    );\n};\n\nconst LessThanMaxFreeUsers = ({pluginButtons}: {pluginButtons: React.ReactNode}) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            {pluginButtons}\n            <div className='LessThanMaxFreeUsers'>\n                <ToggleModalButton\n                    ariaLabel={formatMessage({id: 'intro_messages.inviteOthers', defaultMessage: 'Invite others to the workspace'})}\n                    id='introTextInvite'\n                    className='btn btn-sm btn-primary'\n                    modalId={ModalIdentifiers.INVITATION}\n                    dialogType={InvitationModal}\n                    onClick={() => trackEvent('channel_intro_message', 'click_invite_button')}\n                >\n                    <i\n                        className='icon-email-plus-outline'\n                        title={formatMessage({id: 'generic_icons.add', defaultMessage: 'Add Icon'})}\n                    />\n                    <FormattedMessage\n                        id='intro_messages.inviteOthersToWorkspace.button'\n                        defaultMessage='Invite others to the workspace'\n                    />\n                </ToggleModalButton>\n            </div>\n        </>\n    );\n};\n\nconst MoreThanMaxFreeUsers = ({channel, pluginButtons}: {channel: Channel; pluginButtons: React.ReactNode}) => {\n    const {formatMessage} = useIntl();\n\n    const modalId = channel.group_constrained ? ModalIdentifiers.ADD_GROUPS_TO_CHANNEL : ModalIdentifiers.CHANNEL_INVITE;\n    const modal = channel.group_constrained ? AddGroupsToChannelModal : ChannelInviteModal;\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived) {\n        return null;\n    }\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n\n    return (\n        <div className='MoreThanMaxFreeUsersWrapper'>\n            <div className='MoreThanMaxFreeUsers'>\n                <ChannelPermissionGate\n                    channelId={channel.id}\n                    teamId={channel.team_id}\n                    permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS]}\n                >\n                    <ToggleModalButton\n                        className='action-button'\n                        modalId={modalId}\n                        dialogType={modal}\n                        dialogProps={{channel}}\n                    >\n                        <i\n                            className='icon-account-plus-outline'\n                            title={formatMessage({id: 'generic_icons.add', defaultMessage: 'Add Icon'})}\n                        />\n                        {channel.group_constrained &&\n                            <FormattedMessage\n                                id='intro_messages.inviteGropusToChannel.button'\n                                defaultMessage='Add groups'\n                            />}\n                        {!channel.group_constrained &&\n                            <FormattedMessage\n                                id='intro_messages.inviteMembersToChannel.button'\n                                defaultMessage='Add people'\n                            />}\n                    </ToggleModalButton>\n                </ChannelPermissionGate>\n            </div>\n            {pluginButtons}\n        </div>\n    );\n};\n\nexport default React.memo(AddMembersButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\n\nimport type {PluginComponent} from 'types/store/plugins';\n\ntype Props = {\n    channel: Channel;\n    channelMember?: ChannelMembership;\n    pluginButtons: PluginComponent[];\n}\n\nconst PluggableIntroButtons = React.memo((props: Props) => {\n    const channelIsArchived = props.channel.delete_at !== 0;\n    if (channelIsArchived || props.pluginButtons.length === 0) {\n        return null;\n    }\n\n    const buttons = props.pluginButtons.map((buttonProps) => {\n        return (\n            <button\n                key={buttonProps.id}\n                className={'action-button'}\n                onClick={() => buttonProps.action?.(props.channel, props.channelMember)}\n            >\n                {buttonProps.icon}\n                {buttonProps.text}\n            </button>\n        );\n    });\n\n    return <>{buttons}</>;\n});\nPluggableIntroButtons.displayName = 'PluggableIntroButtons';\n\nexport default PluggableIntroButtons;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getMyChannelMembership} from 'mattermost-redux/selectors/entities/channels';\n\nimport {getChannelIntroPluginButtons} from 'selectors/plugins';\n\nimport type {GlobalState} from 'types/store';\n\nimport PluggableIntroButtons from './pluggable_intro_buttons';\n\ntype OwnProps = {\n    channel: Channel;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    return {\n        channelMember: getMyChannelMembership(state, ownProps.channel.id),\n        pluginButtons: getChannelIntroPluginButtons(state),\n    };\n}\n\nexport default connect(mapStateToProps)(PluggableIntroButtons);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport { FormattedDate, FormattedMessage, defineMessages } from 'react-intl';\n\nimport { BellRingOutlineIcon, GlobeIcon, PencilOutlineIcon, StarOutlineIcon, LockOutlineIcon, StarIcon } from '@mattermost/compass-icons/components';\nimport type { Channel, ChannelMembership } from '@mattermost/types/channels';\nimport type { UserProfile as UserProfileType } from '@mattermost/types/users';\n\nimport { Permissions } from 'mattermost-redux/constants';\nimport { NotificationLevel } from 'mattermost-redux/constants/channels';\nimport { isChannelMuted } from 'mattermost-redux/utils/channel_utils';\n\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\nimport ChannelNotificationsModal from 'components/channel_notifications_modal';\nimport ChannelIntroPrivateSvg from 'components/common/svg_images_components/channel_intro_private_svg';\nimport ChannelIntroPublicSvg from 'components/common/svg_images_components/channel_intro_public_svg';\nimport ChannelIntroTownSquareSvg from 'components/common/svg_images_components/channel_intro_town_square_svg';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport TeamPermissionGate from 'components/permissions_gates/team_permission_gate';\nimport ProfilePicture from 'components/profile_picture';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport UserProfile from 'components/user_profile';\n\nimport { Constants, ModalIdentifiers } from 'utils/constants';\nimport { getMonthLong } from 'utils/i18n';\nimport * as Utils from 'utils/utils';\n\nimport AddMembersButton from './add_members_button';\nimport PluggableIntroButtons from './pluggable_intro_buttons';\n\ntype Props = {\n    currentUserId: string;\n    channel?: Channel;\n    fullWidth: boolean;\n    locale: string;\n    channelProfiles: UserProfileType[];\n    enableUserCreation?: boolean;\n    isReadOnly?: boolean;\n    isFavorite: boolean;\n    teamIsGroupConstrained?: boolean;\n    creatorName: string;\n    teammate?: UserProfileType;\n    teammateName?: string;\n    currentUser: UserProfileType;\n    stats: any;\n    usersLimit: number;\n    channelMember?: ChannelMembership;\n    isMobileView: boolean;\n    actions: {\n        getTotalUsersStats: () => any;\n        favoriteChannel: (channelId: string) => any;\n        unfavoriteChannel: (channelId: string) => any;\n    };\n}\n\nexport default class ChannelIntroMessage extends React.PureComponent<Props> {\n    toggleFavorite = () => {\n        if (!this.props.channel) {\n            return;\n        }\n\n        if (this.props.isFavorite) {\n            this.props.actions.unfavoriteChannel(this.props.channel.id);\n        } else {\n            this.props.actions.favoriteChannel(this.props.channel.id);\n        }\n    };\n\n    componentDidMount() {\n        if (!this.props.stats?.total_users_count) {\n            this.props.actions.getTotalUsersStats();\n        }\n    }\n\n    render() {\n        const {\n            currentUserId,\n            channel,\n            fullWidth,\n            locale,\n            channelProfiles,\n            enableUserCreation,\n            isReadOnly,\n            isFavorite,\n            teamIsGroupConstrained,\n            creatorName,\n            teammate,\n            teammateName,\n            currentUser,\n            stats,\n            usersLimit,\n            channelMember,\n            isMobileView,\n        } = this.props;\n\n        let centeredIntro = '';\n        if (!fullWidth) {\n            centeredIntro = 'channel-intro--centered';\n        }\n\n        if (!channel) {\n            return null;\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            return createDMIntroMessage(channel, centeredIntro, currentUser, isFavorite, isMobileView, this.toggleFavorite, teammate, teammateName);\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            return createGMIntroMessage(channel, centeredIntro, isFavorite, isMobileView, this.toggleFavorite, channelProfiles, currentUserId, currentUser, channelMember);\n        } else if (channel.name === Constants.DEFAULT_CHANNEL) {\n            return createDefaultIntroMessage(channel, centeredIntro, currentUser, isFavorite, isMobileView, this.toggleFavorite, stats, usersLimit, enableUserCreation, isReadOnly, teamIsGroupConstrained);\n        } else if (channel.name === Constants.OFFTOPIC_CHANNEL) {\n            return createOffTopicIntroMessage(channel, centeredIntro, isFavorite, isMobileView, currentUser, this.toggleFavorite, stats, usersLimit);\n        } else if (channel.type === Constants.OPEN_CHANNEL || channel.type === Constants.PRIVATE_CHANNEL) {\n            return createStandardIntroMessage(channel, centeredIntro, currentUser, isFavorite, isMobileView, this.toggleFavorite, stats, usersLimit, locale, creatorName);\n        }\n        return null;\n    }\n}\n\nconst gmIntroMessages = defineMessages({\n    muted: { id: 'intro_messages.GM.muted', defaultMessage: 'This group message is currently <b>muted</b>, so you will not be notified.' },\n    [NotificationLevel.ALL]: { id: 'intro_messages.GM.all', defaultMessage: 'You\\'ll be notified <b>for all activity</b> in this group message.' },\n    [NotificationLevel.DEFAULT]: { id: 'intro_messages.GM.all', defaultMessage: 'You\\'ll be notified <b>for all activity</b> in this group message.' },\n    [NotificationLevel.MENTION]: { id: 'intro_messages.GM.mention', defaultMessage: 'You have selected to be notified <b>only when mentioned</b> in this group message.' },\n    [NotificationLevel.NONE]: { id: 'intro_messages.GM.none', defaultMessage: 'You have selected to <b>never</b> be notified in this group message.' },\n});\n\nconst getGMIntroMessageSpecificPart = (userProfile: UserProfileType | undefined, membership: ChannelMembership | undefined) => {\n    const isMuted = isChannelMuted(membership);\n    if (isMuted) {\n        return (\n            <FormattedMessage\n                {...gmIntroMessages.muted}\n                values={{\n                    b: (chunks) => <b>{chunks}</b>,\n                }}\n            />\n        );\n    }\n    const channelNotifyProp = membership?.notify_props?.desktop || NotificationLevel.DEFAULT;\n    const userNotifyProp = userProfile?.notify_props?.desktop || NotificationLevel.MENTION;\n    let notifyLevelToUse = channelNotifyProp;\n    if (notifyLevelToUse === NotificationLevel.DEFAULT) {\n        notifyLevelToUse = userNotifyProp;\n    }\n    if (channelNotifyProp === NotificationLevel.DEFAULT && userNotifyProp === NotificationLevel.MENTION) {\n        notifyLevelToUse = NotificationLevel.ALL;\n    }\n\n    return (\n        <FormattedMessage\n            {...gmIntroMessages[notifyLevelToUse]}\n            values={{\n                b: (chunks) => <b>{chunks}</b>,\n            }}\n        />\n    );\n};\n\nfunction createGMIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    toggleFavorite: () => void,\n    profiles: UserProfileType[],\n    currentUserId: string,\n    currentUser: UserProfileType,\n    channelMembership?: ChannelMembership,\n) {\n    const channelIntroId = 'channelIntro';\n\n    if (profiles.length > 0) {\n        const currentUserProfile = profiles.find((v) => v.id === currentUserId);\n\n        const pictures = profiles.\n            filter((profile) => profile.id !== currentUserId).\n            map((profile) => (\n                <ProfilePicture\n                    key={'introprofilepicture' + profile.id}\n                    src={Utils.imageURLForUser(profile.id, profile.last_picture_update)}\n                    size='xl-custom-GM'\n                    userId={profile.id}\n                    username={profile.username}\n                />\n            ));\n\n        const actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {createSetHeaderButton(channel)}\n                {!isMobileView && createNotificationPreferencesButton(channel, currentUser)}\n                <PluggableIntroButtons channel={channel} />\n            </div>\n        );\n\n        return (\n            <div\n                id={channelIntroId}\n                className={'channel-intro ' + centeredIntro}\n            >\n                <div className='post-profile-img__container channel-intro-img channel-intro-img__group'>\n                    {pictures}\n                </div>\n                <h2 className='channel-intro__title'>\n                    {channel.display_name}\n                </h2>\n                <p className='channel-intro__text'>\n                    <FormattedMessage\n                        id='intro_messages.group_message'\n                        defaultMessage={'This is the start of your group message history with these teammates. '}\n                    />\n                    {getGMIntroMessageSpecificPart(currentUserProfile, channelMembership)}\n                </p>\n                {actionButtons}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id={channelIntroId}\n            className={'channel-intro ' + centeredIntro}\n        >\n            <p className='channel-intro__text'>\n                <FormattedMessage\n                    id='intro_messages.group_message'\n                    defaultMessage='This is the start of your group message history with these teammates. Messages and files shared here are not shown to people outside this area.'\n                />\n            </p>\n        </div>\n    );\n}\n\nfunction createDMIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    currentUser: UserProfileType,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    toggleFavorite: () => void,\n    teammate?: UserProfileType,\n    teammateName?: string,\n) {\n    const channelIntroId = 'channelIntro';\n    if (teammate) {\n        const src = teammate ? Utils.imageURLForUser(teammate.id, teammate.last_picture_update) : '';\n\n        let pluggableButton = null;\n        let setHeaderButton = null;\n        if (!teammate?.is_bot) {\n            pluggableButton = <PluggableIntroButtons channel={channel} />;\n            setHeaderButton = createSetHeaderButton(channel);\n        }\n\n        const actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {setHeaderButton}\n                {pluggableButton}\n            </div>\n        );\n\n        return (\n            <div\n                id={channelIntroId}\n                className={'channel-intro ' + centeredIntro}\n            >\n                <div className='post-profile-img__container channel-intro-img'>\n                    <ProfilePicture\n                        src={src}\n                        size='xl-custom-DM'\n                        status={teammate.is_bot ? '' : channel.status}\n                        userId={teammate?.id}\n                        username={teammate?.username}\n                    />\n                </div>\n                <h2 className='channel-intro__title'>\n                    <UserProfile\n                        userId={teammate?.id}\n                    />\n                </h2>\n                <p className='channel-intro__text'>\n                    <FormattedMarkdownMessage\n                        id='intro_messages.DM'\n                        defaultMessage='This is the start of your direct message history with {teammate}. Messages and files shared here are not shown to anyone else.'\n                        values={{\n                            teammate: teammateName,\n                        }}\n                    />\n                </p>\n                {actionButtons}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id={channelIntroId}\n            className={'channel-intro ' + centeredIntro}\n        >\n            <p className='channel-intro__text'>\n                <FormattedMessage\n                    id='intro_messages.teammate'\n                    defaultMessage='This is the start of your direct message history with this teammate. Messages and files shared here are not shown to anyone else.'\n                />\n            </p>\n        </div>\n    );\n}\n\nfunction createOffTopicIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    currentUser: UserProfileType,\n    toggleFavorite: () => void,\n    stats: any,\n    usersLimit: number,\n) {\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    const children = createSetHeaderButton(channel);\n    const totalUsers = stats.total_users_count;\n    const inviteUsers = totalUsers < usersLimit;\n\n    let setHeaderButton = null;\n    let actionButtons = null;\n\n    if (children) {\n        setHeaderButton = (\n            <ChannelPermissionGate\n                teamId={channel.team_id}\n                channelId={channel.id}\n                permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n            >\n                {children}\n            </ChannelPermissionGate>\n        );\n    }\n\n    const channelInviteButton = (\n        <AddMembersButton\n            totalUsers={totalUsers}\n            usersLimit={usersLimit}\n            channel={channel}\n            pluginButtons={<PluggableIntroButtons channel={channel} />}\n        />\n    );\n\n    if (inviteUsers) {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {actionButtons = channelInviteButton}\n            </div>\n        );\n    } else {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {setHeaderButton}\n                {createNotificationPreferencesButton(channel, currentUser)}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            <ChannelIntroPublicSvg />\n            <h2 className='channel-intro__title'>\n                {channel.display_name}\n            </h2>\n            <p className='channel-intro__text'>\n                <FormattedMessage\n                    id='intro_messages.offTopic'\n                    defaultMessage='This is the start of {display_name}, a channel for non-work-related conversations.'\n                    values={{\n                        display_name: channel.display_name,\n                    }}\n                />\n            </p>\n            {actionButtons}\n        </div>\n    );\n}\n\nfunction createDefaultIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    currentUser: UserProfileType,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    toggleFavorite: () => void,\n    stats: any,\n    usersLimit: number,\n    enableUserCreation?: boolean,\n    isReadOnly?: boolean,\n    teamIsGroupConstrained?: boolean,\n) {\n    let teamInviteLink = null;\n    const totalUsers = stats.total_users_count;\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    const inviteUsers = totalUsers < usersLimit;\n\n    let setHeaderButton = null;\n    let pluginButtons = null;\n    let actionButtons = null;\n\n    if (!isReadOnly) {\n        pluginButtons = <PluggableIntroButtons channel={channel} />;\n        const children = createSetHeaderButton(channel);\n        if (children) {\n            setHeaderButton = (\n                <ChannelPermissionGate\n                    teamId={channel.team_id}\n                    channelId={channel.id}\n                    permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n                >\n                    {children}\n                </ChannelPermissionGate>\n            );\n        }\n    }\n\n    if (!isReadOnly && enableUserCreation) {\n        teamInviteLink = (\n            <TeamPermissionGate\n                teamId={channel.team_id}\n                permissions={[Permissions.INVITE_USER]}\n            >\n                <TeamPermissionGate\n                    teamId={channel.team_id}\n                    permissions={[Permissions.ADD_USER_TO_TEAM]}\n                >\n                    {!teamIsGroupConstrained &&\n                        <AddMembersButton\n                            totalUsers={totalUsers}\n                            usersLimit={usersLimit}\n                            channel={channel}\n                            pluginButtons={pluginButtons}\n                        />\n                    }\n                    {teamIsGroupConstrained &&\n                        <ToggleModalButton\n                            className='intro-links color--link'\n                            modalId={ModalIdentifiers.ADD_GROUPS_TO_TEAM}\n                            dialogType={AddGroupsToTeamModal}\n                            dialogProps={{ channel }}\n                        >\n                            <i\n                                className='fa fa-user-plus'\n                            />\n                            <FormattedMessage\n                                id='intro_messages.addGroupsToTeam'\n                                defaultMessage='Add other groups to this team'\n                            />\n                        </ToggleModalButton>\n                    }\n                </TeamPermissionGate>\n            </TeamPermissionGate>\n        );\n    }\n\n    if (inviteUsers) {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {actionButtons = teamInviteLink}\n            </div>\n        );\n    } else {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {setHeaderButton}\n                {createNotificationPreferencesButton(channel, currentUser)}\n                {teamIsGroupConstrained && pluginButtons}\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            {/* <ChannelIntroTownSquareSvg /> */}\n            <h2 className='channel-intro__title'>\n                {/* {channel.display_name} */}\n                Amir Channel\n            </h2>\n            <p className='channel-intro__text'>\n                Hello Amir\n                {/* {!isReadOnly &&\n                    <FormattedMessage\n                        id='intro_messages.default'\n                        defaultMessage='Welcome to {display_name}. Post messages here that you want everyone to see. Everyone automatically becomes a member of this channel when they join the team.'\n                        values={{\n                            display_name: channel.display_name,\n                        }}\n                    />\n                }\n                {isReadOnly &&\n                    <FormattedMessage\n                        id='intro_messages.readonly.default'\n                        defaultMessage='Welcome to {display_name}. Messages can only be posted by admins. Everyone automatically becomes a permanent member of this channel when they join the team.'\n                        values={{\n                            display_name: channel.display_name,\n                        }}\n                    />\n                } */}\n            </p>\n            {actionButtons}\n        </div>\n    );\n}\n\nfunction createStandardIntroMessage(\n    channel: Channel,\n    centeredIntro: string,\n    currentUser: UserProfileType,\n    isFavorite: boolean,\n    isMobileView: boolean,\n    toggleFavorite: () => void,\n    stats: any,\n    usersLimit: number,\n    locale: string,\n    creatorName: string,\n) {\n    const uiName = channel.display_name;\n    let memberMessage;\n    let teamInviteLink = null;\n    const channelIsArchived = channel.delete_at !== 0;\n    const totalUsers = stats.total_users_count;\n    const inviteUsers = totalUsers < usersLimit;\n\n    if (channelIsArchived) {\n        memberMessage = '';\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        memberMessage = (\n            <FormattedMessage\n                id='intro_messages.onlyInvited'\n                defaultMessage='This is the start of {display_name}. Only invited members can see this private channel.'\n                values={{\n                    display_name: channel.display_name,\n                }}\n            />\n        );\n    } else {\n        memberMessage = (\n            <FormattedMessage\n                id='intro_messages.anyMember'\n                defaultMessage='This is the start of {display_name}. Any team member can join and read this channel.'\n                values={{\n                    display_name: channel.display_name,\n                }}\n            />\n        );\n    }\n\n    const date = (\n        <FormattedDate\n            value={channel.create_at}\n            month={getMonthLong(locale)}\n            day='2-digit'\n            year='numeric'\n        />\n    );\n\n    let createMessage;\n    if (creatorName === '') {\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            createMessage = (\n                <FormattedMessage\n                    id='intro_messages.noCreatorPrivate'\n                    defaultMessage='Private channel created on {date}.'\n                    values={{ name: (uiName), date }}\n                />\n            );\n        } else if (channel.type === Constants.OPEN_CHANNEL) {\n            createMessage = (\n                <FormattedMessage\n                    id='intro_messages.noCreator'\n                    defaultMessage='Public channel created on {date}.'\n                    values={{ name: (uiName), date }}\n                />\n            );\n        }\n    } else if (channel.type === Constants.PRIVATE_CHANNEL) {\n        createMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.creatorPrivate'\n                    defaultMessage='Private channel created by {creator} on {date}.'\n                    values={{\n                        name: (uiName),\n                        creator: (creatorName),\n                        date,\n                    }}\n                />\n            </span>\n        );\n    } else if (channel.type === Constants.OPEN_CHANNEL) {\n        createMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.creator'\n                    defaultMessage='Public channel created by {creator} on {date}.'\n                    values={{\n                        name: (uiName),\n                        creator: (creatorName),\n                        date,\n                    }}\n                />\n            </span>\n        );\n    }\n\n    let purposeMessage;\n    if (channel.purpose && channel.purpose !== '') {\n        purposeMessage = (\n            <span>\n                <FormattedMessage\n                    id='intro_messages.purpose'\n                    defaultMessage=\" This channel's purpose is: {purpose}\"\n                    values={{ purpose: channel.purpose }}\n                />\n            </span>\n        );\n    }\n\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    let setHeaderButton = null;\n    let actionButtons = null;\n    const children = createSetHeaderButton(channel);\n    if (children) {\n        setHeaderButton = (\n            <ChannelPermissionGate\n                teamId={channel.team_id}\n                channelId={channel.id}\n                permissions={[isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES]}\n            >\n                {children}\n            </ChannelPermissionGate>\n        );\n    }\n\n    teamInviteLink = (\n        <AddMembersButton\n            totalUsers={totalUsers}\n            usersLimit={usersLimit}\n            channel={channel}\n            pluginButtons={<PluggableIntroButtons channel={channel} />}\n        />\n    );\n\n    if (inviteUsers) {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {actionButtons = teamInviteLink}\n            </div>\n        );\n    } else {\n        actionButtons = (\n            <div className='channel-intro__actions'>\n                {createFavoriteButton(isFavorite, toggleFavorite)}\n                {teamInviteLink}\n                {setHeaderButton}\n                {!isMobileView && createNotificationPreferencesButton(channel, currentUser)}\n                <PluggableIntroButtons channel={channel} />\n            </div>\n        );\n    }\n\n    return (\n        <div\n            id='channelIntro'\n            className={'channel-intro ' + centeredIntro}\n        >\n            {isPrivate ? <ChannelIntroPrivateSvg /> : <ChannelIntroPublicSvg />}\n            <h2 className='channel-intro__title'>\n                {channel.display_name}\n            </h2>\n            <div className='channel-intro__created'>\n                {isPrivate ? <LockOutlineIcon size={14} /> : <GlobeIcon size={14} />}\n                {createMessage}\n            </div>\n            <p className='channel-intro__text'>\n                {memberMessage}\n                {purposeMessage}\n            </p>\n            {actionButtons}\n        </div>\n    );\n}\n\nfunction createSetHeaderButton(channel: Channel) {\n    const channelIsArchived = channel.delete_at !== 0;\n    if (channelIsArchived) {\n        return null;\n    }\n\n    return (\n        <ToggleModalButton\n            modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n            ariaLabel={Utils.localizeMessage('intro_messages.setHeader', 'Set header')}\n            className={'action-button'}\n            dialogType={EditChannelHeaderModal}\n            dialogProps={{ channel }}\n        >\n            <PencilOutlineIcon\n                size={24}\n            />\n            <FormattedMessage\n                id='intro_messages.setHeader'\n                defaultMessage='Set header'\n            />\n        </ToggleModalButton>\n    );\n}\n\nfunction createFavoriteButton(isFavorite: boolean, toggleFavorite: () => void, classes?: string) {\n    let favoriteText;\n    if (isFavorite) {\n        favoriteText = (\n            <FormattedMessage\n                id='channel_info_rhs.top_buttons.favorited'\n                defaultMessage='Favorited'\n            />);\n    } else {\n        favoriteText = (\n            <FormattedMessage\n                id='channel_info_rhs.top_buttons.favorite'\n                defaultMessage='Favorite'\n            />);\n    }\n    return (\n        <button\n            id='toggleFavoriteIntroButton'\n            className={`action-button ${isFavorite ? 'active' : ''}  ${classes}`}\n            onClick={toggleFavorite}\n            aria-label={'Favorite'}\n        >\n            {isFavorite ? <StarIcon size={24} /> : <StarOutlineIcon size={24} />}\n            {favoriteText}\n        </button>\n    );\n}\n\nfunction createNotificationPreferencesButton(channel: Channel, currentUser: UserProfileType) {\n    return (\n        <ToggleModalButton\n            modalId={ModalIdentifiers.CHANNEL_NOTIFICATIONS}\n            ariaLabel={Utils.localizeMessage('intro_messages.notificationPreferences', 'Notification Preferences')}\n            className={'action-button'}\n            dialogType={ChannelNotificationsModal}\n            dialogProps={{ channel, currentUser }}\n        >\n            <BellRingOutlineIcon size={24} />\n            <FormattedMessage\n                id='intro_messages.notificationPreferences'\n                defaultMessage='Notifications'\n            />\n        </ToggleModalButton>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {favoriteChannel, unfavoriteChannel} from 'mattermost-redux/actions/channels';\nimport {getTotalUsersStats} from 'mattermost-redux/actions/users';\nimport {getCurrentChannel, getDirectTeammate, getMyCurrentChannelMembership, isCurrentChannelFavorite} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser, getProfilesInCurrentChannel, getCurrentUserId, getUser, getTotalUsersStats as getTotalUsersStatsSelector} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {Preferences} from 'utils/constants';\nimport {getDisplayNameByUser} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelIntroMessage from './channel_intro_message';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const enableUserCreation = config.EnableUserCreation === 'true';\n    const isReadOnly = false;\n    const team = getCurrentTeam(state);\n    const channel = getCurrentChannel(state);\n    const channelMember = getMyCurrentChannelMembership(state);\n    const teammate = channel ? getDirectTeammate(state, channel.id) : undefined;\n    const currentUser = getCurrentUser(state);\n    const creator = channel ? getUser(state, channel.creator_id) : undefined;\n\n    const usersLimit = 10;\n\n    const stats = getTotalUsersStatsSelector(state) || {total_users_count: 0};\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        channel,\n        fullWidth: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT) === Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n        locale: getCurrentLocale(state),\n        channelProfiles: getProfilesInCurrentChannel(state),\n        enableUserCreation,\n        isReadOnly,\n        isFavorite: isCurrentChannelFavorite(state),\n        teamIsGroupConstrained: Boolean(team?.group_constrained),\n        creatorName: getDisplayNameByUser(state, creator),\n        teammate,\n        teammateName: getDisplayNameByUser(state, teammate),\n        currentUser,\n        stats,\n        usersLimit,\n        channelMember,\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTotalUsersStats,\n            favoriteChannel,\n            unfavoriteChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelIntroMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {CloudUsage, Limits} from '@mattermost/types/cloud';\nimport type {Post} from '@mattermost/types/posts';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport * as PostListUtils from 'mattermost-redux/utils/post_list';\n\nimport type {emitShortcutReactToLastPostFrom} from 'actions/post_actions';\n\nimport CenterMessageLock from 'components/center_message_lock';\nimport PostComponent from 'components/post';\nimport ChannelIntroMessage from 'components/post_view/channel_intro_message/';\nimport CombinedUserActivityPost from 'components/post_view/combined_user_activity_post';\nimport DateSeparator from 'components/post_view/date_separator';\nimport NewMessageSeparator from 'components/post_view/new_message_separator/new_message_separator';\n\nimport {PostListRowListIds, Locations} from 'utils/constants';\nimport {isIdNotPost} from 'utils/post_utils';\n\nimport type {PluginComponent} from 'types/store/plugins';\n\nexport type PostListRowProps = {\n    listId: string;\n    previousListId?: string;\n    fullWidth?: boolean;\n    shouldHighlight?: boolean;\n    loadOlderPosts: () => void;\n    loadNewerPosts: () => void;\n    togglePostMenu: (opened: boolean) => void;\n    post: Post;\n    currentUserId: UserProfile['id'];\n\n    /**\n     * To Check if the current post is last in the list\n     */\n    isLastPost: boolean;\n\n    /**\n     * To check if the state of emoji for last message and from where it was emitted\n     */\n    shortcutReactToLastPostEmittedFrom: string;\n\n    /**\n     * is used for hiding animation of loader\n     */\n    loadingNewerPosts: boolean;\n    loadingOlderPosts: boolean;\n\n    usage: CloudUsage;\n    limits: Limits;\n    limitsLoaded: boolean;\n    exceededLimitChannelId?: string;\n    firstInaccessiblePostTime?: number;\n    channelId: string;\n\n    newMessagesSeparatorActions: PluginComponent[];\n\n    actions: {\n\n        /**\n          * Function to set or unset emoji picker for last message\n          */\n        emitShortcutReactToLastPostFrom: typeof emitShortcutReactToLastPostFrom;\n    };\n}\n\nexport default class PostListRow extends React.PureComponent<PostListRowProps> {\n    blockShortcutReactToLastPostForNonMessages(listId: string) {\n        const {actions: {emitShortcutReactToLastPostFrom}} = this.props;\n\n        if (isIdNotPost(listId)) {\n            // This is a good escape hatch as any of the above conditions don't return <Post/> component, Emoji picker is only at Post component\n            emitShortcutReactToLastPostFrom(Locations.NO_WHERE);\n        }\n    }\n\n    componentDidUpdate(prevProps: PostListRowProps) {\n        const {listId, isLastPost, shortcutReactToLastPostEmittedFrom} = this.props;\n\n        const shortcutReactToLastPostEmittedFromCenter = prevProps.shortcutReactToLastPostEmittedFrom !== shortcutReactToLastPostEmittedFrom &&\n            shortcutReactToLastPostEmittedFrom === Locations.CENTER;\n\n        // If last post is not a message then we block the shortcut to react to last message, early on\n        if (isLastPost && shortcutReactToLastPostEmittedFromCenter) {\n            this.blockShortcutReactToLastPostForNonMessages(listId);\n        }\n    }\n\n    render() {\n        const {listId, previousListId, loadingOlderPosts, loadingNewerPosts} = this.props;\n        const {\n            OLDER_MESSAGES_LOADER,\n            NEWER_MESSAGES_LOADER,\n            CHANNEL_INTRO_MESSAGE,\n            LOAD_OLDER_MESSAGES_TRIGGER,\n            LOAD_NEWER_MESSAGES_TRIGGER,\n        } = PostListRowListIds;\n\n        if (PostListUtils.isDateLine(listId)) {\n            const date = PostListUtils.getDateForDateLine(listId);\n\n            return (\n                <DateSeparator\n                    key={date}\n                    date={date}\n                />\n            );\n        }\n\n        if (PostListUtils.isStartOfNewMessages(listId)) {\n            return (\n                <NewMessageSeparator\n                    separatorId={listId}\n                    newMessagesSeparatorActions={this.props.newMessagesSeparatorActions}\n                    channelId={this.props.channelId}\n                />\n            );\n        }\n\n        if (this.props.exceededLimitChannelId) {\n            return (\n                <CenterMessageLock\n                    channelId={this.props.exceededLimitChannelId}\n                    firstInaccessiblePostTime={this.props.firstInaccessiblePostTime}\n                />\n            );\n        }\n\n        if (listId === CHANNEL_INTRO_MESSAGE) {\n            return (\n                <ChannelIntroMessage/>\n            );\n        }\n\n        if (listId === LOAD_OLDER_MESSAGES_TRIGGER || listId === LOAD_NEWER_MESSAGES_TRIGGER) {\n            return (\n                <button\n                    className='more-messages-text theme style--none color--link'\n                    onClick={listId === LOAD_OLDER_MESSAGES_TRIGGER ? this.props.loadOlderPosts : this.props.loadNewerPosts}\n                >\n                    <FormattedMessage\n                        id='posts_view.loadMore'\n                        defaultMessage='Load More Messages'\n                    />\n                </button>\n            );\n        }\n\n        const isOlderMessagesLoader = listId === OLDER_MESSAGES_LOADER;\n        const isNewerMessagesLoader = listId === NEWER_MESSAGES_LOADER;\n        if (isOlderMessagesLoader || isNewerMessagesLoader) {\n            const shouldHideAnimation = !loadingOlderPosts && !loadingNewerPosts;\n\n            return (\n                <div\n                    className='loading-screen'\n                >\n                    <div className={classNames('loading__content', {hideAnimation: shouldHideAnimation})}>\n                        <div className='round round-1'/>\n                        <div className='round round-2'/>\n                        <div className='round round-3'/>\n                    </div>\n                </div>\n            );\n        }\n\n        const postProps = {\n            previousPostId: previousListId,\n            shouldHighlight: Boolean(this.props.shouldHighlight),\n            togglePostMenu: this.props.togglePostMenu,\n            isLastPost: this.props.isLastPost,\n        };\n\n        if (PostListUtils.isCombinedUserActivityPost(listId)) {\n            return (\n                <CombinedUserActivityPost\n                    location={Locations.CENTER}\n                    combinedId={listId}\n                    {...postProps}\n                />\n            );\n        }\n\n        return (\n            <PostComponent\n                post={this.props.post}\n                location={Locations.CENTER}\n                {...postProps}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getCloudLimits, getCloudLimitsLoaded} from 'mattermost-redux/selectors/entities/cloud';\nimport {getCurrentChannelId, getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getLimitedViews, getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getUsage} from 'mattermost-redux/selectors/entities/usage';\n\nimport {emitShortcutReactToLastPostFrom} from 'actions/post_actions';\nimport {getShortcutReactToLastPostEmittedFrom} from 'selectors/emojis';\n\nimport {PostListRowListIds} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport PostListRow from './post_list_row';\nimport type {PostListRowProps} from './post_list_row';\n\ntype OwnProps = Pick<PostListRowProps, 'listId'>\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const shortcutReactToLastPostEmittedFrom = getShortcutReactToLastPostEmittedFrom(state);\n    const usage = getUsage(state);\n    const limits = getCloudLimits(state);\n    const limitsLoaded = getCloudLimitsLoaded(state);\n    const post = getPost(state, ownProps.listId);\n    const currentUserId = getCurrentUserId(state);\n    const newMessagesSeparatorActions = state.plugins.components.NewMessagesSeparatorAction;\n\n    const props: Pick<\n    PostListRowProps,\n    'shortcutReactToLastPostEmittedFrom' | 'usage' | 'limits' | 'limitsLoaded' | 'exceededLimitChannelId' | 'firstInaccessiblePostTime' | 'post' | 'currentUserId' | 'newMessagesSeparatorActions'\n    > = {\n        shortcutReactToLastPostEmittedFrom,\n        usage,\n        limits,\n        limitsLoaded,\n        post,\n        currentUserId,\n        newMessagesSeparatorActions,\n    };\n    if ((ownProps.listId === PostListRowListIds.OLDER_MESSAGES_LOADER || ownProps.listId === PostListRowListIds.CHANNEL_INTRO_MESSAGE) && limitsLoaded) {\n        const currentChannelId = getCurrentChannelId(state);\n        const firstInaccessiblePostTime = getLimitedViews(state).channels[currentChannelId];\n        const channelLimitExceeded = Boolean(firstInaccessiblePostTime) || firstInaccessiblePostTime === 0;\n        if (channelLimitExceeded) {\n            props.exceededLimitChannelId = currentChannelId;\n            props.firstInaccessiblePostTime = firstInaccessiblePostTime;\n        }\n    }\n    return props;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            emitShortcutReactToLastPostFrom,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function ScrollToBottomIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                x='0px'\n                y='0px'\n                viewBox='-239 239 21 23'\n                enableBackground='new -239 239 21 23'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.arrow.down', defaultMessage: 'Down Arrow Icon'})}\n            >\n                <path d='M-239,241.4l2.4-2.4l8.1,8.2l8.1-8.2l2.4,2.4l-10.5,10.6L-239,241.4z M-228.5,257.2l8.1-8.2l2.4,2.4l-10.5,10.6l-10.5-10.6 l2.4-2.4L-228.5,257.2z'/>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport ScrollToBottomIcon from 'components/widgets/icons/scroll_to_bottom_icon';\n\ntype Props = {\n    isScrolling: boolean;\n    atBottom?: boolean;\n    onClick: () => void;\n};\n\nconst ScrollToBottomArrows = ({isScrolling, atBottom, onClick}: Props) => {\n    // only show on mobile\n    if (window.innerWidth > 768) {\n        return null;\n    }\n\n    return (\n        <div\n            className={classNames('post-list__arrows', {\n                scrolling: isScrolling && atBottom === false,\n            })}\n            onClick={onClick}\n        >\n            <ScrollToBottomIcon/>\n        </div>\n    );\n};\n\nexport default ScrollToBottomArrows;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport CloseIcon from 'components/widgets/icons/close_icon';\n\nimport './hint_toast.scss';\n\nexport const HINT_TOAST_TESTID = 'hint-toast';\n\ntype Props = {\n    children: React.ReactNode;\n    onDismiss: () => void;\n}\n\nexport const HintToast: React.FC<Props> = ({children, onDismiss}: Props) => {\n    const handleDismiss = () => {\n        if (typeof onDismiss === 'function') {\n            onDismiss();\n        }\n    };\n\n    return (\n        <div\n            data-testid={HINT_TOAST_TESTID}\n            className='hint-toast'\n        >\n            <div\n                className='hint-toast__message'\n            >\n                {children}\n            </div>\n            <div\n                className='hint-toast__dismiss'\n                onClick={handleDismiss}\n                data-testid='dismissHintToast'\n            >\n                <CloseIcon\n                    className='close-btn'\n                    id='dismissHintToast'\n                />\n            </div>\n        </div>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport CloseIcon from 'components/widgets/icons/close_icon';\nimport UnreadBelowIcon from 'components/widgets/icons/unread_below_icon';\n\nimport './scroll_to_bottom_toast.scss';\n\nexport const SCROLL_TO_BOTTOM_TOAST_TESTID = 'scroll-to-bottom-toast';\nexport const SCROLL_TO_BOTTOM_DISMISS_BUTTON_TESTID = 'scroll-to-bottom-toast--dismiss-button';\n\ntype ScrollToBottomToastProps = {\n    onDismiss: () => void;\n    onClick: () => void;\n}\n\nexport const ScrollToBottomToast = ({onDismiss, onClick}: ScrollToBottomToastProps) => {\n    const {formatMessage} = useIntl();\n\n    const jumpToRecentsMessage = formatMessage({\n        id: 'postlist.toast.scrollToBottom',\n        defaultMessage: 'Jump to recents',\n    });\n\n    const handleScrollToBottom: React.MouseEventHandler<HTMLDivElement> = (e) => {\n        e.preventDefault();\n        onClick();\n    };\n\n    const handleDismiss: React.MouseEventHandler<HTMLDivElement> = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        onDismiss();\n    };\n\n    return (\n        <div\n            data-testid={SCROLL_TO_BOTTOM_TOAST_TESTID}\n            className='scroll-to-bottom-toast'\n            onClick={handleScrollToBottom}\n        >\n            <UnreadBelowIcon/>\n            {jumpToRecentsMessage}\n            <div\n                className='scroll-to-bottom-toast__dismiss'\n                onClick={handleDismiss}\n                data-testid={SCROLL_TO_BOTTOM_DISMISS_BUTTON_TESTID}\n            >\n                <CloseIcon\n                    className='close-btn'\n                    id='dismissScrollToBottomToast'\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default ScrollToBottomToast;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport ScrollToBottomToast from './scroll_to_bottom_toast';\n\nexport default ScrollToBottomToast;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape, WrappedComponentProps} from 'react-intl';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getNewMessagesIndex} from 'mattermost-redux/utils/post_list';\n\nimport {HintToast} from 'components/hint-toast/hint_toast';\nimport ScrollToBottomToast from 'components/scroll_to_bottom_toast';\nimport {SearchShortcut} from 'components/search_shortcut';\nimport Timestamp, {RelativeRanges} from 'components/timestamp';\nimport Toast from 'components/toast/toast';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport {isToday} from 'utils/datetime';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {isIdNotPost} from 'utils/post_utils';\nimport {localizeMessage} from 'utils/utils';\n\nimport './toast__wrapper.scss';\n\nconst TOAST_TEXT_COLLAPSE_WIDTH = 500;\n\nconst TOAST_REL_RANGES = [\n    RelativeRanges.TODAY_YESTERDAY,\n];\n\nexport type Props = WrappedComponentProps & RouteComponentProps<{team: string}> & {\n    channelMarkedAsUnread?: boolean;\n    postListIds: string[];\n    latestPostTimeStamp?: number;\n    atBottom: boolean | null;\n    lastViewedBottom: number;\n    width: number;\n    focusedPostId?: string;\n    initScrollOffsetFromBottom: number;\n    updateNewMessagesAtInChannel: (lastViewedAt?: number) => void;\n    scrollToNewMessage: () => void;\n    scrollToLatestMessages: () => void;\n    scrollToUnreadMessages: () => void;\n    updateLastViewedBottomAt: (lastViewedBottom?: number) => void;\n    showSearchHintToast: boolean;\n    onSearchHintDismiss: () => void;\n    showScrollToBottomToast: boolean;\n    onScrollToBottomToastDismiss: () => void;\n    hideScrollToBottomToast: () => void;\n    shouldStartFromBottomWhenUnread: boolean;\n    isNewMessageLineReached: boolean;\n    rootPosts: Record<string, boolean>;\n    lastViewedAt: number;\n    newRecentMessagesCount: number;\n    unreadScrollPosition: string;\n    isCollapsedThreadsEnabled: boolean;\n    unreadCountInChannel: number;\n    atLatestPost?: boolean;\n    channelId: string;\n    intl: IntlShape;\n    actions: {\n        updateToastStatus: (status: boolean) => void;\n    };\n};\n\ntype State = {\n    unreadCount: number;\n    unreadCountInChannel: number;\n    channelMarkedAsUnread?: boolean;\n    lastViewedAt?: number;\n    showUnreadToast?: boolean;\n    showNewMessagesToast?: boolean;\n    showMessageHistoryToast?: boolean;\n    showUnreadWithBottomStartToast?: boolean;\n    showScrollToBottomToast?: boolean;\n};\n\nexport class ToastWrapperClass extends React.PureComponent<Props, State> {\n    mounted?: boolean;\n    static defaultProps = {\n        focusedPostId: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            unreadCountInChannel: props.unreadCountInChannel,\n            unreadCount: 0,\n        };\n    }\n\n    static countNewMessages = (rootPosts: Record<string, boolean>, isCollapsedThreadsEnabled: boolean, postListIds: string[] = []) => {\n        const mark = getNewMessagesIndex(postListIds);\n        if (mark <= 0) {\n            return 0;\n        }\n        let newMessages = postListIds.slice(0, mark).filter((id) => !isIdNotPost(id));\n        if (isCollapsedThreadsEnabled) { // in collapsed mode we only count root posts\n            newMessages = newMessages.filter((id) => rootPosts[id]);\n        }\n        return newMessages.length;\n    };\n\n    static getDerivedStateFromProps(props: Props, prevState: State) {\n        let {showUnreadToast, showNewMessagesToast, showMessageHistoryToast, showUnreadWithBottomStartToast} = prevState;\n        let unreadCount;\n\n        if (props.atLatestPost) {\n            if (props.unreadScrollPosition === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST && prevState.unreadCountInChannel) {\n                unreadCount = prevState.unreadCountInChannel + props.newRecentMessagesCount;\n            } else {\n                unreadCount = ToastWrapperClass.countNewMessages(props.rootPosts, props.isCollapsedThreadsEnabled, props.postListIds);\n            }\n        } else if (props.channelMarkedAsUnread) {\n            if (props.unreadScrollPosition === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST) {\n                unreadCount = props.unreadCountInChannel + props.newRecentMessagesCount;\n            } else {\n                unreadCount = prevState.unreadCountInChannel;\n            }\n        } else {\n            unreadCount = prevState.unreadCountInChannel + props.newRecentMessagesCount;\n        }\n\n        // show unread toast on mount when channel is not at bottom and unread count greater than 0\n        if (typeof showUnreadToast === 'undefined' && props.atBottom !== null) {\n            showUnreadToast = unreadCount > 0 && !props.atBottom;\n        }\n\n        if (typeof showMessageHistoryToast === 'undefined' && props.focusedPostId !== '' && props.atBottom !== null) {\n            showMessageHistoryToast = props.initScrollOffsetFromBottom > 1000 || !props.atLatestPost;\n        }\n\n        // show unread toast when a channel is marked as unread\n        if (props.channelMarkedAsUnread && (props.atBottom === false) && !prevState.channelMarkedAsUnread && !prevState.showUnreadToast) {\n            showUnreadToast = true;\n        }\n\n        // show unread toast when a channel is remarked as unread using the change in lastViewedAt\n        // lastViewedAt changes only if a channel is remarked as unread in channelMarkedAsUnread state\n        if (props.channelMarkedAsUnread && props.lastViewedAt !== prevState.lastViewedAt && (props.atBottom === false)) {\n            showUnreadToast = true;\n        }\n\n        if (!showUnreadToast && unreadCount > 0 && (props.atBottom === false) && props.latestPostTimeStamp && (props.lastViewedBottom < props.latestPostTimeStamp)) {\n            showNewMessagesToast = true;\n        }\n\n        if (props.unreadScrollPosition === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST && !props.channelMarkedAsUnread) {\n            showUnreadToast = false;\n        }\n\n        if (!unreadCount) {\n            showUnreadToast = false;\n            showNewMessagesToast = false;\n        }\n\n        if (props.isNewMessageLineReached) {\n            showUnreadWithBottomStartToast = false;\n        }\n\n        if (\n            typeof showUnreadWithBottomStartToast === 'undefined' &&\n            props.lastViewedAt &&\n            props.lastViewedAt !== prevState.lastViewedAt &&\n            props.shouldStartFromBottomWhenUnread &&\n            unreadCount > 0 &&\n            !props.isNewMessageLineReached\n        ) {\n            showUnreadWithBottomStartToast = true;\n        }\n\n        return {\n            unreadCount,\n            showUnreadToast,\n            showNewMessagesToast,\n            showUnreadWithBottomStartToast,\n            lastViewedAt: props.lastViewedAt,\n            atBottom: props.atBottom,\n            channelMarkedAsUnread: props.channelMarkedAsUnread,\n            showMessageHistoryToast,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        const {showUnreadToast, showNewMessagesToast, showMessageHistoryToast, showUnreadWithBottomStartToast} = this.state;\n        const toastPresent = Boolean(showUnreadToast || showNewMessagesToast || showMessageHistoryToast || showUnreadWithBottomStartToast);\n        document.addEventListener('keydown', this.handleShortcut);\n        this.props.actions.updateToastStatus(toastPresent);\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        const {showUnreadToast, showNewMessagesToast, showMessageHistoryToast, showUnreadWithBottomStartToast} = this.state;\n        const {\n            atBottom,\n            atLatestPost,\n            postListIds,\n            lastViewedBottom,\n            updateNewMessagesAtInChannel,\n            actions,\n        } = this.props;\n\n        if (!prevProps.atBottom && atBottom && atLatestPost) {\n            this.hideNewMessagesToast(false);\n            this.hideUnreadToast();\n            this.hideArchiveToast();\n        }\n\n        const prevPostsCount = prevProps.postListIds.length;\n        const presentPostsCount = postListIds.length;\n        const postsAddedAtBottom = presentPostsCount !== prevPostsCount && postListIds[0] !== prevProps.postListIds[0];\n        const notBottomWithLatestPosts = atBottom === false && atLatestPost && presentPostsCount > 0;\n\n        //Marking existing messages as read based on last time user reached to the bottom\n        //This moves the new message indicator to the latest posts and keeping in sync with the toast count\n        if (postsAddedAtBottom && notBottomWithLatestPosts && !showUnreadToast) {\n            updateNewMessagesAtInChannel(lastViewedBottom);\n        }\n\n        const toastStateChanged = prevState.showUnreadToast !== showUnreadToast ||\n                                  prevState.showNewMessagesToast !== showNewMessagesToast ||\n                                  prevState.showMessageHistoryToast !== showMessageHistoryToast ||\n                                  prevState.showUnreadWithBottomStartToast !== showUnreadWithBottomStartToast;\n\n        if (toastStateChanged) {\n            const toastPresent = Boolean(showUnreadToast || showNewMessagesToast || showMessageHistoryToast || showUnreadWithBottomStartToast);\n            actions.updateToastStatus(toastPresent);\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n    }\n\n    handleShortcut = (e: KeyboardEvent) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE)) {\n            if (this.state.showUnreadToast) {\n                this.hideUnreadToast();\n            } else if (this.state.showNewMessagesToast) {\n                this.hideNewMessagesToast();\n            } else if (this.state.showUnreadWithBottomStartToast) {\n                this.hideUnreadWithBottomStartToast();\n            } else {\n                this.hideArchiveToast();\n            }\n        }\n    };\n\n    hideUnreadToast = () => {\n        if (this.state.showUnreadToast) {\n            this.setState({\n                showUnreadToast: false,\n            });\n        }\n    };\n\n    hideArchiveToast = () => {\n        if (this.state.showMessageHistoryToast) {\n            this.setState({\n                showMessageHistoryToast: false,\n            });\n        }\n    };\n\n    hideNewMessagesToast = (updateLastViewedBottomAt = true) => {\n        if (this.state.showNewMessagesToast) {\n            this.setState({\n                showNewMessagesToast: false,\n            });\n            if (updateLastViewedBottomAt) {\n                this.props.updateLastViewedBottomAt();\n            }\n        }\n    };\n\n    hideSearchHintToast = () => {\n        if (this.props.onSearchHintDismiss) {\n            this.props.onSearchHintDismiss();\n        }\n    };\n\n    hideUnreadWithBottomStartToast = () => {\n        if (this.state.showUnreadWithBottomStartToast) {\n            this.setState({\n                showUnreadWithBottomStartToast: false,\n            });\n        }\n    };\n\n    newMessagesToastText = (count: number | undefined, since: number) => {\n        if (this.props.width > TOAST_TEXT_COLLAPSE_WIDTH && typeof since !== 'undefined') {\n            return (\n                <FormattedMessage\n                    id='postlist.toast.newMessagesSince'\n                    defaultMessage='{count, number} new {count, plural, one {message} other {messages}} {isToday, select, true {} other {since}} {date}'\n                    values={{\n                        count,\n                        isToday: isToday(new Date(since)).toString(),\n                        date: (\n                            <Timestamp\n                                value={since}\n                                useTime={false}\n                                ranges={TOAST_REL_RANGES}\n                            />\n                        ),\n                    }}\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='postlist.toast.newMessages'\n                defaultMessage={'{count, number} new {count, plural, one {message} other {messages}}'}\n                values={{count}}\n            />\n        );\n    };\n\n    archiveToastText = () => {\n        return (\n            <FormattedMessage\n                id='postlist.toast.history'\n                defaultMessage='Viewing message history'\n            />\n        );\n    };\n\n    getSearchHintToastText = () => {\n        return (\n            <FormattedMessage\n                id='postlist.toast.searchHint'\n                defaultMessage='Tip: Try {searchShortcut} to search this channel'\n                values={{\n                    searchShortcut: <SearchShortcut/>,\n                }}\n            />\n        );\n    };\n\n    changeUrlToRemountChannelView = () => {\n        const {match} = this.props;\n\n        // Inorder of mount the channel view we are redirecting to /team url to load the channel again\n        // Todo: Can be changed to dispatch if we put focussedPostId in redux state.\n        getHistory().replace(`/${match.params.team}`);\n    };\n\n    scrollToNewMessage = () => {\n        const {focusedPostId, atLatestPost, scrollToNewMessage, updateLastViewedBottomAt} = this.props;\n\n        // if latest set of posts are not loaded in the view then we cannot scroll to the message\n        // We will be chaging the url to remount the channel view so we can remove the focussedPostId react state\n        // if we don't remove the focussedPostId state then scroll tries to correct to that instead of new message line\n        if (focusedPostId && !atLatestPost) {\n            this.changeUrlToRemountChannelView();\n            return;\n        }\n\n        scrollToNewMessage();\n        updateLastViewedBottomAt();\n        this.hideNewMessagesToast();\n    };\n\n    scrollToLatestMessages = () => {\n        const {focusedPostId, atLatestPost, scrollToLatestMessages} = this.props;\n\n        if (focusedPostId) {\n            if (!atLatestPost) {\n                this.changeUrlToRemountChannelView();\n                return;\n            }\n            this.hideArchiveToast();\n        }\n\n        scrollToLatestMessages();\n        this.hideUnreadToast();\n        this.props.hideScrollToBottomToast?.();\n    };\n\n    scrollToUnreadMessages = () => {\n        this.props.scrollToUnreadMessages();\n        this.hideUnreadWithBottomStartToast();\n    };\n\n    getToastToRender() {\n        const {atLatestPost, atBottom, width, lastViewedAt, showSearchHintToast, showScrollToBottomToast} = this.props;\n        const {showUnreadToast, showNewMessagesToast, showMessageHistoryToast, showUnreadWithBottomStartToast, unreadCount} = this.state;\n\n        const unreadToastProps = {\n            show: true,\n            width,\n            onDismiss: this.hideUnreadToast,\n            onClick: this.scrollToLatestMessages,\n            onClickMessage: (\n                <FormattedMessage\n                    id='postlist.toast.scrollToBottom'\n                    defaultMessage='Jump to recents'\n                />\n            ),\n            showActions: !atLatestPost || (atLatestPost && (atBottom === false)),\n        };\n\n        if (showUnreadToast && unreadCount > 0) {\n            return (\n                <Toast {...unreadToastProps}>\n                    {this.newMessagesToastText(unreadCount, lastViewedAt)}\n                </Toast>\n            );\n        }\n\n        const unreadWithBottomStartToastProps = {\n            show: true,\n            width,\n            onDismiss: this.hideUnreadWithBottomStartToast,\n            onClick: this.scrollToUnreadMessages,\n            onClickMessage: (\n                <FormattedMessage\n                    id='postlist.toast.scrollToUnread'\n                    defaultMessage='Jump to unreads'\n                />\n            ),\n            showActions: true,\n            jumpDirection: 'up' as const,\n        };\n\n        if (showUnreadWithBottomStartToast && unreadCount > 0) {\n            return (\n                <Toast {...unreadWithBottomStartToastProps}>\n                    {this.newMessagesToastText(unreadCount, lastViewedAt)}\n                </Toast>\n            );\n        }\n\n        if (showNewMessagesToast) {\n            const showNewMessagesToastOverrides = {\n                onDismiss: this.hideNewMessagesToast,\n                onClick: this.scrollToNewMessage,\n                onClickMessage: (\n                    <FormattedMessage\n                        id='postlist.toast.scrollToLatest'\n                        defaultMessage='Jump to new messages'\n                    />\n                ),\n            };\n\n            return (\n                <Toast\n                    {...unreadToastProps}\n                    {...showNewMessagesToastOverrides}\n                >\n                    {this.newMessagesToastText(unreadCount, lastViewedAt)}\n                </Toast>\n            );\n        }\n\n        if (showMessageHistoryToast) {\n            const archiveToastProps = {\n                show: true,\n                width,\n                onDismiss: this.hideArchiveToast,\n                onClick: this.scrollToLatestMessages,\n                onClickMessage: localizeMessage('postlist.toast.scrollToBottom', 'Jump to recents'),\n                showActions: true,\n                extraClasses: 'toast__history',\n            };\n\n            return (\n                <Toast {...archiveToastProps}>\n                    {this.archiveToastText()}\n                </Toast>\n            );\n        }\n\n        const toasts = [];\n        if (showScrollToBottomToast) {\n            toasts.push(\n                <ScrollToBottomToast\n                    key='scroll-to-bottom-toast'\n                    onClick={this.scrollToLatestMessages}\n                    onDismiss={this.props.onScrollToBottomToastDismiss}\n                />,\n            );\n        }\n\n        if (showSearchHintToast) {\n            toasts.push(\n                <HintToast\n                    key='search-hint-toast'\n                    onDismiss={this.hideSearchHintToast}\n                >\n                    {this.getSearchHintToastText()}\n                </HintToast>,\n            );\n        }\n\n        if (toasts.length > 0) {\n            return (\n                <div className='toasts-wrapper'>\n                    {toasts}\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const toastToRender = this.getToastToRender();\n\n        return (\n            <React.Fragment>\n                {toastToRender}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default injectIntl(ToastWrapperClass);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {Posts} from 'mattermost-redux/constants';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getCurrentChannel, countCurrentChannelUnreadMessages, isManuallyUnread} from 'mattermost-redux/selectors/entities/channels';\nimport {getAllPosts, getPostIdsInChannel} from 'mattermost-redux/selectors/entities/posts';\nimport {getUnreadScrollPositionPreference, isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {makePreparePostIdsForPostList} from 'mattermost-redux/utils/post_list';\n\nimport {updateToastStatus} from 'actions/views/channel';\n\nimport type {GlobalState} from 'types/store/index';\n\nimport ToastWrapper from './toast_wrapper';\n\ninterface OwnProps {\n    atLatestPost?: boolean;\n    channelId: string;\n}\n\nexport function makeGetRootPosts() {\n    return createSelector(\n        'makeGetRootPosts',\n        getAllPosts,\n        getCurrentUserId,\n        getCurrentChannel,\n        (allPosts, currentUserId, channel) => {\n            // Count the number of new posts that haven't been deleted and are root posts\n            return Object.values(allPosts).filter((post) => {\n                return (\n                    post.root_id === '' &&\n                    post.channel_id === channel?.id &&\n                    post.state !== Posts.POST_DELETED\n                );\n            }).reduce((map: Record<string, boolean>, obj) => {\n                map[obj.id] = true;\n                return map;\n            }, {});\n        },\n    );\n}\n\nexport function makeCountUnreadsBelow() {\n    return createSelector(\n        'makeCountUnreadsBelow',\n        getAllPosts,\n        getCurrentUserId,\n        (state: GlobalState, postIds: string[]) => postIds,\n        (state: GlobalState, postIds, lastViewedBottom: number) => lastViewedBottom,\n        isCollapsedThreadsEnabled,\n        (allPosts, currentUserId, postIds, lastViewedBottom, isCollapsed) => {\n            if (!postIds) {\n                return 0;\n            }\n\n            // Count the number of new posts made by other users that haven't been deleted\n            return postIds.map((id) => allPosts[id]).filter((post) => {\n                return post &&\n                    post.user_id !== currentUserId &&\n                    post.state !== Posts.POST_DELETED &&\n                    post.create_at > lastViewedBottom &&\n                    (isCollapsed ? post.root_id === '' : true); // in collapsed threads mode, only count root posts\n            }).length;\n        },\n    );\n}\n\n/* This connected component is written mainly for maintaining the unread count to be passed to the toast\n   Unread count logic:\n   * If channel is at the latest set of posts:\n      Unread count is the Number of posts below new message line\n   * if channel is not at the latest set of posts:\n      1. UnreadCount + any recent messages in the latest chunk.\n      2. If channel was marked as unread.\n        * Unread count of channel alone.\n*/\n\nfunction makeMapStateToProps() {\n    const countUnreadsBelow = makeCountUnreadsBelow();\n    const getRootPosts = makeGetRootPosts();\n    const preparePostIdsForPostList = makePreparePostIdsForPostList();\n    return function mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n        let newRecentMessagesCount = 0;\n        const channelMarkedAsUnread = isManuallyUnread(state, ownProps.channelId);\n        const lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n        const unreadScrollPosition = getUnreadScrollPositionPreference(state);\n        if (!ownProps.atLatestPost) {\n            let postIds = getPostIdsInChannel(state, ownProps.channelId) || [];\n            if (postIds) {\n                postIds = preparePostIdsForPostList(state, {postIds, lastViewedAt});\n            }\n            newRecentMessagesCount = countUnreadsBelow(state, postIds, lastViewedAt);\n        }\n        return {\n            rootPosts: getRootPosts(state),\n            lastViewedAt,\n            newRecentMessagesCount,\n            unreadScrollPosition,\n            isCollapsedThreadsEnabled: isCollapsedThreadsEnabled(state),\n            unreadCountInChannel: countCurrentChannelUnreadMessages(state),\n            channelMarkedAsUnread,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateToastStatus,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(makeMapStateToProps, mapDispatchToProps)(ToastWrapper));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useMemo} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\n\nimport {getLatestPostId, usePostAriaLabel} from 'utils/post_utils';\n\nimport type {GlobalState} from 'types/store';\n\ninterface Props {\n    postIds?: string[];\n}\n\nconst LatestPostReader = (props: Props): JSX.Element => {\n    const {postIds} = props;\n    const latestPostId = useMemo(() => getLatestPostId(postIds || []), [postIds]);\n    const latestPost = useSelector<GlobalState, Post>((state) => getPost(state, latestPostId));\n\n    const ariaLabel = usePostAriaLabel(latestPost);\n\n    return (\n        <span\n            className='sr-only'\n            aria-live='polite'\n        >\n            {ariaLabel}\n        </span>\n    );\n};\n\nexport default LatestPostReader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport {DynamicSizeList} from 'dynamic-virtualized-list';\nimport type {OnItemsRenderedArgs} from 'dynamic-virtualized-list';\nimport React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport EventEmitter from 'mattermost-redux/utils/event_emitter';\nimport {getNewMessagesIndex, isDateLine, isStartOfNewMessages} from 'mattermost-redux/utils/post_list';\n\nimport type {updateNewMessagesAtInChannel} from 'actions/global_actions';\nimport type {CanLoadMorePosts} from 'actions/views/channel';\n\nimport FloatingTimestamp from 'components/post_view/floating_timestamp';\nimport PostListRow from 'components/post_view/post_list_row';\nimport ScrollToBottomArrows from 'components/post_view/scroll_to_bottom_arrows';\nimport ToastWrapper from 'components/toast_wrapper';\n\nimport Pluggable from 'plugins/pluggable';\nimport Constants, {PostListRowListIds, EventTypes, PostRequestTypes} from 'utils/constants';\nimport DelayedAction from 'utils/delayed_action';\nimport {getPreviousPostId, getLatestPostId} from 'utils/post_utils';\nimport * as Utils from 'utils/utils';\n\nimport LatestPostReader from './latest_post_reader';\n\nconst OVERSCAN_COUNT_BACKWARD = 80;\nconst OVERSCAN_COUNT_FORWARD = 80;\nconst HEIGHT_TRIGGER_FOR_MORE_POSTS = 1000;\nconst BUFFER_TO_BE_CONSIDERED_BOTTOM = 10;\n\nconst MAXIMUM_POSTS_FOR_SLICING = {\n    channel: 50,\n    permalink: 100,\n};\n\nconst postListStyle = {\n    padding: '14px 0px 7px',\n};\n\nconst virtListStyles = {\n    position: 'absolute',\n    bottom: '0',\n    maxHeight: '100%',\n};\n\nconst OFFSET_TO_SHOW_TOAST = -50;\n\ntype Props = {\n\n    /*\n     * Array of Ids in the channel including date separators, new message indicator, more messages loader,\n     * manual load messages trigger and postId in the order of newest to oldest for populating virtual list rows\n     */\n    postListIds?: string[];\n\n    /*\n     * The current channel id\n     */\n    channelId: string;\n\n    /*\n     * Used for disabling auto retry of posts and enabling manual link for loading posts\n     */\n    autoRetryEnable: boolean;\n\n    /*\n     * Used in passing to post row for enabling animation when loading posts\n     */\n    loadingNewerPosts: boolean;\n    loadingOlderPosts: boolean;\n\n    isMobileView: boolean;\n\n    /*\n     * Used for populating header, scroll correction and disabling triggering loadOlderPosts\n     */\n    atOldestPost?: boolean;\n\n    /*\n     * Used for disabling triggering loadNewerPosts\n     */\n    atLatestPost?: boolean;\n\n    latestPostTimeStamp?: number;\n    lastViewedAt: number;\n\n    /*\n     * Set to focus this post\n     */\n    focusedPostId?: string;\n\n    shouldStartFromBottomWhenUnread: boolean;\n\n    actions: {\n\n        /*\n         * Function to get older posts in the channel\n         */\n        loadOlderPosts: () => Promise<void>;\n\n        /*\n         * Function to get newer posts in the channel\n         */\n        loadNewerPosts: () => Promise<void>;\n\n        /*\n         * Function used for autoLoad of posts incase screen is not filled with posts\n         */\n        canLoadMorePosts: (type: CanLoadMorePosts) => Promise<void>;\n\n        /*\n         * Function to change the post selected for postList\n         */\n        changeUnreadChunkTimeStamp: (lastViewedAt: number) => void;\n\n        updateNewMessagesAtInChannel: typeof updateNewMessagesAtInChannel;\n\n        toggleShouldStartFromBottomWhenUnread: () => void;\n    };\n}\n\ntype State = {\n    isScrolling: boolean;\n\n    // Intentionally setting null so that toast can determine when the first time this state is defined\n    atBottom: boolean | null;\n    lastViewedBottom: number;\n    postListIds: string[];\n    topPostId: string;\n    postMenuOpened: boolean;\n    dynamicListStyle: {\n        willChange: string;\n    };\n    initScrollCompleted: boolean;\n    initScrollOffsetFromBottom: number;\n    showSearchHint: boolean;\n    isSearchHintDismissed: boolean;\n    isMobileView?: boolean;\n    isNewMessageLineReached: boolean;\n    showScrollToBottomToast: boolean;\n    isScrollToBottomDismissed: boolean;\n}\n\nexport default class PostList extends React.PureComponent<Props, State> {\n    listRef: React.RefObject<DynamicSizeList>;\n    postListRef: React.RefObject<HTMLDivElement>;\n    scrollStopAction: DelayedAction | null = null;\n    initRangeToRender: number[];\n    showSearchHintThreshold: number;\n    mounted: boolean;\n    newMessageLineIndex: number;\n\n    constructor(props: Props) {\n        super(props);\n\n        const channelIntroMessage = PostListRowListIds.CHANNEL_INTRO_MESSAGE;\n        this.mounted = true;\n\n        this.state = {\n            isScrolling: false,\n\n            // Intentionally setting null so that toast can determine when the first time this state is defined\n            atBottom: null,\n            lastViewedBottom: Date.now(),\n            postListIds: [channelIntroMessage],\n            topPostId: '',\n            postMenuOpened: false,\n            dynamicListStyle: {\n                willChange: 'transform',\n            },\n            initScrollCompleted: false,\n            initScrollOffsetFromBottom: 0,\n            showSearchHint: false,\n            isSearchHintDismissed: false,\n            isNewMessageLineReached: false,\n            showScrollToBottomToast: false,\n            isScrollToBottomDismissed: false,\n        };\n\n        this.listRef = React.createRef();\n        this.postListRef = React.createRef();\n        if (this.props.isMobileView) {\n            this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n        }\n\n        this.initRangeToRender = this.props.focusedPostId ? [0, MAXIMUM_POSTS_FOR_SLICING.permalink] : [0, MAXIMUM_POSTS_FOR_SLICING.channel];\n\n        let postIndex = 0;\n        if (props.focusedPostId) {\n            postIndex = (this.props.postListIds || []).findIndex((postId) => postId === this.props.focusedPostId);\n        } else {\n            postIndex = getNewMessagesIndex(props.postListIds || []);\n        }\n        this.newMessageLineIndex = getNewMessagesIndex(props.postListIds || []);\n\n        const maxPostsForSlicing = props.focusedPostId ? MAXIMUM_POSTS_FOR_SLICING.permalink : MAXIMUM_POSTS_FOR_SLICING.channel;\n        this.initRangeToRender = [\n            Math.max(postIndex - 30, 0),\n            Math.max(postIndex + 30, Math.min((props.postListIds || []).length - 1, maxPostsForSlicing)),\n        ];\n        this.showSearchHintThreshold = this.getShowSearchHintThreshold();\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n\n        window.addEventListener('resize', this.handleWindowResize);\n        EventEmitter.addListener(EventTypes.POST_LIST_SCROLL_TO_BOTTOM, this.scrollToLatestMessages);\n    }\n\n    getSnapshotBeforeUpdate(prevProps: Props) {\n        if (this.postListRef && this.postListRef.current) {\n            const postsAddedAtTop = this.props.postListIds && this.props.postListIds.length !== (prevProps.postListIds || []).length && this.props.postListIds[0] === (prevProps.postListIds || [])[0];\n            const channelHeaderAdded = this.props.atOldestPost !== prevProps.atOldestPost;\n            if ((postsAddedAtTop || channelHeaderAdded) && this.state.atBottom === false) {\n                const postListNode = this.postListRef.current;\n                const previousScrollTop = postListNode.parentElement?.scrollTop;\n                const previousScrollHeight = postListNode.scrollHeight;\n\n                return {\n                    previousScrollTop,\n                    previousScrollHeight,\n                };\n            }\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps: Props, _prevState: State, snapshot: {previousScrollTop: number; previousScrollHeight: number}) {\n        if (this.props.isMobileView && !prevProps.isMobileView) {\n            this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n        }\n\n        if (!this.postListRef.current) {\n            return;\n        }\n        const prevPostsCount = (prevProps.postListIds || []).length;\n        const presentPostsCount = (this.props.postListIds || []).length;\n\n        this.newMessageLineIndex = getNewMessagesIndex(this.props.postListIds || []);\n\n        if (snapshot) {\n            const postlistScrollHeight = this.postListRef.current.scrollHeight;\n            const postsAddedAtTop = presentPostsCount !== prevPostsCount && (this.props.postListIds || [])[0] === (prevProps.postListIds || [])[0];\n            const channelHeaderAdded = this.props.atOldestPost !== prevProps.atOldestPost;\n            if ((postsAddedAtTop || channelHeaderAdded) && !this.state.atBottom && snapshot) {\n                const scrollValue = snapshot.previousScrollTop + (postlistScrollHeight - snapshot.previousScrollHeight);\n                if (scrollValue !== 0 && (scrollValue - snapshot.previousScrollTop) !== 0) {\n                    //true as third param so chrome can use animationFrame when correcting scroll\n                    this.listRef.current?.scrollTo(scrollValue, scrollValue - snapshot.previousScrollTop, true);\n                }\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n        window.removeEventListener('resize', this.handleWindowResize);\n        EventEmitter.removeListener(EventTypes.POST_LIST_SCROLL_TO_BOTTOM, this.scrollToLatestMessages);\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        const postListIds = props.postListIds || [];\n        let newPostListIds;\n\n        if (props.atOldestPost) {\n            newPostListIds = [...postListIds, PostListRowListIds.CHANNEL_INTRO_MESSAGE];\n        } else if (props.autoRetryEnable) {\n            newPostListIds = [...postListIds, PostListRowListIds.OLDER_MESSAGES_LOADER];\n        } else {\n            newPostListIds = [...postListIds, PostListRowListIds.LOAD_OLDER_MESSAGES_TRIGGER];\n        }\n\n        if (!props.atLatestPost) {\n            if (props.autoRetryEnable) {\n                newPostListIds = [PostListRowListIds.NEWER_MESSAGES_LOADER, ...newPostListIds];\n            } else {\n                newPostListIds = [PostListRowListIds.LOAD_NEWER_MESSAGES_TRIGGER, ...newPostListIds];\n            }\n        }\n\n        const nextState: Partial<State> = {\n            postListIds: newPostListIds,\n        };\n\n        if (props.isMobileView !== state.isMobileView) {\n            nextState.isMobileView = props.isMobileView;\n\n            const dynamicListStyle = state.dynamicListStyle;\n            if (state.postMenuOpened) {\n                if (!props.isMobileView && dynamicListStyle.willChange === 'unset') {\n                    nextState.dynamicListStyle = {\n                        ...dynamicListStyle,\n                        willChange: 'transform',\n                    };\n                } else if (props.isMobileView && dynamicListStyle.willChange === 'transform') {\n                    nextState.dynamicListStyle = {\n                        ...dynamicListStyle,\n                        willChange: 'unset',\n                    };\n                }\n            }\n        }\n\n        return nextState;\n    }\n\n    handleWindowResize = () => {\n        this.showSearchHintThreshold = this.getShowSearchHintThreshold();\n    };\n\n    togglePostMenu = (opened: boolean) => {\n        let dynamicListStyle = this.state.dynamicListStyle;\n        if (this.props.isMobileView) {\n            dynamicListStyle = {\n                ...dynamicListStyle,\n                willChange: opened ? 'unset' : 'transform',\n            };\n        }\n\n        this.setState({\n            postMenuOpened: opened,\n            dynamicListStyle,\n        });\n    };\n\n    onNewMessageLineReached = () => {\n        this.setState({\n            isNewMessageLineReached: true,\n        });\n    };\n\n    renderRow = ({data, itemId, style}: {data: string[]; itemId: string; style: Record<string, string>}) => {\n        const index = data.indexOf(itemId);\n        let className = '';\n        const basePaddingClass = 'post-row__padding';\n        const previousItemId = (index !== -1 && index < data.length - 1) ? data[index + 1] : '';\n        const nextItemId = (index > 0 && index < data.length) ? data[index - 1] : '';\n\n        if (isDateLine(nextItemId) || isStartOfNewMessages(nextItemId)) {\n            className += basePaddingClass + ' bottom';\n        }\n\n        if (isDateLine(previousItemId) || isStartOfNewMessages(previousItemId)) {\n            if (className.includes(basePaddingClass)) {\n                className += ' top';\n            } else {\n                className += basePaddingClass + ' top';\n            }\n        }\n\n        // Since the first in the list is the latest message\n        const isLastPost = itemId === this.state.postListIds[0];\n\n        return (\n            <div\n                style={style}\n                className={className}\n            >\n                <PostListRow\n                    listId={itemId}\n                    previousListId={getPreviousPostId(data, index)}\n                    shouldHighlight={itemId === this.props.focusedPostId}\n                    loadOlderPosts={this.props.actions.loadOlderPosts}\n                    loadNewerPosts={this.props.actions.loadNewerPosts}\n                    togglePostMenu={this.togglePostMenu}\n                    isLastPost={isLastPost}\n                    loadingNewerPosts={this.props.loadingNewerPosts}\n                    loadingOlderPosts={this.props.loadingOlderPosts}\n                    channelId={this.props.channelId}\n                />\n            </div>\n        );\n    };\n\n    scrollToFailed = (index: number) => {\n        if (index === 0) {\n            this.props.actions.changeUnreadChunkTimeStamp(0);\n        } else {\n            this.props.actions.changeUnreadChunkTimeStamp(this.props.lastViewedAt);\n        }\n    };\n\n    onScroll = ({\n        scrollDirection,\n        scrollOffset,\n        scrollUpdateWasRequested,\n        clientHeight,\n        scrollHeight}:\n    {\n        scrollDirection: string;\n        scrollOffset: number;\n        scrollUpdateWasRequested: boolean;\n        clientHeight: number;\n        scrollHeight: number;\n    }) => {\n        if (scrollHeight <= 0) {\n            return;\n        }\n\n        const didUserScrollBackwards = scrollDirection === 'backward' && !scrollUpdateWasRequested;\n        const didUserScrollForwards = scrollDirection === 'forward' && !scrollUpdateWasRequested;\n        const isOffsetWithInRange = scrollOffset < HEIGHT_TRIGGER_FOR_MORE_POSTS;\n        const offsetFromBottom = this.getOffsetFromBottom(scrollOffset, scrollHeight, clientHeight);\n        const shouldLoadNewPosts = offsetFromBottom < HEIGHT_TRIGGER_FOR_MORE_POSTS;\n\n        if (didUserScrollBackwards && isOffsetWithInRange && !this.props.atOldestPost) {\n            this.props.actions.loadOlderPosts();\n        } else if (didUserScrollForwards && shouldLoadNewPosts && !this.props.atLatestPost) {\n            this.props.actions.loadNewerPosts();\n        }\n\n        if (this.props.isMobileView) {\n            if (!this.state.isScrolling) {\n                this.setState({\n                    isScrolling: true,\n                });\n            }\n\n            if (this.scrollStopAction) {\n                this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n            }\n        }\n\n        this.checkBottom(scrollOffset, scrollHeight, clientHeight);\n\n        if (scrollUpdateWasRequested) { //if scroll change is programatically requested i.e by calling scrollTo\n            //This is a private method on virtlist\n            const postsRenderedRange = this.listRef.current?._getRangeToRender(); //eslint-disable-line no-underscore-dangle\n\n            // postsRenderedRange[3] is the visibleStopIndex which is post at the bottom of the screen\n            if (postsRenderedRange && postsRenderedRange[3] <= 1 && !this.props.atLatestPost) {\n                this.props.actions.canLoadMorePosts(PostRequestTypes.AFTER_ID);\n            }\n\n            if (!this.state.atBottom && scrollHeight) {\n                this.setState({\n                    initScrollOffsetFromBottom: offsetFromBottom,\n                });\n            }\n        }\n\n        if (this.props.isMobileView && this.state.showSearchHint) {\n            this.setState({\n                showSearchHint: false,\n            });\n        }\n\n        if (!this.props.isMobileView && !this.state.isSearchHintDismissed) {\n            this.setState({\n                showSearchHint: offsetFromBottom > this.showSearchHintThreshold,\n            });\n        }\n\n        this.updateScrollToBottomToastVisibility(scrollOffset, scrollHeight, clientHeight);\n    };\n\n    getShowSearchHintThreshold = () => {\n        return window.screen.height * 3;\n    };\n\n    checkBottom = (scrollOffset: number, scrollHeight: number, clientHeight: number) => {\n        this.updateAtBottom(this.isAtBottom(scrollOffset, scrollHeight, clientHeight));\n    };\n\n    // Calculate how far the post list is from being scrolled to the bottom\n    getOffsetFromBottom = (scrollOffset: number, scrollHeight: number, clientHeight: number) => scrollHeight - clientHeight - scrollOffset;\n\n    isAtBottom = (scrollOffset: number, scrollHeight: number, clientHeight: number) => {\n        const offsetFromBottom = this.getOffsetFromBottom(scrollOffset, scrollHeight, clientHeight);\n\n        return offsetFromBottom <= BUFFER_TO_BE_CONSIDERED_BOTTOM && scrollHeight > 0;\n    };\n\n    updateAtBottom = (atBottom: boolean) => {\n        if (atBottom !== this.state.atBottom) {\n            // Update lastViewedBottom when the list reaches or leaves the bottom\n            let lastViewedBottom = Date.now();\n            if (this.props.latestPostTimeStamp && this.props.latestPostTimeStamp > lastViewedBottom) {\n                lastViewedBottom = this.props.latestPostTimeStamp;\n            }\n\n            // if we hit the bottom, we haven't just landed on the unread channel\n            this.setState({\n                atBottom,\n                lastViewedBottom,\n            });\n        }\n    };\n\n    updateLastViewedBottomAt = (lastViewedBottom = Date.now()) => {\n        this.setState({\n            lastViewedBottom,\n        });\n    };\n\n    handleScrollStop = () => {\n        if (this.mounted) {\n            this.setState({\n                isScrolling: false,\n            });\n        }\n    };\n\n    handleSearchHintDismiss = () => {\n        this.setState({\n            showSearchHint: false,\n            isSearchHintDismissed: true,\n        });\n    };\n\n    handleScrollToBottomToastDismiss = () => {\n        this.setState({\n            showScrollToBottomToast: false,\n            isScrollToBottomDismissed: true,\n        });\n    };\n\n    hideScrollToBottomToast = () => {\n        this.setState({\n            showScrollToBottomToast: false,\n        });\n    };\n\n    /*\n     * - Show the scroll-to-bottom toast at the same time as the search-hint toast.\n     * - Only show if the user hasn't dismissed it before, within a session.\n     * - Hide it if the user is at the bottom of the list.\n     */\n    updateScrollToBottomToastVisibility = (scrollOffset: number, scrollHeight: number, clientHeight: number) => {\n        if (this.state.showScrollToBottomToast && this.state.atBottom) {\n            this.setState({\n                showScrollToBottomToast: false,\n            });\n            return;\n        }\n\n        if (!this.state.isScrollToBottomDismissed) {\n            const offsetFromBottom = this.getOffsetFromBottom(scrollOffset, scrollHeight, clientHeight);\n            this.setState({\n                showScrollToBottomToast: offsetFromBottom > this.showSearchHintThreshold,\n            });\n        }\n    };\n\n    updateFloatingTimestamp = (visibleTopItem: number) => {\n        if (!this.props.isMobileView) {\n            return;\n        }\n\n        if (!this.props.postListIds) {\n            return;\n        }\n\n        this.setState({\n            topPostId: getLatestPostId(this.props.postListIds.slice(visibleTopItem)),\n        });\n    };\n\n    onItemsRendered = ({visibleStartIndex, visibleStopIndex}: Pick<OnItemsRenderedArgs, 'visibleStartIndex' | 'visibleStopIndex'>) => {\n        this.updateFloatingTimestamp(visibleStartIndex);\n\n        if (\n            this.newMessageLineIndex > 0 &&\n             !this.state.isNewMessageLineReached &&\n             this.newMessageLineIndex <= visibleStartIndex &&\n             this.newMessageLineIndex >= visibleStopIndex\n        ) {\n            this.onNewMessageLineReached();\n        }\n    };\n\n    initScrollToIndex = () => {\n        if (this.props.focusedPostId) {\n            const index = this.state.postListIds.findIndex(\n                (item) => item === this.props.focusedPostId,\n            );\n            return {\n                index,\n                position: 'center',\n            };\n        }\n\n        if (this.props.shouldStartFromBottomWhenUnread) {\n            return {\n                index: 0,\n                position: 'end',\n            };\n        }\n\n        const newMessagesSeparatorIndex = getNewMessagesIndex(this.state.postListIds);\n\n        if (newMessagesSeparatorIndex > 0) {\n            // if there is a dateLine above START_OF_NEW_MESSAGES then scroll to date line\n            if (isDateLine(this.state.postListIds[newMessagesSeparatorIndex + 1])) {\n                return {\n                    index: newMessagesSeparatorIndex + 1,\n                    position: 'start',\n                    offset: OFFSET_TO_SHOW_TOAST,\n                };\n            }\n            return {\n                index: newMessagesSeparatorIndex,\n                position: 'start',\n                offset: OFFSET_TO_SHOW_TOAST,\n            };\n        }\n\n        return {\n            index: 0,\n            position: 'end',\n        };\n    };\n\n    scrollToLatestMessages = () => {\n        if (this.props.atLatestPost) {\n            this.scrollToBottom();\n        } else {\n            this.updateNewMessagesAtInChannel();\n            this.props.actions.changeUnreadChunkTimeStamp(0);\n        }\n    };\n\n    scrollToUnreadMessages = () => {\n        this.props.actions.toggleShouldStartFromBottomWhenUnread();\n    };\n\n    scrollToBottom = () => {\n        this.listRef.current?.scrollToItem(0, 'end');\n    };\n\n    scrollToNewMessage = () => {\n        this.listRef.current?.scrollToItem(getNewMessagesIndex(this.state.postListIds), 'start', OFFSET_TO_SHOW_TOAST);\n    };\n\n    updateNewMessagesAtInChannel = (lastViewedAt = Date.now()) => {\n        this.props.actions.updateNewMessagesAtInChannel(this.props.channelId, lastViewedAt);\n    };\n\n    renderToasts = (width: number) => {\n        return (\n            <ToastWrapper\n                atLatestPost={this.props.atLatestPost}\n                postListIds={this.state.postListIds}\n                atBottom={this.state.atBottom}\n                width={width}\n                lastViewedBottom={this.state.lastViewedBottom}\n                latestPostTimeStamp={this.props.latestPostTimeStamp}\n                scrollToUnreadMessages={this.scrollToUnreadMessages}\n                scrollToNewMessage={this.scrollToNewMessage}\n                scrollToLatestMessages={this.scrollToLatestMessages}\n                updateNewMessagesAtInChannel={this.updateNewMessagesAtInChannel}\n                updateLastViewedBottomAt={this.updateLastViewedBottomAt}\n                shouldStartFromBottomWhenUnread={this.props.shouldStartFromBottomWhenUnread}\n                isNewMessageLineReached={this.state.isNewMessageLineReached}\n                channelId={this.props.channelId}\n                focusedPostId={this.props.focusedPostId}\n                initScrollOffsetFromBottom={this.state.initScrollOffsetFromBottom}\n                onSearchHintDismiss={this.handleSearchHintDismiss}\n                showSearchHintToast={this.state.showSearchHint}\n                showScrollToBottomToast={this.state.showScrollToBottomToast}\n                onScrollToBottomToastDismiss={this.handleScrollToBottomToastDismiss}\n                hideScrollToBottomToast={this.hideScrollToBottomToast}\n            />\n        );\n    };\n\n    render() {\n        const {channelId} = this.props;\n        const {dynamicListStyle} = this.state;\n\n        return (\n            <div\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n                data-a11y-loop-navigation={false}\n                aria-label={Utils.localizeMessage('accessibility.sections.centerContent', 'message list main region')}\n            >\n                {this.props.isMobileView && (\n                    <React.Fragment>\n                        <FloatingTimestamp\n                            isScrolling={this.state.isScrolling}\n                            postId={this.state.topPostId}\n                        />\n                        <ScrollToBottomArrows\n                            isScrolling={this.state.isScrolling}\n                            atBottom={Boolean(this.state.atBottom)}\n                            onClick={this.scrollToBottom}\n                        />\n                    </React.Fragment>\n                )}\n                <div\n                    className='post-list-holder-by-time'\n                    key={'postlist-' + channelId}\n                >\n                    <div\n                        className='post-list__table'\n                    >\n                        <div\n                            id='postListContent'\n                            className='post-list__content'\n                        >\n                            <LatestPostReader postIds={this.props.postListIds}/>\n                            <AutoSizer>\n                                {({height, width}) => (\n                                    <React.Fragment>\n                                        <div>\n                                            <Pluggable\n                                                pluggableName='ChannelToast'\n                                            />\n\n                                            {this.renderToasts(width)}\n                                        </div>\n\n                                        <DynamicSizeList\n                                            ref={this.listRef}\n                                            height={height}\n                                            width={width}\n                                            className='post-list__dynamic'\n                                            itemData={this.state.postListIds}\n                                            overscanCountForward={OVERSCAN_COUNT_FORWARD}\n                                            overscanCountBackward={OVERSCAN_COUNT_BACKWARD}\n                                            onScroll={this.onScroll}\n                                            initScrollToIndex={this.initScrollToIndex}\n                                            canLoadMorePosts={this.props.actions.canLoadMorePosts}\n                                            innerRef={this.postListRef}\n                                            style={{...virtListStyles, ...dynamicListStyle}}\n                                            innerListStyle={postListStyle}\n                                            initRangeToRender={this.initRangeToRender}\n                                            loaderId={PostListRowListIds.OLDER_MESSAGES_LOADER}\n                                            correctScrollToBottom={this.props.atLatestPost}\n                                            onItemsRendered={this.onItemsRendered}\n                                            scrollToFailed={this.scrollToFailed}\n                                        >\n                                            {this.renderRow}\n                                        </DynamicSizeList>\n                                    </React.Fragment>\n                                )}\n                            </AutoSizer>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport type {updateNewMessagesAtInChannel} from 'actions/global_actions';\nimport {clearMarks, countRequestsBetween, mark, shouldTrackPerformance, trackEvent} from 'actions/telemetry_actions.jsx';\nimport type {LoadPostsParameters, LoadPostsReturnValue, CanLoadMorePosts} from 'actions/views/channel';\n\nimport LoadingScreen from 'components/loading_screen';\nimport VirtPostList from 'components/post_view/post_list_virtualized/post_list_virtualized';\n\nimport {PostRequestTypes} from 'utils/constants';\nimport {Mark, Measure, measureAndReport} from 'utils/performance_telemetry';\nimport {getOldestPostId, getLatestPostId} from 'utils/post_utils';\n\nconst MAX_NUMBER_OF_AUTO_RETRIES = 3;\nexport const MAX_EXTRA_PAGES_LOADED = 10;\n\n// Measures the time between channel or team switch started and the post list component rendering posts.\n// Set \"fresh\" to true when the posts have not been loaded before.\nfunction markAndMeasureChannelSwitchEnd(fresh = false) {\n    mark(Mark.PostListLoaded);\n\n    // Send new performance metrics to server\n    const channelSwitch = measureAndReport({\n        name: Measure.ChannelSwitch,\n        startMark: Mark.ChannelLinkClicked,\n        endMark: Mark.PostListLoaded,\n        labels: {\n            fresh: fresh.toString(),\n        },\n        canFail: true,\n    });\n    const teamSwitch = measureAndReport({\n        name: Measure.TeamSwitch,\n        startMark: Mark.TeamLinkClicked,\n        endMark: Mark.PostListLoaded,\n        labels: {\n            fresh: fresh.toString(),\n        },\n        canFail: true,\n    });\n\n    // Send old performance metrics to Rudder\n    if (shouldTrackPerformance()) {\n        if (channelSwitch) {\n            const requestCount1 = countRequestsBetween(Mark.ChannelLinkClicked, Mark.PostListLoaded);\n\n            trackEvent('performance', Measure.ChannelSwitch, {\n                duration: Math.round(channelSwitch.duration),\n                fresh,\n                requestCount: requestCount1,\n            });\n        }\n\n        if (teamSwitch) {\n            const requestCount2 = countRequestsBetween(Mark.TeamLinkClicked, Mark.PostListLoaded);\n\n            trackEvent('performance', Measure.TeamSwitch, {\n                duration: Math.round(teamSwitch.duration),\n                fresh,\n                requestCount: requestCount2,\n            });\n        }\n    }\n\n    // Clear all the metrics so that we can differentiate between a channel and team switch next time this is called\n    clearMarks([\n        Mark.ChannelLinkClicked,\n        Mark.TeamLinkClicked,\n        Mark.PostListLoaded,\n    ]);\n}\n\nexport interface Props {\n\n    /**\n     *  Array of formatted post ids in the channel\n     *  This will be different from postListIds because of grouping and filtering of posts\n     *  This array should be used for making Before and After API calls\n     */\n    formattedPostIds?: string[];\n\n    /**\n     *  Array of post ids in the channel, ordered from newest to oldest\n     */\n    postListIds?: string[];\n\n    /**\n     * The channel the posts are in\n     */\n    channelId: string;\n\n    /*\n     * To get posts for perma view\n     */\n    focusedPostId?: string;\n\n    /*\n     * Used for determining if we are not at the recent most chunk in channel\n     */\n    atLatestPost: boolean;\n\n    /*\n     * Used for determining if we are at the channels oldest post\n     */\n    atOldestPost?: boolean;\n\n    /*\n     * Used for loading posts using unread API\n     */\n    isFirstLoad: boolean;\n\n    /*\n     * Used for syncing posts and is also passed down to virt list for newMessages indicator\n     */\n    latestPostTimeStamp?: number;\n\n    /*\n     * Used for passing down to virt list so it can change the chunk of posts selected\n     */\n    changeUnreadChunkTimeStamp: (lastViewedAt: number) => void;\n\n    /*\n     * Used for skipping the call on load\n     */\n    isPrefetchingInProcess: boolean;\n\n    isMobileView: boolean;\n\n    lastViewedAt: number;\n\n    toggleShouldStartFromBottomWhenUnread: () => void;\n    shouldStartFromBottomWhenUnread: boolean;\n    hasInaccessiblePosts: boolean;\n\n    actions: {\n\n        /*\n         * Used for getting permalink view posts\n         */\n        loadPostsAround: (channelId: string, focusedPostId: string) => Promise<ActionResult>;\n\n        /*\n         * Used for geting unreads posts\n         */\n        loadUnreads: (channelId: string) => Promise<ActionResult>;\n\n        /*\n         * Used for getting posts using BEFORE_ID and AFTER_ID\n         */\n        loadPosts: (parameters: LoadPostsParameters) => Promise<LoadPostsReturnValue>;\n\n        /*\n         * Used to loading posts since a timestamp to sync the posts\n         */\n        syncPostsInChannel: (channelId: string, since: number, prefetch: boolean) => Promise<ActionResult>;\n\n        /*\n         * Used to loading posts if it not first visit, permalink or there exists any postListIds\n         * This happens when previous channel visit has a chunk which is not the latest set of posts\n         */\n        loadLatestPosts: (channelId: string) => Promise<ActionResult>;\n\n        markChannelAsRead: (channelId: string) => void;\n        updateNewMessagesAtInChannel: typeof updateNewMessagesAtInChannel;\n    };\n}\n\ninterface State {\n    loadingNewerPosts: boolean;\n    loadingOlderPosts: boolean;\n    autoRetryEnable: boolean;\n}\n\nexport default class PostList extends React.PureComponent<Props, State> {\n    private autoRetriesCount: number;\n    private actionsForPostList: {\n        loadOlderPosts: () => Promise<void>;\n        loadNewerPosts: () => Promise<void>;\n        canLoadMorePosts: (type: CanLoadMorePosts) => Promise<void>;\n        changeUnreadChunkTimeStamp: (lastViewedAt: number) => void;\n        updateNewMessagesAtInChannel: typeof updateNewMessagesAtInChannel;\n        toggleShouldStartFromBottomWhenUnread: () => void;\n    };\n    private mounted: boolean | undefined;\n\n    // public for testing purposes only\n    public extraPagesLoaded: number;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loadingNewerPosts: false,\n            loadingOlderPosts: false,\n            autoRetryEnable: true,\n        };\n\n        this.extraPagesLoaded = 0;\n\n        this.autoRetriesCount = 0;\n        this.actionsForPostList = {\n            loadOlderPosts: this.getPostsBefore,\n            loadNewerPosts: this.getPostsAfter,\n            canLoadMorePosts: this.canLoadMorePosts,\n            changeUnreadChunkTimeStamp: props.changeUnreadChunkTimeStamp,\n            toggleShouldStartFromBottomWhenUnread: props.toggleShouldStartFromBottomWhenUnread,\n            updateNewMessagesAtInChannel: this.props.actions.updateNewMessagesAtInChannel,\n        };\n    }\n\n    componentDidMount() {\n        this.mounted = true;\n        if (this.props.channelId) {\n            this.postsOnLoad(this.props.channelId);\n            if (this.props.postListIds) {\n                markAndMeasureChannelSwitchEnd();\n            }\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.channelId !== prevProps.channelId) {\n            this.postsOnLoad(this.props.channelId);\n        }\n        if (this.props.postListIds != null && prevProps.postListIds == null) {\n            markAndMeasureChannelSwitchEnd(true);\n        }\n    }\n\n    componentWillUnmount() {\n        this.mounted = false;\n    }\n\n    postsOnLoad = async (channelId: string) => {\n        const {focusedPostId, isFirstLoad, latestPostTimeStamp, isPrefetchingInProcess, actions} = this.props;\n        if (focusedPostId) {\n            await actions.loadPostsAround(channelId, focusedPostId);\n        } else if (isFirstLoad) {\n            if (!isPrefetchingInProcess) {\n                await actions.loadUnreads(channelId);\n            }\n        } else if (latestPostTimeStamp) {\n            await actions.syncPostsInChannel(channelId, latestPostTimeStamp, false);\n        } else {\n            await actions.loadLatestPosts(channelId);\n        }\n\n        if (!focusedPostId) {\n            // Posts are marked as read from here to not cause a race when loading posts\n            // marking channel as read and viewed after calling for posts in channel\n            this.props.actions.markChannelAsRead(channelId);\n        }\n\n        if (this.mounted) {\n            this.setState({\n                loadingOlderPosts: false,\n                loadingNewerPosts: false,\n            });\n        }\n    };\n\n    callLoadPosts = async (channelId: string, postId: string, type: CanLoadMorePosts) => {\n        const {error} = await this.props.actions.loadPosts({\n            channelId,\n            postId,\n            type,\n        });\n\n        if (type === PostRequestTypes.BEFORE_ID) {\n            this.setState({loadingOlderPosts: false});\n        } else {\n            this.setState({loadingNewerPosts: false});\n        }\n\n        if (error) {\n            if (this.autoRetriesCount < MAX_NUMBER_OF_AUTO_RETRIES) {\n                this.autoRetriesCount++;\n                await this.callLoadPosts(channelId, postId, type);\n            } else if (this.mounted) {\n                this.setState({autoRetryEnable: false});\n            }\n        } else {\n            if (this.mounted) {\n                this.setState({autoRetryEnable: true});\n            }\n\n            if (!this.state.autoRetryEnable) {\n                this.autoRetriesCount = 0;\n            }\n        }\n\n        return {error};\n    };\n\n    getOldestVisiblePostId = () => {\n        return getOldestPostId(this.props.postListIds || []);\n    };\n\n    getLatestVisiblePostId = () => {\n        return getLatestPostId(this.props.postListIds || []);\n    };\n\n    canLoadMorePosts = async (type: CanLoadMorePosts = PostRequestTypes.BEFORE_ID) => {\n        if (this.props.hasInaccessiblePosts) {\n            return;\n        }\n\n        if (!this.props.postListIds) {\n            return;\n        }\n\n        if (this.state.loadingOlderPosts || this.state.loadingNewerPosts) {\n            return;\n        }\n\n        if (this.extraPagesLoaded > MAX_EXTRA_PAGES_LOADED) {\n            // Prevent this from loading a lot of pages in a channel with only hidden messages\n            // Enable load more messages manual link\n            if (this.state.autoRetryEnable) {\n                this.setState({autoRetryEnable: false});\n            }\n            return;\n        }\n\n        if (!this.props.atOldestPost && type === PostRequestTypes.BEFORE_ID) {\n            await this.getPostsBefore();\n        } else if (!this.props.atLatestPost) {\n            // if all olderPosts are loaded load new ones\n            await this.getPostsAfter();\n        }\n\n        this.extraPagesLoaded += 1;\n    };\n\n    getPostsBefore = async () => {\n        if (this.state.loadingOlderPosts) {\n            return;\n        }\n\n        // Reset counter after \"Load more\" button click\n        if (!this.state.autoRetryEnable) {\n            this.extraPagesLoaded = 0;\n        }\n\n        const oldestPostId = this.getOldestVisiblePostId();\n        this.setState({loadingOlderPosts: true});\n        await this.callLoadPosts(this.props.channelId, oldestPostId, PostRequestTypes.BEFORE_ID);\n    };\n\n    getPostsAfter = async () => {\n        if (this.state.loadingNewerPosts) {\n            return;\n        }\n\n        // Reset counter after \"Load more\" button click\n        if (!this.state.autoRetryEnable) {\n            this.extraPagesLoaded = 0;\n        }\n\n        const latestPostId = this.getLatestVisiblePostId();\n        this.setState({loadingNewerPosts: true});\n        await this.callLoadPosts(this.props.channelId, latestPostId, PostRequestTypes.AFTER_ID);\n    };\n\n    render() {\n        if (!this.props.postListIds) {\n            return (\n                <LoadingScreen centered={true}/>\n            );\n        }\n\n        return (\n            <div\n                className='post-list-holder-by-time'\n                key={'postlist-' + this.props.channelId}\n            >\n                <div className='post-list__table'>\n                    <div\n                        id='virtualizedPostListContent'\n                        className='post-list__content'\n                    >\n                        <VirtPostList\n                            loadingNewerPosts={this.state.loadingNewerPosts}\n                            loadingOlderPosts={this.state.loadingOlderPosts}\n                            atOldestPost={this.props.atOldestPost}\n                            atLatestPost={this.props.atLatestPost}\n                            focusedPostId={this.props.focusedPostId}\n                            channelId={this.props.channelId}\n                            autoRetryEnable={this.state.autoRetryEnable}\n                            shouldStartFromBottomWhenUnread={this.props.shouldStartFromBottomWhenUnread}\n                            actions={this.actionsForPostList}\n                            postListIds={this.props.formattedPostIds}\n                            latestPostTimeStamp={this.props.latestPostTimeStamp}\n                            isMobileView={this.props.isMobileView}\n                            lastViewedAt={this.props.lastViewedAt}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {markChannelAsRead} from 'mattermost-redux/actions/channels';\nimport {RequestStatus} from 'mattermost-redux/constants';\nimport {getRecentPostsChunkInChannel, makeGetPostsChunkAroundPost, getUnreadPostsChunk, getPost, isPostsChunkIncludingUnreadsPosts, getLimitedViews} from 'mattermost-redux/selectors/entities/posts';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\nimport {makePreparePostIdsForPostList} from 'mattermost-redux/utils/post_list';\n\nimport {updateNewMessagesAtInChannel} from 'actions/global_actions';\nimport {\n    loadPosts,\n    loadUnreads,\n    loadPostsAround,\n    syncPostsInChannel,\n    loadLatestPosts,\n} from 'actions/views/channel';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {getLatestPostId} from 'utils/post_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport PostList from './post_list';\n\nconst isFirstLoad = (state: GlobalState, channelId: string) => !state.entities.posts.postsInChannel[channelId];\nconst memoizedGetLatestPostId = memoizeResult((postIds: string[]) => getLatestPostId(postIds));\n\n// This function is added as a fail safe for the channel sync issue we have.\n// When the user switches to a team for the first time we show the channel of previous team and then settle for the right channel after that\n// This causes the scroll correction etc an issue because post_list is not mounted for new channel instead it is updated\n\ninterface Props {\n    focusedPostId?: string;\n    unreadChunkTimeStamp?: number;\n    changeUnreadChunkTimeStamp: (lastViewedAt: number) => void;\n    channelId: string;\n}\n\nfunction makeMapStateToProps() {\n    const getPostsChunkAroundPost = makeGetPostsChunkAroundPost();\n    const preparePostIdsForPostList = makePreparePostIdsForPostList();\n\n    return function mapStateToProps(state: GlobalState, ownProps: Pick<Props, 'focusedPostId' | 'unreadChunkTimeStamp' | 'channelId'> & {shouldStartFromBottomWhenUnread: boolean}) {\n        let latestPostTimeStamp = 0;\n        let postIds: string[] | undefined;\n        let chunk;\n        let atLatestPost = false;\n        let atOldestPost = false;\n        let formattedPostIds: string[] | undefined;\n        const {focusedPostId, unreadChunkTimeStamp, channelId, shouldStartFromBottomWhenUnread} = ownProps;\n        const channelViewState = state.views.channel;\n        const lastViewedAt = channelViewState.lastChannelViewTime[channelId];\n        const isPrefetchingInProcess = channelViewState.channelPrefetchStatus[channelId] === RequestStatus.STARTED;\n        const limitedViews = getLimitedViews(state);\n        const hasInaccessiblePosts = Boolean(limitedViews.channels[channelId]) || limitedViews.channels[channelId] === 0;\n\n        const focusedPost = getPost(state, focusedPostId || '');\n\n        if (focusedPostId && focusedPost !== undefined) {\n            chunk = getPostsChunkAroundPost(state, focusedPostId, channelId);\n        } else if (unreadChunkTimeStamp && !shouldStartFromBottomWhenUnread) {\n            chunk = getUnreadPostsChunk(state, channelId, unreadChunkTimeStamp);\n        } else {\n            chunk = getRecentPostsChunkInChannel(state, channelId);\n        }\n\n        if (chunk) {\n            postIds = chunk.order;\n            atLatestPost = Boolean(chunk.recent);\n            atOldestPost = Boolean(chunk.oldest);\n        }\n\n        let shouldHideNewMessageIndicator = false;\n        if (unreadChunkTimeStamp != null) {\n            shouldHideNewMessageIndicator = shouldStartFromBottomWhenUnread && !isPostsChunkIncludingUnreadsPosts(state, chunk!, unreadChunkTimeStamp);\n        }\n\n        if (postIds) {\n            formattedPostIds = preparePostIdsForPostList(state, {postIds, lastViewedAt, indicateNewMessages: !shouldHideNewMessageIndicator});\n            if (postIds.length) {\n                const latestPostId = memoizedGetLatestPostId(postIds);\n                const latestPost = getPost(state, latestPostId);\n                latestPostTimeStamp = latestPost.create_at;\n            }\n        }\n\n        return {\n            lastViewedAt,\n            isFirstLoad: isFirstLoad(state, channelId),\n            formattedPostIds,\n            atLatestPost,\n            atOldestPost,\n            latestPostTimeStamp,\n            postListIds: postIds,\n            isPrefetchingInProcess,\n            shouldStartFromBottomWhenUnread,\n            isMobileView: getIsMobileView(state),\n            hasInaccessiblePosts,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadUnreads,\n            loadPosts,\n            loadLatestPosts,\n            loadPostsAround,\n            syncPostsInChannel,\n            markChannelAsRead,\n            updateNewMessagesAtInChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PostList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LoadingScreen from 'components/loading_screen';\n\nimport {Preferences} from 'utils/constants';\n\nimport PostList from './post_list';\n\ninterface Props {\n    lastViewedAt?: number;\n    channelLoading: boolean;\n    channelId: string;\n    focusedPostId?: string;\n    unreadScrollPosition: string;\n}\n\ninterface State {\n    unreadChunkTimeStamp?: number;\n    loaderForChangeOfPostsChunk: boolean;\n    channelLoading: boolean;\n    shouldStartFromBottomWhenUnread: boolean;\n}\n\nexport default class PostView extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        const shouldStartFromBottomWhenUnread = this.props.unreadScrollPosition === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST;\n        this.state = {\n            unreadChunkTimeStamp: props.lastViewedAt,\n            shouldStartFromBottomWhenUnread,\n            loaderForChangeOfPostsChunk: false,\n            channelLoading: props.channelLoading,\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (state.unreadChunkTimeStamp === null && props.lastViewedAt) {\n            return {\n                unreadChunkTimeStamp: props.lastViewedAt,\n            };\n        }\n        if (props.channelLoading !== state.channelLoading) {\n            return {\n                unreadChunkTimeStamp: props.lastViewedAt,\n                channelLoading: props.channelLoading,\n            };\n        }\n\n        return null;\n    }\n\n    changeUnreadChunkTimeStamp = (unreadChunkTimeStamp: number) => {\n        this.setState({\n            unreadChunkTimeStamp,\n            loaderForChangeOfPostsChunk: true,\n        }, () => {\n            window.requestAnimationFrame(() => {\n                this.setState({\n                    loaderForChangeOfPostsChunk: false,\n                });\n            });\n        });\n    };\n\n    toggleShouldStartFromBottomWhenUnread = () => {\n        this.setState((state) => ({\n            loaderForChangeOfPostsChunk: true,\n            shouldStartFromBottomWhenUnread: !state.shouldStartFromBottomWhenUnread,\n        }), () => {\n            window.requestAnimationFrame(() => {\n                this.setState({\n                    loaderForChangeOfPostsChunk: false,\n                });\n            });\n        });\n    };\n\n    render() {\n        if (this.props.channelLoading || this.state.loaderForChangeOfPostsChunk) {\n            return (\n                <div id='post-list'>\n                    <LoadingScreen centered={true}/>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                id='post-list'\n                role='main'\n            >\n                <PostList\n                    unreadChunkTimeStamp={this.state.unreadChunkTimeStamp}\n                    channelId={this.props.channelId}\n                    changeUnreadChunkTimeStamp={this.changeUnreadChunkTimeStamp}\n                    shouldStartFromBottomWhenUnread={this.state.shouldStartFromBottomWhenUnread}\n                    toggleShouldStartFromBottomWhenUnread={this.toggleShouldStartFromBottomWhenUnread}\n                    focusedPostId={this.props.focusedPostId}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Team, TeamMembership} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getUnreadScrollPositionPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getTeamByName, getTeamMemberships} from 'mattermost-redux/selectors/entities/teams';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {Constants} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport PostView from './post_view';\n\nexport const isChannelLoading = (params: RouteViewParams, channel?: Channel, team?: Team, teammate?: UserProfile, teamMemberships?: Record<string, TeamMembership>) => {\n    if (params.postid) {\n        return false;\n    }\n\n    if (channel && team) {\n        if (channel.type !== Constants.DM_CHANNEL && channel.name !== params.identifier) {\n            return true;\n        } else if (channel.type === Constants.DM_CHANNEL && teammate && params.identifier !== `@${teammate.username}`) {\n            return true;\n        }\n\n        const teamId = team.id;\n        if ((channel.team_id && channel.team_id !== teamId) || (teamMemberships && !teamMemberships[teamId])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    return true;\n};\n\ninterface RouteViewParams {\n    team?: string;\n    identifier?: string;\n    postid?: string;\n}\n\ntype Props = {channelId: string} & RouteComponentProps<RouteViewParams>\n\nfunction makeMapStateToProps() {\n    return function mapStateToProps(state: GlobalState, ownProps: Props) {\n        const params = ownProps.match?.params;\n        const team = getTeamByName(state, params?.team || '');\n        let teammate;\n\n        const channel = getChannel(state, ownProps.channelId);\n        let lastViewedAt = state.views.channel.lastChannelViewTime[ownProps.channelId];\n        if (channel) {\n            if (channel.type === Constants.DM_CHANNEL && channel.teammate_id) {\n                teammate = getUser(state, channel.teammate_id);\n            }\n            lastViewedAt = channel.last_post_at ? lastViewedAt : channel.last_post_at;\n        }\n\n        const teamMemberships = getTeamMemberships(state);\n        const channelLoading = isChannelLoading(params!, channel, team, teammate, teamMemberships);\n        const unreadScrollPosition = getUnreadScrollPositionPreference(state);\n        return {\n            unreadScrollPosition,\n            lastViewedAt,\n            channelLoading,\n        };\n    };\n}\n\nexport default withRouter(connect(makeMapStateToProps)(PostView));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst onClickRefresh = () => {\n    location.reload();\n};\n\nconst TIME_TO_SHOW = 5000;\nconst TIME_TO_DISMISS = 2000;\n\ntype Props = {\n    updateWaitForLoader: (v: boolean) => void;\n}\n\nconst InputLoading = ({\n    updateWaitForLoader,\n}: Props) => {\n    const [showMessage, setShowMessage] = useState(false);\n\n    useEffect(() => {\n        let timeout = setTimeout(() => {\n            setShowMessage(true);\n            updateWaitForLoader(true);\n            timeout = setTimeout(() => {\n                updateWaitForLoader(false);\n            }, TIME_TO_DISMISS);\n        }, TIME_TO_SHOW);\n\n        return () => {\n            clearTimeout(timeout);\n            updateWaitForLoader(false);\n        };\n    }, []);\n\n    return (\n        <div\n            className='AdvancedTextEditor__skeleton'\n        >\n            {showMessage && (\n                <>\n                    <FormattedMessage\n                        id='center_panel.input.cannot_load_component'\n                        defaultMessage='Something went wrong while loading the component. Please wait a moment, or try reloading the app.'\n                    />\n                    <button\n                        className='btn btn-tertiary channel-archived__close-btn'\n                        onClick={onClickRefresh}\n                    >\n                        <FormattedMessage\n                            id='center_panel.reloadPage'\n                            defaultMessage='Reload'\n                        />\n                    </button>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default InputLoading;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {lazy} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport deferComponentRender from 'components/deferComponentRender';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport PostView from 'components/post_view';\n\nimport WebSocketClient from 'client/web_websocket_client';\n\nimport InputLoading from './input_loading';\n\nimport type {PropsFromRedux} from './index';\n\nconst ChannelHeader = makeAsyncComponent('ChannelHeader', lazy(() => import('components/channel_header')));\nconst FileUploadOverlay = makeAsyncComponent('FileUploadOverlay', lazy(() => import('components/file_upload_overlay')));\nconst ChannelBookmarks = makeAsyncComponent('ChannelBookmarks', lazy(() => import('components/channel_bookmarks')));\nconst AdvancedCreatePost = makeAsyncComponent('AdvancedCreatePost', lazy(() => import('components/advanced_create_post')));\n\nexport type Props = PropsFromRedux & RouteComponentProps<{\n    postid?: string;\n}>;\n\ntype State = {\n    channelId: string;\n    url: string;\n    focusedPostId?: string;\n    deferredPostView: any;\n    waitForLoader: boolean;\n};\n\nexport default class ChannelView extends React.PureComponent<Props, State> {\n    public static createDeferredPostView = () => {\n        return deferComponentRender(\n            PostView,\n            <div\n                id='post-list'\n                className='a11y__region'\n                data-a11y-sort-order='1'\n                data-a11y-focus-child={true}\n                data-a11y-order-reversed={true}\n            />,\n        );\n    };\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        let updatedState = {};\n        const focusedPostId = props.match.params.postid;\n\n        if (props.match.url !== state.url && props.channelId !== state.channelId) {\n            updatedState = {deferredPostView: ChannelView.createDeferredPostView(), url: props.match.url, focusedPostId};\n        }\n\n        if (props.channelId !== state.channelId) {\n            updatedState = {...updatedState, channelId: props.channelId, focusedPostId};\n        }\n\n        if (focusedPostId && focusedPostId !== state.focusedPostId) {\n            updatedState = {...updatedState, focusedPostId};\n        }\n\n        if (Object.keys(updatedState).length) {\n            return updatedState;\n        }\n\n        return null;\n    }\n\n    channelViewRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            url: props.match.url,\n            channelId: props.channelId,\n            focusedPostId: props.match.params.postid,\n            deferredPostView: ChannelView.createDeferredPostView(),\n            waitForLoader: false,\n        };\n\n        this.channelViewRef = React.createRef();\n    }\n\n    onClickCloseChannel = () => {\n        this.props.goToLastViewedChannel();\n    };\n\n    onUpdateInputShowLoader = (v: boolean) => {\n        this.setState({waitForLoader: v});\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        // TODO: debounce\n        if (prevProps.channelId !== this.props.channelId && this.props.enableWebSocketEventScope) {\n            WebSocketClient.updateActiveChannel(this.props.channelId);\n        }\n        if (prevProps.channelId !== this.props.channelId || prevProps.channelIsArchived !== this.props.channelIsArchived) {\n            if (this.props.channelIsArchived && !this.props.viewArchivedChannels) {\n                this.props.goToLastViewedChannel();\n            }\n        }\n    }\n\n    render() {\n        let createPost;\n        if (this.props.deactivatedChannel) {\n            createPost = (\n                <div\n                    className='post-create__container'\n                    id='post-create'\n                >\n                    <div\n                        className='channel-archived__message'\n                    >\n                        <FormattedMarkdownMessage\n                            id='create_post.deactivated'\n                            defaultMessage='You are viewing an archived channel with a **deactivated user**. New messages cannot be posted.'\n                        />\n                        <button\n                            className='btn btn-primary channel-archived__close-btn'\n                            onClick={this.onClickCloseChannel}\n                        >\n                            <FormattedMessage\n                                id='center_panel.archived.closeChannel'\n                                defaultMessage='Close Channel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.props.channelIsArchived) {\n            createPost = (\n                <div\n                    className='post-create__container'\n                    id='post-create'\n                >\n                    <div\n                        id='channelArchivedMessage'\n                        className='channel-archived__message'\n                    >\n                        <FormattedMarkdownMessage\n                            id='archivedChannelMessage'\n                            defaultMessage='You are viewing an **archived channel**. New messages cannot be posted.'\n                        />\n                        <button\n                            className='btn btn-primary channel-archived__close-btn'\n                            onClick={this.onClickCloseChannel}\n                        >\n                            <FormattedMessage\n                                id='center_panel.archived.closeChannel'\n                                defaultMessage='Close Channel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.props.missingChannelRole || this.state.waitForLoader) {\n            createPost = <InputLoading updateWaitForLoader={this.onUpdateInputShowLoader}/>;\n        } else {\n            createPost = (\n                <div\n                    id='post-create'\n                    data-testid='post-create'\n                    className='post-create__container AdvancedTextEditor__ctr'\n                >\n                    <AdvancedCreatePost/>\n                </div>\n            );\n        }\n\n        const DeferredPostView = this.state.deferredPostView;\n\n        return (\n            <div\n                ref={this.channelViewRef}\n                id='app-content'\n                className='app__content'\n            >\n                <FileUploadOverlay overlayType='center'/>\n                <ChannelHeader {...this.props}/>\n                {this.props.isChannelBookmarksEnabled && <ChannelBookmarks channelId={this.props.channelId}/>}\n                <DeferredPostView\n                    channelId={this.props.channelId}\n                    focusedPostId={this.state.focusedPostId}\n                />\n                {createPost}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getCurrentChannel, getDirectTeammate, getMyChannelMembership} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles_helpers';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {isFirstAdmin} from 'mattermost-redux/selectors/entities/users';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport {getIsChannelBookmarksEnabled} from 'components/channel_bookmarks/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelView from './channel_view';\n\nfunction isDeactivatedChannel(state: GlobalState, channelId: string) {\n    const teammate = getDirectTeammate(state, channelId);\n\n    return Boolean(teammate && teammate.delete_at);\n}\n\nfunction isMissingChannelRoles(state: GlobalState, channel?: Channel) {\n    const channelRoles = channel ? getMyChannelMembership(state, channel.id)?.roles || '' : '';\n    return !channelRoles.split(' ').some((v) => Boolean(getRoles(state)[v]));\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const channel = getCurrentChannel(state);\n\n    const config = getConfig(state);\n\n    const viewArchivedChannels = config.ExperimentalViewArchivedChannels === 'true';\n    const enableOnboardingFlow = config.EnableOnboardingFlow === 'true';\n    const enableWebSocketEventScope = config.FeatureFlagWebSocketEventScope === 'true';\n\n    const missingChannelRole = isMissingChannelRoles(state, channel);\n\n    return {\n        channelId: channel ? channel.id : '',\n        deactivatedChannel: channel ? isDeactivatedChannel(state, channel.id) : false,\n        enableOnboardingFlow,\n        channelIsArchived: channel ? channel.delete_at !== 0 : false,\n        viewArchivedChannels,\n        isCloud: getLicense(state).Cloud === 'true',\n        teamUrl: getCurrentRelativeTeamUrl(state),\n        isFirstAdmin: isFirstAdmin(state),\n        enableWebSocketEventScope,\n        isChannelBookmarksEnabled: getIsChannelBookmarksEnabled(state),\n        missingChannelRole,\n    };\n}\n\nconst mapDispatchToProps = ({\n    goToLastViewedChannel,\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default withRouter(connector(ChannelView));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from \"react\";\n\nimport ChannelView from \"components/channel_view/index\";\n\nimport { getHistory } from \"utils/browser_history\";\nimport Constants from \"utils/constants\";\n\nexport interface Match {\n    params: {\n        identifier: string;\n        team: string;\n        postid?: string;\n        path: string;\n    };\n    url: string;\n}\n\nexport type MatchAndHistory = Pick<Props, \"match\" | \"history\">;\n\ninterface Props {\n    match: Match;\n    actions: {\n        onChannelByIdentifierEnter: (props: MatchAndHistory) => any;\n    };\n    history: any;\n}\n\nexport default class ChannelIdentifierRouter extends React.PureComponent<Props> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            prevProps: props,\n        };\n    }\n\n    private replaceUrlTimeout!: NodeJS.Timeout;\n\n    componentDidUpdate(prevProps: Props) {\n        if (\n            this.props.match.params.team !== prevProps.match.params.team ||\n            this.props.match.params.identifier !==\n                prevProps.match.params.identifier\n        ) {\n            clearTimeout(this.replaceUrlTimeout);\n            this.props.actions.onChannelByIdentifierEnter(this.props);\n            this.replaceUrlIfPermalink();\n        }\n    }\n    componentDidMount() {\n        this.props.actions.onChannelByIdentifierEnter(this.props);\n        this.replaceUrlIfPermalink();\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.replaceUrlTimeout);\n    }\n\n    replaceUrlIfPermalink = () => {\n        if (this.props.match.params.postid) {\n            this.replaceUrlTimeout = setTimeout(() => {\n                const channelUrl = this.props.match.url\n                    .split(\"/\")\n                    .slice(0, -1)\n                    .join(\"/\");\n                getHistory().replace(channelUrl);\n            }, Constants.PERMALINK_FADEOUT);\n        }\n    };\n\n    render() {\n        return <ChannelView/>;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {onChannelByIdentifierEnter} from './actions';\nimport ChannelIdentifierRouter from './channel_identifier_router';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            onChannelByIdentifierEnter,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(ChannelIdentifierRouter));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {lazy} from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport BrowserView from 'components/browser_view';\nimport ChannelIdentifierRouter from 'components/channel_layout/channel_identifier_router';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {IDENTIFIER_PATH_PATTERN, ID_PATH_PATTERN, TEAM_NAME_PATH_PATTERN} from 'utils/path';\n\nimport type {OwnProps, PropsFromRedux} from './index';\n\nconst ChannelHeaderMobile = makeAsyncComponent('ChannelHeaderMobile', lazy(() => import('components/channel_header_mobile')));\nconst GlobalThreads = makeAsyncComponent('GlobalThreads', lazy(() => import('components/threading/global_threads')),\n    (\n        <div className='app__content'>\n            <LoadingScreen/>\n        </div>\n    ),\n);\nconst Drafts = makeAsyncComponent('Drafts', lazy(() => import('components/drafts')),\n    (\n        <div className='app__content'>\n            <LoadingScreen/>\n        </div>\n    ),\n);\nconst PermalinkView = makeAsyncComponent('PermalinkView', lazy(() => import('components/permalink_view')));\nconst PlaybookRunner = makeAsyncComponent('PlaybookRunner', lazy(() => import('components/channel_layout/playbook_runner')));\nconst Membership = makeAsyncComponent('Membership', lazy(() => import('components/membership/membership')));\nconst Shop = makeAsyncComponent('Shop', lazy(() => import('components/shop/product_results')));\n\ntype Props = PropsFromRedux & OwnProps;\n\ntype State = {\n    returnTo: string;\n    lastReturnTo: string;\n};\n\nexport default class CenterChannel extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            returnTo: '',\n            lastReturnTo: '',\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (prevState.lastReturnTo !== nextProps.location.pathname && nextProps.location.pathname.includes('/pl/')) {\n            return {\n                lastReturnTo: nextProps.location.pathname,\n                returnTo: prevState.lastReturnTo,\n            };\n        }\n        return {lastReturnTo: nextProps.location.pathname};\n    }\n\n    async componentDidMount() {\n        const {actions} = this.props;\n        await actions.getProfiles();\n    }\n\n    render() {\n        const {lastChannelPath, isCollapsedThreadsEnabled, isMobileView} = this.props;\n        const url = this.props.match.url;\n\n        return (\n            <div\n                key='inner-wrap'\n                className={classNames('inner-wrap', 'channel__wrap', {\n                    'move--right': this.props.lhsOpen,\n                    'move--left': this.props.rhsOpen,\n                    'move--left-small': this.props.rhsMenuOpen,\n                })}\n            >\n                {isMobileView && (\n                    <>\n                        <div className='row header'>\n                            <div id='navbar_wrapper'>\n                                <ChannelHeaderMobile/>\n                            </div>\n                        </div>\n                    </>\n                )}\n                <div className='row main'>\n                    <Switch>\n                        <Route\n                            path={`${url}/pl/:postid(${ID_PATH_PATTERN})`}\n                            render={(props) => (\n                                <PermalinkView\n                                    {...props}\n                                    returnTo={this.state.returnTo}\n                                />\n                            )}\n                        />\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/:path(channels|messages)/:identifier(${IDENTIFIER_PATH_PATTERN})/:postid(${ID_PATH_PATTERN})?`}\n                            component={ChannelIdentifierRouter}\n                        />\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/_playbooks/:playbookId(${ID_PATH_PATTERN})/run`}\n                        >\n                            <PlaybookRunner/>\n                        </Route>\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/browser`}\n                        >\n                            <BrowserView/>\n                        </Route>\n                        {isCollapsedThreadsEnabled ? (\n                            <Route\n                                path={`/:team(${TEAM_NAME_PATH_PATTERN})/threads/:threadIdentifier(${ID_PATH_PATTERN})?`}\n                                component={GlobalThreads}\n                            />\n                        ) : null}\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/drafts`}\n                            component={Drafts}\n                        />\n\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/membership`}\n                            component={Membership}\n                        />\n\n                        <Route\n                            path={`/:team(${TEAM_NAME_PATH_PATTERN})/shop`}\n                            component={Shop}\n                        />\n\n                        <Redirect to={lastChannelPath}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport type {RouteComponentProps} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getProfiles} from 'mattermost-redux/actions/users';\nimport {getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getTeamByName} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {getIsLhsOpen} from 'selectors/lhs';\nimport {getLastViewedChannelNameByTeamName, getLastViewedTypeByTeamName, getPreviousTeamId, getPreviousTeamLastViewedType} from 'selectors/local_storage';\nimport {getIsRhsOpen, getIsRhsMenuOpen} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {PreviousViewedTypes} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport CenterChannel from './center_channel';\n\ntype Params = {\n    team: string;\n}\n\nexport type OwnProps = RouteComponentProps<Params>;\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps) => {\n    const lastViewedType = getLastViewedTypeByTeamName(state, ownProps.match.params.team);\n    let channelName = getLastViewedChannelNameByTeamName(state, ownProps.match.params.team);\n\n    const previousTeamId = getPreviousTeamId(state);\n    const team = getTeamByName(state, ownProps.match.params.team);\n\n    let previousTeamLastViewedType;\n\n    if (previousTeamId !== team?.id) {\n        previousTeamLastViewedType = getPreviousTeamLastViewedType(state);\n    }\n\n    if (!channelName) {\n        channelName = getRedirectChannelNameForTeam(state, team!.id);\n    }\n\n    let lastChannelPath;\n    if (isCollapsedThreadsEnabled(state) && (previousTeamLastViewedType === PreviousViewedTypes.THREADS || lastViewedType === PreviousViewedTypes.THREADS)) {\n        lastChannelPath = `${ownProps.match.url}/threads`;\n    } else {\n        lastChannelPath = `${ownProps.match.url}/channels/${channelName}`;\n    }\n\n    return {\n        lastChannelPath,\n        lhsOpen: getIsLhsOpen(state),\n        rhsOpen: getIsRhsOpen(state),\n        rhsMenuOpen: getIsRhsMenuOpen(state),\n        isCollapsedThreadsEnabled: isCollapsedThreadsEnabled(state),\n        currentUserId: getCurrentUserId(state),\n        isMobileView: getIsMobileView(state),\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getProfiles,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default withRouter(connector(CenterChannel));\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Dispatch} from 'redux';\n\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {getChannelIdsForCurrentTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {isChannelMuted} from 'mattermost-redux/utils/channel_utils';\nimport {memoizeResult} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport type {GlobalState} from 'types/store';\n\nlet isFirstPreload = true;\n\nexport function trackPreloadedChannels(prefetchQueueObj: Record<string, string[]>) {\n    return (dispatch: Dispatch, getState: () => GlobalState) => {\n        const state = getState();\n        const channelIdsForTeam = getChannelIdsForCurrentTeam(state);\n\n        trackEvent('performance', 'preloaded_channels', {\n            numHigh: prefetchQueueObj[1]?.length || 0,\n            numMedium: prefetchQueueObj[2]?.length || 0,\n            numLow: prefetchQueueObj[3]?.length || 0,\n\n            numTotal: channelIdsForTeam.length,\n\n            // Tracks whether this is the first team that we've preloaded channels for in this session since\n            // the first preload will likely include DMs and GMs\n            isFirstPreload,\n        });\n\n        isFirstPreload = false;\n    };\n}\n\nenum Priority {\n    high = 1,\n    medium,\n    low\n}\n\nenum PrefetchLimits {\n    mentionMax = 10,\n    unreadMax = 20,\n}\n\n// function to return a queue obj with priotiy as key and array of channelIds as values.\n// high priority has channels with mentions\n// medium priority has channels with unreads\n// <10 unread channels. Prefetch everything.\n// 10-20 unread. Prefetch only mentions, capped to 10.\n// >20 unread. Don't prefetch anything.\nexport const prefetchQueue = memoizeResult((\n    unreadChannels: Channel[],\n    memberships: RelationOneToOne<Channel, ChannelMembership>,\n    collapsedThreads: boolean,\n) => {\n    const unreadChannelsCount = unreadChannels.length;\n    let result: {\n        1: string[];\n        2: string[];\n        3: string[];\n    } = {\n        [Priority.high]: [], // 1 being high priority requests\n        [Priority.medium]: [],\n        [Priority.low]: [], //TODO: add chanenls such as fav.\n    };\n    if (!unreadChannelsCount || unreadChannelsCount > PrefetchLimits.unreadMax) {\n        return result;\n    }\n    for (const channel of unreadChannels) {\n        const channelId = channel.id;\n        const membership = memberships[channelId];\n\n        if (unreadChannelsCount >= PrefetchLimits.mentionMax && result[Priority.high].length >= PrefetchLimits.mentionMax) {\n            break;\n        }\n\n        // TODO We check for muted channels 3 times here: getUnreadChannels checks it, this checks it, and the mark_unread\n        // check below is equivalent to checking if its muted.\n        if (membership && !isChannelMuted(membership)) {\n            if (collapsedThreads ? membership.mention_count_root : membership.mention_count) {\n                result = {\n                    ...result,\n                    [Priority.high]: [...result[Priority.high], channelId],\n                };\n            } else if (\n                membership.notify_props &&\n                membership.notify_props.mark_unread !== 'mention' &&\n                unreadChannelsCount < PrefetchLimits.mentionMax\n            ) {\n                result = {\n                    ...result,\n                    [Priority.medium]: [...result[Priority.medium], channelId],\n                };\n            }\n        }\n    }\n    return result;\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PQueue from 'p-queue';\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {loadProfilesForSidebar} from 'actions/user_actions';\n\nimport {Constants} from 'utils/constants';\n\nconst queue = new PQueue({concurrency: 2});\n\ntype Props = {\n    currentChannelId: string;\n    prefetchQueueObj: Record<string, string[]>;\n    prefetchRequestStatus: Record<string, string>;\n\n    // Whether or not the categories in the sidebar have been loaded for the current team\n    sidebarLoaded: boolean;\n\n    unreadChannels: Channel[];\n\n    actions: {\n        prefetchChannelPosts: (channelId: string, delay?: number) => Promise<ActionResult>;\n        trackPreloadedChannels: (prefetchQueueObj: Record<string, string[]>) => void;\n    };\n}\n\n/*\n    This component is responsible for prefetching data. As of now component only fetches for channel posts based on the below set of rules.\n    * Priority order:\n        Fetches channel posts 2 at a time, with mentions followed channels with unreads.\n\n    * Conditions for prefetching posts:\n        On load of webapp\n        On socket reconnect or system comes from sleep\n        On new message in a channel where user has not visited in the present session\n        On addition of user to a channel/GM\n        On Team switch\n\n        In order to solve the above conditions the component looks for changes in selector unread channels.\n        if there is a change in unreads selector, then component clears existing queue as it can be obselete\n        i.e there can be new mentions and we need to prioritise instead of unreads so, contructs a new queue\n        with dispacthes of unreads posts for channels which do not have prefetched requests.\n\n    * other changes:\n        Adds current channel posts requests to be dispatched as soon as it is set in redux state instead of dispatching it from actions down the hierarchy. Otherwise couple of prefetching requests are sent before the postlist makes a request for posts.\n        Add a jitter(0-1sec) for delaying post requests in case of a new message in open/private channels. This is to prevent a case when all clients request messages when new post is made in a channel with thousands of users.\n*/\nexport default class DataPrefetch extends React.PureComponent<Props> {\n    private prefetchTimeout?: number;\n\n    async componentDidUpdate(prevProps: Props) {\n        const {currentChannelId, prefetchQueueObj, sidebarLoaded} = this.props;\n        if (sidebarLoaded && !prevProps.sidebarLoaded) {\n            loadProfilesForSidebar();\n        }\n\n        if (currentChannelId && sidebarLoaded && (!prevProps.currentChannelId || !prevProps.sidebarLoaded)) {\n            queue.add(async () => this.prefetchPosts(currentChannelId));\n            this.prefetchData();\n        } else if (prevProps.prefetchQueueObj !== prefetchQueueObj) {\n            clearTimeout(this.prefetchTimeout);\n            await queue.clear();\n            this.prefetchData();\n        }\n\n        if (currentChannelId && sidebarLoaded && (!prevProps.currentChannelId || !prevProps.sidebarLoaded)) {\n            this.props.actions.trackPreloadedChannels(prefetchQueueObj);\n        }\n    }\n\n    public prefetchPosts = (channelId: string) => {\n        let delay;\n        const channel = this.props.unreadChannels.find((unreadChannel) => channelId === unreadChannel.id);\n        if (channel && (channel.type === Constants.PRIVATE_CHANNEL || channel.type === Constants.OPEN_CHANNEL)) {\n            const isLatestPostInLastMin = (Date.now() - channel.last_post_at) <= 1000;\n            if (isLatestPostInLastMin) {\n                delay = Math.random() * 1000; // 1ms - 1000ms random wait to not choke server\n            }\n        }\n        return this.props.actions.prefetchChannelPosts(channelId, delay);\n    };\n\n    private prefetchData = () => {\n        const {prefetchRequestStatus, prefetchQueueObj} = this.props;\n        for (const priority in prefetchQueueObj) {\n            if (!prefetchQueueObj.hasOwnProperty(priority)) {\n                continue;\n            }\n\n            const priorityQueue = prefetchQueueObj[priority];\n            for (const channelId of priorityQueue) {\n                if (!prefetchRequestStatus.hasOwnProperty(channelId)) {\n                    queue.add(async () => this.prefetchPosts(channelId));\n                }\n            }\n        }\n    };\n\n    render() {\n        return null;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getCurrentChannelId, getUnreadChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getMyChannelMemberships} from 'mattermost-redux/selectors/entities/common';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {prefetchChannelPosts} from 'actions/views/channel';\nimport {getCategoriesForCurrentTeam} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport {prefetchQueue, trackPreloadedChannels} from './actions';\nimport DataPrefetch from './data_prefetch';\n\nfunction isSidebarLoaded(state: GlobalState) {\n    return getCategoriesForCurrentTeam(state).length > 0;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const lastUnreadChannel = state.views.channel.lastUnreadChannel;\n    const memberships = getMyChannelMemberships(state);\n    const unreadChannels = getUnreadChannels(state, lastUnreadChannel);\n    const prefetchQueueObj = prefetchQueue(unreadChannels, memberships, isCollapsedThreadsEnabled(state));\n    const prefetchRequestStatus = state.views.channel.channelPrefetchStatus;\n\n    return {\n        currentChannelId: getCurrentChannelId(state),\n        prefetchQueueObj,\n        prefetchRequestStatus,\n        sidebarLoaded: isSidebarLoaded(state),\n        unreadChannels,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            prefetchChannelPosts,\n            trackPreloadedChannels,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataPrefetch);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useRef, useState, type CSSProperties} from 'react';\nimport {AudioVisualizer} from 'react-audio-visualize';\n\ntype Props = {\n    userImage: string;\n    audioSrc: string;\n    duration: string;\n    bubbleColor?: string;\n    position?: 'left' | 'right';\n}\n\nconst AudioChatBubble = ({userImage, audioSrc, duration, position = 'left', bubbleColor = '#EFFEDD'}: Props) => {\n    const visualizerRef = useRef<HTMLCanvasElement>(null);\n    const [blob, setBlob] = useState<Blob>();\n    const [url, setUrl] = useState<string>('');\n    const [audio, setAudio] = useState<HTMLAudioElement>();\n    const [, setBlobState] = useState<'loading' | 'loaded' | 'error'>('loading');\n\n    const toggleAudio = () => {\n        if (audio) {\n            if (audio.paused) {\n                audio.play();\n            } else {\n                audio.pause();\n            }\n        }\n    };\n\n    const loadAudio = (blob: Blob) => {\n        setBlob(blob);\n        setBlobState('loaded');\n\n        const url = URL.createObjectURL(blob);\n        const audio = new Audio(url);\n        audio.load();\n\n        setUrl(url);\n        setAudio(audio);\n    };\n\n    useEffect(() => {\n        const abortController = new AbortController();\n\n        setBlobState('loading');\n\n        fetch(audioSrc, {signal: abortController.signal}).\n            then((res) => res.blob()).\n            then(loadAudio).\n            catch(() => {\n                setBlobState('error');\n            });\n\n        return () => {\n            abortController.abort();\n\n            if (url !== '') {\n                URL.revokeObjectURL(url);\n            }\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [audioSrc]);\n\n    return (\n        <div\n            className='chat-message-container'\n            style={{flexDirection: position === 'left' ? 'row' : 'row-reverse', '--bubble-color': bubbleColor} as CSSProperties}\n        >\n            <div\n                className='chat-bubble'\n                style={{flexDirection: position === 'left' ? 'row' : 'row-reverse'}}\n            >\n                <img\n                    src={userImage}\n                    className='user'\n                    loading='lazy'\n                />\n                <div className='message'>\n                    <div\n                        className='bubble audio'\n                        style={{marginLeft: position === 'left' ? 0 : 'auto'}}\n                    >\n                        <div className='audio-container'>\n                            <button\n                                className='play-pause-btn'\n                                onClick={() => toggleAudio()}\n                            >\n                                <svg\n                                    width='24'\n                                    height='26'\n                                    viewBox='0 0 24 26'\n                                    fill='none'\n                                    xmlns='http://www.w3.org/2000/svg'\n                                >\n                                    <path\n                                        d='M5.22461 5.21739C5.22461 3.72265 6.80711 3.39253 7.67029 3.99044L18.1723 11.3719C18.7478 11.7944 19.3232 12.8407 18.1723 13.7776L7.67029 21.0308C6.80711 21.6287 5.22461 21.3609 5.22461 19.8313V12.5853V5.21739Z'\n                                        fill='white'\n                                    />\n                                </svg>\n                            </button>\n                            <div>\n                                {blob && (\n                                    <AudioVisualizer\n                                        ref={visualizerRef}\n                                        blob={blob}\n                                        width={150}\n                                        height={50}\n                                        barWidth={4}\n                                        gap={0}\n                                        barColor={'#62AC55'}\n                                    />\n                                )}\n                                <div className='audio-footer'>\n                                    <div>{duration}</div>\n                                </div>\n                            </div>\n                        </div>\n                        <button id='transcribe-btn'>\n                            {'Transcribe'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AudioChatBubble;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState, type CSSProperties} from 'react';\nimport {Modal} from 'react-bootstrap';\n\ntype Props = {\n    userImage: string;\n    text: string;\n    images?: string[];\n    bubbleColor?: string;\n    position?: 'left' | 'right';\n}\n\nconst ChatBubble = ({userImage, text, images, position = 'left', bubbleColor = '#14B8A6'}: Props) => {\n    const [currentImage, setCurrentImage] = useState<string>();\n    const [modalOpened, setModalOpened] = useState(false);\n\n    const popupImage = (src: string) => {\n        setCurrentImage(src);\n        setModalOpened(true);\n    };\n\n    return (\n        <div\n            className='chat-message-container'\n            style={{flexDirection: position === 'left' ? 'row' : 'row-reverse', '--bubble-color': bubbleColor} as CSSProperties}\n        >\n            <div\n                className='chat-bubble'\n                style={{flexDirection: position === 'left' ? 'row' : 'row-reverse'}}\n            >\n                <img\n                    src={userImage}\n                    className='user'\n                    loading='lazy'\n                />\n                <div className='message'>\n                    <div\n                        className='bubble'\n                        style={{marginLeft: position === 'left' ? 0 : 'auto'}}\n                    >\n                        {text}\n                    </div>\n                    {images && images.length > 0 && (\n                        <div className='images'>\n                            {images.map((image) => (\n                                <img\n                                    src={image}\n                                    key={image}\n                                    loading='lazy'\n                                    onClick={() => popupImage(image)}\n                                />),\n                            )}\n                        </div>\n                    )}\n                </div>\n            </div>\n            <Modal\n                show={modalOpened}\n                onHide={() => setModalOpened(false)}\n                id='imagePopupModal'\n            >\n                <img\n                    src={currentImage}\n                    className='modal-image'\n                />\n            </Modal>\n        </div>\n    );\n};\n\nexport default ChatBubble;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useSpring, animated} from '@react-spring/web';\nimport React, {useEffect, useRef} from 'react';\nimport {injectIntl, type IntlShape} from 'react-intl';\n\nimport AudioChatBubble from './audio_chat_bubble';\nimport ChatBubble from './chat_bubble';\n\nimport userImage from '../../images/messenger.png';\n\ntype Props = {\n    intl: IntlShape;\n    onClose: () => void;\n}\n\nconst MINIMUM_WIDTH = 320;\nconst MINIMUM_HEIGHT = 350;\nconst DIMENSION_KEY = 'messenger_dimension';\n\nconst getWindowSize = () => {\n    const value = localStorage.getItem(DIMENSION_KEY);\n    if (value === null) {\n        return [MINIMUM_WIDTH, MINIMUM_HEIGHT];\n    }\n    try {\n        return JSON.parse(value);\n    } catch (err) {\n        return [MINIMUM_WIDTH, MINIMUM_HEIGHT];\n    }\n};\n\nconst Messenger = ({intl, onClose}: Props) => {\n    const [initialWidth, initialHeight] = getWindowSize();\n\n    const animStyle = useSpring({\n        from: {scaleY: 0, opacity: 0},\n        to: {scaleY: 1, opacity: 1},\n        config: {\n            duration: 100,\n        },\n    });\n    const ref = useRef<HTMLDivElement>(null);\n    const headerRef = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n\n        const element = ref.current;\n\n        let mouseX = 0;\n        let mouseY = 0;\n        const BORDER_SIZE = 10;\n\n        const handleResizeWidth = (ev: MouseEvent) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const dx = ev.x - mouseX;\n            mouseX = ev.x;\n            let width = (parseInt(getComputedStyle(element, '').width, 10) + dx);\n            if (width < MINIMUM_WIDTH) {\n                width = MINIMUM_WIDTH;\n            }\n            element.style.width = `${width}px`;\n        };\n\n        const handleResizeHeight = (ev: MouseEvent) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            const dy = mouseY - ev.y;\n            mouseY = ev.y;\n            let height = (parseInt(getComputedStyle(element, '').height, 10) + dy);\n            if (height < MINIMUM_HEIGHT) {\n                height = MINIMUM_HEIGHT;\n            }\n            element.style.height = `${height}px`;\n        };\n\n        const handleMousedown = (ev: MouseEvent) => {\n            if (ev.offsetX >= element.clientWidth - BORDER_SIZE) {\n                element.classList.add('no-select');\n                mouseX = ev.x;\n                window.addEventListener('mousemove', handleResizeWidth, {\n                    capture: true,\n                });\n            } else if (ev.offsetY <= BORDER_SIZE) {\n                element.classList.add('no-select');\n                mouseY = ev.y;\n                window.addEventListener('mousemove', handleResizeHeight, {\n                    capture: true,\n                });\n            }\n        };\n\n        const handleMouseup = () => {\n            window.removeEventListener('mousemove', handleResizeWidth, {capture: true});\n            window.removeEventListener('mousemove', handleResizeHeight, {capture: true});\n\n            const style = getComputedStyle(element, '');\n            const width = parseInt(style.width, 10);\n            const height = parseInt(style.height, 10);\n\n            localStorage.setItem(DIMENSION_KEY, JSON.stringify([width, height]));\n            element.classList.remove('no-select');\n        };\n\n        element.addEventListener('mousedown', handleMousedown);\n        window.addEventListener('mouseup', handleMouseup);\n\n        // eslint-disable-next-line consistent-return\n        return () => {\n            element.removeEventListener('mousedown', handleMousedown);\n            window.removeEventListener('mouseup', handleMouseup);\n            window.removeEventListener('mousemove', handleResizeWidth);\n            window.removeEventListener('mousemove', handleResizeHeight);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!headerRef.current || !ref.current) {\n            return;\n        }\n\n        const container = ref.current;\n        const element = headerRef.current;\n        let mouseX = 0;\n        let mouseY = 0;\n\n        const handlePosition = (ev: MouseEvent) => {\n            const dx = ev.x - mouseX;\n            const dy = mouseY - ev.y;\n            mouseX = ev.x;\n            mouseY = ev.y;\n\n            const style = getComputedStyle(container, '');\n\n            const previousBottom = parseInt(style.bottom, 10);\n            const previousLeft = parseInt(style.left, 10);\n            const newBottom = previousBottom + dy;\n            const newLeft = previousLeft + dx;\n\n            container.style.left = `${newLeft}px`;\n            container.style.bottom = `${newBottom}px`;\n        };\n\n        const handleMousedown = (ev: MouseEvent) => {\n            ev.stopPropagation();\n            ev.preventDefault();\n            container.classList.add('no-select');\n            mouseX = ev.x;\n            mouseY = ev.y;\n            window.addEventListener('mousemove', handlePosition, {\n                capture: true,\n            });\n        };\n\n        const handleMouseup = () => {\n            window.removeEventListener('mousemove', handlePosition, {capture: true});\n            container.classList.remove('no-select');\n        };\n\n        element.addEventListener('mousedown', handleMousedown);\n        window.addEventListener('mouseup', handleMouseup);\n\n        // eslint-disable-next-line consistent-return\n        return () => {\n            element.removeEventListener('mousedown', handleMousedown);\n            window.removeEventListener('mouseup', handleMouseup);\n            window.removeEventListener('mousemove', handlePosition, {capture: true});\n        };\n    }, []);\n\n    return (\n        <>\n            {/* @ts-expect-error ignore the typing error */}\n            <animated.div\n                id='messenger'\n                ref={ref}\n                style={{width: `${initialWidth}px`, height: `${initialHeight}px`, ...animStyle}}\n            >\n                <div className='header'>\n                    <div\n                        className='heading'\n                        ref={headerRef}\n                    >\n                        {'Stella'}\n                    </div>\n                    <button\n                        id='closeButton'\n                        onClick={() => onClose()}\n                    >\n                        <i className='fa fa-close'/>\n                    </button>\n                </div>\n                <div className='chat'>\n                    <ChatBubble\n                        text='Hi I’m Stella.'\n                        userImage={userImage}\n                        images={['https://images.pexels.com/photos/1658967/pexels-photo-1658967.jpeg']}\n                    />\n                    <AudioChatBubble\n                        userImage={userImage}\n                        audioSrc='https://cdn.freesound.org/previews/754/754124_14464791-lq.mp3'\n                        duration='00:42'\n                    />\n                </div>\n                <div className='input'>\n                    <div className='left'>\n                        <button>\n                            <svg\n                                width='32'\n                                height='32'\n                                viewBox='0 0 32 32'\n                                fill='none'\n                                xmlns='http://www.w3.org/2000/svg'\n                            >\n                                <path\n                                    d='M16.0003 6.66699V25.3337M6.66699 16.0003H25.3337'\n                                    stroke='#DCDCDC'\n                                    strokeWidth='2'\n                                    strokeLinecap='round'\n                                    strokeLinejoin='round'\n                                />\n                            </svg>\n                        </button>\n                    </div>\n                    <div className='middle'>\n                        <button>\n                            <svg\n                                width='18'\n                                height='18'\n                                viewBox='0 0 18 18'\n                                fill='none'\n                                xmlns='http://www.w3.org/2000/svg'\n                            >\n                                <path\n                                    d='M8.7435 12.2049C7.37184 12.2049 5.91568 12.0098 4.58952 11.6718C4.3425 11.2948 4.16048 10.8917 4.07597 10.4822C5.47363 10.8787 7.09881 11.1517 8.75 11.1517C10.4012 11.1517 12.0264 10.8787 13.4305 10.4822C13.333 10.8917 13.1575 11.2948 12.917 11.6718C11.5908 12.0033 10.1347 12.2049 8.75 12.2049H8.7435ZM8.7435 14.8507C11.6818 14.8507 14.0416 12.6924 14.3666 10.1311C14.4382 9.61757 14.1001 9.38354 13.6451 9.51356C11.9939 10.0011 10.4467 10.2741 8.7435 10.2741C7.0403 10.2741 5.50613 10.0011 3.84844 9.51356C3.39339 9.38354 3.06185 9.61757 3.12686 10.1311C3.44539 12.6924 5.79866 14.8507 8.7435 14.8507ZM11.2788 8.23291C11.8184 8.23291 12.2994 7.74536 12.2994 7.05628C12.2994 6.3672 11.8184 5.87314 11.2788 5.87314C10.7392 5.87314 10.2647 6.3672 10.2647 7.05628C10.2647 7.74536 10.7392 8.23291 11.2788 8.23291ZM6.19521 8.23291C6.74127 8.23291 7.22233 7.74536 7.22233 7.05628C7.22233 6.3672 6.74127 5.87314 6.19521 5.87314C5.64915 5.87314 5.19409 6.3672 5.19409 7.05628C5.19409 7.74536 5.65565 8.23291 6.19521 8.23291ZM8.75 16.2613C4.71954 16.2613 1.48867 13.0305 1.48867 8.9935C1.48867 4.95654 4.71304 1.73217 8.7435 1.73217C12.774 1.73217 16.0178 4.96304 16.0178 9C16.0178 13.037 12.787 16.2678 8.75 16.2678V16.2613ZM8.75 17.7435C13.5345 17.7435 17.5 13.778 17.5 8.9935C17.5 4.20895 13.5345 0.25 8.7435 0.25C3.95245 0.25 0 4.21545 0 9C0 13.7845 3.96545 17.75 8.75 17.75V17.7435Z'\n                                    fill='#F2F2F2'\n                                />\n                            </svg>\n                        </button>\n                        <input placeholder={intl.formatMessage({id: 'messenger.type_message_placeholder', defaultMessage: 'Type message'})}/>\n                        <button>\n                            <svg\n                                width='20'\n                                height='20'\n                                viewBox='0 0 20 20'\n                                fill='none'\n                                xmlns='http://www.w3.org/2000/svg'\n                            >\n                                <path\n                                    d='M10 13.75C10.9942 13.749 11.9475 13.3535 12.6505 12.6505C13.3535 11.9475 13.749 10.9942 13.75 10V5C13.75 4.00544 13.3549 3.05161 12.6517 2.34835C11.9484 1.64509 10.9946 1.25 10 1.25C9.00544 1.25 8.05161 1.64509 7.34835 2.34835C6.64509 3.05161 6.25 4.00544 6.25 5V10C6.25103 10.9942 6.64645 11.9475 7.34949 12.6505C8.05253 13.3535 9.00576 13.749 10 13.75ZM7.5 5C7.5 4.33696 7.76339 3.70107 8.23223 3.23223C8.70107 2.76339 9.33696 2.5 10 2.5C10.663 2.5 11.2989 2.76339 11.7678 3.23223C12.2366 3.70107 12.5 4.33696 12.5 5V10C12.5 10.663 12.2366 11.2989 11.7678 11.7678C11.2989 12.2366 10.663 12.5 10 12.5C9.33696 12.5 8.70107 12.2366 8.23223 11.7678C7.76339 11.2989 7.5 10.663 7.5 10V5ZM10.625 16.2188V18.125C10.625 18.2908 10.5592 18.4497 10.4419 18.5669C10.3247 18.6842 10.1658 18.75 10 18.75C9.83424 18.75 9.67527 18.6842 9.55806 18.5669C9.44085 18.4497 9.375 18.2908 9.375 18.125V16.2188C7.8341 16.062 6.40607 15.3393 5.36707 14.1907C4.32806 13.042 3.7519 11.5489 3.75 10C3.75 9.83424 3.81585 9.67527 3.93306 9.55806C4.05027 9.44085 4.20924 9.375 4.375 9.375C4.54076 9.375 4.69973 9.44085 4.81694 9.55806C4.93415 9.67527 5 9.83424 5 10C5 11.3261 5.52678 12.5979 6.46447 13.5355C7.40215 14.4732 8.67392 15 10 15C11.3261 15 12.5979 14.4732 13.5355 13.5355C14.4732 12.5979 15 11.3261 15 10C15 9.83424 15.0658 9.67527 15.1831 9.55806C15.3003 9.44085 15.4592 9.375 15.625 9.375C15.7908 9.375 15.9497 9.44085 16.0669 9.55806C16.1842 9.67527 16.25 9.83424 16.25 10C16.2481 11.5489 15.6719 13.042 14.6329 14.1907C13.5939 15.3393 12.1659 16.062 10.625 16.2188Z'\n                                    fill='#F2F2F2'\n                                />\n                            </svg>\n                        </button>\n                    </div>\n                    <div className='right'>\n                        <button id='sendButton'>\n                            <svg\n                                width='16'\n                                height='14'\n                                viewBox='0 0 16 14'\n                                fill='none'\n                                xmlns='http://www.w3.org/2000/svg'\n                            >\n                                <path\n                                    d='M0.125 13.75L15.875 7L0.125 0.25V5.5L11.375 7L0.125 8.5V13.75Z'\n                                    fill='white'\n                                />\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n            </animated.div>\n        </>\n    );\n};\n\nexport default injectIntl(Messenger);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useSpring, animated} from '@react-spring/web';\nimport React, {useState} from 'react';\n\nimport Messenger from './messenger';\n\nimport messengerIcon from '../../images/messenger.png';\n\nconst MessengerPopup = () => {\n    const [popupOpen, setPopupOpen] = useState(false);\n    const [popupBtnAnimStyles] = useSpring(() => {\n        if (popupOpen) {\n            return {\n                from: {translateY: 0},\n                to: {translateY: 150},\n                config: {\n                    bounce: 0.8,\n                },\n            };\n        }\n\n        return {\n            from: {translateY: 150},\n            to: {translateY: 0},\n            config: {\n                bounce: 0.8,\n            },\n        };\n    }, [popupOpen]);\n\n    const openPopup = () => {\n        setPopupOpen(true);\n    };\n\n    const closePopup = () => {\n        setPopupOpen(false);\n    };\n\n    return (\n        <div id='messenger_popup'>\n            {/* @ts-expect-error we can ignore \"Type instantiation is excessively deep and possibly infinite\" */}\n            <animated.div style={popupBtnAnimStyles}>\n                <button\n                    id='messenger_popup_button'\n                    onClick={() => openPopup()}\n                >\n                    <img src={messengerIcon}/>\n                </button>\n            </animated.div>\n            {popupOpen && <Messenger onClose={closePopup}/>}\n        </div>\n    );\n};\n\nexport default MessengerPopup;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {HTMLAttributes} from 'react';\nimport React, {useRef} from 'react';\n\nimport {DEFAULT_LHS_WIDTH, CssVarKeyForResizable, ResizeDirection} from '../constants';\nimport ResizableDivider from '../resizable_divider';\n\ninterface Props extends HTMLAttributes<'div'> {\n    children: React.ReactNode;\n}\n\nfunction ResizableLhs({\n    children,\n    id,\n    className,\n}: Props) {\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    return (\n        <div\n            id={id}\n            className={className}\n            ref={containerRef}\n        >\n            {children}\n            <ResizableDivider\n                name={'lhsResizeHandle'}\n                globalCssVar={CssVarKeyForResizable.LHS}\n                defaultWidth={DEFAULT_LHS_WIDTH}\n                dir={ResizeDirection.LEFT}\n                containerRef={containerRef}\n            />\n        </div>\n    );\n}\n\nexport default ResizableLhs;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {lazy} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport styled from 'styled-components';\n\nimport Heading from '@mattermost/compass-components/components/heading'; // eslint-disable-line no-restricted-imports\nimport Flex from '@mattermost/compass-components/utilities/layout/Flex'; // eslint-disable-line no-restricted-imports\n\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport CompassThemeProvider from 'components/compass_theme_provider/compass_theme_provider';\nimport WithTooltip from 'components/with_tooltip';\n\nimport type {GlobalState} from 'types/store';\n\nimport {openModal} from '../../../packages/mattermost-redux/src/actions/modalActions';\nimport layerIcon from '../../browse_apps/layers-app-icon.svg';\n\nconst InternetBrowserLink = makeAsyncComponent(\n    'InternetBrowserLink',\n    lazy(() => import('components/internet_browser/internet_browser_link')),\n);\n\ntype SidebarHeaderContainerProps = {\n    id?: string;\n};\n\ntype SidebarHeaderProps = Record<string, unknown>;\n\nconst SidebarHeaderContainer = styled(Flex).attrs(() => ({\n    element: 'header',\n    row: true,\n    justify: 'space-between',\n    alignment: 'center',\n}))<SidebarHeaderContainerProps>`\n    height: 55px;\n    padding: 0 16px;\n    gap: 8px;\n\n    .dropdown-menu {\n        position: absolute;\n        transform: translate(0, 0);\n        margin-left: 0;\n        min-width: 210px;\n    }\n\n    #SidebarContainer & .AddChannelDropdown_dropdownButton {\n        border-radius: 16px;\n        font-size: 18px;\n    }\n`;\n\nconst SidebarHeading = styled(Heading).attrs(() => ({\n    element: 'h1',\n    margin: 'none',\n    size: 200,\n}))<SidebarHeaderProps>`\n    color: var(--sidebar-text);\n    cursor: pointer;\n    display: flex;\n\n    .title {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        display: inline-block;\n    }\n\n    .icon-chevron-down {\n        margin-left: -3px;\n        margin-right: -1px;\n    }\n\n    #SidebarContainer & {\n        font-family: Metropolis, sans-serif;\n    }\n`;\n\nexport type Props = {\n    showNewChannelModal: () => void;\n    showMoreChannelsModal: () => void;\n    showCreateUserGroupModal: () => void;\n    invitePeopleModal: () => void;\n    showCreateCategoryModal: () => void;\n    canCreateChannel: boolean;\n    canJoinPublicChannel: boolean;\n    handleOpenDirectMessagesModal: (e: Event) => void;\n    unreadFilterEnabled: boolean;\n    userGroupsEnabled: boolean;\n    canCreateCustomGroups: boolean;\n};\n\nconst SidebarHeader = (_: Props) => {\n    const dispatch = useDispatch();\n    const currentTeam = useSelector((state: GlobalState) =>\n        getCurrentTeam(state),\n    );\n    const currentUser = useSelector(\n        (state: GlobalState) =>\n            state.entities.users.profiles[state.entities.users.currentUserId],\n    );\n\n    const theme = useSelector(getTheme);\n\n    if (!currentTeam) {\n        return null;\n    }\n\n    return (\n        <CompassThemeProvider theme={theme}>\n            <SidebarHeaderContainer id={'sidebar-header-container'}>\n                <WithTooltip\n                    id='team-name__tooltip'\n                    title={\n                        currentTeam.description ? currentTeam.description : currentTeam.display_name\n                    }\n                    placement='bottom'\n                >\n                    <>\n                        <SidebarHeading>\n                            <button className='style--none sidebar-header'>\n                                <span className='title'>\n                                    {' '}\n                                    {`${currentUser.username}'s Workspace`}\n                                </span>\n                            </button>\n                        </SidebarHeading>\n                        <div\n                            style={{\n                                display: 'flex',\n                                justifyContent: 'center',\n                                alignItems: 'center',\n                                gap: '8px',\n                            }}\n                        >\n                            <InternetBrowserLink/>\n                            <img\n                                style={{\n                                    height: '18px',\n                                    width: '18px',\n                                    cursor: 'pointer',\n                                }}\n                                onClick={() => dispatch(openModal())}\n                                src={layerIcon}\n                                alt='layers-app-icon'\n                            />\n                        </div>\n                    </>\n                </WithTooltip>\n            </SidebarHeaderContainer>\n        </CompassThemeProvider>\n    );\n};\n\nexport default SidebarHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport SidebarHeader from './sidebar_header';\nexport default SidebarHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport NoResultsIndicator from 'components/no_results_indicator/no_results_indicator';\nimport {NoResultsVariant} from 'components/no_results_indicator/types';\nimport SuggestionBox from 'components/suggestion/suggestion_box';\nimport type SuggestionBoxComponent from 'components/suggestion/suggestion_box/suggestion_box';\nimport SuggestionList from 'components/suggestion/suggestion_list';\nimport SwitchChannelProvider from 'components/suggestion/switch_channel_provider';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants, {RHSStates} from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\n\nimport type {RhsState} from 'types/store/rhs';\n\nconst CHANNEL_MODE = 'channel';\n\ntype ProviderSuggestions = {\n    matchedPretext: any;\n    terms: string[];\n    items: any[];\n    component: React.ReactNode;\n}\n\nexport type Props = {\n\n    /**\n     * The function called to immediately hide the modal\n     */\n    onExited: () => void;\n\n    isMobileView: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n\n    actions: {\n        joinChannelById: (channelId: string) => Promise<ActionResult>;\n        switchToChannel: (channel: Channel) => Promise<ActionResult>;\n        closeRightHandSide: () => void;\n    };\n}\n\ntype State = {\n    text: string;\n    mode: string|null;\n    hasSuggestions: boolean;\n    shouldShowLoadingSpinner: boolean;\n    pretext: string;\n}\n\nexport default class QuickSwitchModal extends React.PureComponent<Props, State> {\n    private channelProviders: SwitchChannelProvider[];\n    private switchBox: SuggestionBoxComponent|null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.channelProviders = [new SwitchChannelProvider()];\n\n        this.switchBox = null;\n\n        this.state = {\n            text: '',\n            mode: CHANNEL_MODE,\n            hasSuggestions: true,\n            shouldShowLoadingSpinner: true,\n            pretext: '',\n        };\n    }\n\n    private focusTextbox = (): void => {\n        if (this.switchBox === null) {\n            return;\n        }\n\n        const textbox = this.switchBox.getTextbox();\n        if (document.activeElement !== textbox) {\n            textbox.focus();\n            Utils.placeCaretAtEnd(textbox);\n        }\n    };\n\n    private setSwitchBoxRef = (input: SuggestionBoxComponent): void => {\n        this.switchBox = input;\n        this.focusTextbox();\n    };\n\n    private hideOnSelect = (): void => {\n        this.focusPostTextbox();\n        this.setState({\n            text: '',\n        });\n        this.props.onExited();\n    };\n\n    private focusPostTextbox = (): void => {\n        if (!UserAgent.isMobile()) {\n            setTimeout(() => {\n                const textbox = document.querySelector('#post_textbox') as HTMLElement;\n                if (textbox) {\n                    textbox.focus();\n                }\n            });\n        }\n    };\n\n    private hideOnCancel = () => {\n        this.props.onExited?.();\n        setTimeout(() => {\n            const modalButton = document.querySelector('.SidebarChannelNavigator_jumpToButton') as HTMLElement;\n            if (modalButton) {\n                modalButton.focus();\n            }\n        });\n    };\n\n    private onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({text: e.target.value, shouldShowLoadingSpinner: true});\n    };\n\n    public handleSubmit = async (selected?: any): Promise<void> => {\n        if (!selected) {\n            return;\n        }\n\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n\n        if (this.state.mode === CHANNEL_MODE) {\n            const {joinChannelById, switchToChannel} = this.props.actions;\n            const selectedChannel = selected.channel;\n\n            if (selected.type === Constants.MENTION_MORE_CHANNELS && selectedChannel.type === Constants.OPEN_CHANNEL) {\n                await joinChannelById(selectedChannel.id);\n            }\n            switchToChannel(selectedChannel).then((result: ActionResult) => {\n                if ('data' in result) {\n                    this.hideOnSelect();\n                }\n            });\n        } else {\n            getHistory().push('/' + selected.name);\n            this.hideOnSelect();\n        }\n    };\n\n    private handleSuggestionsReceived = (suggestions: ProviderSuggestions): void => {\n        const loadingPropPresent = suggestions.items.some((item: any) => item.loading);\n        this.setState({\n            shouldShowLoadingSpinner: loadingPropPresent,\n            pretext: suggestions.matchedPretext,\n            hasSuggestions: suggestions.items.length > 0,\n        });\n    };\n\n    public render = (): JSX.Element => {\n        const providers: SwitchChannelProvider[] = this.channelProviders;\n\n        const header = (\n            <h1 id='quickSwitchHeader'>\n                <FormattedMessage\n                    id='quick_switch_modal.switchChannels'\n                    defaultMessage='Find Channels'\n                />\n            </h1>\n        );\n\n        let help;\n        if (this.props.isMobileView) {\n            help = (\n                <FormattedMarkdownMessage\n                    id='quick_switch_modal.help_mobile'\n                    defaultMessage='Type to find a channel.'\n                />\n            );\n        } else {\n            help = (\n                <FormattedMarkdownMessage\n                    id='quick_switch_modal.help_no_team'\n                    defaultMessage='Type to find a channel. Use **UP/DOWN** to browse, **ENTER** to select, **ESC** to dismiss.'\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal channel-switcher'\n                show={true}\n                onHide={this.hideOnCancel}\n                enforceFocus={false}\n                restoreFocus={false}\n                role='dialog'\n                aria-labelledby='quickSwitchHeader'\n                aria-describedby='quickSwitchHeaderWithHint'\n                animation={false}\n            >\n                <Modal.Header\n                    className='modal-header'\n                    id='quickSwitchModalLabel'\n                    closeButton={true}\n                >\n                    <div\n                        className='channel-switcher__header'\n                        id='quickSwitchHeaderWithHint'\n                    >\n                        {header}\n                        <div\n                            className='channel-switcher__hint'\n                            id='quickSwitchHint'\n                        >\n                            {help}\n                        </div>\n                    </div>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='channel-switcher__suggestion-box'>\n                        <i className='icon icon-magnify icon-16'/>\n                        <SuggestionBox\n                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                            // @ts-ignore\n                            ref={this.setSwitchBoxRef}\n                            id='quickSwitchInput'\n                            aria-label={Utils.localizeMessage('quick_switch_modal.input', 'quick switch input')}\n                            className='form-control focused'\n                            onChange={this.onChange}\n                            value={this.state.text}\n                            onItemSelected={this.handleSubmit}\n                            listComponent={SuggestionList}\n                            listPosition='bottom'\n                            maxLength='64'\n                            providers={providers}\n                            completeOnTab={false}\n                            spellCheck='false'\n                            delayInputUpdate={true}\n                            openWhenEmpty={true}\n                            onSuggestionsReceived={this.handleSuggestionsReceived}\n                            forceSuggestionsWhenBlur={true}\n                            renderDividers={[Constants.MENTION_UNREAD, Constants.MENTION_RECENT_CHANNELS]}\n                            shouldSearchCompleteText={true}\n                        />\n                        {!this.state.shouldShowLoadingSpinner && !this.state.hasSuggestions && this.state.text &&\n                            <NoResultsIndicator\n                                variant={NoResultsVariant.Search}\n                                titleValues={{channelName: `${this.state.pretext}`}}\n                            />\n                        }\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {joinChannelById, switchToChannel} from 'actions/views/channel';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport QuickSwitchModal from './quick_switch_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n        rhsState: getRhsState(state),\n        rhsOpen: getIsRhsOpen(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            joinChannelById,\n            switchToChannel,\n            closeRightHandSide,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuickSwitchModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {defineMessages, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport WithTooltip from 'components/with_tooltip';\nimport {ShortcutKeys} from 'components/with_tooltip/shortcut';\n\nimport Constants from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\n\nconst messages = defineMessages({\n    disableTooltip: {\n        id: 'sidebar_left.channel_filter.showAllChannels',\n        defaultMessage: 'Show all channels',\n    },\n    enableTooltip: {\n        id: 'sidebar_left.channel_filter.filterByUnread',\n        defaultMessage: 'Filter by unread',\n    },\n});\n\nconst shortcut = {\n    default: [ShortcutKeys.ctrl, ShortcutKeys.shift, 'U'],\n    mac: [ShortcutKeys.cmd, ShortcutKeys.shift, 'U'],\n};\n\ntype Props = {\n    intl: IntlShape;\n    hasMultipleTeams: boolean;\n    unreadFilterEnabled: boolean;\n    actions: {\n        setUnreadFilterEnabled: (enabled: boolean) => void;\n    };\n};\n\nexport class ChannelFilter extends React.PureComponent<Props> {\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleUnreadFilterKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleUnreadFilterKeyPress);\n    }\n\n    handleUnreadFilterClick = (e?: React.MouseEvent) => {\n        e?.preventDefault();\n        e?.stopPropagation();\n        this.toggleUnreadFilter();\n    };\n\n    handleUnreadFilterKeyPress = (e: KeyboardEvent) => {\n        if (Keyboard.cmdOrCtrlPressed(e) && e.shiftKey && Keyboard.isKeyPressed(e, Constants.KeyCodes.U)) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.toggleUnreadFilter();\n        }\n    };\n\n    toggleUnreadFilter = () => {\n        const {unreadFilterEnabled} = this.props;\n\n        if (unreadFilterEnabled) {\n            trackEvent('ui', 'ui_sidebar_unread_filter_disabled');\n        } else {\n            trackEvent('ui', 'ui_sidebar_unread_filter_enabled');\n        }\n\n        this.props.actions.setUnreadFilterEnabled(!unreadFilterEnabled);\n    };\n\n    render() {\n        const {intl, unreadFilterEnabled, hasMultipleTeams} = this.props;\n\n        const unreadsAriaLabel = intl.formatMessage({id: 'sidebar_left.channel_filter.filterUnreadAria', defaultMessage: 'unreads filter'});\n\n        return (\n            <div className='SidebarFilters'>\n                <WithTooltip\n                    id='channel-filter-tooltip'\n                    title={unreadFilterEnabled ? messages.disableTooltip : messages.enableTooltip}\n                    shortcut={shortcut}\n                    placement={hasMultipleTeams ? 'top' : 'right'}\n                >\n                    <a\n                        href='#'\n                        className={classNames('SidebarFilters_filterButton', {\n                            active: unreadFilterEnabled,\n                        })}\n                        onClick={this.toggleUnreadFilter}\n                        aria-label={unreadsAriaLabel}\n                    >\n                        <i className='icon icon-filter-variant'/>\n                    </a>\n                </WithTooltip>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(ChannelFilter);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getMyTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setUnreadFilterEnabled} from 'actions/views/channel_sidebar';\nimport {isUnreadFilterEnabled} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelFilter from './channel_filter';\n\nfunction mapStateToProps(state: GlobalState) {\n    const teams = getMyTeams(state);\n\n    return {\n        hasMultipleTeams: teams && teams.length > 1,\n        unreadFilterEnabled: isUnreadFilterEnabled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            setUnreadFilterEnabled,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelFilter);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport QuickSwitchModal from 'components/quick_switch_modal';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport * as UserAgent from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\n\nimport ChannelFilter from '../channel_filter';\n\nexport type Props = {\n    showUnreadsCategory: boolean;\n    isQuickSwitcherOpen: boolean;\n    actions: {\n        openModal: <P>(modalData: ModalData<P>) => void;\n        closeModal: (modalId: string) => void;\n    };\n};\n\nexport default class ChannelNavigator extends React.PureComponent<Props> {\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleShortcut);\n        document.addEventListener('keydown', this.handleQuickSwitchKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n        document.removeEventListener('keydown', this.handleQuickSwitchKeyPress);\n    }\n\n    openQuickSwitcher = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n\n        trackEvent('ui', 'ui_sidebar_open_channel_switcher_v2');\n\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.QUICK_SWITCH,\n            dialogType: QuickSwitchModal,\n        });\n    };\n\n    handleShortcut = (e: KeyboardEvent) => {\n        const {actions: {closeModal}} = this.props;\n\n        if (Keyboard.cmdOrCtrlPressed(e) && e.shiftKey) {\n            if (Keyboard.isKeyPressed(e, Constants.KeyCodes.M)) {\n                e.preventDefault();\n                closeModal(ModalIdentifiers.QUICK_SWITCH);\n            }\n            if (Keyboard.isKeyPressed(e, Constants.KeyCodes.L)) {\n                // just close the modal if it's open, but let someone else handle the shortcut\n                closeModal(ModalIdentifiers.QUICK_SWITCH);\n            }\n        }\n    };\n\n    handleQuickSwitchKeyPress = (e: KeyboardEvent) => {\n        if (Keyboard.cmdOrCtrlPressed(e) && !e.shiftKey && Keyboard.isKeyPressed(e, Constants.KeyCodes.K)) {\n            if (!e.altKey && !Utils.isTextSelectedInPostOrReply(e)) {\n                e.preventDefault();\n                this.toggleQuickSwitchModal();\n            }\n        }\n    };\n\n    toggleQuickSwitchModal = () => {\n        const {isQuickSwitcherOpen, actions: {openModal, closeModal}} = this.props;\n\n        if (isQuickSwitcherOpen) {\n            closeModal(ModalIdentifiers.QUICK_SWITCH);\n        } else {\n            openModal({\n                modalId: ModalIdentifiers.QUICK_SWITCH,\n                dialogType: QuickSwitchModal,\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className={'SidebarChannelNavigator webapp'}>\n                {!this.props.showUnreadsCategory && <ChannelFilter/>}\n                <button\n                    className={'SidebarChannelNavigator_jumpToButton'}\n                    onClick={this.openQuickSwitcher}\n                    aria-label={Utils.localizeMessage('sidebar_left.channel_navigator.channelSwitcherLabel', 'Channel Switcher')}\n                    aria-haspopup='dialog'\n                    data-testid='SidebarChannelNavigatorButton'\n                >\n                    <i className='icon icon-magnify'/>\n                    <span>{'Search'}</span>\n                    <div className={'SidebarChannelNavigator_shortcutText'}>\n                        {`${UserAgent.isMac() ? '⌘' : 'Ctrl+'}K`}\n                    </div>\n                </button>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {shouldShowUnreadsCategory} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal, closeModal} from 'actions/views/modals';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelNavigator from './channel_navigator';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        showUnreadsCategory: shouldShowUnreadsCategory(state),\n        isQuickSwitcherOpen: isModalOpen(state, ModalIdentifiers.QUICK_SWITCH),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            closeModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelNavigator);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport iconlayer from './layers-app-icon.svg';\n\nimport {\n    addTab,\n    removeTab,\n    setActiveTab,\n    setActiveApp,\n} from '../../packages/mattermost-redux/src/actions/tabAction';\nimport './app_tabs.scss';\n\ninterface Tab {\n    id: string;\n    title: string;\n    uniqueId: string; // Ensure you have uniqueId in the Tab interface\n}\n\ninterface AppState {\n    tabs: {\n        tabs: Tab[];\n        activeTab: string | null;\n        activeApp: string | null;\n    };\n}\n\nconst Tabs: React.FC = () => {\n    const dispatch = useDispatch();\n\n    const {tabs, activeTab, activeApp} = useSelector(\n        (state: AppState) => state.tabs,\n    );\n\n    const handleTabClick = (uniqueId: string, id: string) => {\n        dispatch(setActiveTab(uniqueId));\n        dispatch(setActiveApp(id));\n    };\n\n    const handleCloseTab = (uniqueId: string, e: React.MouseEvent) => {\n        e.stopPropagation(); // Prevent closing tab from triggering the tab click\n        dispatch(removeTab(uniqueId));\n    };\n\n    return (\n        <div className='tabs-container'>\n            {tabs.map((tab: Tab) => (\n                <div\n                    onClick={() => handleTabClick(tab.uniqueId, tab.id)} // Use uniqueId\n                    key={tab.uniqueId} // Use uniqueId as key\n                    className={`app-tab-wrap ${\n                        activeTab === tab.uniqueId ? 'active' : ''\n                    }`}\n                >\n                    <span className='app-heading-text'>\n                        <img\n                            src={iconlayer}\n                            alt='icon'\n                        />\n                        {`${tab.title} #${tab.uniqueId.slice(-2)}`} {/* Use uniqueId */}\n                    </span>\n                    <button\n                        className='app-close-tag'\n                        onClick={(e) => handleCloseTab(tab.uniqueId, e)} // Use uniqueId here too\n                    >\n                        {'x'}\n                    </button>\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default Tabs;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {FormattedMessage, defineMessages, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport '../category_modal.scss';\n\ntype Props = {\n    category: ChannelCategory;\n    onExited: () => void;\n    actions: {\n        deleteCategory: (categoryId: string) => void;\n    };\n};\n\nexport default function DeleteCategoryModal(props: Props) {\n    const intl = useIntl();\n\n    const handleConfirm = useCallback(() => {\n        props.actions.deleteCategory(props.category.id);\n    }, [props.actions.deleteCategory, props.category]);\n\n    return (\n        <GenericModal\n            compassDesign={true}\n            ariaLabel={intl.formatMessage({id: 'delete_category_modal.deleteCategory', defaultMessage: 'Delete this category?'})}\n            onExited={props.onExited}\n            modalHeaderText={(\n                <FormattedMessage\n                    id='delete_category_modal.deleteCategory'\n                    defaultMessage='Delete this category?'\n                />\n            )}\n            handleCancel={props.onExited}\n            handleConfirm={handleConfirm}\n            confirmButtonText={(\n                <FormattedMessage\n                    id='delete_category_modal.delete'\n                    defaultMessage='Delete'\n                />\n            )}\n            confirmButtonClassName={'delete'}\n        >\n            <span className='delete-category__helpText'>\n                <FormattedMarkdownMessage\n                    id='delete_category_modal.helpText'\n                    defaultMessage=\"Channels in **{category_name}** will move back to the Channels and Direct messages categories. You're not removed from any channels.\"\n                    values={{\n                        category_name: props.category.display_name,\n                    }}\n                />\n            </span>\n        </GenericModal>\n    );\n}\n\n// TODO MM-52680 These strings are properly defined in @mattermost/components, but the i18n tooling currently can't\n// find them there, so we've had to redefine them here\ndefineMessages({\n    cancel: {\n        id: 'generic_modal.cancel',\n        defaultMessage: 'Cancel',\n    },\n    confirm: {\n        id: 'generic_modal.confirm',\n        defaultMessage: 'Confirm',\n    },\n    paginationCount: {\n        id: 'footer_pagination.count',\n        defaultMessage: 'Showing {startCount, number}-{endCount, number} of {total, number}',\n    },\n    paginationNext: {\n        id: 'footer_pagination.next',\n        defaultMessage: 'Next',\n    },\n    paginationPrev: {\n        id: 'footer_pagination.prev',\n        defaultMessage: 'Previous',\n    },\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {deleteCategory} from 'mattermost-redux/actions/channel_categories';\n\nimport DeleteCategoryModal from './delete_category_modal';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteCategory,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(DeleteCategoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, useMemo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {\n    BellOutlineIcon,\n    TrashCanOutlineIcon,\n    PencilOutlineIcon,\n    FormatListBulletedIcon,\n    SortAlphabeticalAscendingIcon,\n    ClockOutlineIcon,\n    ChevronRightIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport {CategorySorting} from '@mattermost/types/channel_categories';\n\nimport {setCategoryMuted, setCategorySorting} from 'mattermost-redux/actions/channel_categories';\nimport {readMultipleChannels} from 'mattermost-redux/actions/channels';\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {shouldShowUnreadsCategory} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {openModal} from 'actions/views/modals';\nimport {makeGetUnreadIdsForCategory} from 'selectors/views/channel_sidebar';\n\nimport DeleteCategoryModal from 'components/delete_category_modal';\nimport EditCategoryModal from 'components/edit_category_modal';\nimport * as Menu from 'components/menu';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport CreateNewCategoryMenuItem from './create_new_category_menu_item';\nimport MarkAsReadMenuItem from './mark_as_read_menu_item';\nimport SidebarCategoryGenericMenu from './sidebar_category_generic_menu';\n\ntype Props = {\n    category: ChannelCategory;\n};\n\nconst SidebarCategoryMenu = ({\n    category,\n}: Props) => {\n    const dispatch = useDispatch();\n    const showUnreadsCategory = useSelector(shouldShowUnreadsCategory);\n    const getUnreadsIdsForCategory = useMemo(makeGetUnreadIdsForCategory, [category]);\n    const unreadsIds = useSelector((state: GlobalState) => getUnreadsIdsForCategory(state, category));\n\n    const {formatMessage} = useIntl();\n\n    let muteUnmuteCategoryMenuItem: JSX.Element | null = null;\n    if (category.type !== CategoryTypes.DIRECT_MESSAGES) {\n        function toggleCategoryMute() {\n            dispatch(setCategoryMuted(category.id, !category.muted));\n        }\n\n        muteUnmuteCategoryMenuItem = (\n            <Menu.Item\n                id={`mute-${category.id}`}\n                onClick={toggleCategoryMute}\n                leadingElement={<BellOutlineIcon size={18}/>}\n                labels={\n                    category.muted ? (\n                        <FormattedMessage\n                            id='sidebar_left.sidebar_category_menu.unmuteCategory'\n                            defaultMessage='Unmute Category'\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='sidebar_left.sidebar_category_menu.muteCategory'\n                            defaultMessage='Mute Category'\n                        />\n                    )\n                }\n            />\n        );\n    }\n\n    let deleteCategoryMenuItem: JSX.Element | null = null;\n    let renameCategoryMenuItem: JSX.Element | null = null;\n    if (category.type === CategoryTypes.CUSTOM) {\n        function handleDeleteCategory() {\n            dispatch(openModal({\n                modalId: ModalIdentifiers.DELETE_CATEGORY,\n                dialogType: DeleteCategoryModal,\n                dialogProps: {\n                    category,\n                },\n            }));\n        }\n\n        deleteCategoryMenuItem = (\n            <Menu.Item\n                id={`delete-${category.id}`}\n                isDestructive={true}\n                aria-haspopup={true}\n                onClick={handleDeleteCategory}\n                leadingElement={<TrashCanOutlineIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_category_menu.deleteCategory'\n                        defaultMessage='Delete Category'\n                    />\n                )}\n            />\n        );\n\n        function handleRenameCategory() {\n            dispatch(openModal({\n                modalId: ModalIdentifiers.EDIT_CATEGORY,\n                dialogType: EditCategoryModal,\n                dialogProps: {\n                    categoryId: category.id,\n                    initialCategoryName: category.display_name,\n                },\n            }));\n        }\n\n        renameCategoryMenuItem = (\n            <Menu.Item\n                id={`rename-${category.id}`}\n                onClick={handleRenameCategory}\n                aria-haspopup={true}\n                leadingElement={<PencilOutlineIcon size={18}/>}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_category_menu.renameCategory'\n                        defaultMessage='Rename Category'\n                    />\n                )}\n            />\n        );\n    }\n\n    function handleSortChannels(sorting: CategorySorting) {\n        dispatch(setCategorySorting(category.id, sorting));\n        trackEvent('ui', `ui_sidebar_sort_dm_${sorting}`);\n    }\n\n    let sortChannelsSelectedValue = (\n        <FormattedMessage\n            id='sidebar.sortedManually'\n            defaultMessage='Manually'\n        />\n    );\n    let sortChannelsIcon = <FormatListBulletedIcon size={18}/>;\n    if (category.sorting === CategorySorting.Alphabetical) {\n        sortChannelsSelectedValue = (\n            <FormattedMessage\n                id='user.settings.sidebar.sortAlpha'\n                defaultMessage='Alphabetically'\n            />\n        );\n        sortChannelsIcon = <SortAlphabeticalAscendingIcon size={18}/>;\n    } else if (category.sorting === CategorySorting.Recency) {\n        sortChannelsSelectedValue = (\n            <FormattedMessage\n                id='user.settings.sidebar.recent'\n                defaultMessage='Recent Activity'\n            />\n        );\n        sortChannelsIcon = <ClockOutlineIcon size={18}/>;\n    }\n\n    const sortChannelsMenuItem = (\n        <Menu.SubMenu\n            id={`sortChannels-${category.id}`}\n            leadingElement={sortChannelsIcon}\n            labels={(\n                <FormattedMessage\n                    id='sidebar.sort'\n                    defaultMessage='Sort'\n                />\n            )}\n            trailingElements={(\n                <>\n                    {sortChannelsSelectedValue}\n                    <ChevronRightIcon size={16}/>\n                </>\n            )}\n            menuId={`sortChannels-${category.id}-menu`}\n            menuAriaLabel={formatMessage({id: 'sidebar_left.sidebar_category_menu.sort.dropdownAriaLabel', defaultMessage: 'Sort submenu'})}\n        >\n            <Menu.Item\n                id={`sortAplhabetical-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='user.settings.sidebar.sortAlpha'\n                        defaultMessage='Alphabetically'\n                    />\n                )}\n                onClick={() => handleSortChannels(CategorySorting.Alphabetical)}\n            />\n            <Menu.Item\n                id={`sortByMostRecent-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar.sortedByRecencyLabel'\n                        defaultMessage='Recent Activity'\n                    />\n                )}\n                onClick={() => handleSortChannels(CategorySorting.Recency)}\n            />\n            <Menu.Item\n                id={`sortManual-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar.sortedManually'\n                        defaultMessage='Manually'\n                    />\n                )}\n                onClick={() => handleSortChannels(CategorySorting.Manual)}\n            />\n        </Menu.SubMenu>\n    );\n\n    const handleViewCategory = useCallback(() => {\n        dispatch(readMultipleChannels(unreadsIds));\n        trackEvent('ui', 'ui_sidebar_category_menu_viewCategory');\n    }, [dispatch, unreadsIds]);\n\n    const markAsReadMenuItem = showUnreadsCategory ?\n        null :\n        (\n            <MarkAsReadMenuItem\n                id={category.id}\n                handleViewCategory={handleViewCategory}\n                numChannels={unreadsIds.length}\n            />\n        );\n\n    return (\n        <SidebarCategoryGenericMenu id={category.id}>\n            {markAsReadMenuItem}\n            {markAsReadMenuItem && <Menu.Separator/>}\n            {muteUnmuteCategoryMenuItem}\n            {renameCategoryMenuItem}\n            {deleteCategoryMenuItem}\n            <Menu.Separator/>\n            {sortChannelsMenuItem}\n            <Menu.Separator/>\n            <CreateNewCategoryMenuItem id={category.id}/>\n        </SidebarCategoryGenericMenu>\n    );\n};\n\nexport default memo(SidebarCategoryMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo, useState} from 'react';\nimport type {MouseEvent, KeyboardEvent} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {\n    SortAlphabeticalAscendingIcon,\n    ClockOutlineIcon,\n    AccountMultipleOutlineIcon,\n    AccountPlusOutlineIcon,\n    DotsVerticalIcon,\n    ChevronRightIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport {CategorySorting} from '@mattermost/types/channel_categories';\n\nimport {setCategorySorting} from 'mattermost-redux/actions/channel_categories';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getVisibleDmGmLimit} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport * as Menu from 'components/menu';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    category: ChannelCategory;\n    handleOpenDirectMessagesModal: (e: MouseEvent<HTMLLIElement> | KeyboardEvent<HTMLLIElement>) => void;\n};\n\nconst SidebarCategorySortingMenu = ({\n    category,\n    handleOpenDirectMessagesModal,\n}: Props) => {\n    const [isMenuOpen, setIsMenuOpen] = useState(false);\n    const {formatMessage} = useIntl();\n\n    const dispatch = useDispatch();\n    const selectedDmNumber = useSelector(getVisibleDmGmLimit);\n    const currentUserId = useSelector(getCurrentUserId);\n\n    function handleSortDirectMessages(sorting: CategorySorting) {\n        dispatch(setCategorySorting(category.id, sorting));\n        trackEvent('ui', `ui_sidebar_sort_dm_${sorting}`);\n    }\n\n    let sortDirectMessagesIcon = <ClockOutlineIcon size={18}/>;\n    let sortDirectMessagesSelectedValue = (\n        <FormattedMessage\n            id='user.settings.sidebar.recent'\n            defaultMessage='Recent Activity'\n        />\n    );\n    if (category.sorting === CategorySorting.Alphabetical) {\n        sortDirectMessagesSelectedValue = (\n            <FormattedMessage\n                id='user.settings.sidebar.sortAlpha'\n                defaultMessage='Alphabetically'\n            />\n        );\n        sortDirectMessagesIcon = <SortAlphabeticalAscendingIcon size={18}/>;\n    }\n\n    const sortDirectMessagesMenuItem = (\n        <Menu.SubMenu\n            id={`sortDirectMessages-${category.id}`}\n            leadingElement={sortDirectMessagesIcon}\n            labels={(\n                <FormattedMessage\n                    id='sidebar.sort'\n                    defaultMessage='Sort'\n                />\n            )}\n            trailingElements={\n                <>\n                    {sortDirectMessagesSelectedValue}\n                    <ChevronRightIcon size={16}/>\n                </>\n            }\n            menuId={`sortDirectMessages-${category.id}-menu`}\n        >\n            <Menu.Item\n                id={`sortAlphabetical-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='user.settings.sidebar.sortAlpha'\n                        defaultMessage='Alphabetically'\n                    />\n                )}\n                onClick={() => handleSortDirectMessages(CategorySorting.Alphabetical)}\n            />\n            <Menu.Item\n                id={`sortByMostRecent-${category.id}`}\n                labels={(\n                    <FormattedMessage\n                        id='sidebar.sortedByRecencyLabel'\n                        defaultMessage='Recent Activity'\n                    />\n                )}\n                onClick={() => handleSortDirectMessages(CategorySorting.Recency)}\n            />\n        </Menu.SubMenu>\n\n    );\n\n    function handlelimitVisibleDMsGMs(number: number) {\n        dispatch(savePreferences(currentUserId, [{\n            user_id: currentUserId,\n            category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.LIMIT_VISIBLE_DMS_GMS,\n            value: number.toString(),\n        }]));\n    }\n\n    let showMessagesCountSelectedValue = <span>{selectedDmNumber}</span>;\n    if (selectedDmNumber === 10000) {\n        showMessagesCountSelectedValue = (\n            <FormattedMessage\n                id='channel_notifications.levels.all'\n                defaultMessage='All'\n            />\n        );\n    }\n\n    const showMessagesCountMenuItem = (\n        <Menu.SubMenu\n            id={`showMessagesCount-${category.id}`}\n            leadingElement={<AccountMultipleOutlineIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='sidebar.show'\n                    defaultMessage='Show'\n                />\n            )}\n            trailingElements={(\n                <>\n                    {showMessagesCountSelectedValue}\n                    <ChevronRightIcon size={16}/>\n                </>\n            )}\n            menuId={`showMessagesCount-${category.id}-menu`}\n        >\n            {Constants.DM_AND_GM_SHOW_COUNTS.map((dmGmShowCount) => (\n                <Menu.Item\n                    id={`showDmCount-${category.id}-${dmGmShowCount}`}\n                    key={`showDmCount-${category.id}-${dmGmShowCount}`}\n                    labels={<span>{dmGmShowCount}</span>}\n                    onClick={() => handlelimitVisibleDMsGMs(dmGmShowCount)}\n                />\n            ))}\n        </Menu.SubMenu>\n\n    );\n\n    const openDirectMessageMenuItem = (\n        <Menu.Item\n            id={`openDirectMessage-${category.id}`}\n            onClick={handleOpenDirectMessagesModal}\n            leadingElement={<AccountPlusOutlineIcon size={18}/>}\n            labels={(\n                <FormattedMessage\n                    id='sidebar.openDirectMessage'\n                    defaultMessage='Open a direct message'\n                />\n            )}\n        />\n    );\n\n    function handleMenuToggle(isOpen: boolean) {\n        setIsMenuOpen(isOpen);\n    }\n\n    return (\n        <div\n            className={classNames(\n                'SidebarMenu',\n                'MenuWrapper',\n                {menuOpen: isMenuOpen},\n                {'MenuWrapper--open': isMenuOpen},\n            )}\n        >\n            <Menu.Container\n                menuButton={{\n                    id: `SidebarCategorySortingMenu-Button-${category.id}`,\n                    'aria-label': formatMessage({id: 'sidebar_left.sidebar_category_menu.editCategory', defaultMessage: 'Category options'}),\n                    class: 'SidebarMenu_menuButton sortingMenu',\n                    children: <DotsVerticalIcon size={16}/>,\n                }}\n                menuButtonTooltip={{\n                    id: `SidebarCategorySortingMenu-ButtonTooltip-${category.id}`,\n                    text: formatMessage({id: 'sidebar_left.sidebar_category_menu.editCategory', defaultMessage: 'Category options'}),\n                    class: 'hidden-xs',\n                }}\n                menu={{\n                    id: `SidebarCategorySortingMenu-MenuList-${category.id}`,\n                    'aria-label': formatMessage({id: 'sidebar_left.sidebar_category_menu.dropdownAriaLabel', defaultMessage: 'Edit category menu'}),\n                    onToggle: handleMenuToggle,\n                }}\n            >\n                {sortDirectMessagesMenuItem}\n                {showMessagesCountMenuItem}\n                <Menu.Separator/>\n                {openDirectMessageMenuItem}\n            </Menu.Container>\n        </div>\n    );\n};\n\nexport default memo(SidebarCategorySortingMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {GlobalState} from 'types/store';\n\nexport function isAddChannelDropdownOpen(state: GlobalState) {\n    return state.views.addChannelDropdown.isOpen;\n}\n\nexport function isAddChannelCtaDropdownOpen(state: GlobalState) {\n    return state.views.addChannelCtaDropdown.isOpen;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveICurrentChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {setAddChannelCtaDropdown} from 'actions/views/add_channel_dropdown';\nimport {openModal} from 'actions/views/modals';\nimport {isAddChannelCtaDropdownOpen} from 'selectors/views/add_channel_dropdown';\n\nimport BrowseChannels from 'components/browse_channels';\nimport NewChannelModal from 'components/new_channel_modal/new_channel_modal';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport {ModalIdentifiers, Preferences, Touched} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nconst AddChannelsCtaButton = (): JSX.Element | null => {\n    const dispatch = useDispatch();\n    const currentTeamId = useSelector(getCurrentTeamId);\n    const intl = useIntl();\n    const touchedAddChannelsCtaButton = useSelector((state: GlobalState) =>\n        getBool(state, Preferences.TOUCHED, Touched.ADD_CHANNELS_CTA),\n    );\n\n    const canCreatePublicChannel = useSelector((state: GlobalState) =>\n        haveICurrentChannelPermission(state, Permissions.CREATE_PUBLIC_CHANNEL),\n    );\n    const canCreatePrivateChannel = useSelector((state: GlobalState) =>\n        haveICurrentChannelPermission(state, Permissions.CREATE_PRIVATE_CHANNEL),\n    );\n    const canCreateChannel = canCreatePrivateChannel || canCreatePublicChannel;\n    const canJoinPublicChannel = useSelector((state: GlobalState) =>\n        haveICurrentChannelPermission(state, Permissions.JOIN_PUBLIC_CHANNELS),\n    );\n    const isAddChannelCtaOpen = useSelector(isAddChannelCtaDropdownOpen);\n    const currentUserId = useSelector(getCurrentUserId);\n    const openAddChannelsCtaOpen = useCallback(\n        (open: boolean) => {\n            dispatch(setAddChannelCtaDropdown(open));\n        },\n        [dispatch],\n    );\n\n    let buttonClass = 'SidebarChannelNavigator__addChannelsCtaLhsButton';\n\n    if (!touchedAddChannelsCtaButton) {\n        buttonClass +=\n            ' SidebarChannelNavigator__addChannelsCtaLhsButton--untouched';\n    }\n\n    if ((!canCreateChannel && !canJoinPublicChannel) || !currentTeamId) {\n        return null;\n    }\n\n    const showMoreChannelsModal = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.MORE_CHANNELS,\n                dialogType: BrowseChannels,\n            }),\n        );\n        trackEvent('ui', 'browse_channels_button_is_clicked');\n    };\n\n    const showNewChannelModal = () => {\n        dispatch(\n            openModal({\n                modalId: ModalIdentifiers.NEW_CHANNEL_MODAL,\n                dialogType: NewChannelModal,\n            }),\n        );\n        trackEvent('ui', 'create_new_channel_button_is_clicked');\n    };\n\n    const renderDropdownItems = () => {\n        let joinPublicChannel;\n        if (canJoinPublicChannel) {\n            joinPublicChannel = (\n                <Menu.ItemAction\n                    id='showMoreChannels'\n                    onClick={showMoreChannelsModal}\n                    icon={<i className='icon-globe'/>}\n                    text={intl.formatMessage({\n                        id: 'sidebar_left.add_channel_dropdown.browseChannels',\n                        defaultMessage: 'Browse channels',\n                    })}\n                />\n            );\n        }\n\n        let createChannel;\n        if (canCreateChannel) {\n            createChannel = (\n                <Menu.ItemAction\n                    id='showNewChannel'\n                    onClick={showNewChannelModal}\n                    icon={<i className='icon-plus'/>}\n                    text={intl.formatMessage({\n                        id: 'sidebar_left.add_channel_dropdown.createNewChannel',\n                        defaultMessage: 'Create new channel',\n                    })}\n                />\n            );\n        }\n\n        return (\n            <>\n                <Menu.Group>\n                    {createChannel}\n                    {joinPublicChannel}\n                </Menu.Group>\n            </>\n        );\n    };\n\n    const addChannelsButton = (btnCallback?: () => void) => {\n        const handleClick = () => btnCallback?.();\n        return (\n            <button\n                className={buttonClass}\n                id={'addChannelsCta'}\n                aria-label={intl.formatMessage({\n                    id: 'sidebar_left.add_channel_dropdown.dropdownAriaLabel',\n                    defaultMessage: 'Browse Apps Dropdown',\n                })}\n                onClick={handleClick}\n            >\n                <div\n                    aria-label={intl.formatMessage({\n                        id: 'sidebar_left.sidebar_channel_navigator.browseAppsCta',\n                        defaultMessage: 'Browse Apps',\n                    })}\n                >\n                    <i\n                        className='icon-plus-box'\n                        style={{\n                            marginLeft: '-1px',\n                        }}\n                    />\n                    <span>\n                        {intl.formatMessage({\n                            id: 'sidebar_left.browseAppsCta',\n                            defaultMessage: 'Browse Apps',\n                        })}\n                    </span>\n                </div>\n            </button>\n        );\n    };\n\n    const storePreferencesAndTrackEvent = () => {\n        trackEvent('ui', 'add_channels_cta_button_clicked');\n        if (!touchedAddChannelsCtaButton) {\n            dispatch(\n                savePreferences(currentUserId, [\n                    {\n                        category: Preferences.TOUCHED,\n                        user_id: currentUserId,\n                        name: Touched.ADD_CHANNELS_CTA,\n                        value: 'true',\n                    },\n                ]),\n            );\n        }\n    };\n\n    const trackOpen = (opened: boolean) => {\n        openAddChannelsCtaOpen(opened);\n        storePreferencesAndTrackEvent();\n    };\n\n    if (!canCreateChannel) {\n        const browseChannelsAction = () => {\n            showMoreChannelsModal();\n            storePreferencesAndTrackEvent();\n        };\n        return addChannelsButton(browseChannelsAction);\n    }\n\n    return (\n        <MenuWrapper\n            className='AddChannelsCtaDropdown'\n            onToggle={trackOpen}\n            open={isAddChannelCtaOpen}\n        >\n            {addChannelsButton()}\n            <Menu\n                id='AddChannelCtaDropdown'\n                ariaLabel={intl.formatMessage({\n                    id: 'sidebar_left.add_channel_cta_dropdown.dropdownAriaLabel',\n                    defaultMessage: 'Add Channels Dropdown',\n                })}\n            >\n                {renderDropdownItems()}\n            </Menu>\n        </MenuWrapper>\n    );\n};\n\nexport default AddChannelsCtaButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {MouseEvent, KeyboardEvent} from 'react';\nimport {Draggable, Droppable} from 'react-beautiful-dnd';\nimport {FormattedMessage, defineMessages} from 'react-intl';\nimport {connect} from 'react-redux';\n\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport {CategorySorting} from '@mattermost/types/channel_categories';\nimport type {PreferenceType} from '@mattermost/types/preferences';\n\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {localizeMessage} from 'mattermost-redux/utils/i18n_utils';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport Tabs from 'components/browse_apps/app_tabs';\nimport KeyboardShortcutSequence, {\n    KEYBOARD_SHORTCUTS,\n} from 'components/keyboard_shortcuts/keyboard_shortcuts_sequence';\nimport WithTooltip from 'components/with_tooltip';\n\nimport Constants, {\n    A11yCustomEventTypes,\n    DraggingStateTypes,\n    DraggingStates,\n} from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nimport type {DraggingState} from 'types/store';\n\nimport SidebarCategoryMenu from './sidebar_category_menu';\nimport SidebarCategorySortingMenu from './sidebar_category_sorting_menu';\n\nimport {openModal} from '../../../packages/mattermost-redux/src/actions/modalActions';\nimport AddChannelsCtaButton from '../add_channels_cta_button';\nimport {SidebarCategoryHeader} from '../sidebar_category_header';\nimport SidebarChannel from '../sidebar_channel';\n\ntype Props = {\n    category: ChannelCategory;\n    categoryIndex: number;\n    channelIds: string[];\n    setChannelRef: (channelId: string, ref: HTMLLIElement) => void;\n    handleOpenMoreDirectChannelsModal: (e: Event) => void;\n    isNewCategory: boolean;\n    draggingState: DraggingState;\n    currentUserId: string;\n    isAdmin: boolean;\n    actions: {\n        setCategoryCollapsed: (categoryId: string, collapsed: boolean) => void;\n        setCategorySorting: (\n            categoryId: string,\n            sorting: CategorySorting\n        ) => void;\n        savePreferences: (\n            userId: string,\n            preferences: PreferenceType[]\n        ) => void;\n    };\n    openModal: () => void;\n};\n\ntype State = {\n    isMenuOpen: boolean;\n};\n\nclass SidebarCategory extends React.PureComponent<Props, State> {\n    categoryTitleRef: React.RefObject<HTMLButtonElement>;\n    newDropBoxRef: React.RefObject<HTMLDivElement>;\n\n    a11yKeyDownRegistered: boolean;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.categoryTitleRef = React.createRef();\n        this.newDropBoxRef = React.createRef();\n\n        this.state = {\n            isMenuOpen: false,\n        };\n\n        this.a11yKeyDownRegistered = false;\n    }\n\n    handleOpenModal = () => {\n        this.props.openModal(); // Use the openModal prop\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (\n            this.props.category.collapsed !== prevProps.category.collapsed &&\n            this.newDropBoxRef.current\n        ) {\n            this.newDropBoxRef.current.classList.add('animating');\n        }\n    }\n\n    componentDidMount() {\n        this.categoryTitleRef.current?.addEventListener(\n            A11yCustomEventTypes.ACTIVATE,\n            this.handleA11yActivateEvent,\n        );\n        this.categoryTitleRef.current?.addEventListener(\n            A11yCustomEventTypes.DEACTIVATE,\n            this.handleA11yDeactivateEvent,\n        );\n    }\n\n    componentWillUnmount() {\n        this.categoryTitleRef.current?.removeEventListener(\n            A11yCustomEventTypes.ACTIVATE,\n            this.handleA11yActivateEvent,\n        );\n        this.categoryTitleRef.current?.removeEventListener(\n            A11yCustomEventTypes.DEACTIVATE,\n            this.handleA11yDeactivateEvent,\n        );\n\n        if (this.a11yKeyDownRegistered) {\n            this.handleA11yDeactivateEvent();\n        }\n    }\n\n    handleA11yActivateEvent = () => {\n        this.categoryTitleRef.current?.addEventListener(\n            'keydown',\n            this.handleA11yKeyDown,\n        );\n\n        this.a11yKeyDownRegistered = true;\n    };\n\n    handleA11yDeactivateEvent = () => {\n        this.categoryTitleRef.current?.removeEventListener(\n            'keydown',\n            this.handleA11yKeyDown,\n        );\n\n        this.a11yKeyDownRegistered = false;\n    };\n\n    handleA11yKeyDown = (\n        e: KeyboardEvent<HTMLButtonElement>['nativeEvent'],\n    ) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.handleCollapse();\n        }\n    };\n\n    renderChannel = (channelId: string, index: number) => {\n        const {setChannelRef, category, draggingState} = this.props;\n        return (\n            <SidebarChannel\n                key={channelId}\n                channelIndex={index}\n                channelId={channelId}\n                isDraggable={true}\n                setChannelRef={setChannelRef}\n                isCategoryCollapsed={category.collapsed}\n                isCategoryDragged={\n                    draggingState.type === DraggingStateTypes.CATEGORY &&\n                    draggingState.id === category.id\n                }\n                isAutoSortedCategory={\n                    category.sorting === CategorySorting.Alphabetical ||\n                    category.sorting === CategorySorting.Recency\n                }\n            />\n        );\n    };\n\n    handleCollapse = () => {\n        const {category} = this.props;\n\n        if (category.collapsed) {\n            trackEvent('ui', 'ui_sidebar_expand_category');\n        } else {\n            trackEvent('ui', 'ui_sidebar_collapse_category');\n        }\n\n        this.props.actions.setCategoryCollapsed(\n            category.id,\n            !category.collapsed,\n        );\n    };\n\n    removeAnimation = () => {\n        if (this.newDropBoxRef.current) {\n            this.newDropBoxRef.current.classList.remove('animating');\n        }\n    };\n\n    handleOpenDirectMessagesModal = (\n        event:\n        | MouseEvent<HTMLLIElement | HTMLButtonElement>\n        | KeyboardEvent<HTMLLIElement | HTMLButtonElement>,\n    ) => {\n        event.preventDefault();\n\n        this.props.handleOpenMoreDirectChannelsModal(event.nativeEvent);\n        trackEvent('ui', 'ui_sidebar_create_direct_message');\n    };\n\n    isDropDisabled = () => {\n        const {draggingState, category} = this.props;\n\n        if (category.type === CategoryTypes.DIRECT_MESSAGES) {\n            return draggingState.type === DraggingStateTypes.CHANNEL;\n        } else if (category.type === CategoryTypes.CHANNELS) {\n            return draggingState.type === DraggingStateTypes.DM;\n        }\n\n        return false;\n    };\n\n    renderNewDropBox = (isDraggingOver: boolean) => {\n        const {draggingState, category, isNewCategory, channelIds} =\n            this.props;\n\n        if (!isNewCategory || channelIds?.length) {\n            return null;\n        }\n\n        return (\n            <React.Fragment>\n                <Draggable\n                    draggableId={`NEW_CHANNEL_SPACER__${category.id}`}\n                    isDragDisabled={true}\n                    index={0}\n                >\n                    {(provided) => {\n                        // NEW_CHANNEL_SPACER here is used as a spacer to ensure react-beautiful-dnd will not try and place the first channel\n                        // on the header. This acts as a space filler for the header so that the first channel dragged in will float below it.\n                        return (\n                            <li\n                                ref={provided.innerRef}\n                                draggable='false'\n                                className={\n                                    'SidebarChannel noFloat newChannelSpacer'\n                                }\n                                {...provided.draggableProps}\n                                role='listitem'\n                                tabIndex={-1}\n                            />\n                        );\n                    }}\n                </Draggable>\n                <div className='SidebarCategory_newDropBox'>\n                    <div\n                        ref={this.newDropBoxRef}\n                        className={classNames(\n                            'SidebarCategory_newDropBox-content',\n                            {\n                                collapsed:\n                                    category.collapsed ||\n                                    (draggingState.type ===\n                                        DraggingStateTypes.CATEGORY &&\n                                        draggingState.id === category.id),\n                                isDraggingOver,\n                            },\n                        )}\n                        onTransitionEnd={this.removeAnimation}\n                    >\n                        <i className='icon-hand-right'/>\n                        <span className='SidebarCategory_newDropBox-label'>\n                            <FormattedMessage\n                                id='sidebar_left.sidebar_category.newDropBoxLabel'\n                                defaultMessage='Drag channels here...'\n                            />\n                        </span>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    };\n\n    showPlaceholder = () => {\n        const {channelIds, draggingState, category, isNewCategory} =\n            this.props;\n\n        if (\n            category.sorting === CategorySorting.Alphabetical ||\n            category.sorting === CategorySorting.Recency ||\n            isNewCategory\n        ) {\n            // Always show the placeholder if the channel being dragged is from the current category\n            if (channelIds.find((id) => id === draggingState.id)) {\n                return true;\n            }\n\n            return false;\n        }\n\n        return true;\n    };\n\n    render() {\n        const {category, categoryIndex, channelIds, isNewCategory} =\n            this.props;\n\n        if (!category) {\n            return null;\n        }\n\n        if (category.type === CategoryTypes.FAVORITES && !channelIds?.length) {\n            return null;\n        }\n\n        const renderedChannels = channelIds.map(this.renderChannel);\n\n        let categoryMenu: JSX.Element;\n        let newLabel: JSX.Element;\n        let directMessagesModalButton: JSX.Element;\n        let isCollapsible = true;\n        if (isNewCategory) {\n            newLabel = (\n                <div className='SidebarCategory_newLabel'>\n                    <FormattedMessage\n                        id='sidebar_left.sidebar_category.newLabel'\n                        defaultMessage='new'\n                    />\n                </div>\n            );\n\n            categoryMenu = <SidebarCategoryMenu category={category}/>;\n        } else if (category.type === CategoryTypes.DIRECT_MESSAGES) {\n            const addHelpLabel = localizeMessage(\n                'sidebar.createDirectMessage',\n                'Create new direct message',\n            );\n\n            categoryMenu = (\n                <React.Fragment>\n                    <SidebarCategorySortingMenu\n                        category={category}\n                        handleOpenDirectMessagesModal={\n                            this.handleOpenDirectMessagesModal\n                        }\n                    />\n                    <WithTooltip\n                        id='new-group-tooltip'\n                        title={\n                            <>\n                                {addHelpLabel}\n                                <KeyboardShortcutSequence\n                                    shortcut={KEYBOARD_SHORTCUTS.navDMMenu}\n                                    hideDescription={true}\n                                    isInsideTooltip={true}\n                                />\n                            </>\n                        }\n                        placement='top'\n                    >\n                        <button\n                            className='SidebarChannelGroupHeader_addButton'\n                            onClick={this.handleOpenDirectMessagesModal}\n                            aria-label={addHelpLabel}\n                        >\n                            <i className='icon-plus'/>\n                        </button>\n                    </WithTooltip>\n                </React.Fragment>\n            );\n\n            if (!channelIds || !channelIds.length) {\n                isCollapsible = false;\n            }\n        } else {\n            categoryMenu = <SidebarCategoryMenu category={category}/>;\n        }\n\n        let displayName = category.display_name;\n        if (category.type !== CategoryTypes.CUSTOM) {\n            const message =\n                categoryNames[category.type as keyof typeof categoryNames];\n            displayName = localizeMessage(message.id, message.defaultMessage);\n        }\n\n        return (\n            <Draggable\n                draggableId={category.id}\n                index={categoryIndex}\n                disableInteractiveElementBlocking={true}\n            >\n                {(provided, snapshot) => {\n                    let addChannelsCtaButton = null;\n                    if (category.type === 'channels' && !category.collapsed) {\n                        addChannelsCtaButton = (\n                            <>\n                                <AddChannelsCtaButton/> <Tabs/>\n                                {/* <button\n                                    className='open-modal-button'\n                                    onClick={this.handleOpenModal}\n                                >\n                                    <span>\n                                        <img\n                                            src={layerIcon}\n                                            alt='layers-app-icon'\n                                        />\n                                        {'MarketPlace'}\n                                    </span>\n                                </button>\n                                <InternetBrowserLink/> */}\n                            </>\n                        );\n                    }\n\n                    return (\n                        <div\n                            className={classNames(\n                                'SidebarChannelGroup a11y__section',\n                                {\n                                    dropDisabled: this.isDropDisabled(),\n                                    menuIsOpen: this.state.isMenuOpen,\n                                    capture:\n                                        this.props.draggingState.state ===\n                                        DraggingStates.CAPTURE,\n                                    isCollapsed: category.collapsed,\n                                },\n                            )}\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                        >\n                            <Droppable\n                                droppableId={category.id}\n                                type='SIDEBAR_CHANNEL'\n                                isDropDisabled={this.isDropDisabled()}\n                            >\n                                {(droppableProvided, droppableSnapshot) => {\n                                    return (\n                                        <div\n                                            {...droppableProvided.droppableProps}\n                                            ref={droppableProvided.innerRef}\n                                            className={classNames({\n                                                draggingOver:\n                                                    droppableSnapshot.isDraggingOver,\n                                            })}\n                                        >\n                                            <SidebarCategoryHeader\n                                                ref={this.categoryTitleRef}\n                                                displayName={displayName}\n                                                dragHandleProps={\n                                                    provided.dragHandleProps\n                                                }\n                                                isCollapsed={category.collapsed}\n                                                isCollapsible={isCollapsible}\n                                                isDragging={snapshot.isDragging}\n                                                isDraggingOver={\n                                                    droppableSnapshot.isDraggingOver\n                                                }\n                                                muted={category.muted}\n                                                onClick={this.handleCollapse}\n                                            >\n                                                {newLabel}\n                                                {directMessagesModalButton}\n                                                {categoryMenu}\n                                            </SidebarCategoryHeader>\n                                            <div\n                                                className={classNames(\n                                                    'SidebarChannelGroup_content',\n                                                )}\n                                            >\n                                                <ul\n                                                    role='list'\n                                                    className='NavGroupContent'\n                                                >\n                                                    {this.renderNewDropBox(\n                                                        droppableSnapshot.isDraggingOver,\n                                                    )}\n                                                    {renderedChannels}\n                                                    {this.showPlaceholder() ? droppableProvided.placeholder : null}\n                                                </ul>\n                                            </div>\n                                        </div>\n                                    );\n                                }}\n                            </Droppable>\n                            {addChannelsCtaButton}\n                        </div>\n                    );\n                }}\n            </Draggable>\n        );\n    }\n}\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    openModal: () => dispatch(openModal()),\n});\n\nconst categoryNames = defineMessages({\n    channels: {\n        id: 'sidebar.types.channels',\n        defaultMessage: 'APPS',\n    },\n    direct_messages: {\n        id: 'sidebar.types.chat',\n        defaultMessage: 'CHAT',\n    },\n    favorites: {\n        id: 'sidebar.types.favorites',\n        defaultMessage: 'FAVORITES',\n    },\n});\nexport default connect(null, mapDispatchToProps)(SidebarCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\n\nimport {setCategoryCollapsed, setCategorySorting} from 'mattermost-redux/actions/channel_categories';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentUser, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {isAdmin} from 'mattermost-redux/utils/user_utils';\n\nimport {getDraggingState, makeGetFilteredChannelIdsForCategory} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarCategory from './sidebar_category';\n\ntype OwnProps = {\n    category: ChannelCategory;\n}\n\nfunction makeMapStateToProps() {\n    const getChannelIdsForCategory = makeGetFilteredChannelIdsForCategory();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        return {\n            channelIds: getChannelIdsForCategory(state, ownProps.category),\n            draggingState: getDraggingState(state),\n            currentUserId: getCurrentUserId(state),\n            isAdmin: isAdmin(getCurrentUser(state).roles),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            setCategoryCollapsed,\n            setCategorySorting,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(SidebarCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport React, {lazy} from 'react';\nimport type {CSSProperties} from 'react';\nimport {DragDropContext, Droppable} from 'react-beautiful-dnd';\nimport type {DropResult, DragStart, BeforeCapture} from 'react-beautiful-dnd';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {FormattedMessage} from 'react-intl';\nimport {SpringSystem} from 'rebound';\nimport type {Spring} from 'rebound';\n\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {General} from 'mattermost-redux/constants';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport SidebarCategory from 'components/sidebar/sidebar_category';\n\nimport {findNextUnreadChannelId} from 'utils/channel_utils';\nimport {Constants, DraggingStates, DraggingStateTypes} from 'utils/constants';\nimport {isKeyPressed, cmdOrCtrlPressed} from 'utils/keyboard';\nimport {localizeMessage, mod} from 'utils/utils';\n\nimport type {DraggingState} from 'types/store';\nimport type {StaticPage} from 'types/store/lhs';\n\nconst DraftsLink = makeAsyncComponent('DraftsLink', lazy(() => import('components/drafts/drafts_link/drafts_link')));\n\n// const InternetBrowserLink = makeAsyncComponent('InternetBrowserLink', lazy(() => import('components/internet_browser/internet_browser_link')));\nconst UnreadChannelIndicator = makeAsyncComponent('UnreadChannelIndicator', lazy(() => import('../unread_channel_indicator')));\nconst UnreadChannels = makeAsyncComponent('UnreadChannels', lazy(() => import('../unread_channels')));\n\nexport function renderView(props: React.HTMLProps<HTMLDivElement>) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />\n    );\n}\n\nexport function renderThumbHorizontal(props: React.HTMLProps<HTMLDivElement>) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />\n    );\n}\n\nexport function renderTrackVertical(props: React.HTMLProps<HTMLDivElement>) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--verticalTrack'\n        />\n    );\n}\n\nexport function renderThumbVertical(props: React.HTMLProps<HTMLDivElement>) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />\n    );\n}\n\nconst scrollbarStyles: CSSProperties = {position: 'absolute'};\n\ntype Props = {\n    currentTeam?: Team;\n    currentChannelId: string;\n    categories: ChannelCategory[];\n    unreadChannelIds: string[];\n    isUnreadFilterEnabled: boolean;\n    displayedChannels: Channel[];\n    newCategoryIds: string[];\n    draggingState: DraggingState;\n    multiSelectedChannelIds: string[];\n    showUnreadsCategory: boolean;\n    collapsedThreads: boolean;\n    hasUnreadThreads: boolean;\n    currentStaticPageId: string;\n    staticPages: StaticPage[];\n\n    handleOpenMoreDirectChannelsModal: (e: Event) => void;\n    onDragStart: (initial: DragStart) => void;\n    onDragEnd: (result: DropResult) => void;\n\n    actions: {\n        moveChannelsInSidebar: (categoryId: string, targetIndex: number, draggableChannelId: string) => void;\n        moveCategory: (teamId: string, categoryId: string, newIndex: number) => void;\n        switchToChannelById: (channelId: string) => void;\n        switchToLhsStaticPage: (pageId: string) => void;\n        close: () => void;\n        setDraggingState: (data: DraggingState) => void;\n        stopDragging: () => void;\n        clearChannelSelection: () => void;\n    };\n};\n\ntype State = {\n    showTopUnread: boolean;\n    showBottomUnread: boolean;\n    autoHide: boolean;\n};\n\n// scrollMargin is the margin at the edge of the channel list that we leave when scrolling to a channel.\nconst scrollMargin = 10;\n\n// categoryHeaderHeight is the height of the category header\nconst categoryHeaderHeight = 32;\n\n// scrollMarginWithUnread is the margin that we leave at the edge of the channel list when scrolling to a channel so\n// that the channel is not under the unread indicator.\nconst scrollMarginWithUnread = 55;\n\nexport default class SidebarList extends React.PureComponent<Props, State> {\n    channelRefs: Map<string, HTMLLIElement>;\n    scrollbar: React.RefObject<Scrollbars>;\n    animate: SpringSystem;\n    scrollAnimation: Spring;\n    channelsListScrollTimeout: NodeJS.Timeout | null = null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.channelRefs = new Map();\n        this.state = {\n            showTopUnread: false,\n            showBottomUnread: false,\n            autoHide: true,\n        };\n        this.scrollbar = React.createRef();\n\n        this.animate = new SpringSystem();\n        this.scrollAnimation = this.animate.createSpring();\n        this.scrollAnimation.setOvershootClampingEnabled(true); // disables the spring action at the end of animation\n        this.scrollAnimation.addListener({onSpringUpdate: this.handleScrollAnimationUpdate});\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.navigateChannelShortcut);\n        document.addEventListener('keydown', this.navigateUnreadChannelShortcut);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.navigateChannelShortcut);\n        document.removeEventListener('keydown', this.navigateUnreadChannelShortcut);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (!this.props.currentChannelId || !prevProps.currentChannelId) {\n            return;\n        }\n\n        // reset the scrollbar upon switching teams\n        if (this.props.currentTeam !== prevProps.currentTeam) {\n            this.scrollbar.current!.scrollToTop();\n        }\n\n        // Scroll to selected channel so it's in view\n        if (this.props.currentChannelId !== prevProps.currentChannelId) {\n            // This will be re-enabled when we can avoid animating the scroll on first load and team switch\n            // this.scrollToChannel(this.props.currentChannelId);\n        }\n\n        // TODO: Copying over so it doesn't get lost, but we don't have a design for the sidebar on mobile yet\n        // close the LHS on mobile when you change channels\n        if (this.props.currentChannelId !== prevProps.currentChannelId) {\n            this.props.actions.close();\n        }\n\n        this.updateUnreadIndicators();\n    }\n\n    getDisplayedChannelIds = () => {\n        return this.props.displayedChannels.map((channel) => channel.id);\n    };\n\n    getDisplayedStaticPageIds = () => {\n        return this.props.staticPages.map((item) => item.id);\n    };\n\n    setChannelRef = (channelId: string, ref: HTMLLIElement) => {\n        if (ref) {\n            this.channelRefs.set(channelId, ref);\n        } else {\n            this.channelRefs.delete(channelId);\n        }\n    };\n\n    getFirstUnreadChannelFromChannelIdArray = (channelIds: string[]) => {\n        return channelIds.find((channelId) => {\n            return channelId !== this.props.currentChannelId && this.props.unreadChannelIds.includes(channelId);\n        });\n    };\n\n    handleScrollAnimationUpdate = (spring: Spring) => {\n        const val = spring.getCurrentValue();\n        this.scrollbar.current!.scrollTop(val);\n    };\n\n    scrollToFirstUnreadChannel = () => {\n        this.scrollToChannel(this.getFirstUnreadChannel(), true);\n    };\n\n    scrollToLastUnreadChannel = () => {\n        this.scrollToChannel(this.getLastUnreadChannel(), true);\n    };\n\n    scrollToChannel = (channelId: string | null | undefined, scrollingToUnread = false) => {\n        if (!channelId) {\n            return;\n        }\n\n        const element = this.channelRefs.get(channelId);\n        if (!element) {\n            return;\n        }\n\n        const top = element.offsetTop;\n        const bottom = top + element.offsetHeight;\n\n        const scrollTop = this.scrollbar.current!.getScrollTop();\n        const scrollHeight = this.scrollbar.current!.getClientHeight();\n\n        if (top < (scrollTop + categoryHeaderHeight)) {\n            // Scroll up to the item\n            const margin = (scrollingToUnread || !this.state.showTopUnread) ? scrollMargin : scrollMarginWithUnread;\n\n            let scrollEnd;\n            const displayedChannels = this.getDisplayedChannelIds();\n            if (displayedChannels.length > 0 && displayedChannels[0] === channelId) {\n                // This is the first channel, so scroll right to the top\n                scrollEnd = 0;\n            } else {\n                scrollEnd = top - margin - categoryHeaderHeight;\n            }\n\n            this.scrollToPosition(scrollEnd);\n        } else if (bottom > scrollTop + scrollHeight) {\n            // Scroll down to the item\n            const margin = (scrollingToUnread || !this.state.showBottomUnread) ? scrollMargin : scrollMarginWithUnread;\n            const scrollEnd = (bottom - scrollHeight) + margin;\n\n            this.scrollToPosition(scrollEnd);\n        }\n    };\n\n    scrollToPosition = (scrollEnd: number) => {\n        // Stop the current animation before scrolling\n        this.scrollAnimation.setCurrentValue(this.scrollbar.current!.getScrollTop()).setAtRest();\n\n        this.scrollAnimation.setEndValue(scrollEnd);\n    };\n\n    updateUnreadIndicators = () => {\n        if (this.props.draggingState.state) {\n            this.setState({\n                showTopUnread: false,\n                showBottomUnread: false,\n            });\n            return;\n        }\n\n        let showTopUnread = false;\n        let showBottomUnread = false;\n\n        // Consider partially obscured channels as above/below\n        const firstUnreadChannel = this.getFirstUnreadChannel();\n        const lastUnreadChannel = this.getLastUnreadChannel();\n\n        if (firstUnreadChannel) {\n            const firstUnreadElement = this.channelRefs.get(firstUnreadChannel);\n\n            if (firstUnreadElement && ((firstUnreadElement.offsetTop + firstUnreadElement.offsetHeight) - scrollMargin - categoryHeaderHeight) < this.scrollbar.current!.getScrollTop()) {\n                showTopUnread = true;\n            }\n        }\n\n        if (lastUnreadChannel) {\n            const lastUnreadElement = this.channelRefs.get(lastUnreadChannel);\n\n            if (lastUnreadElement && (lastUnreadElement.offsetTop + scrollMargin) > (this.scrollbar.current!.getScrollTop() + this.scrollbar.current!.getClientHeight())) {\n                showBottomUnread = true;\n            }\n        }\n\n        if (showTopUnread !== this.state.showTopUnread || showBottomUnread !== this.state.showBottomUnread) {\n            this.setState({\n                showTopUnread,\n                showBottomUnread,\n            });\n        }\n    };\n\n    getFirstUnreadChannel = () => {\n        return this.getFirstUnreadChannelFromChannelIdArray(this.getDisplayedChannelIds());\n    };\n\n    getLastUnreadChannel = () => {\n        return this.getFirstUnreadChannelFromChannelIdArray(this.getDisplayedChannelIds().reverse());\n    };\n\n    navigateById = (id: string) => {\n        if (this.props.staticPages.findIndex((i) => i.id === id) === -1) {\n            this.props.actions.switchToChannelById(id);\n        } else {\n            this.props.actions.switchToLhsStaticPage(id);\n        }\n    };\n\n    navigateChannelShortcut = (e: KeyboardEvent) => {\n        if (e.altKey && !e.shiftKey && !e.ctrlKey && !e.metaKey && (isKeyPressed(e, Constants.KeyCodes.UP) || isKeyPressed(e, Constants.KeyCodes.DOWN))) {\n            e.preventDefault();\n\n            const staticPageIds = this.getDisplayedStaticPageIds();\n            const allIds = [...staticPageIds, ...this.getDisplayedChannelIds()];\n\n            const curSelectedId = this.props.currentChannelId || this.props.currentStaticPageId;\n            const curIndex = allIds.indexOf(curSelectedId);\n\n            let nextIndex;\n            if (isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n                nextIndex = curIndex + 1;\n            } else {\n                nextIndex = curIndex - 1;\n            }\n\n            const nextId = allIds[mod(nextIndex, allIds.length)];\n            this.navigateById(nextId);\n            if (nextIndex >= staticPageIds.length) {\n                this.scrollToChannel(nextId);\n            }\n        } else if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.K)) {\n            this.props.handleOpenMoreDirectChannelsModal(e);\n        }\n    };\n\n    navigateUnreadChannelShortcut = (e: KeyboardEvent) => {\n        if (e.altKey && e.shiftKey && !e.ctrlKey && !e.metaKey && (isKeyPressed(e, Constants.KeyCodes.UP) || isKeyPressed(e, Constants.KeyCodes.DOWN))) {\n            e.preventDefault();\n\n            const allChannelIds = this.getDisplayedChannelIds();\n            const unreadChannelIds = [...this.props.unreadChannelIds];\n\n            if (this.props.collapsedThreads) {\n                allChannelIds.unshift('');\n\n                if (this.props.hasUnreadThreads) {\n                    unreadChannelIds.unshift('');\n                }\n            }\n\n            let direction = 0;\n            if (isKeyPressed(e, Constants.KeyCodes.UP)) {\n                direction = -1;\n            } else {\n                direction = 1;\n            }\n\n            const nextIndex = findNextUnreadChannelId(\n                this.props.currentChannelId,\n                allChannelIds,\n                unreadChannelIds,\n                direction,\n            );\n\n            if (nextIndex !== -1) {\n                const nextChannelId = allChannelIds[nextIndex];\n                this.navigateById(nextChannelId);\n                this.scrollToChannel(nextChannelId);\n            }\n        }\n    };\n\n    renderCategory = (category: ChannelCategory, index: number) => {\n        return (\n            <SidebarCategory\n                key={category.id}\n                category={category}\n                categoryIndex={index}\n                setChannelRef={this.setChannelRef}\n                handleOpenMoreDirectChannelsModal={this.props.handleOpenMoreDirectChannelsModal}\n                isNewCategory={this.props.newCategoryIds.includes(category.id)}\n            />\n        );\n    };\n\n    onScroll = debounce(() => {\n        this.updateUnreadIndicators();\n    }, 100);\n\n    onTransitionEnd = debounce(() => {\n        this.updateUnreadIndicators();\n    }, 100);\n\n    onBeforeCapture = (before: BeforeCapture) => {\n        // // Ensure no channels are animating\n        this.channelRefs.forEach((ref) => ref.classList.remove('animating'));\n\n        // Turn off scrolling temporarily so that dimensions can be captured\n        const droppable = [...document.querySelectorAll<HTMLDivElement>('[data-rbd-droppable-id*=\"droppable-categories\"]')];\n        droppable[0].style.height = `${droppable[0].scrollHeight}px`;\n\n        if (!this.props.multiSelectedChannelIds.find((id) => before.draggableId === id)) {\n            this.props.actions.clearChannelSelection();\n        }\n\n        const draggingState: DraggingState = {\n            state: DraggingStates.CAPTURE,\n            id: before.draggableId,\n        };\n\n        if (this.props.categories.some((category) => category.id === before.draggableId)) {\n            draggingState.type = DraggingStateTypes.CATEGORY;\n        } else {\n            const draggingChannels = this.props.displayedChannels.filter((channel) => this.props.multiSelectedChannelIds.indexOf(channel.id) !== -1 || channel.id === before.draggableId);\n            if (draggingChannels.every((channel) => channel.type === General.DM_CHANNEL || channel.type === General.GM_CHANNEL)) {\n                draggingState.type = DraggingStateTypes.DM;\n            } else if (draggingChannels.every((channel) => channel.type !== General.DM_CHANNEL && channel.type !== General.GM_CHANNEL)) {\n                draggingState.type = DraggingStateTypes.CHANNEL;\n            } else {\n                draggingState.type = DraggingStateTypes.MIXED_CHANNELS;\n            }\n        }\n\n        this.props.actions.setDraggingState(draggingState);\n    };\n\n    onBeforeDragStart = () => {\n        this.props.actions.setDraggingState({state: DraggingStates.BEFORE});\n    };\n\n    onDragStart = (initial: DragStart) => {\n        this.props.onDragStart(initial);\n\n        this.props.actions.setDraggingState({state: DraggingStates.DURING});\n\n        // Re-enable scroll box resizing\n        const droppable = [...document.querySelectorAll<HTMLDivElement>('[data-rbd-droppable-id*=\"droppable-categories\"]')];\n        droppable[0].style.height = '';\n    };\n\n    onDragEnd = (result: DropResult) => {\n        this.props.onDragEnd(result);\n\n        if (result.reason === 'DROP' && result.destination) {\n            if (result.type === 'SIDEBAR_CHANNEL') {\n                this.props.actions.moveChannelsInSidebar(result.destination.droppableId, result.destination.index, result.draggableId);\n                trackEvent('ui', 'ui_sidebar_dragdrop_dropped_channel');\n            } else if (result.type === 'SIDEBAR_CATEGORY') {\n                this.props.actions.moveCategory(this.props.currentTeam!.id, result.draggableId, result.destination.index);\n                trackEvent('ui', 'ui_sidebar_dragdrop_dropped_category');\n            }\n        }\n\n        this.props.actions.stopDragging();\n    };\n\n    showChannelListScrollbar = () => {\n        if (this.channelsListScrollTimeout !== null) {\n            clearTimeout(this.channelsListScrollTimeout);\n        }\n\n        this.setState({autoHide: false});\n    };\n\n    hideChannelListScrollbar = () => {\n        this.channelsListScrollTimeout = setTimeout(() => {\n            this.setState({autoHide: true});\n        }, 300);\n    };\n\n    render() {\n        const {categories} = this.props;\n\n        let channelList: React.ReactNode;\n        if (this.props.isUnreadFilterEnabled) {\n            channelList = (\n                <UnreadChannels\n                    setChannelRef={this.setChannelRef}\n                />\n            );\n        } else {\n            let unreadsCategory;\n            if (this.props.showUnreadsCategory) {\n                unreadsCategory = (\n                    <UnreadChannels\n                        setChannelRef={this.setChannelRef}\n                    />\n                );\n            }\n\n            const renderedCategories = categories.map(this.renderCategory);\n\n            channelList = (\n                <>\n                    {unreadsCategory}\n                    <DragDropContext\n                        onDragEnd={this.onDragEnd}\n                        onBeforeDragStart={this.onBeforeDragStart}\n                        onBeforeCapture={this.onBeforeCapture}\n                        onDragStart={this.onDragStart}\n                    >\n                        <Droppable\n                            droppableId='droppable-categories'\n                            type='SIDEBAR_CATEGORY'\n                        >\n                            {(provided) => {\n                                return (\n                                    <div\n                                        id={'sidebar-droppable-categories'}\n                                        ref={provided.innerRef}\n                                        {...provided.droppableProps}\n                                    >\n                                        {renderedCategories}\n                                        {provided.placeholder}\n                                    </div>\n                                );\n                            }}\n                        </Droppable>\n                    </DragDropContext>\n                </>\n            );\n        }\n\n        const above = (\n            <FormattedMessage\n                id='sidebar.unreads'\n                defaultMessage='More unreads'\n            />\n        );\n\n        const below = (\n            <FormattedMessage\n                id='sidebar.unreads'\n                defaultMessage='More unreads'\n            />\n        );\n\n        const ariaLabel = localizeMessage('accessibility.sections.lhsList', 'channel sidebar region');\n\n        return (\n\n            // NOTE: id attribute added to temporarily support the desktop app's at-mention DOM scraping of the old sidebar\n            <>\n                {/* <InternetBrowserLink/> */}\n                <DraftsLink/>\n                <div\n                    id='sidebar-left'\n                    role='application'\n                    aria-label={ariaLabel}\n                    className={classNames('SidebarNavContainer a11y__region', {\n                        disabled: this.props.isUnreadFilterEnabled,\n                    })}\n                    data-a11y-disable-nav={Boolean(this.props.draggingState.type)}\n                    data-a11y-sort-order='7'\n                    onTransitionEnd={this.onTransitionEnd}\n                >\n                    <UnreadChannelIndicator\n                        name='Top'\n                        show={this.state.showTopUnread}\n                        onClick={this.scrollToFirstUnreadChannel}\n                        extraClass='nav-pills__unread-indicator-top'\n                        content={above}\n                    />\n                    <UnreadChannelIndicator\n                        name='Bottom'\n                        show={this.state.showBottomUnread}\n                        onClick={this.scrollToLastUnreadChannel}\n                        extraClass='nav-pills__unread-indicator-bottom'\n                        content={below}\n                    />\n                    <div\n                        onPointerLeave={this.hideChannelListScrollbar}\n                        onPointerOver={this.showChannelListScrollbar}\n                    >\n                        <Scrollbars\n                            ref={this.scrollbar}\n                            autoHide={this.state.autoHide}\n                            renderThumbHorizontal={renderThumbHorizontal}\n                            renderThumbVertical={renderThumbVertical}\n                            renderTrackVertical={renderTrackVertical}\n                            renderView={renderView}\n                            onScroll={this.onScroll}\n                            style={scrollbarStyles}\n                        >\n                            {channelList}\n                        </Scrollbars>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {moveCategory} from 'mattermost-redux/actions/channel_categories';\nimport {getCurrentChannelId, getUnreadChannelIds} from 'mattermost-redux/selectors/entities/channels';\nimport {shouldShowUnreadsCategory, isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getThreadCountsInCurrentTeam} from 'mattermost-redux/selectors/entities/threads';\n\nimport {switchToChannelById} from 'actions/views/channel';\nimport {\n    moveChannelsInSidebar,\n    setDraggingState,\n    stopDragging,\n    clearChannelSelection,\n} from 'actions/views/channel_sidebar';\nimport {close, switchToLhsStaticPage} from 'actions/views/lhs';\nimport {getCurrentStaticPageId, getVisibleStaticPages} from 'selectors/lhs';\nimport {\n    getDisplayedChannels,\n    getDraggingState,\n    getCategoriesForCurrentTeam,\n    isUnreadFilterEnabled,\n} from 'selectors/views/channel_sidebar';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarList from './sidebar_list';\n\nfunction mapStateToProps(state: GlobalState) {\n    const currentTeam = getCurrentTeam(state);\n    const collapsedThreads = isCollapsedThreadsEnabled(state);\n\n    let hasUnreadThreads = false;\n    if (collapsedThreads) {\n        hasUnreadThreads = Boolean(getThreadCountsInCurrentTeam(state)?.total_unread_threads);\n    }\n\n    return {\n        currentTeam,\n        currentChannelId: getCurrentChannelId(state),\n        categories: getCategoriesForCurrentTeam(state),\n        isUnreadFilterEnabled: isUnreadFilterEnabled(state),\n        unreadChannelIds: getUnreadChannelIds(state),\n        displayedChannels: getDisplayedChannels(state),\n        draggingState: getDraggingState(state),\n        newCategoryIds: state.views.channelSidebar.newCategoryIds,\n        multiSelectedChannelIds: state.views.channelSidebar.multiSelectedChannelIds,\n        showUnreadsCategory: shouldShowUnreadsCategory(state),\n        collapsedThreads,\n        hasUnreadThreads,\n        currentStaticPageId: getCurrentStaticPageId(state),\n        staticPages: getVisibleStaticPages(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            close,\n            switchToChannelById,\n            moveChannelsInSidebar,\n            moveCategory,\n            setDraggingState,\n            stopDragging,\n            clearChannelSelection,\n            switchToLhsStaticPage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SidebarList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {lazy} from 'react';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport DataPrefetch from 'components/data_prefetch';\nimport MessengerPopup from 'components/messenger/messenger_popup';\nimport ResizableLhs from 'components/resizable_sidebar/resizable_lhs';\nimport SidebarHeader from 'components/sidebar/sidebar_header';\n\nimport Pluggable from 'plugins/pluggable';\nimport Constants, {ModalIdentifiers, RHSStates} from 'utils/constants';\nimport {isKeyPressed, cmdOrCtrlPressed} from 'utils/keyboard';\nimport {localizeMessage} from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\nimport type {RhsState} from 'types/store/rhs';\n\nimport ChannelNavigator from './channel_navigator';\nimport SidebarList from './sidebar_list';\n\nconst MobileSidebarHeader = makeAsyncComponent('MobileSidebarHeader', lazy(() => import('./mobile_sidebar_header')));\nconst MoreDirectChannels = makeAsyncComponent('MoreDirectChannels', lazy(() => import('components/more_direct_channels')));\nconst BrowseChannels = makeAsyncComponent('BrowseChannels', lazy(() => import('components/browse_channels')));\nconst EditCategoryModal = makeAsyncComponent('EditCategoryModal', lazy(() => import('components/edit_category_modal')));\nconst CreateUserGroupsModal = makeAsyncComponent('CreateUserGroupsModal', lazy(() => import('components/create_user_groups_modal')));\nconst InvitationModal = makeAsyncComponent('InvitationModal', lazy(() => import('components/invitation_modal')));\nconst KeyboardShortcutsModal = makeAsyncComponent('KeyboardShortcutsModal', lazy(() => import('components/keyboard_shortcuts/keyboard_shortcuts_modal/keyboard_shortcuts_modal')));\nconst NewChannelModal = makeAsyncComponent('NewChannelModal', lazy(() => import('components/new_channel_modal/new_channel_modal')));\nconst UserSettingsModal = makeAsyncComponent('UserSettingsModal', lazy(() => import('components/user_settings/modal')));\n\ntype Props = {\n    teamId: string;\n    canCreatePublicChannel: boolean;\n    canCreatePrivateChannel: boolean;\n    canJoinPublicChannel: boolean;\n    isOpen: boolean;\n    actions: {\n        fetchMyCategories: (teamId: string) => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n        closeModal: (modalId: string) => void;\n        clearChannelSelection: () => void;\n        closeRightHandSide: () => void;\n    };\n    unreadFilterEnabled: boolean;\n    isMobileView: boolean;\n    isKeyBoardShortcutModalOpen: boolean;\n    userGroupsEnabled: boolean;\n    canCreateCustomGroups: boolean;\n    rhsState?: RhsState;\n    rhsOpen?: boolean;\n};\n\ntype State = {\n    showDirectChannelsModal: boolean;\n    isDragging: boolean;\n};\n\nexport default class Sidebar extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            showDirectChannelsModal: false,\n            isDragging: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.teamId) {\n            this.props.actions.fetchMyCategories(this.props.teamId);\n        }\n\n        window.addEventListener('click', this.handleClickClearChannelSelection);\n        window.addEventListener('keydown', this.handleKeyDownEvent);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teamId && prevProps.teamId !== this.props.teamId) {\n            this.props.actions.fetchMyCategories(this.props.teamId);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.handleClickClearChannelSelection);\n        window.removeEventListener('keydown', this.handleKeyDownEvent);\n    }\n\n    handleClickClearChannelSelection = (event: MouseEvent) => {\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        this.props.actions.clearChannelSelection();\n    };\n\n    handleKeyDownEvent = (event: KeyboardEvent) => {\n        if (isKeyPressed(event, Constants.KeyCodes.ESCAPE)) {\n            this.props.actions.clearChannelSelection();\n            return;\n        }\n\n        const ctrlOrMetaKeyPressed = cmdOrCtrlPressed(event, true);\n\n        if (ctrlOrMetaKeyPressed) {\n            if (isKeyPressed(event, Constants.KeyCodes.FORWARD_SLASH)) {\n                event.preventDefault();\n                if (this.props.isKeyBoardShortcutModalOpen) {\n                    this.props.actions.closeModal(ModalIdentifiers.KEYBOARD_SHORTCUTS_MODAL);\n                } else {\n                    this.props.actions.openModal({\n                        modalId: ModalIdentifiers.KEYBOARD_SHORTCUTS_MODAL,\n                        dialogType: KeyboardShortcutsModal,\n                    });\n                }\n            } else if (isKeyPressed(event, Constants.KeyCodes.A) && event.shiftKey) {\n                event.preventDefault();\n\n                this.props.actions.openModal({\n                    modalId: ModalIdentifiers.USER_SETTINGS,\n                    dialogType: UserSettingsModal,\n                    dialogProps: {\n                        isContentProductSettings: true,\n                    },\n                });\n            }\n        }\n    };\n\n    showMoreDirectChannelsModal = () => {\n        this.setState({showDirectChannelsModal: true});\n        trackEvent('ui', 'ui_channels_more_direct_v2');\n    };\n\n    hideMoreDirectChannelsModal = () => {\n        this.setState({showDirectChannelsModal: false});\n    };\n\n    showCreateCategoryModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.EDIT_CATEGORY,\n            dialogType: EditCategoryModal,\n            dialogProps: {},\n        });\n        trackEvent('ui', 'ui_sidebar_menu_createCategory');\n    };\n\n    showMoreChannelsModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.MORE_CHANNELS,\n            dialogType: BrowseChannels,\n        });\n        trackEvent('ui', 'ui_channels_more_public_v2');\n    };\n\n    invitePeopleModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.INVITATION,\n            dialogType: InvitationModal,\n        });\n        trackEvent('ui', 'ui_channels_dropdown_invite_people');\n    };\n\n    showNewChannelModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.NEW_CHANNEL_MODAL,\n            dialogType: NewChannelModal,\n        });\n        this.closeEditRHS();\n        trackEvent('ui', 'ui_channels_create_channel_v2');\n    };\n\n    showCreateUserGroupModal = () => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.USER_GROUPS_CREATE,\n            dialogType: CreateUserGroupsModal,\n        });\n        trackEvent('ui', 'ui_channels_create_user_group');\n    };\n\n    handleOpenMoreDirectChannelsModal = (e: Event) => {\n        e.preventDefault();\n        if (this.state.showDirectChannelsModal) {\n            this.hideMoreDirectChannelsModal();\n        } else {\n            this.showMoreDirectChannelsModal();\n            this.closeEditRHS();\n        }\n    };\n\n    onDragStart = () => {\n        this.setState({isDragging: true});\n    };\n\n    onDragEnd = () => {\n        this.setState({isDragging: false});\n    };\n\n    renderModals = () => {\n        let moreDirectChannelsModal;\n        if (this.state.showDirectChannelsModal) {\n            moreDirectChannelsModal = (\n                <MoreDirectChannels\n                    onModalDismissed={this.hideMoreDirectChannelsModal}\n                    isExistingChannel={false}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {moreDirectChannelsModal}\n            </React.Fragment>\n        );\n    };\n\n    closeEditRHS = () => {\n        if (this.props.rhsOpen && this.props.rhsState === RHSStates.EDIT_HISTORY) {\n            this.props.actions.closeRightHandSide();\n        }\n    };\n\n    render() {\n        if (!this.props.teamId) {\n            return (<div/>);\n        }\n\n        const ariaLabel = localizeMessage('accessibility.sections.lhsNavigator', 'channel navigator region');\n\n        return (\n            <ResizableLhs\n                id='SidebarContainer'\n                className={classNames({\n                    'move--right': this.props.isOpen && this.props.isMobileView,\n                    dragging: this.state.isDragging,\n                })}\n            >\n                {this.props.isMobileView ? <MobileSidebarHeader/> : (\n                    <SidebarHeader\n                        showNewChannelModal={this.showNewChannelModal}\n                        showMoreChannelsModal={this.showMoreChannelsModal}\n                        showCreateUserGroupModal={this.showCreateUserGroupModal}\n                        invitePeopleModal={this.invitePeopleModal}\n                        showCreateCategoryModal={this.showCreateCategoryModal}\n                        canCreateChannel={this.props.canCreatePrivateChannel || this.props.canCreatePublicChannel}\n                        canJoinPublicChannel={this.props.canJoinPublicChannel}\n                        handleOpenDirectMessagesModal={this.handleOpenMoreDirectChannelsModal}\n                        unreadFilterEnabled={this.props.unreadFilterEnabled}\n                        userGroupsEnabled={this.props.userGroupsEnabled}\n                        canCreateCustomGroups={this.props.canCreateCustomGroups}\n                    />\n                )}\n                <div\n                    id='lhsNavigator'\n                    role='application'\n                    aria-label={ariaLabel}\n                    className='a11y__region'\n                    data-a11y-sort-order='6'\n                >\n                    <ChannelNavigator/>\n                </div>\n                <div className='sidebar--left__icons'>\n                    <Pluggable pluggableName='LeftSidebarHeader'/>\n                </div>\n                <SidebarList\n                    handleOpenMoreDirectChannelsModal={this.handleOpenMoreDirectChannelsModal}\n                    onDragStart={this.onDragStart}\n                    onDragEnd={this.onDragEnd}\n                />\n                <DataPrefetch/>\n                {this.renderModals()}\n                {!this.props.isMobileView && <MessengerPopup/>}\n            </ResizableLhs>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {fetchMyCategories} from 'mattermost-redux/actions/channel_categories';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport {isCustomGroupsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveICurrentChannelPermission, haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {clearChannelSelection} from 'actions/views/channel_sidebar';\nimport {closeModal, openModal} from 'actions/views/modals';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getIsLhsOpen} from 'selectors/lhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\nimport {isUnreadFilterEnabled} from 'selectors/views/channel_sidebar';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport Sidebar from './sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    const currentTeam = getCurrentTeam(state);\n    const unreadFilterEnabled = isUnreadFilterEnabled(state);\n    const userGroupsEnabled = isCustomGroupsEnabled(state);\n\n    let canCreatePublicChannel = false;\n    let canCreatePrivateChannel = false;\n    let canJoinPublicChannel = false;\n\n    if (currentTeam) {\n        canCreatePublicChannel = haveICurrentChannelPermission(state, Permissions.CREATE_PUBLIC_CHANNEL);\n        canCreatePrivateChannel = haveICurrentChannelPermission(state, Permissions.CREATE_PRIVATE_CHANNEL);\n        canJoinPublicChannel = haveICurrentChannelPermission(state, Permissions.JOIN_PUBLIC_CHANNELS);\n    }\n\n    const canCreateCustomGroups = haveISystemPermission(state, {permission: Permissions.CREATE_CUSTOM_GROUP}) && isCustomGroupsEnabled(state);\n\n    return {\n        teamId: currentTeam ? currentTeam.id : '',\n        canCreatePrivateChannel,\n        canCreatePublicChannel,\n        canJoinPublicChannel,\n        isOpen: getIsLhsOpen(state),\n        unreadFilterEnabled,\n        isMobileView: getIsMobileView(state),\n        isKeyBoardShortcutModalOpen: isModalOpen(state, ModalIdentifiers.KEYBOARD_SHORTCUTS_MODAL),\n        userGroupsEnabled,\n        canCreateCustomGroups,\n        rhsState: getRhsState(state),\n        rhsOpen: getIsRhsOpen(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            clearChannelSelection,\n            fetchMyCategories,\n            openModal,\n            closeModal,\n            closeRightHandSide,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useEffect, useRef} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {resetReloadPostsInChannel} from 'mattermost-redux/actions/posts';\nimport {isCollapsedThreadsEnabled} from 'mattermost-redux/selectors/entities/preferences';\n\nconst PostsChannelResetWatcher = () => {\n    const dispatch = useDispatch();\n    const isCRTEnabled = useSelector(isCollapsedThreadsEnabled);\n    const loaded = useRef(false);\n    useEffect(() => {\n        if (loaded.current) {\n            dispatch(resetReloadPostsInChannel());\n        } else {\n            loaded.current = true;\n        }\n    }, [isCRTEnabled]);\n    return null;\n};\n\nexport default PostsChannelResetWatcher;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {basicUnreadMeta} from 'mattermost-redux/selectors/entities/channels';\nimport type {BasicUnreadStatus} from 'mattermost-redux/selectors/entities/channels';\n\nimport faviconDefault16x16 from 'images/favicon/favicon-default-16x16.png';\nimport faviconDefault24x24 from 'images/favicon/favicon-default-24x24.png';\nimport faviconDefault32x32 from 'images/favicon/favicon-default-32x32.png';\nimport faviconDefault64x64 from 'images/favicon/favicon-default-64x64.png';\nimport faviconDefault96x96 from 'images/favicon/favicon-default-96x96.png';\nimport faviconMention16x16 from 'images/favicon/favicon-mentions-16x16.png';\nimport faviconMention24x24 from 'images/favicon/favicon-mentions-24x24.png';\nimport faviconMention32x32 from 'images/favicon/favicon-mentions-32x32.png';\nimport faviconMention64x64 from 'images/favicon/favicon-mentions-64x64.png';\nimport faviconMention96x96 from 'images/favicon/favicon-mentions-96x96.png';\nimport faviconUnread16x16 from 'images/favicon/favicon-unread-16x16.png';\nimport faviconUnread24x24 from 'images/favicon/favicon-unread-24x24.png';\nimport faviconUnread32x32 from 'images/favicon/favicon-unread-32x32.png';\nimport faviconUnread64x64 from 'images/favicon/favicon-unread-64x64.png';\nimport faviconUnread96x96 from 'images/favicon/favicon-unread-96x96.png';\nimport {Constants} from 'utils/constants';\nimport DesktopApp from 'utils/desktop_api';\nimport * as UserAgent from 'utils/user_agent';\n\nenum BadgeStatus {\n    Mention = 'Mention',\n    Unread = 'Unread',\n    None = 'None'\n}\n\ntype Props = {\n    intl: IntlShape;\n    unreadStatus: BasicUnreadStatus;\n    siteName?: string;\n    currentChannel?: Channel;\n    currentTeam?: Team;\n    currentTeammate: Channel | null;\n    inGlobalThreads: boolean;\n    inDrafts: boolean;\n};\n\nexport class UnreadsStatusHandlerClass extends React.PureComponent<Props> {\n    componentDidUpdate(prevProps: Props) {\n        this.updateTitle();\n        const oldBadgeStatus = this.getBadgeStatus(prevProps.unreadStatus);\n        const newBadgeStatus = this.getBadgeStatus(this.props.unreadStatus);\n\n        if (oldBadgeStatus !== newBadgeStatus) {\n            this.updateFavicon(newBadgeStatus);\n        }\n\n        this.updateDesktopApp();\n    }\n\n    get isDynamicFaviconSupported() {\n        return UserAgent.isChrome() || UserAgent.isFirefox();\n    }\n\n    getBadgeStatus(unreadStatus: BasicUnreadStatus) {\n        if (typeof unreadStatus === 'number') {\n            return BadgeStatus.Mention;\n        } else if (unreadStatus) {\n            return BadgeStatus.Unread;\n        }\n        return BadgeStatus.None;\n    }\n\n    updateDesktopApp = () => {\n        const {unreadStatus} = this.props;\n        const {isUnread, unreadMentionCount} = basicUnreadMeta(unreadStatus);\n\n        DesktopApp.updateUnreadsAndMentions(isUnread, unreadMentionCount);\n    };\n\n    updateTitle = () => {\n        const {\n            siteName,\n            currentChannel,\n            currentTeam,\n            currentTeammate,\n            unreadStatus,\n            inGlobalThreads,\n            inDrafts,\n        } = this.props;\n        const {formatMessage} = this.props.intl;\n\n        const currentSiteName = siteName || '';\n\n        const {isUnread, unreadMentionCount} = basicUnreadMeta(unreadStatus);\n\n        const mentionTitle = unreadMentionCount > 0 ? `(${unreadMentionCount}) ` : '';\n        const unreadTitle = !this.isDynamicFaviconSupported && isUnread ? '* ' : '';\n\n        if (currentChannel && currentTeam && currentChannel.id) {\n            let currentChannelName = currentChannel.display_name;\n            if (currentChannel.type === Constants.DM_CHANNEL) {\n                if (currentTeammate != null) {\n                    currentChannelName = currentTeammate.display_name;\n                }\n            }\n            document.title = `${mentionTitle}${unreadTitle}${currentChannelName} - ${currentTeam.display_name} ${currentSiteName}`;\n        } else if (currentTeam && inGlobalThreads) {\n            document.title = formatMessage({\n                id: 'globalThreads.title',\n                defaultMessage: '{prefix}Threads - {displayName} {siteName}',\n            }, {\n                prefix: `${mentionTitle}${unreadTitle}`,\n                displayName: currentTeam.display_name,\n                siteName: currentSiteName,\n            });\n        } else if (currentTeam && inDrafts) {\n            document.title = formatMessage({\n                id: 'drafts.title',\n                defaultMessage: '{prefix}Drafts - {displayName} {siteName}',\n            }, {\n                prefix: `${mentionTitle}${unreadTitle}`,\n                displayName: currentTeam.display_name,\n                siteName: currentSiteName,\n            });\n        } else {\n            document.title = formatMessage({id: 'sidebar.team_select', defaultMessage: '{siteName} - Join a team'}, {siteName: currentSiteName || 'Mattermost'});\n        }\n    };\n\n    updateFavicon = (badgeStatus: BadgeStatus) => {\n        if (!(UserAgent.isFirefox() || UserAgent.isChrome())) {\n            return;\n        }\n\n        const link = document.querySelector('link[rel=\"icon\"]');\n\n        if (!link) {\n            return;\n        }\n        const link16x16 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"16x16\"]');\n        const link24x24 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"24x24\"]');\n        const link32x32 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"32x32\"]');\n        const link64x64 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"64x64\"]');\n        const link96x96 = document.querySelector<HTMLLinkElement>('link[rel=\"icon\"][sizes=\"96x96\"]');\n\n        const getFavicon = (url: string): string => (typeof url === 'string' ? url : '');\n\n        switch (badgeStatus) {\n        case BadgeStatus.Mention: {\n            link16x16!.href = getFavicon(faviconMention16x16);\n            link24x24!.href = getFavicon(faviconMention24x24);\n            link32x32!.href = getFavicon(faviconMention32x32);\n            link64x64!.href = getFavicon(faviconMention64x64);\n            link96x96!.href = getFavicon(faviconMention96x96);\n            break;\n        }\n        case BadgeStatus.Unread: {\n            link16x16!.href = getFavicon(faviconUnread16x16);\n            link24x24!.href = getFavicon(faviconUnread24x24);\n            link32x32!.href = getFavicon(faviconUnread32x32);\n            link64x64!.href = getFavicon(faviconUnread64x64);\n            link96x96!.href = getFavicon(faviconUnread96x96);\n            break;\n        }\n        default: {\n            link16x16!.href = getFavicon(faviconDefault16x16);\n            link24x24!.href = getFavicon(faviconDefault24x24);\n            link32x32!.href = getFavicon(faviconDefault32x32);\n            link64x64!.href = getFavicon(faviconDefault64x64);\n            link96x96!.href = getFavicon(faviconDefault96x96);\n        }\n        }\n    };\n\n    render() {\n        return null;\n    }\n}\n\nexport default injectIntl(UnreadsStatusHandlerClass);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter, matchPath} from 'react-router-dom';\nimport type {RouteChildrenProps} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getCurrentChannel, getUnreadStatus} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport UnreadsStatusHandler from './unreads_status_handler';\n\ntype Props = RouteChildrenProps;\n\nfunction mapStateToProps(state: GlobalState, {location: {pathname}}: Props) {\n    const config = getConfig(state);\n    const currentChannel = getCurrentChannel(state);\n    const currentTeammate = (currentChannel && currentChannel.teammate_id) ? currentChannel : null;\n    const currentTeam = getCurrentTeam(state);\n\n    return {\n        currentChannel,\n        currentTeam,\n        currentTeammate,\n        siteName: config.SiteName,\n        unreadStatus: getUnreadStatus(state),\n        inGlobalThreads: matchPath(pathname, {path: '/:team/threads/:threadIdentifier?'}) != null,\n        inDrafts: matchPath(pathname, {path: '/:team/drafts'}) != null,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UnreadsStatusHandler));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from \"classnames\";\nimport React, { lazy, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { cleanUpStatusAndProfileFetchingPoll } from \"mattermost-redux/actions/status_profile_polling\";\nimport { getIsUserStatusesConfigEnabled } from \"mattermost-redux/selectors/entities/common\";\nimport {\n    amphion,\n    code,\n    dawg,\n    imageeditor,\n    losslesscut,\n    lumen,\n    motion,\n    notable,\n    omniclip,\n    playbook,\n    plexocore,\n    viewerjs,\n} from \"../browse_apps/apps_iframe\";\nimport { addVisibleUsersInCurrentChannelToStatusPoll } from \"actions/status_actions\";\n\nimport Pluggable from \"plugins/pluggable\";\nimport { Constants } from \"utils/constants\";\nimport { isInternetExplorer, isEdge } from \"utils/user_agent\";\nimport IframeContainer from \"components/browse_apps/iframe_container\";\nimport { makeAsyncComponent } from \"components/async_load\";\nimport CenterChannel from \"components/channel_layout/center_channel\";\nimport LoadingScreen from \"components/loading_screen\";\nimport ProductResults from \"components/shop/product_results\";\nimport Sidebar from \"components/sidebar\";\nimport CRTPostsChannelResetWatcher from \"components/threading/channel_threads/posts_channel_reset_watcher\";\nimport UnreadsStatusHandler from \"components/unreads_status_handler\";\n\nconst ProductNoticesModal = makeAsyncComponent(\n    \"ProductNoticesModal\",\n    lazy(() => import(\"components/product_notices_modal\"))\n);\nconst ResetStatusModal = makeAsyncComponent(\n    \"ResetStatusModal\",\n    lazy(() => import(\"components/reset_status_modal\"))\n);\n\nconst BODY_CLASS_FOR_CHANNEL = [\"app__body\", \"channel-view\"];\nimport notesIcon from \"../../images/notes-icon.png\";\nimport storeIcon from \"../../images/store.png\";\n\ntype Props = {\n    shouldRenderCenterChannel: boolean;\n};\n\nexport default function ChannelController(props: Props) {\n    const [openShop, setOpenShop] = useState(false);\n\n    const enabledUserStatuses = useSelector(getIsUserStatusesConfigEnabled);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const isMsBrowser = isInternetExplorer() || isEdge();\n        const { navigator } = window;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        const platform =\n            navigator?.userAgentData?.platform ||\n            navigator?.platform ||\n            \"unknown\";\n        document.body.classList.add(\n            ...getClassnamesForBody(platform, isMsBrowser)\n        );\n\n        return () => {\n            document.body.classList.remove(...BODY_CLASS_FOR_CHANNEL);\n\n            // This cleans up the status and profile setInterval of fetching poll we use to batch requests\n            // when fetching statuses and profiles for a list of users.\n            dispatch(cleanUpStatusAndProfileFetchingPoll());\n        };\n    }, []);\n\n    useEffect(() => {\n        let loadStatusesIntervalId: NodeJS.Timeout;\n        if (enabledUserStatuses) {\n            loadStatusesIntervalId = setInterval(() => {\n                dispatch(addVisibleUsersInCurrentChannelToStatusPoll());\n            }, Constants.STATUS_INTERVAL);\n        }\n\n        return () => {\n            clearInterval(loadStatusesIntervalId);\n        };\n    }, [enabledUserStatuses]);\n\n    //app tabs and default screen switch\n\n    const iframeMap: { [key: string]: React.FC } = {\n        vscode: code,\n        notes: notable,\n        motion: motion,\n        viewerjs: viewerjs,\n        imageeditor: imageeditor,\n        lumen: lumen,\n        dawg: dawg,\n        amphion: amphion,\n        losslesscut: losslesscut,\n        omniclip: omniclip,\n        playbook: playbook,\n        plexocore: plexocore,\n    };\n    interface AppState {\n        tabs: {\n            activeApp: string | null;\n        };\n    }\n    const activeApp = useSelector((state: AppState) => state.tabs.activeApp);\n    const ActiveIframe = activeApp ? iframeMap[activeApp] : null;\n    return (\n        <>\n            <CRTPostsChannelResetWatcher />\n            <Sidebar />\n            <div\n                id=\"channel_view\"\n                className=\"channel-view\"\n                data-testid=\"channel_view\"\n            >\n                <UnreadsStatusHandler />\n                <ProductNoticesModal />\n                <div\n                    className={classNames(\"container-fluid channel-view-inner\")}\n                >\n                    {openShop ? (\n                        <ProductResults />\n                    ) : (\n                        <>\n                            {props.shouldRenderCenterChannel ? (\n                                <CenterChannel />\n                            ) : (\n                                <LoadingScreen centered={true} />\n                            )}\n                            <Pluggable pluggableName=\"Root\" />\n                            <ResetStatusModal />\n                        </>\n                    )}\n                </div>\n            </div>\n            <div className=\"home-screen-wrapper__sidebar right\">\n                <div className=\"top\">\n                    <button>\n                        <img src={notesIcon} />\n                    </button>\n                </div>\n                <div className=\"bottom\">\n                    <button onClick={() => setOpenShop(!openShop)}>\n                        <img src={storeIcon} />\n                    </button>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport function getClassnamesForBody(\n    platform: Window[\"navigator\"][\"platform\"],\n    isMsBrowser = false\n) {\n    const bodyClass = [...BODY_CLASS_FOR_CHANNEL];\n\n    // OS Detection\n    if (platform === \"Win32\" || platform === \"Win64\") {\n        bodyClass.push(\"os--windows\");\n    } else if (platform === \"MacIntel\" || platform === \"MacPPC\") {\n        bodyClass.push(\"os--mac\");\n    }\n\n    // IE Detection\n    if (isMsBrowser) {\n        bodyClass.push(\"browser--ie\");\n    }\n\n    return bodyClass;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport iNoBounce from 'inobounce';\nimport React, {lazy, memo, useEffect, useRef, useState} from 'react';\nimport {Route, Switch, useHistory, useParams} from 'react-router-dom';\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {reconnect} from 'actions/websocket_actions.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {makeAsyncComponent} from 'components/async_load';\nimport ChannelController from 'components/channel_layout/channel_controller';\nimport useTelemetryIdentitySync from 'components/common/hooks/useTelemetryIdentifySync';\nimport InitialLoadingScreen from 'components/initial_loading_screen';\n\nimport Constants from 'utils/constants';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/keyboard';\nimport {TEAM_NAME_PATH_PATTERN} from 'utils/path';\nimport {isIosSafari} from 'utils/user_agent';\n\nimport type {OwnProps, PropsFromRedux} from './index';\n\nconst BackstageController = makeAsyncComponent('BackstageController', lazy(() => import('components/backstage')));\nconst Pluggable = makeAsyncComponent('Pluggable', lazy(() => import('plugins/pluggable')));\n\nconst WAKEUP_CHECK_INTERVAL = 30000; // 30 seconds\nconst WAKEUP_THRESHOLD = 60000; // 60 seconds\nconst UNREAD_CHECK_TIME_MILLISECONDS = 120 * 1000;\n\ndeclare global {\n    interface Window {\n        isActive: boolean;\n    }\n}\n\ntype Props = PropsFromRedux & OwnProps;\n\nfunction TeamController(props: Props) {\n    const history = useHistory();\n    const {team: teamNameParam} = useParams<Props['match']['params']>();\n\n    const [initialChannelsLoaded, setInitialChannelsLoaded] = useState(false);\n\n    const [team, setTeam] = useState<Team | null>(getTeamFromTeamList(props.teamsList, teamNameParam));\n\n    const blurTime = useRef(Date.now());\n    const lastTime = useRef(Date.now());\n\n    useTelemetryIdentitySync();\n\n    useEffect(() => {\n        InitialLoadingScreen.stop();\n        async function fetchInitialChannels() {\n            await props.fetchAllMyTeamsChannelsAndChannelMembersREST();\n\n            setInitialChannelsLoaded(true);\n        }\n\n        fetchInitialChannels();\n    }, []);\n\n    useEffect(() => {\n        if (props.disableWakeUpReconnectHandler) {\n            return () => {};\n        }\n\n        const wakeUpIntervalId = setInterval(() => {\n            const currentTime = Date.now();\n            if ((currentTime - lastTime.current) > WAKEUP_THRESHOLD) {\n                console.log('computer woke up - reconnecting'); //eslint-disable-line no-console\n                reconnect();\n            }\n            lastTime.current = currentTime;\n        }, WAKEUP_CHECK_INTERVAL);\n\n        return () => {\n            clearInterval(wakeUpIntervalId);\n        };\n    }, [props.disableWakeUpReconnectHandler]);\n\n    // Effect runs on mount, add event listeners on windows object\n    useEffect(() => {\n        function handleFocus() {\n            window.isActive = true;\n            props.markAsReadOnFocus();\n\n            // Temporary flag to disable refetching of channel members on browser focus\n            if (!props.disableRefetchingOnBrowserFocus) {\n                const currentTime = Date.now();\n                if ((currentTime - blurTime.current) > UNREAD_CHECK_TIME_MILLISECONDS && props.currentTeamId) {\n                    props.fetchChannelsAndMembers(props.currentTeamId);\n                }\n            }\n        }\n\n        function handleBlur() {\n            window.isActive = false;\n            blurTime.current = Date.now();\n            props.unsetActiveChannelOnServer();\n        }\n\n        function handleKeydown(event: KeyboardEvent) {\n            if (event.shiftKey && cmdOrCtrlPressed(event) && isKeyPressed(event, Constants.KeyCodes.L)) {\n                const replyTextbox = document.querySelector<HTMLElement>('#sidebar-right.is-open.expanded #reply_textbox');\n                if (replyTextbox) {\n                    replyTextbox.focus();\n                } else {\n                    const postTextbox = document.getElementById('post_textbox');\n                    if (postTextbox) {\n                        postTextbox.focus();\n                    }\n                }\n            }\n        }\n\n        window.addEventListener('focus', handleFocus);\n        window.addEventListener('blur', handleBlur);\n        window.addEventListener('keydown', handleKeydown);\n\n        return () => {\n            window.removeEventListener('focus', handleFocus);\n            window.removeEventListener('blur', handleBlur);\n            window.removeEventListener('keydown', handleKeydown);\n        };\n    }, [props.currentTeamId]);\n\n    // Effect runs on mount, adds active state to window\n    useEffect(() => {\n        const browserIsIosSafari = isIosSafari();\n        if (browserIsIosSafari) {\n            // Use iNoBounce to prevent scrolling past the boundaries of the page\n            iNoBounce.enable();\n        }\n\n        // Set up tracking for whether the window is active\n        window.isActive = true;\n\n        LocalStorageStore.setTeamIdJoinedOnLoad(null);\n\n        return () => {\n            window.isActive = false;\n\n            if (browserIsIosSafari) {\n                iNoBounce.disable();\n            }\n        };\n    }, []);\n\n    async function initTeamOrRedirect(team: Team) {\n        const {data: joinedTeam, error} = await props.initializeTeam(team) as ActionResult<Team, ServerError>; // Fix in MM-46907;\n        if (error) {\n            history.push('/error?type=team_not_found');\n            return;\n        }\n        if (joinedTeam) {\n            setTeam(joinedTeam);\n        }\n    }\n\n    async function joinTeamOrRedirect(teamNameParam: string, joinedOnFirstLoad: boolean) {\n        setTeam(null);\n\n        const {data: joinedTeam, error} = await props.joinTeam(teamNameParam, joinedOnFirstLoad) as ActionResult<Team, ServerError>; // Fix in MM-46907;\n        if (error) {\n            history.push('/error?type=team_not_found');\n            return;\n        }\n        if (joinedTeam) {\n            setTeam(joinedTeam);\n        }\n    }\n\n    const teamsListDependency = props.teamsList.map((team) => team.id).sort().join('+');\n\n    // Effect to run when url for team or teamsList changes\n    useEffect(() => {\n        if (teamNameParam) {\n            // skip reserved team names\n            if (Constants.RESERVED_TEAM_NAMES.includes(teamNameParam)) {\n                return;\n            }\n\n            const teamFromTeamNameParam = getTeamFromTeamList(props.teamsList, teamNameParam);\n            if (teamFromTeamNameParam) {\n                // If the team is already in the teams list, initialize it when we switch teams\n                initTeamOrRedirect(teamFromTeamNameParam);\n            } else if (team && team.name !== teamNameParam) {\n                // When we are already in a team and the new team is not in the teams list, attempt to join it\n                joinTeamOrRedirect(teamNameParam, false);\n            } else if (!team) {\n                // When we are not in a team and the new team is not in the teams list, attempt to join it\n                joinTeamOrRedirect(teamNameParam, true);\n            }\n        }\n    }, [teamNameParam, teamsListDependency]);\n\n    if (props.mfaRequired) {\n        history.push('/mfa/setup');\n        return null;\n    }\n\n    if (team === null) {\n        return null;\n    }\n\n    const teamLoaded = team?.name.toLowerCase() === teamNameParam?.toLowerCase();\n\n    return (\n        <Switch>\n            <Route\n                path={`/:team(${TEAM_NAME_PATH_PATTERN})/integrations`}\n                component={BackstageController}\n            />\n            <Route\n                path={`/:team(${TEAM_NAME_PATH_PATTERN})/emoji`}\n                component={BackstageController}\n            />\n            {props.plugins?.map((plugin) => (\n                <Route\n                    key={plugin.id}\n                    path={`/:team(${TEAM_NAME_PATH_PATTERN})/` + (plugin as any).route}\n                    render={() => (\n                        <Pluggable\n                            pluggableName={'NeedsTeamComponent'}\n                            pluggableId={plugin.id}\n                            css={{gridArea: 'center'}}\n                        />\n                    )}\n                />\n            ))}\n            <ChannelController shouldRenderCenterChannel={initialChannelsLoaded && teamLoaded}/>\n        </Switch>\n    );\n}\n\nfunction getTeamFromTeamList(teamsList: Props['teamsList'], teamName?: string) {\n    if (!teamName) {\n        return null;\n    }\n\n    const team = teamsList.find((teamInList) => teamInList.name === teamName) ?? null;\n    if (!team) {\n        return null;\n    }\n\n    return team;\n}\n\nexport default memo(TeamController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useEffect} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\n/**\n * The purpose of this hook is to sync the user's id and role with client4's user id and role,\n * which is essential to identify the user in telemetry.\n */\nfunction useTelemetryIdentitySync() {\n    const user = useSelector(getCurrentUser);\n    const userId = user?.id ?? '';\n    const userRoles = user?.roles ?? '';\n\n    useEffect(() => {\n        if (userId) {\n            Client4.setUserId(userId);\n        }\n        if (userRoles) {\n            Client4.setUserRoles(userRoles);\n        }\n    }, [userId, userRoles]);\n\n    return null;\n}\n\nexport default useTelemetryIdentitySync;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport {fetchAllMyTeamsChannelsAndChannelMembersREST, fetchChannelsAndMembers, unsetActiveChannelOnServer} from 'mattermost-redux/actions/channels';\nimport {getCurrentChannelId} from 'mattermost-redux/selectors/entities/channels';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeamId, getMyTeams} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {markAsReadOnFocus} from 'actions/views/channel';\nimport {getSelectedPostId} from 'selectors/rhs';\nimport {getSelectedThreadIdInCurrentTeam} from 'selectors/views/threads';\n\nimport {initializeTeam, joinTeam} from 'components/team_controller/actions';\n\nimport {checkIfMFARequired} from 'utils/route';\n\nimport type {GlobalState} from 'types/store';\n\nimport TeamController from './team_controller';\n\ntype Params = {\n    url: string;\n    team?: string;\n}\n\nexport type OwnProps = RouteComponentProps<Params>;\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n    const plugins = state.plugins.components.NeedsTeamComponent;\n    const disableRefetchingOnBrowserFocus = config.DisableRefetchingOnBrowserFocus === 'true';\n    const disableWakeUpReconnectHandler = config.DisableWakeUpReconnectHandler === 'true';\n\n    return {\n        currentTeamId: getCurrentTeamId(state),\n        currentChannelId: getCurrentChannelId(state),\n        teamsList: getMyTeams(state),\n        plugins,\n        selectedThreadId: getSelectedThreadIdInCurrentTeam(state),\n        selectedPostId: getSelectedPostId(state),\n        mfaRequired: checkIfMFARequired(currentUser, license, config, ownProps.match.url),\n        disableRefetchingOnBrowserFocus,\n        disableWakeUpReconnectHandler,\n    };\n}\n\nconst mapDispatchToProps = {\n    fetchChannelsAndMembers,\n    fetchAllMyTeamsChannelsAndChannelMembersREST,\n    markAsReadOnFocus,\n    initializeTeam,\n    joinTeam,\n    unsetActiveChannelOnServer,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(TeamController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nconst CheckboxCheckedIcon = () => (\n    <svg\n        width='18px'\n        height='18px'\n        viewBox='0 0 18 18'\n    >\n        <g\n            id='Developer-Export'\n            stroke='none'\n            strokeWidth='1'\n            fillRule='evenodd'\n        >\n            <g\n                transform='translate(-285.000000, -933.000000)'\n                id='All-Team-Members'\n            >\n                <g transform='translate(245.000000, 698.000000)'>\n                    <g\n                        id='Channel-Administrators'\n                        transform='translate(0.000000, 106.000000)'\n                    >\n                        <g\n                            id='data-table/column-1'\n                            transform='translate(11.000000, 86.000000)'\n                        >\n                            <g\n                                id='row-checkbox---Public-Channels'\n                                transform='translate(12.000000, 35.000000)'\n                            >\n                                <g\n                                    id='Stacked-Group'\n                                    transform='translate(0.000000, 5.000000)'\n                                >\n                                    <g id='data-table/1st/row-checkbox-label-base'>\n                                        <g\n                                            id='check-on-copy-11'\n                                            transform='translate(14.000000, 0.000000)'\n                                        >\n                                            <path\n                                                d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                id='checkbox---checked'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </svg>\n);\n\nexport default memo(CheckboxCheckedIcon);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChannelBookmarksState} from '@mattermost/types/channel_bookmarks';\nimport type {GlobalState} from '@mattermost/types/store';\n\nconst EMPTY_BOOKMARKS = {};\n\nexport const getChannelBookmarks = (state: GlobalState, channelId: string): ChannelBookmarksState['byChannelId'][string] => {\n    const bookmarks = state.entities.channelBookmarks.byChannelId[channelId];\n\n    if (!bookmarks) {\n        return EMPTY_BOOKMARKS;\n    }\n\n    return bookmarks;\n};\n\nexport const getChannelBookmark = (state: GlobalState, channelId: string, bookmarkId: string) => {\n    return getChannelBookmarks(state, channelId)[bookmarkId];\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {\n    isCollapsedThreadsEnabled,\n} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {makeGetDraftsCount} from 'selectors/drafts';\n\nimport type {SidebarSize} from 'components/resizable_sidebar/constants';\n\nimport type {GlobalState} from 'types/store';\nimport type {StaticPage} from 'types/store/lhs';\n\nexport function getIsLhsOpen(state: GlobalState): boolean {\n    return state.views.lhs.isOpen;\n}\n\nexport function getLhsSize(state: GlobalState): SidebarSize {\n    return state.views.lhs.size;\n}\n\nexport function getCurrentStaticPageId(state: GlobalState): string {\n    return state.views.lhs.currentStaticPageId;\n}\n\nexport const getDraftsCount = makeGetDraftsCount();\n\nexport const getVisibleStaticPages = createSelector(\n    'getVisibleSidebarStaticPages',\n    isCollapsedThreadsEnabled,\n    getDraftsCount,\n    (collapsedThreadsEnabled, draftsCount) => {\n        const staticPages: StaticPage[] = [];\n\n        if (collapsedThreadsEnabled) {\n            staticPages.push({\n                id: 'threads',\n                isVisible: true,\n            });\n        }\n\n        staticPages.push({\n            id: 'drafts',\n            isVisible: draftsCount > 0,\n        });\n\n        return staticPages.filter((item) => item.isVisible);\n    },\n);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nexport type SuccessResult = {data: any}\n\nexport type ErrorResult = {error: any}\n\nexport function isSuccess(result: ActionResult): result is SuccessResult {\n    return 'data' in result && !isError(result);\n}\n\nexport function isError(result: ActionResult): result is ErrorResult {\n    return Boolean((result as ErrorResult).error);\n}\n\nexport type ModalData<ModalProps> = {\n    modalId: string;\n    dialogProps?: Omit<ModalProps, 'onHide' | 'onExited'> & {onHide?: () => void; onExited?: () => void};\n    dialogType: React.ElementType<ModalProps>;\n}\n"],"names":["deleteBookmark","channelId","id","async","dispatch","getState","state","connectionId","getConnectionId","bookmark","getChannelBookmark","Client4","type","ChannelBookmarkTypes","data","error","ChannelBookmarkActions","createBookmark","createdBookmark","editBookmark","patch","updated","deleted","fetchChannelBookmarks","bookmarks","forceLogoutIfNecessary","logError","setUnreadFilterEnabled","enabled","ActionTypes","setDraggingState","stopDragging","createCategory","teamId","displayName","channelIds","multiSelectedChannelIds","views","channelSidebar","forEach","indexOf","multiSelectChannelAdd","result","createCategoryRedux","addChannelsInSidebar","categoryId","moveChannelsInSidebar","targetIndex","draggableChannelId","setManualSorting","arguments","length","undefined","categories","getCategoriesForCurrentTeam","displayedChannels","getDisplayedChannels","channelsToMove","targetCategory","find","category","filter","selectedChannel","channel","isDMGM","General","CategoryTypes","displayedChannelIds","map","sort","a","b","newIndex","getCategory","filteredChannelIds","makeGetChannelIdsForCategory","removedChannelsAboveInsert","index","shiftedIndex","channel_ids","updatedChannelIds","insertMultipleWithoutDuplicates","previousChannelId","sourceIndex","Math","max","adjustTargetIndexForMove","moveChannelsToCategory","clearChannelSelection","currentChannel","getCurrentChannelId","multiSelectChannelTo","lastSelected","lastSelectedChannel","allChannelsIdsInOrder","getChannelsInCategoryOrder","indexOfNew","indexOfLast","start","min","end","inBetween","slice","AddGroupsToChannelModal","React","constructor","props","super","_defineProperty","this","actions","setModalSearchTerm","setState","show","err","addError","message","saving","groupIDs","values","v","skipCommit","onAddCallback","handleHide","Promise","all","linkGroupSyncable","groupID","currentChannelId","SyncableType","auto_add","handleResponse","value","Object","assign","userIds","push","loadingState","loadingGroups","page","prevPage","setGroupsLoadingState","getGroupsNotAssociatedToChannel","searchTerm","GROUPS_PER_PAGE","then","term","option","isSelected","onAdd","onMouseMove","rowSelected","key","ref","selectedItemRef","className","onClick","src","groupsAvatar","alt","width","height","display_name","FormattedMessage","defaultMessage","num","member_count","searchTimeoutId","search","componentDidMount","getTeam","teamID","getAllGroupsAssociatedToTeam","getAllGroupsAssociatedToChannel","componentDidUpdate","prevProps","clearTimeout","window","setTimeout","Constants","renderValue","render","numRemainingText","buttonSubmitText","localizeMessage","buttonSubmitLoadingText","groupsToShow","groups","excludeGroups","hasGroup","og","g","includeGroups","groupsToShowValues","group","_objectSpread","label","Modal","dialogClassName","onHide","onExited","closeButton","componentClass","channelName","currentChannelName","MultiSelect","options","optionRenderer","renderOption","intl","valueRenderer","perPage","handlePageChange","handleInput","handleDelete","handleAdd","addValue","handleSubmit","maxValues","loading","placeholderText","_pt","isRequired","injectIntl","connect","ownProps","modalSearch","getCurrentChannel","selectGroupsNotAssociatedToChannel","team_id","regex","RegExp","test","name","bindActionCreators","fill","xmlns","opacity","d","fillOpacity","SearchableChannelList","getDerivedStateFromProps","isSearch","e","target","isEnterKeyPressed","isKeyPressed","shiftKey","ctrlKey","altKey","classList","contains","click","stopPropagation","joiningChannel","handleJoin","isMemberOfChannel","closeModal","ModalIdentifiers","_this$props$channelsM","ariaLabel","concat","purpose","toLowerCase","channelTypeIcon","isArchivedChannel","ArchiveOutlineIcon","size","isPrivateChannel","LockOutlineIcon","GlobeIcon","memberCount","channelsMemberCount","membershipIndicator","CheckIcon","channelPurposeContainerAriaLabel","localizeAndFormatMessage","messages","channelPurpose","channelPurposeContainer","AccountOutlineIcon","joinViewChannelButtonClass","classNames","joinViewChannelButton","disabled","Boolean","tabIndex","LoadingWrapper","text","sharedChannelIcon","shared","SharedChannelIndicator","channelType","withTooltip","_this$channelListScro","preventDefault","nextDisabled","nextTimeoutId","nextPage","channelListScroll","current","scrollTo","top","_this$channelListScro2","channelSearchValue","currentTarget","doSearch","rememberHideJoinedChannelsChecked","hideJoinedChannelsPreference","tagName","Filter","Archived","Private","Public","UserAgent","focus","document","addEventListener","onKeyDown","componentWillUnmount","removeEventListener","myChannelMemberships","channels","listContent","nextButton","previousButton","LoadingScreen","noMore","MagnifyingGlassSVG","getEmptyStateMessage","noResultsText","pageStart","channelsPerPage","pageEnd","channelsToDisplay","createChannelRow","previousPage","input","QuickInput","placeholder","formatMessage","onInput","handleChange","clearable","onClear","handleClear","checkIcon","color","channelDropdownItems","Menu","changeFilter","All","leadingElement","GlobeCheckedIcon","labels","trailingElements","canShowArchivedChannels","menuButton","getFilterLabel","ChevronDownIcon","channelDropdown","children","menu","item","hideJoinedButtonClass","checked","hideJoinedPreferenceCheckbox","handleChecked","CheckboxCheckedIcon","channelCountLabel","channelCount","count","dropDownContainer","role","defineMessages","BrowseChannels","handleExit","closeEditRHS","openModal","modalId","dialogType","NewChannelModal","rhsOpen","rhsState","RHSStates","closeRightHandSide","force","searchedChannels","serverError","getChannels","getChannelsMemberCount","done","_result","currentUserId","teamName","joinChannel","getHistory","getRelativeChannelURL","onChange","searching","searchAllChannels","team_ids","nonAdminSearch","include_deleted","channelIDsForMemberCount","setSearchResults","ignoredErr","c","delete_at","shouldHideJoinedChannels","getChannelsWithoutJoined","setGlobalItem","StoragePrefixes","toString","channelList","archivedChannels","privateChannels","allChannels","localeCompare","allChannelsWithoutJoined","publicChannelsWithoutJoined","archivedChannelsWithoutJoined","privateChannelsWithoutJoined","filterOptions","loadComplete","promises","CHANNELS_CHUNK_SIZE","getArchivedChannels","results","flatMap","channelsRequestStarted","serverErrorState","activeChannels","getActiveChannels","createNewChannelButton","icon","buttonClassName","TeamPermissionGate","permissions","Permissions","handleNewChannel","body","handleShowJoinedChannelsPreference","title","GenericModal","compassDesign","modalHeaderText","headerButton","autoCloseOnConfirmButton","enforceFocus","bodyPadding","getChannelsWithoutArchived","createSelector","getChannelsInCurrentTeam","getArchivedOtherChannels","getPrivateChannelsSelector","team","getCurrentTeam","getGlobalItem","makeGetGlobalItem","getCurrentUserId","getCurrentTeamId","requests","status","RequestStatus","getConfig","ExperimentalViewArchivedChannels","getMyChannelMemberships","getRhsState","getIsRhsOpen","getChannelsMemberCountSelector","MAX_BOOKMARKS_PER_CHANNEL","OPEN_CHANNEL","PRIVATE_CHANNEL","GM_CHANNEL","DM_CHANNEL","BOOKMARK_PERMISSION","useChannelBookmarkPermission","action","useSelector","getHaveIChannelBookmarkPermission","getChannel","myMembership","getMyChannelMember","channel_id","permission","haveIChannelPermission","useCanUploadFiles","canUploadFiles","useCanGetPublicLink","isPublicLinksEnabled","getIsChannelBookmarksEnabled","getFeatureFlagValue","license","getLicense","IsLicensed","useChannelBookmarks","useDispatch","getChannelBookmarks","order","useMemo","keys","sort_order","useEffect","emojis","reduce","_ref","emoji","trimmedEmojiName","loadCustomEmojisIfNeeded","EditCategoryModal","categoryName","isProcessing","timeoutId","renameCategory","currentTeamId","channelIdsToAdd","trackEvent","initialCategoryName","editButtonText","helpText","getText","confirmButtonText","handleEnterKeyPress","handleConfirm","handleCancel","isConfirmDisabled","inputComponent","MaxLengthInput","autoFocus","maxLength","SearchShortcut","variant","controlKey","isMac","shortcutKeyVariant","ShortcutKeyVariant","ShortcutKey","isDesktopApp","propTypes","MultiRangeSlider","priceRangeHandler","minVal","setMinVal","useState","maxVal","setMaxVal","minValRef","useRef","maxValRef","range","getPercent","useCallback","round","minPercent","maxPercent","Number","style","left","event","classnames","IconLabel","description","onSelectedChange","SelectedKeywords","handleKeywordRemove","updateKeyword","showUpdateKeyword","setShowUpdateKeyword","inputValue","setInputValue","onFocus","onBlur","onKeyPress","CloseIcon","colors","keywords","sizes","handleFilterChange","handleKeywordAdd","handleKeywordUpdate","priceRange","showAddKeyword","setShowAddKeyword","keyword","PlusBoxIcon","isChecked","filterType","DualRangeSlider","url","price","IconButton","selected","onClickHandler","backgroundColor","buttons","handleSearchTermChange","handleSortByChange","setSelected","SearchIcon","button","DummyProducts","DummyPriceRange","ProductResults","filters","setFilters","sortBy","products","setProducts","console","fetchProducts","FilterMenu","includes","prevFilters","k","newFilters","Array","isArray","newKeywords","SearchBar","product","ProductInfoCard","CreateNewCategoryMenuItem","otherProps","_objectWithoutProperties","_excluded","handleCreateCategory","FolderPlusOutlineIcon","MarkAsReadConfirmModal","numChannels","useIntl","header","confirm","MarkAsUnreadItem","handleViewCategory","dialogProps","MarkAsUnreadIcon","SidebarCategoryGenericMenu","isMenuOpen","setIsMenuOpen","menuOpen","class","DotsVerticalIcon","menuButtonTooltip","onToggle","isOpen","memo","SidebarCategoryHeaderStatic","wrapEmojis","SidebarCategoryHeader","dragHandleProps","Reflect","deleteProperty","muted","dragging","isDragging","isCollapsed","isCollapsible","isDraggingOver","defaultProps","ChannelMentionBadge","unreadMentions","hasUrgent","badge","urgent","ChannelPencilIcon","hasDraft","draft","trim","fileInfos","uploadsInProgress","getPostDraft","SidebarChannelIcon","isDeleted","ChannelMoveToSubMenu","getAllChannels","currentTeam","currentCategory","getCategoryInTeamWithChannel","handleMoveToCategory","handleMoveToNewCategory","createSubmenuItemsForCategoryArray","selectedCategory","StarOutlineIcon","FolderOutlineIcon","FolderMoveOutlineIcon","filterCategoriesBasedOnChannelType","inHeaderDropdown","ChevronRightIcon","menuId","menuAriaLabel","isSubmenuOneOfSelectedChannels","every","getMoveToCategorySubmenuItems","SidebarChannelMenu","channelLink","favoriteChannel","isFavorite","isMuted","isUnread","managePrivateChannelMembers","managePublicChannelMembers","markMultipleChannelsAsRead","markMostRecentPostInChannelAsUnread","muteChannel","onMenuToggle","unfavoriteChannel","unmuteChannel","channelLeaveHandler","isLeaving","markAsReadUnreadMenuItem","handleMarkAsRead","Date","now","handleMarkAsUnread","favoriteUnfavoriteMenuItem","handleUnfavoriteChannel","StarIcon","handleFavoriteChannel","muteUnmuteChannelMenuItem","muteChannelText","handleUnmuteChannel","BellOffOutlineIcon","handleMuteChannel","BellOutlineIcon","copyLinkMenuItem","handleCopyLink","copyToClipboard","LinkVariantIcon","addMembersMenuItem","handleAddMembers","ChannelInviteModal","AccountPlusOutlineIcon","leaveChannelMenuItem","leaveChannelText","handleLeaveChannel","ExitToAppIcon","isDestructive","ChannelMoveToSubmenu","mapDispatchToProps","member","isFavoriteChannel","isChannelMuted","getSiteURL","SidebarChannelLink","element","labelRef","showTooltip","offsetWidth","scrollWidth","ariaLabelPrefix","mark","Mark","handleSelectChannel","defaultPrevented","cmdOrCtrlPressed","enableToolTipIfNeeded","isChannelSelected","link","firstChannelName","showChannelsTutorialStep","channelsTutorialTip","ChannelsAndDirectMessagesTour","labelElement","WithTooltip","placement","customStatus","teammateId","CustomStatusEmoji","userID","spanStyle","emojiStyle","marginTop","marginBottom","isSharedChannel","content","Pluggable","pluggableName","handleMenuToggle","Link","getAriaLabel","to","handleChannelClick","unsetEditingPost","getUnreadCount","makeGetChannelUnreadCount","unreadCount","config","enableTutorial","EnableTutorial","tutorialStep","getInt","TutorialTourName","channelTourTriggered","OnboardingTaskCategory","OnboardingTasksName","FINISHED","GenericTaskSteps","isOnboardingFlowEnabled","EnableOnboardingFlow","OnboardingTourSteps","mentions","unreadMsgs","showUnread","getFirstChannelName","SidebarBaseChannel","currentTeamName","handleLeavePublicChannel","callback","leaveChannel","handleLeavePrivateChannel","LeaveChannelModal","channelIcon","SidebarBaseChannelIcon","SidebarDirectChannel","teammate_id","savePreferences","user_id","leaveDirectChannel","active","redirectChannel","teammate","ProfilePicture","last_picture_update","is_bot","wrapperClass","newStatusIcon","statusClass","displayname","username","getIcon","remote_id","getUser","currentUser","getCurrentUser","getRedirectChannelNameForTeam","SidebarGroupChannel","membersCount","getMemberCount","makeGetGmChannelMemberCount","connector","makeGetChannel","isCurrentChannel","draggingState","getDraggingState","autoSortedCategoryIds","getAutoSortedCategoryIds","isCategoryCollapsed","isCategoryDragged","setChannelRef","isDraggable","channelIndex","isAutoSortedCategory","setShow","setRef","refMethod","handleAnimationStart","animationName","handleAnimationEnd","component","selectedCount","Draggable","draggableId","provided","snapshot","draggable","innerRef","collapsed","expanded","unread","selectedDragging","fadeOnDrop","isDropAnimating","draggingOver","has","noFloat","draggableProps","onAnimationStart","onAnimationEnd","initializeTeam","selectTeam","LocalStorageStore","fetchChannelsAndMembers","getIsUserStatusesConfigEnabled","addVisibleUsersInCurrentChannelToStatusPoll","customGroupEnabled","isCustomGroupsEnabled","LDAPGroups","groupsParams","filter_allow_reference","per_page","include_member_count","include_member_ids","include_archived","myGroupsParams","filter_has_member","getGroupsByUserIdPaginated","getAllGroupsAssociatedToChannelsInTeam","group_constrained","getGroups","UrlTabs","tabs","activeTabIndex","urlManager","idnumber","tab","textAlign","overflow","setActivebrowserTab","removebrowserTab","LuPlus","addbrowserTab","BrowserHeader","urls","isBrowserTabActive","Browser_Search_Section","LiaAngleLeftSolid","LiaAngleRightSolid","IoRefresh","CiLock","defaultValue","RxHamburgerMenu","UrlIframe","sandbox","border","BrowserBody","setUrl","backgroundImage","onSubmit","setTabUrl","required","CameraOutlineIcon","logoImage","robotImage","ContentDisplay","display","BrowserView","marginLeft","flexDirection","BrowserSearchSection","USER_ID_PAIR_REGEXP","onChannelByIdentifierEnter","match","history","path","identifier","params","teamObj","getTeamByName","channelPath","channelsByName","getChannelByName","moreChannelsByName","getOtherChannels","chan","status_code","isDirectChannelIdentifier","getPathFromIdentifier","getChannelsNameMapInTeam","getChannelDispatchResult","getChannelByNameAndTeamName","entities","myMembers","membership","getChannelMember","user","_channel","UserUtils","roles","joinPromptResult","joinPrivateChannelPrompt","join","joinChannelDispatchResult","handleChannelJoinError","goToDirectChannelByUserIds","replace","doChannelChange","goToChannelByChannelName","dispatchResult","goToDirectChannelByUserId","Utils","goToChannelByChannelId","groupId","handleError","markGroupChannelOpen","goToGroupChannelByGroupId","selectUserByUsername","getUserByUsername","directChannelDispatchRes","openDirectChannelToUserId","goToDirectChannelByUsername","email","selectUserByEmail","getUserByEmail","goToDirectChannelByEmail","userId","selectUser","GlobalActions","defaultChannel","ONE_DAY_MS","CenterMessageLock","_cloudLimits$messages","openPricingModal","useOpenPricingModal","isAdminUser","isAdmin","cloudLimits","limitsLoaded","useGetLimits","oldestPostTime","getOldestPostTimeInChannel","timestamp","getNextDay","firstInaccessiblePostTime","notifyAdminBtnText","notifyAdmin","notifyRequestStatus","useNotifyAdmin","ctaText","required_feature","MattermostFeatures","required_plan","LicenseSkus","trial_notification","dateFormat","month","day","year","titleValues","date","formatDate","limit","formatNumber","cta","NotifyStatus","chunks","href","trackingLocation","EyeOffOutlineIcon","PrivateChannelIntroSvg","_props$width","_props$height","viewBox","xmlnsXlink","cx","cy","rx","ry","x1","y1","x2","y2","gradientUnits","offset","stopColor","stopOpacity","PublicChannelIntroSvg","stroke","strokeWidth","strokeMiterlimit","AddMembersButton","totalUsers","usersLimit","pluginButtons","LoadingSpinner","inviteUsers","LessThanMaxFreeUsers","MoreThanMaxFreeUsers","_ref2","ToggleModalButton","InvitationModal","_ref3","modal","isPrivate","ChannelPermissionGate","PluggableIntroButtons","buttonProps","_buttonProps$action","call","channelMember","getMyChannelMembership","getChannelIntroPluginButtons","ChannelIntroMessage","_this$props$stats","stats","total_users_count","getTotalUsersStats","fullWidth","locale","channelProfiles","enableUserCreation","isReadOnly","teamIsGroupConstrained","creatorName","teammateName","isMobileView","centeredIntro","toggleFavorite","channelIntroId","pluggableButton","setHeaderButton","createSetHeaderButton","actionButtons","createFavoriteButton","UserProfile","FormattedMarkdownMessage","createDMIntroMessage","profiles","channelMembership","currentUserProfile","pictures","profile","createNotificationPreferencesButton","getGMIntroMessageSpecificPart","createGMIntroMessage","teamInviteLink","AddGroupsToTeamModal","createDefaultIntroMessage","channelInviteButton","ChannelIntroPublicSvg","createOffTopicIntroMessage","uiName","memberMessage","channelIsArchived","FormattedDate","create_at","getMonthLong","createMessage","purposeMessage","creator","ChannelIntroPrivateSvg","createStandardIntroMessage","gmIntroMessages","NotificationLevel","userProfile","_membership$notify_pr","_userProfile$notify_p","channelNotifyProp","notify_props","desktop","userNotifyProp","notifyLevelToUse","EditChannelHeaderModal","PencilOutlineIcon","classes","favoriteText","ChannelNotificationsModal","BellRingOutlineIcon","EnableUserCreation","getMyCurrentChannelMembership","getDirectTeammate","creator_id","getTotalUsersStatsSelector","get","Preferences","getCurrentLocale","getProfilesInCurrentChannel","isCurrentChannelFavorite","getDisplayNameByUser","getIsMobileView","PostListRow","blockShortcutReactToLastPostForNonMessages","listId","emitShortcutReactToLastPostFrom","isIdNotPost","Locations","isLastPost","shortcutReactToLastPostEmittedFrom","shortcutReactToLastPostEmittedFromCenter","previousListId","loadingOlderPosts","loadingNewerPosts","OLDER_MESSAGES_LOADER","NEWER_MESSAGES_LOADER","CHANNEL_INTRO_MESSAGE","LOAD_OLDER_MESSAGES_TRIGGER","LOAD_NEWER_MESSAGES_TRIGGER","PostListRowListIds","PostListUtils","DateSeparator","NewMessageSeparator","separatorId","newMessagesSeparatorActions","exceededLimitChannelId","loadOlderPosts","loadNewerPosts","shouldHideAnimation","hideAnimation","postProps","previousPostId","shouldHighlight","togglePostMenu","CombinedUserActivityPost","location","combinedId","PostComponent","post","getShortcutReactToLastPostEmittedFrom","usage","getUsage","limits","getCloudLimits","getCloudLimitsLoaded","getPost","plugins","components","NewMessagesSeparatorAction","getLimitedViews","ScrollToBottomIcon","x","y","enableBackground","ScrollToBottomArrows","isScrolling","atBottom","innerWidth","scrolling","HintToast","onDismiss","handleDismiss","ScrollToBottomToast","jumpToRecentsMessage","UnreadBelowIcon","TOAST_REL_RANGES","RelativeRanges","ToastWrapperClass","_this","showUnreadToast","hideUnreadToast","showNewMessagesToast","hideNewMessagesToast","showUnreadWithBottomStartToast","hideUnreadWithBottomStartToast","hideArchiveToast","showMessageHistoryToast","updateLastViewedBottomAt","onSearchHintDismiss","since","isToday","Timestamp","useTime","ranges","searchShortcut","focusedPostId","atLatestPost","scrollToNewMessage","changeUrlToRemountChannelView","_this$props$hideScrol","_this$props","scrollToLatestMessages","hideScrollToBottomToast","scrollToUnreadMessages","unreadCountInChannel","prevState","unreadScrollPosition","newRecentMessagesCount","countNewMessages","rootPosts","isCollapsedThreadsEnabled","postListIds","channelMarkedAsUnread","initScrollOffsetFromBottom","lastViewedAt","latestPostTimeStamp","lastViewedBottom","isNewMessageLineReached","shouldStartFromBottomWhenUnread","mounted","toastPresent","handleShortcut","updateToastStatus","updateNewMessagesAtInChannel","prevPostsCount","presentPostsCount","getToastToRender","showSearchHintToast","showScrollToBottomToast","unreadToastProps","onClickMessage","showActions","Toast","newMessagesToastText","unreadWithBottomStartToastProps","jumpDirection","showNewMessagesToastOverrides","archiveToastProps","extraClasses","archiveToastText","toasts","onScrollToBottomToastDismiss","hideSearchHintToast","getSearchHintToastText","toastToRender","getNewMessagesIndex","newMessages","withRouter","countUnreadsBelow","getAllPosts","postIds","allPosts","Posts","root_id","getRootPosts","obj","preparePostIdsForPostList","makePreparePostIdsForPostList","isManuallyUnread","lastChannelViewTime","getUnreadScrollPositionPreference","getPostIdsInChannel","countCurrentChannelUnreadMessages","ToastWrapper","LatestPostReader","latestPostId","getLatestPostId","latestPost","usePostAriaLabel","postListStyle","padding","virtListStyles","position","bottom","maxHeight","PostList","showSearchHintThreshold","getShowSearchHintThreshold","opened","dynamicListStyle","willChange","postMenuOpened","itemId","basePaddingClass","previousItemId","nextItemId","isDateLine","isStartOfNewMessages","getPreviousPostId","changeUnreadChunkTimeStamp","scrollDirection","scrollOffset","scrollUpdateWasRequested","clientHeight","scrollHeight","didUserScrollBackwards","didUserScrollForwards","isOffsetWithInRange","offsetFromBottom","getOffsetFromBottom","shouldLoadNewPosts","atOldestPost","scrollStopAction","fireAfter","checkBottom","_this$listRef$current","postsRenderedRange","listRef","_getRangeToRender","canLoadMorePosts","PostRequestTypes","showSearchHint","isSearchHintDismissed","updateScrollToBottomToastVisibility","screen","updateAtBottom","isAtBottom","isScrollToBottomDismissed","visibleTopItem","topPostId","visibleStartIndex","visibleStopIndex","updateFloatingTimestamp","newMessageLineIndex","onNewMessageLineReached","findIndex","newMessagesSeparatorIndex","scrollToBottom","toggleShouldStartFromBottomWhenUnread","_this$listRef$current2","scrollToItem","_this$listRef$current3","handleSearchHintDismiss","handleScrollToBottomToastDismiss","channelIntroMessage","initScrollCompleted","postListRef","DelayedAction","handleScrollStop","initRangeToRender","postIndex","postId","maxPostsForSlicing","handleWindowResize","EventEmitter","EventTypes","getSnapshotBeforeUpdate","postsAddedAtTop","channelHeaderAdded","_postListNode$parentE","postListNode","previousScrollTop","parentElement","scrollTop","previousScrollHeight","_prevState","postlistScrollHeight","scrollValue","_this$listRef$current4","newPostListIds","autoRetryEnable","nextState","FloatingTimestamp","AutoSizer","_ref4","renderToasts","DynamicSizeList","itemData","overscanCountForward","overscanCountBackward","onScroll","initScrollToIndex","innerListStyle","loaderId","correctScrollToBottom","onItemsRendered","scrollToFailed","renderRow","markAndMeasureChannelSwitchEnd","fresh","channelSwitch","measureAndReport","Measure","startMark","endMark","canFail","teamSwitch","shouldTrackPerformance","requestCount1","countRequestsBetween","duration","requestCount","requestCount2","clearMarks","isFirstLoad","isPrefetchingInProcess","loadPostsAround","loadUnreads","syncPostsInChannel","loadLatestPosts","markChannelAsRead","loadPosts","autoRetriesCount","callLoadPosts","getOldestPostId","hasInaccessiblePosts","extraPagesLoaded","getPostsAfter","getPostsBefore","oldestPostId","getOldestVisiblePostId","getLatestVisiblePostId","actionsForPostList","postsOnLoad","VirtPostList","formattedPostIds","centered","posts","postsInChannel","memoizedGetLatestPostId","memoizeResult","getPostsChunkAroundPost","makeGetPostsChunkAroundPost","chunk","unreadChunkTimeStamp","channelViewState","channelPrefetchStatus","limitedViews","focusedPost","getUnreadPostsChunk","getRecentPostsChunkInChannel","recent","oldest","shouldHideNewMessageIndicator","isPostsChunkIncludingUnreadsPosts","indicateNewMessages","PostView","loaderForChangeOfPostsChunk","requestAnimationFrame","channelLoading","_ownProps$match","last_post_at","isChannelLoading","teamMemberships","postid","getTeamMemberships","onClickRefresh","reload","InputLoading","updateWaitForLoader","showMessage","setShowMessage","timeout","ChannelHeader","makeAsyncComponent","lazy","FileUploadOverlay","ChannelBookmarks","AdvancedCreatePost","ChannelView","updatedState","deferredPostView","createDeferredPostView","goToLastViewedChannel","waitForLoader","channelViewRef","enableWebSocketEventScope","WebSocketClient","viewArchivedChannels","createPost","deactivatedChannel","onClickCloseChannel","missingChannelRole","onUpdateInputShowLoader","DeferredPostView","overlayType","isChannelBookmarksEnabled","isDeactivatedChannel","deferComponentRender","enableOnboardingFlow","FeatureFlagWebSocketEventScope","_getMyChannelMembersh","split","some","getRoles","isMissingChannelRoles","isCloud","Cloud","teamUrl","getCurrentRelativeTeamUrl","isFirstAdmin","ChannelIdentifierRouter","replaceUrlTimeout","channelUrl","replaceUrlIfPermalink","ChannelHeaderMobile","GlobalThreads","Drafts","PermalinkView","PlaybookRunner","Membership","Shop","CenterChannel","returnTo","lastReturnTo","nextProps","pathname","getProfiles","lastChannelPath","lhsOpen","rhsMenuOpen","Switch","Route","ID_PATH_PATTERN","TEAM_NAME_PATH_PATTERN","IDENTIFIER_PATH_PATTERN","Redirect","mapStateToProps","lastViewedType","getLastViewedTypeByTeamName","getLastViewedChannelNameByTeamName","previousTeamId","getPreviousTeamId","previousTeamLastViewedType","getPreviousTeamLastViewedType","PreviousViewedTypes","getIsLhsOpen","getIsRhsMenuOpen","isFirstPreload","trackPreloadedChannels","prefetchQueueObj","_prefetchQueueObj$","_prefetchQueueObj$2","_prefetchQueueObj$3","channelIdsForTeam","getChannelIdsForCurrentTeam","numHigh","numMedium","numLow","numTotal","Priority","PrefetchLimits","prefetchQueue","unreadChannels","memberships","collapsedThreads","unreadChannelsCount","high","medium","low","unreadMax","mentionMax","mention_count_root","mention_count","mark_unread","queue","PQueue","concurrency","DataPrefetch","delay","unreadChannel","random","prefetchChannelPosts","prefetchRequestStatus","priority","hasOwnProperty","priorityQueue","add","prefetchPosts","sidebarLoaded","loadProfilesForSidebar","prefetchTimeout","clear","prefetchData","isSidebarLoaded","lastUnreadChannel","getUnreadChannels","AudioChatBubble","userImage","audioSrc","bubbleColor","visualizerRef","blob","setBlob","audio","setAudio","setBlobState","loadAudio","URL","createObjectURL","Audio","load","abortController","AbortController","fetch","signal","res","catch","abort","revokeObjectURL","paused","play","pause","AudioVisualizer","barWidth","gap","barColor","ChatBubble","images","currentImage","setCurrentImage","modalOpened","setModalOpened","image","MINIMUM_WIDTH","MINIMUM_HEIGHT","DIMENSION_KEY","Messenger","onClose","initialWidth","initialHeight","getWindowSize","localStorage","getItem","JSON","parse","animStyle","useSpring","from","scaleY","headerRef","mouseX","mouseY","handleResizeWidth","ev","dx","parseInt","getComputedStyle","handleResizeHeight","dy","handleMousedown","offsetX","clientWidth","capture","offsetY","handleMouseup","setItem","stringify","remove","container","handlePosition","newBottom","newLeft","animated","strokeLinecap","strokeLinejoin","MessengerPopup","popupOpen","setPopupOpen","popupBtnAnimStyles","translateY","bounce","messengerIcon","closePopup","ResizableLhs","containerRef","ResizableDivider","globalCssVar","CssVarKeyForResizable","defaultWidth","DEFAULT_LHS_WIDTH","dir","ResizeDirection","InternetBrowserLink","SidebarHeaderContainer","styled","Flex","attrs","row","justify","alignment","withConfig","SidebarHeading","Heading","margin","SidebarHeader","_","users","theme","getTheme","CompassThemeProvider","justifyContent","alignItems","cursor","layerIcon","showNewChannelModal","showMoreChannelsModal","showCreateUserGroupModal","invitePeopleModal","showCreateCategoryModal","canCreateChannel","canJoinPublicChannel","handleOpenDirectMessagesModal","unreadFilterEnabled","userGroupsEnabled","canCreateCustomGroups","CHANNEL_MODE","QuickSwitchModal","switchBox","textbox","getTextbox","activeElement","focusTextbox","focusPostTextbox","querySelector","_this$props$onExited","modalButton","shouldShowLoadingSpinner","mode","joinChannelById","switchToChannel","hideOnSelect","suggestions","loadingPropPresent","items","pretext","matchedPretext","hasSuggestions","providers","channelProviders","help","hideOnCancel","restoreFocus","animation","SuggestionBox","setSwitchBoxRef","onItemSelected","listComponent","SuggestionList","listPosition","completeOnTab","spellCheck","delayInputUpdate","openWhenEmpty","onSuggestionsReceived","handleSuggestionsReceived","forceSuggestionsWhenBlur","renderDividers","shouldSearchCompleteText","NoResultsIndicator","NoResultsVariant","SwitchChannelProvider","disableTooltip","enableTooltip","shortcut","default","ShortcutKeys","mac","ChannelFilter","toggleUnreadFilter","Keyboard","handleUnreadFilterKeyPress","hasMultipleTeams","unreadsAriaLabel","teams","getMyTeams","isUnreadFilterEnabled","ChannelNavigator","toggleQuickSwitchModal","isQuickSwitcherOpen","handleQuickSwitchKeyPress","showUnreadsCategory","openQuickSwitcher","shouldShowUnreadsCategory","isModalOpen","Tabs","activeTab","activeApp","handleTabClick","uniqueId","setActiveTab","setActiveApp","iconlayer","handleCloseTab","removeTab","DeleteCategoryModal","deleteCategory","confirmButtonClassName","category_name","cancel","paginationCount","paginationNext","paginationPrev","SidebarCategoryMenu","getUnreadsIdsForCategory","makeGetUnreadIdsForCategory","unreadsIds","muteUnmuteCategoryMenuItem","toggleCategoryMute","setCategoryMuted","deleteCategoryMenuItem","renameCategoryMenuItem","handleDeleteCategory","handleRenameCategory","TrashCanOutlineIcon","handleSortChannels","sorting","setCategorySorting","sortChannelsSelectedValue","sortChannelsIcon","FormatListBulletedIcon","CategorySorting","SortAlphabeticalAscendingIcon","ClockOutlineIcon","sortChannelsMenuItem","readMultipleChannels","markAsReadMenuItem","MarkAsReadMenuItem","SidebarCategorySortingMenu","selectedDmNumber","getVisibleDmGmLimit","handleSortDirectMessages","sortDirectMessagesIcon","sortDirectMessagesSelectedValue","sortDirectMessagesMenuItem","showMessagesCountSelectedValue","showMessagesCountMenuItem","AccountMultipleOutlineIcon","dmGmShowCount","handlelimitVisibleDMsGMs","number","openDirectMessageMenuItem","isAddChannelCtaDropdownOpen","addChannelCtaDropdown","AddChannelsCtaButton","touchedAddChannelsCtaButton","getBool","Touched","canCreatePublicChannel","haveICurrentChannelPermission","isAddChannelCtaOpen","openAddChannelsCtaOpen","open","setAddChannelCtaDropdown","buttonClass","addChannelsButton","btnCallback","handleClick","storePreferencesAndTrackEvent","MenuWrapper","renderDropdownItems","joinPublicChannel","createChannel","browseChannelsAction","SidebarCategory","_this$categoryTitleRe","categoryTitleRef","handleA11yKeyDown","a11yKeyDownRegistered","_this$categoryTitleRe2","handleCollapse","SidebarChannel","DraggingStateTypes","setCategoryCollapsed","newDropBoxRef","handleOpenMoreDirectChannelsModal","nativeEvent","isNewCategory","isDragDisabled","onTransitionEnd","removeAnimation","_this$categoryTitleRe3","_this$categoryTitleRe4","A11yCustomEventTypes","handleA11yActivateEvent","handleA11yDeactivateEvent","_this$categoryTitleRe5","_this$categoryTitleRe6","categoryIndex","renderedChannels","renderChannel","categoryMenu","newLabel","addHelpLabel","KeyboardShortcutSequence","KEYBOARD_SHORTCUTS","hideDescription","isInsideTooltip","categoryNames","disableInteractiveElementBlocking","addChannelsCtaButton","dropDisabled","isDropDisabled","menuIsOpen","DraggingStates","Droppable","droppableId","droppableProvided","droppableSnapshot","droppableProps","directMessagesModalButton","renderNewDropBox","showPlaceholder","direct_messages","favorites","getChannelIdsForCategory","makeGetFilteredChannelIdsForCategory","DraftsLink","UnreadChannelIndicator","UnreadChannels","renderView","renderThumbHorizontal","renderTrackVertical","renderThumbVertical","scrollbarStyles","SidebarList","staticPages","channelRefs","set","delete","unreadChannelIds","spring","val","getCurrentValue","scrollbar","scrollToChannel","getFirstUnreadChannel","getLastUnreadChannel","scrollingToUnread","offsetTop","offsetHeight","getScrollTop","getClientHeight","showTopUnread","scrollEnd","getDisplayedChannelIds","scrollToPosition","showBottomUnread","scrollAnimation","setCurrentValue","setAtRest","setEndValue","firstUnreadChannel","firstUnreadElement","lastUnreadElement","getFirstUnreadChannelFromChannelIdArray","reverse","i","switchToChannelById","switchToLhsStaticPage","metaKey","staticPageIds","getDisplayedStaticPageIds","allIds","curSelectedId","currentStaticPageId","curIndex","nextIndex","nextId","mod","navigateById","allChannelIds","unshift","hasUnreadThreads","direction","findNextUnreadChannelId","nextChannelId","newCategoryIds","debounce","updateUnreadIndicators","before","droppable","querySelectorAll","draggingChannels","initial","onDragStart","onDragEnd","reason","destination","moveCategory","channelsListScrollTimeout","autoHide","Map","animate","SpringSystem","createSpring","setOvershootClampingEnabled","addListener","onSpringUpdate","handleScrollAnimationUpdate","navigateChannelShortcut","navigateUnreadChannelShortcut","scrollToTop","close","unreadsCategory","renderedCategories","renderCategory","DragDropContext","onBeforeDragStart","onBeforeCapture","above","below","scrollToFirstUnreadChannel","extraClass","scrollToLastUnreadChannel","onPointerLeave","hideChannelListScrollbar","onPointerOver","showChannelListScrollbar","Scrollbars","_getThreadCountsInCur","getThreadCountsInCurrentTeam","total_unread_threads","getUnreadChannelIds","getCurrentStaticPageId","getVisibleStaticPages","MobileSidebarHeader","MoreDirectChannels","CreateUserGroupsModal","KeyboardShortcutsModal","UserSettingsModal","Sidebar","isKeyBoardShortcutModalOpen","isContentProductSettings","showDirectChannelsModal","hideMoreDirectChannelsModal","showMoreDirectChannelsModal","moreDirectChannelsModal","onModalDismissed","isExistingChannel","fetchMyCategories","handleClickClearChannelSelection","handleKeyDownEvent","canCreatePrivateChannel","renderModals","haveISystemPermission","PostsChannelResetWatcher","isCRTEnabled","loaded","resetReloadPostsInChannel","BadgeStatus","UnreadsStatusHandlerClass","unreadStatus","unreadMentionCount","basicUnreadMeta","DesktopApp","siteName","currentTeammate","inGlobalThreads","inDrafts","currentSiteName","mentionTitle","unreadTitle","isDynamicFaviconSupported","prefix","badgeStatus","link16x16","link24x24","link32x32","link64x64","link96x96","getFavicon","Mention","faviconMention16x16","faviconMention24x24","faviconMention32x32","faviconMention64x64","faviconMention96x96","Unread","faviconUnread16x16","faviconUnread24x24","faviconUnread32x32","faviconUnread64x64","faviconUnread96x96","faviconDefault16x16","faviconDefault24x24","faviconDefault32x32","faviconDefault64x64","faviconDefault96x96","updateTitle","oldBadgeStatus","getBadgeStatus","newBadgeStatus","updateFavicon","updateDesktopApp","None","SiteName","getUnreadStatus","matchPath","UnreadsStatusHandler","ProductNoticesModal","ResetStatusModal","BODY_CLASS_FOR_CHANNEL","ChannelController","openShop","setOpenShop","enabledUserStatuses","_navigator$userAgentD","isMsBrowser","isInternetExplorer","isEdge","navigator","platform","userAgentData","bodyClass","getClassnamesForBody","cleanUpStatusAndProfileFetchingPoll","loadStatusesIntervalId","setInterval","clearInterval","CRTPostsChannelResetWatcher","shouldRenderCenterChannel","notesIcon","storeIcon","BackstageController","_StyledPluggable","_styled","gridArea","TeamController","_props$plugins","useHistory","teamNameParam","useParams","initialChannelsLoaded","setInitialChannelsLoaded","setTeam","getTeamFromTeamList","teamsList","blurTime","lastTime","joinTeamOrRedirect","joinedOnFirstLoad","joinedTeam","joinTeam","_user$id","_user$roles","userRoles","useTelemetryIdentitySync","InitialLoadingScreen","fetchAllMyTeamsChannelsAndChannelMembersREST","fetchInitialChannels","disableWakeUpReconnectHandler","wakeUpIntervalId","currentTime","log","reconnect","handleFocus","isActive","markAsReadOnFocus","disableRefetchingOnBrowserFocus","handleBlur","unsetActiveChannelOnServer","handleKeydown","replyTextbox","postTextbox","getElementById","browserIsIosSafari","isIosSafari","iNoBounce","teamsListDependency","teamFromTeamNameParam","initTeamOrRedirect","mfaRequired","teamLoaded","plugin","route","pluggableId","_teamsList$find","teamInList","teamname","teamByNameResult","isSuccess","addUserToTeamResult","addUserToTeam","Error","NeedsTeamComponent","DisableRefetchingOnBrowserFocus","DisableWakeUpReconnectHandler","selectedThreadId","getSelectedThreadIdInCurrentTeam","selectedPostId","getSelectedPostId","checkIfMFARequired","fillRule","transform","EMPTY_BOOKMARKS","channelBookmarks","byChannelId","bookmarkId","lhs","getDraftsCount","makeGetDraftsCount","collapsedThreadsEnabled","draftsCount","isVisible","isError"],"sourceRoot":""}