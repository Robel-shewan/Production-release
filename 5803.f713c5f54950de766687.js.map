{"version":3,"file":"5803.f713c5f54950de766687.js","mappings":"kNAsBA,MAAMA,EAAaC,IAAmD,IAAlD,IAACC,EAAG,UAAEC,EAAS,QAAEC,GAAeH,EAChD,OACII,IAAAA,cAAA,OAAKF,UAAWG,IAAW,gBAAiBH,IACxCE,IAAAA,cAACE,EAAAA,KAAI,CACD,cAAY,cACZH,QAASA,EACTI,GAAIN,GAEJG,IAAAA,cAAA,OACII,MAAM,IACNC,OAAO,KACPC,QAAQ,WACRC,KAAK,OACLC,MAAM,8BAENR,IAAAA,cAAA,QACIS,EAAE,0EACFF,KAAK,YAIf,EAEZZ,EAAAe,UAAA,CAjCEb,IAAGc,IAAAA,OAEHb,UAASa,IAAAA,OAKTZ,QAAOY,IAAAA,MA2BXhB,EAAWiB,aAAe,CACtBf,IAAK,KAGT,S,+EC7BA,QAbA,SAAiCgB,GAC7B,OAAQC,IACJ,MAAMC,GAAcC,EAAAA,EAAAA,KAEpB,OACIhB,IAAAA,cAACa,EAAgBI,OAAAC,OAAA,CACbH,YAAaA,GACTD,GACN,CAGd,C,iFCHO,MAAMK,EAAkBA,CAACC,EAAgCC,IAA2BA,GAAgBD,QAAAA,EAAkCE,OAAOC,UAErI,SAASP,IACpB,MAAMQ,GAAQC,EAAAA,EAAAA,MACPC,EAAQL,IAAgBM,EAAAA,EAAAA,KAwB/B,OAtBmBC,EAAAA,EAAAA,UAAQ,KAAM,IAAAC,EAAAC,EAAAC,EAC7B,MACI,CACIC,MAAO,CACHC,aAAcT,EAAMQ,MAAMC,aAAed,EAA4B,QAAbU,EAACH,EAAOM,aAAK,IAAAH,OAAA,EAAZA,EAAcK,cAAeb,GACtFc,mBAAoBX,EAAMQ,MAAMG,oBAEpCC,SAAU,CACNC,QAASb,EAAMY,SAASC,QAAUlB,EAA+B,QAAhBW,EAACJ,EAAOU,gBAAQ,IAAAN,OAAA,EAAfA,EAAiBO,QAAShB,GAC5EiB,cAAed,EAAMY,SAASE,eAElCC,MAAO,CACHC,OAAQhB,EAAMe,MAAMC,OAASrB,EAA4B,QAAbY,EAACL,EAAOa,aAAK,IAAAR,OAAA,EAAZA,EAAcS,OAAQnB,GAGnEoB,cAAejB,EAAMe,MAAME,cAC3BC,YAAalB,EAAMe,MAAMG,aAEhC,GAEN,CAAClB,EAAOE,EAAQL,GAGvB,C,0FCnCA,MAAMsB,EAAyB/C,IAClB,IADmB,sBAACgD,EAAqB,SAAEC,EAAW,cAC3DjD,EACJ,MAAMkD,EAAcF,GAChB5C,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,uBACHC,eAAe,4EAIvB,OACIjD,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAAA,MAAIgD,GAAG,aAAaH,GACpB7C,IAAAA,cAAA,MACIgD,GAAG,mBACHlD,UAAU,gBAETgD,GAEN,EAETH,EAAAjC,UAAA,CAvBEkC,sBAAqBjC,IAAAA,QAyBzB,QAAeX,IAAAA,KAAW2C,E,iuBCKX,MAAMO,UAAkClD,IAAAA,cACnDmD,WAAAA,CAAYrC,GAAc,IAAAsC,EACtBC,MAAMvC,GAAOwC,EAAA,mBAWHC,IACVA,EAAEC,kBACFC,EAAAA,EAAAA,IAAW,eAAgB,cAC3B,MAAMC,EAAcC,KAAKC,MAAMC,gBAAgBC,OAC/C,IAAKJ,EAOD,YANAC,KAAKI,SAAS,CAACC,UACXhE,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,oCACHC,eAAe,6BAIpB,GAAIS,EAAYO,OAASC,EAAAA,QAAAA,qBAAiCR,EAAYO,OAASC,EAAAA,QAAAA,oBAWlF,YAVAP,KAAKI,SAAS,CAACC,UACXhE,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,sCACHC,eAAe,+GACfkB,OAAQ,CACJC,IAAKF,EAAAA,QAAAA,oBACLG,IAAKH,EAAAA,QAAAA,yBAOrB,MAAMI,EAAWX,KAAK7C,MAAM8C,MAC5BU,EAASC,OAAS,WAClBD,EAASE,KAAMC,aAAef,EAC9BY,EAASE,KAAME,MAAOC,EAAAA,EAAAA,IAAejB,GACrCC,KAAK7C,MAAM8D,aAAaN,EAAS,IACpChB,EAAA,oBAEcC,IACXA,EAAEC,iBACFD,EAAEsB,cAAcC,QAAQ,IAC3BxB,EAAA,gCAE0BC,IACvBI,KAAKI,SAAS,CAACF,gBAAiBN,EAAEwB,OAAOC,OAAO,IAhDhDrB,KAAKC,MAAQ,CACTC,iBAAsC,QAArBT,EAAAO,KAAK7C,MAAM8C,MAAMY,YAAI,IAAApB,OAAA,EAArBA,EAAuBqB,eAAgB,GAEhE,CAEAQ,iBAAAA,IACIxB,EAAAA,EAAAA,IAAW,SAAU,sBACzB,CA4CAyB,MAAAA,GACI,IAAIlB,EAAY,KACZmB,EAAe,aAMnB,OALIxB,KAAKC,MAAMI,YACXA,EAAYhE,IAAAA,cAAA,SAAOF,UAAU,iBAAiB6D,KAAKC,MAAMI,WACzDmB,GAAgB,cAIhBnF,IAAAA,cAAA,WACIA,IAAAA,cAAA,YACIA,IAAAA,cAAA,OACIoF,IAAK,cACLtF,UAAU,mBACVuF,IAAKC,IAETtF,IAAAA,cAAA,UACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,oCACHuC,QAAQ,SACRtC,eAAe,eAGvBjD,IAAAA,cAAA,OAAKF,UAAWqF,GACZnF,IAAAA,cAAA,OAAKF,UAAU,OACXE,IAAAA,cAAA,OAAKF,UAAU,YACXE,IAAAA,cAAA,SACIgD,GAAG,gBACHwC,KAAK,OACL1F,UAAU,eACV2F,YAAY,GACZC,UAAW,IACXV,MAAOrB,KAAKC,MAAMC,gBAClB8B,WAAW,EACXC,QAASjC,KAAKkC,YACdC,SAAUnC,KAAKoC,wBACfC,WAAW,YAItBhC,GAELhE,IAAAA,cAAA,WACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,oCACHC,eAAe,iFAGvBjD,IAAAA,cAAA,UACIgD,GAAG,qBACHwC,KAAK,SACL1F,UAAU,uBACVC,QAAS4D,KAAKsC,YAEdjG,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,gCACHC,eAAe,SAEnBjD,IAAAA,cAAA,KAAGF,UAAU,8BAKjC,EACHwD,EAvHoBJ,EAAyB,aAb1CU,MAAKjD,IAAAA,MAAA,CARL4D,OAAM5D,IAAAA,OAAAA,aAAAuF,WAaNtB,aAAYjE,IAAAA,KAAAA,a,4eC6BD,MAAMwF,UAAgBnG,IAAAA,cACjCmD,WAAAA,CAAYrC,GAAc,IAAAsF,EACtB/C,MAAMvC,GAAOwC,EAAA,mBAaIC,IACjBA,EAAEC,kBACFC,EAAAA,EAAAA,IAAW,SAAU,cACrB,MAAMa,EAAWX,KAAK7C,MAAM8C,MAC5BU,EAASC,OAAS,eAClBZ,KAAK7C,MAAM8D,aAAaN,EAAS,IACpChB,EAAA,mBAEmB+C,UAChB9C,EAAEC,kBACFC,EAAAA,EAAAA,IAAW,SAAU,gBAErB,MAAMiB,EAAOf,KAAKC,MAAM0C,QAASxC,OAC3ByC,EAAcC,EAAAA,GAAmB9B,IAEhC+B,SAAS,kBAACC,EAAiB,WAAEC,IAAehD,KAAK7C,MAExD,IAAK4D,EAOD,YANAf,KAAKI,SAAS,CAACC,UACXhE,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,gCACHC,eAAe,6BAM3B,GAAIsD,EAAYtC,OAASC,EAAAA,QAAAA,qBAAiCqC,EAAYtC,OAASC,EAAAA,QAAAA,oBAW3E,YAVAP,KAAKI,SAAS,CAACC,UACXhE,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,kCACHC,eAAe,iEACfkB,OAAQ,CACJC,IAAKF,EAAAA,QAAAA,oBACLG,IAAKH,EAAAA,QAAAA,yBAOrB,GAAIqC,IAAgB7B,IA3BH,wCA2BqBkC,KAAKlC,GAOvC,YANAf,KAAKI,SAAS,CAACC,UACXhE,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,6BACHC,eAAe,yGAM3B,IAAK,IAAI4D,EAAQ,EAAGA,EAAQ3C,EAAAA,QAAAA,oBAAAA,OAAsC2C,IAC9D,GAAkE,IAA9DN,EAAYO,QAAQ5C,EAAAA,QAAAA,oBAA8B2C,IAmBlD,YAlBAlD,KAAKI,SAAS,CACVC,UACIhE,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,6BACHC,eAAe,2FACfkB,OAAQ,CACJ4C,KAAOC,GACHhH,IAAAA,cAACiH,EAAAA,EAAY,CACTC,KAAK,gFACLC,SAAS,YAERH,QAWjCrD,KAAKI,SAAS,CAACqD,WAAW,IAC1B,MAAMC,EAAaC,KAAKC,MAAMD,KAAKE,UAAU7D,KAAK7C,MAAM8C,QAOxD,GANAyD,EAAW7C,KAAKgB,KAAO,IACvB6B,EAAW7C,KAAKE,KAAOA,SAEagC,EAAkBhC,IACjB+C,KAUjC,OAPA9D,KAAKI,SAAS,CAACC,UACXhE,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,mCACHC,eAAe,iEAGvBU,KAAKI,SAAS,CAACqD,WAAW,IAI9B,MAAMM,QAAuBf,EAAWU,EAAW7C,MAC7CiD,EAAOC,EAAeD,KACtBE,EAAQD,EAAeC,MAEzBF,GACA9D,KAAK7C,MAAMuB,QAAQuF,KAAK,IAAMH,EAAK/C,KAAO,aAAeR,EAAAA,QAAAA,kBACzDT,EAAAA,EAAAA,IAAW,SAAU,4BACdkE,IACPhE,KAAKI,SAAS,CAACC,UAAW2D,EAAME,UAChClE,KAAKI,SAAS,CAACqD,WAAW,IAC9B,IACH9D,EAAA,oBAEqBC,IAClBA,EAAEC,iBACFD,EAAEsB,cAAcC,QAAQ,IAC3BxB,EAAA,iCAEkCC,IAC/BI,KAAKI,SAAS,CAACuC,QAAS/C,EAAEwB,OAAOC,OAAO,IA5HxCrB,KAAKC,MAAQ,CACTI,UAAW,GACXoD,WAAW,EACXd,QAAyB,QAAlBF,EAAEtF,EAAM8C,MAAMY,YAAI,IAAA4B,OAAA,EAAhBA,EAAkB1B,KAEnC,CAEOO,iBAAAA,IACHxB,EAAAA,EAAAA,IAAW,SAAU,qBACzB,CAsHAyB,MAAAA,GACI,IAAIlB,EAAY,KACZmB,EAAe,aACfxB,KAAKC,MAAMI,YACXA,EAAYhE,IAAAA,cAAA,SAAOF,UAAU,iBAAiB6D,KAAKC,MAAMI,WACzDmB,GAAgB,cAGpB,MAAM2C,EAAQ,GAAHC,OAAMvB,EAAAA,KAAgB,KAEjC,IAAIwB,EACAhI,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,8BACHC,eAAe,WAavB,OATIU,KAAKC,MAAMwD,YACXY,EACIhI,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,oCACHC,eAAe,sBAMvBjD,IAAAA,cAAA,WACIA,IAAAA,cAAA,YACIA,IAAAA,cAAA,OACIoF,IAAK,mBACLtF,UAAU,mBACVuF,IAAKC,IAETtF,IAAAA,cAAA,UACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,+BACHuC,QAAQ,SACRtC,eAAe,cAGvBjD,IAAAA,cAAA,OAAKF,UAAWqF,GACZnF,IAAAA,cAAA,OAAKF,UAAU,OACXE,IAAAA,cAAA,OAAKF,UAAU,aACXE,IAAAA,cAAA,OAAKF,UAAU,kCACXE,IAAAA,cAACiI,EAAAA,EAAW,CACRjF,GAAG,aACH8E,MAAOA,EACPI,UAAW,OAEXlI,IAAAA,cAAA,QAAMF,UAAU,qBACXgI,IAGT9H,IAAAA,cAAA,SACIgD,GAAG,eACHwC,KAAK,OACL1F,UAAU,eACV2F,YAAY,GACZC,UAAW,IACXV,MAAOrB,KAAKC,MAAM0C,QAClBX,WAAW,EACXC,QAASjC,KAAKkC,YACdC,SAAUnC,KAAKwE,yBACfnC,WAAW,aAK1BhC,GAELhE,IAAAA,cAAA,SACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,kCACHC,eAAe,8CAGvBjD,IAAAA,cAAA,MAAIF,UAAU,gBACVE,IAAAA,cAAA,UACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,6BACHC,eAAe,iCAGvBjD,IAAAA,cAAA,UACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,6BACHC,eAAe,+CAGvBjD,IAAAA,cAAA,UACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,6BACHC,eAAe,uDAI3BjD,IAAAA,cAAA,OAAKF,UAAU,QACXE,IAAAA,cAACoI,EAAAA,OAAM,CACHpF,GAAG,sBACHwC,KAAK,SACL6C,QAAQ,UACRC,SAAU3E,KAAKC,MAAMwD,UACrBrH,QAAUwD,GAA4CI,KAAKsC,WAAW1C,IAErEyE,IAGThI,IAAAA,cAAA,OAAKF,UAAU,QACXE,IAAAA,cAAA,KACIkH,KAAK,IACLnH,QAAS4D,KAAK4E,YAEdvI,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,4BACHC,eAAe,6BAO3C,EACHK,EA9PoB6C,EAAO,aA3BxBvC,MAAKjD,IAAAA,MAAA,CAAyB4D,OAAM5D,IAAAA,OAAAA,aAAAuF,WAKpCtB,aAAYjE,IAAAA,KAAAA,WAKZ8F,QAAO9F,IAAAA,MAAA,CAKH+F,kBAAiB/F,IAAAA,KAAAA,WAKjBgG,WAAUhG,IAAAA,KAAAA,aAAAuF,WAEd7D,QAAO1B,IAAAA,MAAA,IAAAuF,aCjCX,SAAesC,EAAAA,EAAAA,SAAQ,MATvB,SAA4BC,GACxB,MAAO,CACHhC,SAASiC,EAAAA,EAAAA,oBAAmB,CACxBhC,kBAAiB,KACjBC,WAAUA,EAAAA,IACX8B,GAEX,GAEA,CAAiDtC,G,saCqClC,MAAMwC,UAAmB3I,IAAAA,cAC7BmD,WAAAA,CAAYrC,GACfuC,MAAMvC,GAAOwC,EAAA,qBAQMM,IACnBD,KAAKI,SAASH,GACdD,KAAK7C,MAAMuB,QAAQuF,KAAK,gBAAkBhE,EAAMW,OAAO,IARvDZ,KAAKC,MAAQ,CACTY,KAAM,CAAC,EACPD,OAAQ,eAEhB,CAOAW,MAAAA,GACI,MAAM,eACF0D,EAAc,YACdC,EAAW,sBACXjG,EAAqB,MACrBkG,EAAK,SACLjG,EAAQ,QACRkG,EAAO,YACPC,EACAjI,aACIwB,OACIC,OAAQyG,KAGhBtF,KAAK7C,MAGHoI,EAAuBH,IAAYC,GADfC,GAAmB,EAG7C,IAAIpJ,EAAM,eAQV,OAPIgJ,IACAhJ,EAAM,IAAHkI,OAAOc,EAAYnE,MAClBkE,IACA/I,GAAO,aAAJkI,OAAiBa,EAAelE,QAKvC1E,IAAAA,cAAA,WACIA,IAAAA,cAACmJ,EAAAA,QAAe,MAChBnJ,IAAAA,cAACL,EAAAA,EAAU,CAACE,IAAKA,IACjBG,IAAAA,cAAA,OAAKF,UAAU,aACXE,IAAAA,cAAA,OAAKF,UAAU,0BACXE,IAAAA,cAAC2C,EAAAA,EAAsB,CACnBC,sBAAuBA,EACvBC,SAAUA,IAEd7C,IAAAA,cAAA,OAAKF,UAAU,mBACVoJ,EACGlJ,IAAAA,cAAAA,IAAAA,SAAA,KACIA,IAAAA,cAAA,UACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,yCACHuC,QAAQ,SACRtC,eAAe,0BAGvBjD,IAAAA,cAAA,WACIA,IAAAA,cAAC+C,EAAAA,iBAAgB,CACbC,GAAG,2CACHC,eAAe,4JAK3BjD,IAAAA,cAACoJ,EAAAA,OAAM,KACHpJ,IAAAA,cAACqJ,EAAAA,MAAK,CACFC,KAAI,GAAAvB,OAAKpE,KAAK7C,MAAMgI,MAAMjJ,IAAG,iBAC7BqF,OAASpE,GACLd,IAAAA,cAACuJ,EAAWtI,OAAAC,OAAA,CACR0C,MAAOD,KAAKC,MACZgB,aAAcjB,KAAKiB,cACf9D,MAIhBd,IAAAA,cAACqJ,EAAAA,MAAK,CACFC,KAAI,GAAAvB,OAAKpE,KAAK7C,MAAMgI,MAAMjJ,IAAG,aAC7BqF,OAASpE,GACLd,IAAAA,cAACmG,EAAOlF,OAAAC,OAAA,CACJ0C,MAAOD,KAAKC,MACZgB,aAAcjB,KAAKiB,cACf9D,MAIhBd,IAAAA,cAACwJ,EAAAA,SAAQ,CAACrJ,GAAE,GAAA4H,OAAKe,EAAMjJ,IAAG,uBAQ1D,EACHyD,EApGoBqF,EAAU,aAxB3B/F,sBAAqBjC,IAAAA,OAKrBkC,SAAQlC,IAAAA,OAKRmI,MAAKnI,IAAAA,MAAA,CACDd,IAAGc,IAAAA,OAAAA,aAAAuF,WAGP6C,QAAOpI,IAAAA,KAAAA,WACPqI,YAAWrI,IAAAA,KAAAA,aCNf,SAAe8I,EAAAA,EAAAA,IAAqBjB,EAAAA,EAAAA,UAxBpC,SAAyB5E,GACrB,MAAM8F,GAASC,EAAAA,EAAAA,IAAU/F,GACnBgF,GAAiBgB,EAAAA,EAAAA,IAAkBhG,GACnCiF,GAAcgB,EAAAA,EAAAA,IAAejG,GAE7BhB,EAAwB8G,EAAOI,sBAC/BjH,EAAW6G,EAAOK,SAElBC,GAAeC,EAAAA,EAAAA,IAAwBrG,GACvCsG,GAAUC,EAAAA,EAAAA,IAAWvG,GAK3B,MAAO,CACHgF,iBACAC,cACAjG,wBACAC,WACAkG,SARYqB,EAAAA,EAAAA,IAAeF,GAS3BlB,YARgD,UAAhCgB,aAAY,EAAZA,EAAcK,eAUtC,GAEoC7B,CAAyBG,G","sources":["webpack://mattermost-webapp/./src/components/common/back_button.tsx","webpack://mattermost-webapp/./src/components/common/hocs/cloud/with_use_get_usage_deltas.tsx","webpack://mattermost-webapp/./src/components/common/hooks/useGetUsageDeltas.ts","webpack://mattermost-webapp/./src/components/common/site_name_and_description.tsx","webpack://mattermost-webapp/./src/components/create_team/components/display_name.tsx","webpack://mattermost-webapp/./src/components/create_team/components/team_url/team_url.tsx","webpack://mattermost-webapp/./src/components/create_team/components/team_url/index.ts","webpack://mattermost-webapp/./src/components/create_team/create_team.tsx","webpack://mattermost-webapp/./src/components/create_team/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    className?: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nconst BackButton = ({url, className, onClick}: Props): JSX.Element => {\n    return (\n        <div className={classNames('signup-header', className)}>\n            <Link\n                data-testid='back_button'\n                onClick={onClick}\n                to={url}\n            >\n                <svg\n                    width='9'\n                    height='15'\n                    viewBox='0 0 9 15'\n                    fill='none'\n                    xmlns='http://www.w3.org/2000/svg'\n                >\n                    <path\n                        d='M7.64331 15L0 7.5L7.64331 0L9 1.33125L2.71338 7.5L9 13.6688L7.64331 15Z'\n                        fill='white'\n                    />\n                </svg>\n            </Link>\n        </div>\n    );\n};\nBackButton.defaultProps = {\n    url: '/',\n};\n\nexport default BackButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ComponentType} from 'react';\n\nimport useGetUsageDeltas from 'components/common/hooks/useGetUsageDeltas';\n\nfunction withUseGetUsageDelta<T>(WrappedComponent: ComponentType<T>) {\n    return (props: T) => {\n        const usageDeltas = useGetUsageDeltas();\n\n        return (\n            <WrappedComponent\n                usageDeltas={usageDeltas}\n                {...props}\n            />\n        );\n    };\n}\n\nexport default withUseGetUsageDelta;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useMemo} from 'react';\n\nimport type {CloudUsage} from '@mattermost/types/cloud';\n\nimport useGetLimits from './useGetLimits';\nimport useGetUsage from './useGetUsage';\n\n// Returns an object of type CloudUsage with the values being the delta between the limit, and the actual usage of this installation.\n// A value < 0 means that they are NOT over the limit. A value > 0 means they've exceeded that limit\n// 2 teams used, minus 1 team limit = value > 0, limit exceeded\n// 10MB files used, minus 1000MB limit = value < 0, limit not exceeded.\n// etc.\n// withBackupValue will set the limit arbitrarily high in the event that the limit isn't set\nexport const withBackupValue = (maybeLimit: number | undefined, limitsLoaded: boolean) => (limitsLoaded ? (maybeLimit ?? Number.MAX_VALUE) : Number.MAX_VALUE);\n\nexport default function useGetUsageDeltas(): CloudUsage {\n    const usage = useGetUsage();\n    const [limits, limitsLoaded] = useGetLimits();\n\n    const usageDelta = useMemo(() => {\n        return (\n            {\n                files: {\n                    totalStorage: usage.files.totalStorage - withBackupValue(limits.files?.total_storage, limitsLoaded),\n                    totalStorageLoaded: usage.files.totalStorageLoaded,\n                },\n                messages: {\n                    history: usage.messages.history - withBackupValue(limits.messages?.history, limitsLoaded),\n                    historyLoaded: usage.messages.historyLoaded,\n                },\n                teams: {\n                    active: usage.teams.active - withBackupValue(limits.teams?.active, limitsLoaded),\n\n                    // cloudArchived doesn't count against usage, but we pass the value along for convenience\n                    cloudArchived: usage.teams.cloudArchived,\n                    teamsLoaded: usage.teams.teamsLoaded,\n                },\n            }\n        );\n    }, [usage, limits, limitsLoaded]);\n\n    return usageDelta;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string | undefined;\n};\nconst SiteNameAndDescription = ({customDescriptionText, siteName = \"Infogito's\",\n}: Props) => {\n    const description = customDescriptionText || (\n        <FormattedMessage\n            id='web.root.signup_info'\n            defaultMessage='All team communication in one place, searchable and accessible anywhere'\n        />\n    );\n\n    return (\n        <>\n            <h1 id='site_name'>{siteName}</h1>\n            <h3\n                id='site_description'\n                className='color--light'\n            >\n                {description}\n            </h3>\n        </>\n    );\n};\n\nexport default React.memo(SiteNameAndDescription);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport logoImage from 'images/logo.png';\nimport Constants from 'utils/constants';\nimport {cleanUpUrlable} from 'utils/url';\n\ntype CreateTeamState = {\n    team?: Partial<Team>;\n    wizard: string;\n};\n\ntype Props = {\n\n    /*\n     * Object containing team's display_name and name\n     */\n    state: CreateTeamState;\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: CreateTeamState) => void;\n}\n\ntype State = {\n    teamDisplayName: string;\n    nameError?: React.ReactNode;\n}\n\nexport default class TeamSignupDisplayNamePage extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            teamDisplayName: this.props.state.team?.display_name || '',\n        };\n    }\n\n    componentDidMount(): void {\n        trackEvent('signup', 'signup_team_01_name');\n    }\n\n    submitNext = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        trackEvent('display_name', 'click_next');\n        const displayName = this.state.teamDisplayName.trim();\n        if (!displayName) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.display_name.required'\n                    defaultMessage='This field is required'\n                />),\n            });\n            return;\n        } else if (displayName.length < Constants.MIN_TEAMNAME_LENGTH || displayName.length > Constants.MAX_TEAMNAME_LENGTH) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.display_name.charLength'\n                    defaultMessage='Name must be {min} or more characters up to a maximum of {max}. You can add a longer team description later.'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />),\n            });\n            return;\n        }\n\n        const newState = this.props.state;\n        newState.wizard = 'team_url';\n        newState.team!.display_name = displayName;\n        newState.team!.name = cleanUpUrlable(displayName);\n        this.props.updateParent(newState);\n    };\n\n    handleFocus = (e: React.FocusEvent<HTMLInputElement>): void => {\n        e.preventDefault();\n        e.currentTarget.select();\n    };\n\n    handleDisplayNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({teamDisplayName: e.target.value});\n    };\n\n    render(): React.ReactNode {\n        let nameError = null;\n        let nameDivClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameDivClass += ' has-error';\n        }\n\n        return (\n            <div>\n                <form>\n                    <img\n                        alt={'signup logo'}\n                        className='signup-team-logo'\n                        src={logoImage}\n                    />\n                    <h5>\n                        <FormattedMessage\n                            id='create_team.display_name.teamName'\n                            tagName='strong'\n                            defaultMessage='Team Name'\n                        />\n                    </h5>\n                    <div className={nameDivClass}>\n                        <div className='row'>\n                            <div className='col-sm-9'>\n                                <input\n                                    id='teamNameInput'\n                                    type='text'\n                                    className='form-control'\n                                    placeholder=''\n                                    maxLength={128}\n                                    value={this.state.teamDisplayName}\n                                    autoFocus={true}\n                                    onFocus={this.handleFocus}\n                                    onChange={this.handleDisplayNameChange}\n                                    spellCheck='false'\n                                />\n                            </div>\n                        </div>\n                        {nameError}\n                    </div>\n                    <div>\n                        <FormattedMessage\n                            id='create_team.display_name.nameHelp'\n                            defaultMessage='Name your team in any language. Your team name shows in menus and headings.'\n                        />\n                    </div>\n                    <button\n                        id='teamNameNextButton'\n                        type='submit'\n                        className='btn btn-primary mt-8'\n                        onClick={this.submitNext}\n                    >\n                        <FormattedMessage\n                            id='create_team.display_name.next'\n                            defaultMessage='Next'\n                        />\n                        <i className='icon icon-chevron-right'/>\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Button} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport ExternalLink from 'components/external_link';\nimport WithTooltip from 'components/with_tooltip';\n\nimport logoImage from 'images/logo.png';\nimport Constants from 'utils/constants';\nimport * as URL from 'utils/url';\n\ntype State = {\n    isLoading: boolean;\n    nameError: string | JSX.Element;\n    teamURL?: string;\n}\n\ntype Props = {\n\n    /*\n     * Object containing team's display_name and name\n     */\n    state: {team?: Partial<Team>; wizard: string};\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: Props['state']) => void;\n\n    /*\n     * Object with redux action creators\n     */\n    actions: {\n\n        /*\n         * Action creator to check if a team already exists\n         */\n        checkIfTeamExists: (teamName: string) => Promise<ActionResult<boolean>>;\n\n        /*\n     * Action creator to create a new team\n     */\n        createTeam: (team: Team) => Promise<ActionResult<Team>>;\n    };\n    history: {\n        push(path: string): void;\n    };\n}\n\nexport default class TeamUrl extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            nameError: '',\n            isLoading: false,\n            teamURL: props.state.team?.name,\n        };\n    }\n\n    public componentDidMount() {\n        trackEvent('signup', 'signup_team_02_url');\n    }\n\n    public submitBack = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        e.preventDefault();\n        trackEvent('signup', 'click_back');\n        const newState = this.props.state;\n        newState.wizard = 'display_name';\n        this.props.updateParent(newState);\n    };\n\n    public submitNext = async (e: React.MouseEvent<Button, MouseEvent>) => {\n        e.preventDefault();\n        trackEvent('signup', 'click_finish');\n\n        const name = this.state.teamURL!.trim();\n        const cleanedName = URL.cleanUpUrlable(name);\n        const urlRegex = /^[a-z]+([a-z\\-0-9]+|(__)?)[a-z0-9]+$/g;\n        const {actions: {checkIfTeamExists, createTeam}} = this.props;\n\n        if (!name) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.required'\n                    defaultMessage='This field is required'\n                />),\n            });\n            return;\n        }\n\n        if (cleanedName.length < Constants.MIN_TEAMNAME_LENGTH || cleanedName.length > Constants.MAX_TEAMNAME_LENGTH) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.charLength'\n                    defaultMessage='Name must be {min} or more characters up to a maximum of {max}'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />),\n            });\n            return;\n        }\n\n        if (cleanedName !== name || !urlRegex.test(name)) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.regex'\n                    defaultMessage=\"Use only lower case letters, numbers and dashes. Must start with a letter and can't end in a dash.\"\n                />),\n            });\n            return;\n        }\n\n        for (let index = 0; index < Constants.RESERVED_TEAM_NAMES.length; index++) {\n            if (cleanedName.indexOf(Constants.RESERVED_TEAM_NAMES[index]) === 0) {\n                this.setState({\n                    nameError: (\n                        <FormattedMessage\n                            id='create_team.team_url.taken'\n                            defaultMessage='This URL <link>starts with a reserved word</link> or is unavailable. Please try another.'\n                            values={{\n                                link: (msg: React.ReactNode) => (\n                                    <ExternalLink\n                                        href='https://docs.mattermost.com/help/getting-started/creating-teams.html#team-url'\n                                        location='team_url'\n                                    >\n                                        {msg}\n                                    </ExternalLink>\n                                ),\n                            }}\n                        />\n                    ),\n                });\n                return;\n            }\n        }\n\n        this.setState({isLoading: true});\n        const teamSignup = JSON.parse(JSON.stringify(this.props.state));\n        teamSignup.team.type = 'O';\n        teamSignup.team.name = name;\n\n        const checkIfTeamExistsData = await checkIfTeamExists(name);\n        const exists = checkIfTeamExistsData.data;\n\n        if (exists) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.unavailable'\n                    defaultMessage='This URL is taken or unavailable. Please try another.'\n                />),\n            });\n            this.setState({isLoading: false});\n            return;\n        }\n\n        const createTeamData = await createTeam(teamSignup.team);\n        const data = createTeamData.data;\n        const error = createTeamData.error;\n\n        if (data) {\n            this.props.history.push('/' + data.name + '/channels/' + Constants.DEFAULT_CHANNEL);\n            trackEvent('signup', 'signup_team_03_complete');\n        } else if (error) {\n            this.setState({nameError: error.message});\n            this.setState({isLoading: false});\n        }\n    };\n\n    public handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        e.currentTarget.select();\n    };\n\n    public handleTeamURLInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({teamURL: e.target.value});\n    };\n\n    render() {\n        let nameError = null;\n        let nameDivClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameDivClass += ' has-error';\n        }\n\n        const title = `${URL.getSiteURL()}/`;\n\n        let finishMessage = (\n            <FormattedMessage\n                id='create_team.team_url.finish'\n                defaultMessage='Finish'\n            />\n        );\n\n        if (this.state.isLoading) {\n            finishMessage = (\n                <FormattedMessage\n                    id='create_team.team_url.creatingTeam'\n                    defaultMessage='Creating team...'\n                />\n            );\n        }\n\n        return (\n            <div>\n                <form>\n                    <img\n                        alt={'signup team logo'}\n                        className='signup-team-logo'\n                        src={logoImage}\n                    />\n                    <h5>\n                        <FormattedMessage\n                            id='create_team.team_url.teamUrl'\n                            tagName='strong'\n                            defaultMessage='Team URL'\n                        />\n                    </h5>\n                    <div className={nameDivClass}>\n                        <div className='row'>\n                            <div className='col-sm-11'>\n                                <div className='input-group input-group--limit'>\n                                    <WithTooltip\n                                        id='urlTooltip'\n                                        title={title}\n                                        placement={'top'}\n                                    >\n                                        <span className='input-group-addon'>\n                                            {title}\n                                        </span>\n                                    </WithTooltip>\n                                    <input\n                                        id='teamURLInput'\n                                        type='text'\n                                        className='form-control'\n                                        placeholder=''\n                                        maxLength={128}\n                                        value={this.state.teamURL}\n                                        autoFocus={true}\n                                        onFocus={this.handleFocus}\n                                        onChange={this.handleTeamURLInputChange}\n                                        spellCheck='false'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {nameError}\n                    </div>\n                    <p>\n                        <FormattedMessage\n                            id='create_team.team_url.webAddress'\n                            defaultMessage='Choose the web address of your new team:'\n                        />\n                    </p>\n                    <ul className='color--light'>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint1'\n                                defaultMessage='Short and memorable is best'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint2'\n                                defaultMessage='Use lowercase letters, numbers and dashes'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint3'\n                                defaultMessage=\"Must start with a letter and can't end in a dash\"\n                            />\n                        </li>\n                    </ul>\n                    <div className='mt-8'>\n                        <Button\n                            id='teamURLFinishButton'\n                            type='submit'\n                            bsStyle='primary'\n                            disabled={this.state.isLoading}\n                            onClick={(e: React.MouseEvent<Button, MouseEvent>) => this.submitNext(e)}\n                        >\n                            {finishMessage}\n                        </Button>\n                    </div>\n                    <div className='mt-8'>\n                        <a\n                            href='#'\n                            onClick={this.submitBack}\n                        >\n                            <FormattedMessage\n                                id='create_team.team_url.back'\n                                defaultMessage='Back to previous step'\n                            />\n                        </a>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {checkIfTeamExists, createTeam} from 'mattermost-redux/actions/teams';\n\nimport TeamUrl from './team_url';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            checkIfTeamExists,\n            createTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(TeamUrl);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Route, Switch, Redirect} from 'react-router-dom';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {CloudUsage} from '@mattermost/types/cloud';\nimport type {Team} from '@mattermost/types/teams';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport DisplayName from 'components/create_team/components/display_name';\nimport TeamUrl from 'components/create_team/components/team_url';\n\nexport type Props = {\n\n    /*\n   * Object containing information on the current team, used to define BackButton's url\n   */\n    currentTeam?: Team;\n\n    /*\n   * Object containing information on the current selected channel, used to define BackButton's url\n   */\n    currentChannel?: Channel;\n\n    /*\n    * String containing the custom branding's text\n    */\n    customDescriptionText?: string;\n\n    /*\n   * String containing the custom branding's Site Name\n   */\n    siteName?: string;\n\n    /*\n   * Object from react-router\n   */\n    match: {\n        url: string;\n    };\n\n    isCloud: boolean;\n    isFreeTrial: boolean;\n    usageDeltas: CloudUsage;\n};\n\ntype State = {\n    team?: Partial<Team>;\n    wizard: string;\n};\n\nexport default class CreateTeam extends React.PureComponent<Props & RouteComponentProps, State> {\n    public constructor(props: Props & RouteComponentProps) {\n        super(props);\n\n        this.state = {\n            team: {},\n            wizard: 'display_name',\n        };\n    }\n\n    public updateParent = (state: State) => {\n        this.setState(state);\n        this.props.history.push('/create_team/' + state.wizard);\n    };\n\n    render() {\n        const {\n            currentChannel,\n            currentTeam,\n            customDescriptionText,\n            match,\n            siteName,\n            isCloud,\n            isFreeTrial,\n            usageDeltas: {\n                teams: {\n                    active: usageDeltaTeams,\n                },\n            },\n        } = this.props;\n\n        const teamsLimitReached = usageDeltaTeams >= 0;\n        const createTeamRestricted = isCloud && !isFreeTrial && teamsLimitReached;\n\n        let url = '/select_team';\n        if (currentTeam) {\n            url = `/${currentTeam.name}`;\n            if (currentChannel) {\n                url += `/channels/${currentChannel.name}`;\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton url={url}/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <div className='signup__content'>\n                            {createTeamRestricted ? (\n                                <>\n                                    <h5>\n                                        <FormattedMessage\n                                            id='create_team.createTeamRestricted.title'\n                                            tagName='strong'\n                                            defaultMessage='Professional feature'\n                                        />\n                                    </h5>\n                                    <div>\n                                        <FormattedMessage\n                                            id='create_team.createTeamRestricted.message'\n                                            defaultMessage='Your workspace plan has reached the limit on the number of teams. Create unlimited teams with a free 30-day trial. Contact your System Administrator.'\n                                        />\n                                    </div>\n                                </>\n                            ) : (\n                                <Switch>\n                                    <Route\n                                        path={`${this.props.match.url}/display_name`}\n                                        render={(props) => (\n                                            <DisplayName\n                                                state={this.state}\n                                                updateParent={this.updateParent}\n                                                {...props}\n                                            />\n                                        )}\n                                    />\n                                    <Route\n                                        path={`${this.props.match.url}/team_url`}\n                                        render={(props) => (\n                                            <TeamUrl\n                                                state={this.state}\n                                                updateParent={this.updateParent}\n                                                {...props}\n                                            />\n                                        )}\n                                    />\n                                    <Redirect to={`${match.url}/display_name`}/>\n                                </Switch>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCloudSubscription as selectCloudSubscription} from 'mattermost-redux/selectors/entities/cloud';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport withUseGetUsageDelta from 'components/common/hocs/cloud/with_use_get_usage_deltas';\n\nimport {isCloudLicense} from 'utils/license_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport CreateTeam from './create_team';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const currentChannel = getCurrentChannel(state);\n    const currentTeam = getCurrentTeam(state);\n\n    const customDescriptionText = config.CustomDescriptionText;\n    const siteName = config.SiteName;\n\n    const subscription = selectCloudSubscription(state);\n    const license = getLicense(state);\n\n    const isCloud = isCloudLicense(license);\n    const isFreeTrial = subscription?.is_free_trial === 'true';\n\n    return {\n        currentChannel,\n        currentTeam,\n        customDescriptionText,\n        siteName,\n        isCloud,\n        isFreeTrial,\n    };\n}\n\nexport default withUseGetUsageDelta(connect(mapStateToProps)(CreateTeam));\n"],"names":["BackButton","_ref","url","className","onClick","React","classNames","Link","to","width","height","viewBox","fill","xmlns","d","propTypes","_pt","defaultProps","WrappedComponent","props","usageDeltas","useGetUsageDeltas","Object","assign","withBackupValue","maybeLimit","limitsLoaded","Number","MAX_VALUE","usage","useGetUsage","limits","useGetLimits","useMemo","_limits$files","_limits$messages","_limits$teams","files","totalStorage","total_storage","totalStorageLoaded","messages","history","historyLoaded","teams","active","cloudArchived","teamsLoaded","SiteNameAndDescription","customDescriptionText","siteName","description","FormattedMessage","id","defaultMessage","TeamSignupDisplayNamePage","constructor","_this$props$state$tea","super","_defineProperty","e","preventDefault","trackEvent","displayName","this","state","teamDisplayName","trim","setState","nameError","length","Constants","values","min","max","newState","wizard","team","display_name","name","cleanUpUrlable","updateParent","currentTarget","select","target","value","componentDidMount","render","nameDivClass","alt","src","logoImage","tagName","type","placeholder","maxLength","autoFocus","onFocus","handleFocus","onChange","handleDisplayNameChange","spellCheck","submitNext","isRequired","TeamUrl","_props$state$team","async","teamURL","cleanedName","URL","actions","checkIfTeamExists","createTeam","test","index","indexOf","link","msg","ExternalLink","href","location","isLoading","teamSignup","JSON","parse","stringify","data","createTeamData","error","push","message","title","concat","finishMessage","WithTooltip","placement","handleTeamURLInputChange","Button","bsStyle","disabled","submitBack","connect","dispatch","bindActionCreators","CreateTeam","currentChannel","currentTeam","match","isCloud","isFreeTrial","usageDeltaTeams","createTeamRestricted","AnnouncementBar","Switch","Route","path","DisplayName","Redirect","withUseGetUsageDelta","config","getConfig","getCurrentChannel","getCurrentTeam","CustomDescriptionText","SiteName","subscription","selectCloudSubscription","license","getLicense","isCloudLicense","is_free_trial"],"sourceRoot":""}