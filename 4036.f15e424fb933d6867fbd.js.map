{"version":3,"file":"4036.f15e424fb933d6867fbd.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/more_direct_channels/list_item/user_details/user_details.tsx","webpack://mattermost-webapp/./src/components/more_direct_channels/list_item/user_details/index.ts","webpack://mattermost-webapp/./src/components/more_direct_channels/types.ts","webpack://mattermost-webapp/./src/components/more_direct_channels/list_item/list_item.tsx","webpack://mattermost-webapp/./src/components/more_direct_channels/list_item/index.ts","webpack://mattermost-webapp/./src/components/more_direct_channels/list/list.tsx","webpack://mattermost-webapp/./src/components/more_direct_channels/list/index.ts","webpack://mattermost-webapp/./src/components/more_direct_channels/more_direct_channels.tsx","webpack://mattermost-webapp/./src/components/more_direct_channels/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport CustomStatusEmoji from 'components/custom_status/custom_status_emoji';\nimport ProfilePicture from 'components/profile_picture';\nimport BotTag from 'components/widgets/tag/bot_tag';\nimport GuestTag from 'components/widgets/tag/guest_tag';\n\nimport {displayEntireNameForUser} from 'utils/utils';\n\ntype Props = {\n    currentUserId: string;\n    option: UserProfile;\n    status: string;\n};\n\nexport default function UserDetails(props: Props): JSX.Element {\n    const {currentUserId, option, status} = props;\n    const {\n        id,\n        delete_at: deleteAt,\n        is_bot: isBot = false,\n        last_picture_update: lastPictureUpdate,\n    } = option;\n\n    const displayName = displayEntireNameForUser(option);\n\n    let modalName: React.ReactNode = displayName;\n    if (option.id === currentUserId) {\n        modalName = (\n            <FormattedMessage\n                id='more_direct_channels.directchannel.you'\n                defaultMessage='{displayname} (you)'\n                values={{\n                    displayname: displayName,\n                }}\n            />\n        );\n    } else if (option.delete_at) {\n        modalName = (\n            <FormattedMessage\n                id='more_direct_channels.directchannel.deactivated'\n                defaultMessage='{displayname} - Deactivated'\n                values={{\n                    displayname: displayName,\n                }}\n            />\n        );\n    }\n\n    return (\n        <>\n            <ProfilePicture\n                src={Client4.getProfilePictureUrl(id, lastPictureUpdate)}\n                status={!deleteAt && !isBot ? status : undefined}\n                size='md'\n            />\n            <div className='more-modal__details'>\n                <div className='more-modal__name'>\n                    {modalName}\n                    {isBot && <BotTag/>}\n                    {isGuest(option.roles) && <GuestTag/>}\n                    <CustomStatusEmoji\n                        userID={option.id}\n                        showTooltip={true}\n                        emojiSize={15}\n                        spanStyle={{\n                            display: 'flex',\n                            flex: '0 0 auto',\n                            alignItems: 'center',\n                        }}\n                    />\n                </div>\n                {!isBot && (\n                    <div className='more-modal__description'>\n                        {option.email}\n                    </div>\n                )}\n            </div>\n        </>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getCurrentUserId, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport UserDetails from './user_details';\n\ntype OwnProps = {\n    option: UserProfile;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        status: getStatusForUserId(state, ownProps.option.id),\n    };\n}\n\nexport default connect(mapStateToProps)(UserDetails);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {Value} from 'components/multiselect/multiselect';\n\n// Not to be confused with the GroupChannel type used for LDAP groups\nexport type GroupChannel = Channel & {\n    profiles: UserProfile[];\n}\n\nexport function isGroupChannel(option: UserProfile | GroupChannel): option is GroupChannel {\n    return (option as GroupChannel)?.type === 'G';\n}\n\nexport type Option = (UserProfile & {last_post_at?: number}) | GroupChannel;\n\nexport type OptionValue = Option & Value;\n\nexport function optionValue(option: Option): OptionValue {\n    return {\n        value: option.id,\n        label: isGroupChannel(option) ? option.display_name : option.username,\n        ...option,\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useCallback} from 'react';\n\nimport Timestamp from 'components/timestamp';\n\nimport UserDetails from './user_details';\n\nimport {isGroupChannel} from '../types';\nimport type {\n    GroupChannel,\n    OptionValue,\n} from '../types';\n\nconst TIME_SPEC: React.ComponentProps<typeof Timestamp> = {\n    useTime: false,\n    style: 'long',\n    ranges: [\n        {within: ['minute', -1], display: ['second', 0]},\n        {within: ['hour', -1], display: ['minute']},\n        {within: ['hour', -24], display: ['hour']},\n        {within: ['day', -30], display: ['day']},\n        {within: ['month', -11], display: ['month']},\n        {within: ['year', -1000], display: ['year']},\n    ],\n};\n\nexport type Props = {\n    option: OptionValue;\n    isMobileView: boolean;\n    isSelected: boolean;\n    add: (value: OptionValue) => void;\n    select: (value: OptionValue) => void;\n}\n\nconst ListItem = React.forwardRef((props: Props, ref?: React.Ref<HTMLDivElement>) => {\n    const {\n        option,\n        isMobileView,\n        isSelected,\n        add,\n        select,\n    } = props;\n\n    const {last_post_at: lastPostAt} = option;\n\n    let details;\n    if (isGroupChannel(option)) {\n        details = <GMDetails option={option}/>;\n    } else {\n        details = <UserDetails option={option}/>;\n    }\n\n    const handleClick = useCallback(() => add(option), [option, add]);\n    const handleMouseEnter = useCallback(() => select(option), [option, select]);\n\n    return (\n        <div\n            ref={ref}\n            className={classNames('more-modal__row clickable', {'more-modal__row--selected': isSelected})}\n            onClick={handleClick}\n            onMouseEnter={handleMouseEnter}\n        >\n            {details}\n\n            {isMobileView && Boolean(lastPostAt) &&\n                <div className='more-modal__lastPostAt'>\n                    <Timestamp\n                        {...TIME_SPEC}\n                        value={lastPostAt}\n                    />\n                </div>\n            }\n\n            <div className='more-modal__actions'>\n                <div className='more-modal__actions--round'>\n                    <i className='icon icon-plus'/>\n                </div>\n            </div>\n        </div>\n    );\n});\nListItem.displayName = 'ListItem';\n\nexport default ListItem;\n\nfunction GMDetails(props: {option: GroupChannel}) {\n    const {option} = props;\n\n    return (\n        <>\n            <div className='more-modal__gm-icon'>\n                {option.profiles.length}\n            </div>\n            <div className='more-modal__details'>\n                <div className='more-modal__name'>\n                    <span>\n                        {option.profiles.map((profile) => `@${profile.username}`).join(', ')}\n                    </span>\n                </div>\n            </div>\n        </>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport ListItem from './list_item';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(ListItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, { useCallback, useMemo } from \"react\";\nimport { FormattedMessage, useIntl } from \"react-intl\";\nimport { useDispatch } from \"react-redux\";\n\nimport type { UserProfile } from \"@mattermost/types/users\";\n\nimport { openModal } from \"actions/views/modals\";\n\nimport MultiSelect from \"components/multiselect/multiselect\";\nimport NewChannelModal from \"components/new_channel_modal/new_channel_modal\";\n\nimport Constants, { ModalIdentifiers } from \"utils/constants\";\n\nimport ListItem from \"../list_item\";\nimport { optionValue } from \"../types\";\nimport type { Option, OptionValue } from \"../types\";\n\nconst MAX_SELECTABLE_VALUES = Constants.MAX_USERS_IN_GM - 1;\nexport const USERS_PER_PAGE = 50;\n\ntype Props = {\n    addValue: (value: OptionValue) => void;\n    currentUserId: string;\n    handleDelete: (values: OptionValue[]) => void;\n    handlePageChange: (page: number, prevPage: number) => void;\n    handleSubmit: (values?: OptionValue[]) => void;\n    handleHide: () => void;\n    isExistingChannel: boolean;\n    loading: boolean;\n    options: Option[];\n    saving: boolean;\n    search: (term: string) => void;\n    selectedItemRef: React.RefObject<HTMLDivElement>;\n    totalCount: number;\n    users: UserProfile[];\n\n    /**\n     * An array of values that have been selected by the user in the multiselect.\n     */\n    values: OptionValue[];\n};\n\nconst List = React.forwardRef(\n    (props: Props, ref?: React.Ref<MultiSelect<OptionValue>>) => {\n        const renderOptionValue = useCallback(\n            (\n                option: OptionValue,\n                isSelected: boolean,\n                add: (value: OptionValue) => void,\n                select: (value: OptionValue) => void\n            ) => {\n                return (\n                    <ListItem\n                        ref={isSelected ? props.selectedItemRef : undefined}\n                        key={\"more_direct_channels_list_\" + option.value}\n                        option={option}\n                        isSelected={isSelected}\n                        add={add}\n                        select={select}\n                    />\n                );\n            },\n            [props.selectedItemRef]\n        );\n\n        const dispatch = useDispatch();\n\n        const handleSubmitImmediatelyOn = useCallback(\n            (value: OptionValue) => {\n                return (\n                    value.id === props.currentUserId || Boolean(value.delete_at)\n                );\n            },\n            [props.currentUserId]\n        );\n\n        const handleCreateChannel = (\n            e: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n        ) => {\n            e.preventDefault();\n            props.handleHide();\n            dispatch(\n                openModal({\n                    modalId: ModalIdentifiers.NEW_CHANNEL_MODAL,\n                    dialogType: NewChannelModal,\n                })\n            );\n        };\n\n        const intl = useIntl();\n\n        let note;\n        if (props.isExistingChannel) {\n            if (props.values.length >= MAX_SELECTABLE_VALUES) {\n                note = (\n                    <FormattedMessage\n                        id=\"more_direct_channels.new_convo_note.full\"\n                        defaultMessage={\n                            \"You've reached the maximum number of people for this conversation. Consider creating a private channel instead.\"\n                        }\n                    />\n                );\n            } else {\n                note = (\n                    <FormattedMessage\n                        id=\"more_direct_channels.new_convo_note\"\n                        defaultMessage={\n                            \"This will start a new conversation. If you're adding a lot of people, consider creating a private channel instead.\"\n                        }\n                    />\n                );\n            }\n        }\n\n        let remainingText;\n        if (MAX_SELECTABLE_VALUES > props.values.length) {\n            remainingText = (\n                <FormattedMessage\n                    id={\"multiselect.numPeopleRemaining\"}\n                    defaultMessage={\n                        \"Use ↑↓ to browse, ↵ to select. You can add upto 30 more {num, plural, one {person} other {people}}. \"\n                    }\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - props.values.length,\n                    }}\n                />\n            );\n        } else {\n            remainingText = (\n                <FormattedMessage\n                    id={\"multiselect.maxPeople\"}\n                    defaultMessage={\n                        \"Use ↑↓ to browse, ↵ to select. You can't add more than {num} people. Please <a>create a channel</a> to include more people.\"\n                    }\n                    values={{\n                        num: MAX_SELECTABLE_VALUES,\n                        a: (chunks: React.ReactNode) => {\n                            return (\n                                <a\n                                    href=\"#\"\n                                    onClick={(e) => handleCreateChannel(e)}\n                                >\n                                    {chunks}\n                                </a>\n                            );\n                        },\n                    }}\n                />\n            );\n        }\n\n        const options = useMemo(() => {\n            return props.options.map(optionValue);\n        }, [props.options]);\n\n        return (\n            <MultiSelect<OptionValue>\n                ref={ref}\n                options={options}\n                optionRenderer={renderOptionValue}\n                intl={intl}\n                selectedItemRef={props.selectedItemRef}\n                values={props.values}\n                valueRenderer={renderValue}\n                ariaLabelRenderer={renderAriaLabel}\n                perPage={USERS_PER_PAGE}\n                handlePageChange={props.handlePageChange}\n                handleInput={props.search}\n                handleDelete={props.handleDelete}\n                handleAdd={props.addValue}\n                handleSubmit={props.handleSubmit}\n                noteText={note}\n                maxValues={MAX_SELECTABLE_VALUES}\n                numRemainingText={remainingText}\n                buttonSubmitText={\n                    <FormattedMessage id=\"multiselect.go\" defaultMessage=\"Go\" />\n                }\n                buttonSubmitLoadingText={\n                    <FormattedMessage\n                        id=\"multiselect.loading\"\n                        defaultMessage=\"Loading...\"\n                    />\n                }\n                submitImmediatelyOn={handleSubmitImmediatelyOn}\n                saving={props.saving}\n                loading={props.loading}\n                users={props.users}\n                totalCount={props.totalCount}\n                placeholderText={intl.formatMessage({\n                    id: \"multiselect.placeholder\",\n                    defaultMessage: \"Search and add members\",\n                })}\n            />\n        );\n    }\n);\n\nexport default List;\n\nfunction renderValue(props: { data: OptionValue }) {\n    return (props.data as UserProfile).username;\n}\n\nfunction renderAriaLabel(option: OptionValue) {\n    return (option as UserProfile)?.username ?? \"\";\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getAllChannels, getChannelsWithUserProfiles} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getUserIdFromChannelName} from 'mattermost-redux/utils/channel_utils';\nimport {filterProfilesStartingWithTerm} from 'mattermost-redux/utils/user_utils';\n\nimport Constants from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport List from './list';\n\nimport type {Option, OptionValue} from '../types';\n\ntype OwnProps = {\n    users: UserProfile[];\n    values: OptionValue[];\n}\n\nexport function makeGetOptions(): (state: GlobalState, users: UserProfile[], values: OptionValue[]) => Option[] {\n    // Gets all loaded DMs (as UserProfiles)\n    const getUsersWithDMs = createSelector(\n        'getUsersWithDMs',\n        getCurrentUserId,\n        getAllChannels,\n        (state: GlobalState, users: UserProfile[]) => users,\n        (currentUserId, allChannels, users) => {\n            const directChannels = Object.values(allChannels).filter((channel) => channel.type === Constants.DM_CHANNEL);\n\n            // Gets all loaded DMs (as UserProfiles)\n            const usersWithDMs: Array<UserProfile & {last_post_at: number}> = [];\n            for (const channel of directChannels) {\n                const otherUserId = getUserIdFromChannelName(currentUserId, channel.name);\n                const otherUser = users.find((user) => user.id === otherUserId);\n\n                if (!otherUser) {\n                    // The user doesn't match the search filter\n                    continue;\n                }\n\n                if (channel.last_post_at === 0) {\n                    // The DM channel exists but has no messages in it\n                    continue;\n                }\n\n                usersWithDMs.push({\n                    ...otherUser,\n                    last_post_at: channel.last_post_at,\n                });\n            }\n\n            return usersWithDMs;\n        },\n    );\n\n    // Gets GM channels matching the search term and selected values\n    const getFilteredGroupChannels = createSelector(\n        'getFilteredGroupChannels',\n        getChannelsWithUserProfiles,\n        (state: GlobalState) => state.views.search.modalSearch,\n        (state: GlobalState, values: OptionValue[]) => values,\n        (channelsWithProfiles, searchTerm, values) => {\n            return channelsWithProfiles.filter((channel) => {\n                if (searchTerm) {\n                    // Check that at least one of the users in the channel matches the search term\n                    const matches = filterProfilesStartingWithTerm(channel.profiles, searchTerm);\n                    if (matches.length === 0) {\n                        return false;\n                    }\n                }\n\n                if (values) {\n                    // Check that all of the selected users are in the channel\n                    const valuesInProfiles = values.every((value) => channel.profiles.find((user) => user.id === value.id));\n                    if (!valuesInProfiles) {\n                        return false;\n                    }\n                }\n\n                // Only include GM channels with messages in them\n                return channel.last_post_at > 0;\n            });\n        },\n    );\n\n    return createSelector(\n        'makeGetOptions',\n        getUsersWithDMs,\n        (state: GlobalState, users: UserProfile[], values: OptionValue[]) => getFilteredGroupChannels(state, values),\n        (state: GlobalState, users: UserProfile[]) => users,\n        (state: GlobalState) => Boolean(state.views.search.modalSearch),\n        (usersWithDMs, filteredGroupChannels, users, isSearch) => {\n            // Recent DMs (as UserProfiles) and GMs sorted by recent activity\n            const recents = [...usersWithDMs, ...filteredGroupChannels].\n                sort((a, b) => b.last_post_at - a.last_post_at);\n\n            // Only show the 20 most recent DMs and GMs when no search term has been entered. If a search term has been\n            // entered, `users` is expected to have already been filtered by it\n            if (!isSearch && recents.length > 0) {\n                return recents.slice(0, 20);\n            }\n\n            // Other users sorted by whether or not they've been deactivated followed by alphabetically\n            const usersWithoutDMs = users.\n                filter((user) => user.delete_at === 0 && !usersWithDMs.some((other) => other.id === user.id)).\n                map((user) => ({...user, last_post_at: 0}));\n            usersWithoutDMs.sort((a, b) => {\n                return a.username.localeCompare(b.username);\n            });\n\n            // Returns an array containing:\n            //  1. All recent DMs (represented by UserProfiles) and GMs matching the filter\n            //      - GMs are also filtered to only show ones containing each selected user\n            //  2. Other non-deactivated users sorted by username\n            return [\n                ...recents,\n                ...usersWithoutDMs,\n            ];\n        },\n    );\n}\n\nfunction makeMapStateToProps() {\n    const getOptions = makeGetOptions();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        return {\n            options: getOptions(state, ownProps.users, ownProps.values),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(List);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport type MultiSelect from 'components/multiselect/multiselect';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\n\nimport List from './list';\nimport {USERS_PER_PAGE} from './list/list';\nimport {\n    isGroupChannel,\n    optionValue,\n} from './types';\nimport type {\n    OptionValue} from './types';\n\nexport type Props = {\n    currentUserId: string;\n    currentTeamId?: string;\n    currentTeamName?: string;\n    searchTerm: string;\n    users: UserProfile[];\n    totalCount: number;\n\n    /*\n    * List of current channel members of existing channel\n    */\n    currentChannelMembers?: UserProfile[];\n\n    /*\n    * Whether the modal is for existing channel or not\n    */\n    isExistingChannel: boolean;\n\n    /*\n    * The mode by which direct messages are restricted, if at all.\n    */\n    restrictDirectMessage?: string;\n    onModalDismissed?: () => void;\n    onExited?: () => void;\n    actions: {\n        getProfiles: (page?: number | undefined, perPage?: number | undefined, options?: any) => Promise<ActionResult>;\n        getProfilesInTeam: (teamId: string, page: number, perPage?: number | undefined, sort?: string | undefined, options?: any) => Promise<ActionResult>;\n        loadProfilesMissingStatus: (users: UserProfile[]) => void;\n        getTotalUsersStats: () => void;\n        loadStatusesForProfilesList: (users: UserProfile[]) => void;\n        loadProfilesForGroupChannels: (groupChannels: Channel[]) => void;\n        openDirectChannelToUserId: (userId: string) => Promise<ActionResult>;\n        openGroupChannelToUserIds: (userIds: string[]) => Promise<ActionResult>;\n        searchProfiles: (term: string, options: any) => Promise<ActionResult<UserProfile[]>>;\n        searchGroupChannels: (term: string) => Promise<ActionResult<Channel[]>>;\n        setModalSearchTerm: (term: string) => void;\n    };\n}\n\ntype State = {\n    values: OptionValue[];\n    show: boolean;\n    search: boolean;\n    saving: boolean;\n    loadingUsers: boolean;\n}\n\nexport default class MoreDirectChannels extends React.PureComponent<Props, State> {\n    searchTimeoutId: any;\n    exitToChannel?: string;\n    multiselect: React.RefObject<MultiSelect<OptionValue>>;\n    selectedItemRef: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n        this.multiselect = React.createRef();\n        this.selectedItemRef = React.createRef();\n\n        const values: OptionValue[] = [];\n\n        if (props.currentChannelMembers) {\n            for (let i = 0; i < props.currentChannelMembers.length; i++) {\n                const user = Object.assign({}, props.currentChannelMembers[i]);\n\n                if (user.id === props.currentUserId) {\n                    continue;\n                }\n\n                values.push(optionValue(user));\n            }\n        }\n\n        this.state = {\n            values,\n            show: true,\n            search: false,\n            saving: false,\n            loadingUsers: true,\n        };\n    }\n\n    loadModalData = () => {\n        this.getUserProfiles();\n        this.props.actions.getTotalUsersStats();\n        this.props.actions.loadProfilesMissingStatus(this.props.users);\n    };\n\n    updateFromProps(prevProps: Props) {\n        if (prevProps.searchTerm !== this.props.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                this.resetPaging();\n            } else {\n                const teamId = this.props.restrictDirectMessage === 'any' ? '' : this.props.currentTeamId;\n\n                this.searchTimeoutId = setTimeout(\n                    async () => {\n                        this.setUsersLoadingState(true);\n                        const [{data: profilesData}, {data: groupChannelsData}] = await Promise.all([\n                            this.props.actions.searchProfiles(searchTerm, {team_id: teamId}),\n                            this.props.actions.searchGroupChannels(searchTerm),\n                        ]);\n                        if (profilesData) {\n                            this.props.actions.loadStatusesForProfilesList(profilesData);\n                        }\n                        if (groupChannelsData) {\n                            this.props.actions.loadProfilesForGroupChannels(groupChannelsData);\n                        }\n                        this.resetPaging();\n                        this.setUsersLoadingState(false);\n                    },\n                    Constants.SEARCH_TIMEOUT_MILLISECONDS,\n                );\n            }\n        }\n\n        if (\n            prevProps.users.length !== this.props.users.length\n        ) {\n            this.props.actions.loadProfilesMissingStatus(this.props.users);\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        this.updateFromProps(prevProps);\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    };\n\n    setUsersLoadingState = (loadingState: boolean) => {\n        this.setState({\n            loadingUsers: loadingState,\n        });\n    };\n\n    handleExit = () => {\n        if (this.exitToChannel) {\n            getHistory().push(this.exitToChannel);\n        }\n\n        this.props.onModalDismissed?.();\n        this.props.onExited?.();\n    };\n\n    handleSubmit = (values = this.state.values) => {\n        const {actions} = this.props;\n        if (this.state.saving) {\n            return;\n        }\n\n        const userIds = values.map((v) => v.id);\n        if (userIds.length === 0) {\n            return;\n        }\n\n        this.setState({saving: true});\n\n        const done = (result: any) => {\n            const {data, error} = result;\n            this.setState({saving: false});\n\n            if (!error) {\n                this.exitToChannel = '/' + this.props.currentTeamName + '/channels/' + data.name;\n                this.handleHide();\n            }\n        };\n\n        if (userIds.length === 1) {\n            actions.openDirectChannelToUserId(userIds[0]).then(done);\n        } else {\n            actions.openGroupChannelToUserIds(userIds).then(done);\n        }\n    };\n\n    addValue = (value: OptionValue) => {\n        if (isGroupChannel(value)) {\n            this.addUsers(value.profiles);\n        } else {\n            const values = Object.assign([], this.state.values);\n\n            if (values.indexOf(value) === -1) {\n                values.push(value);\n            }\n\n            this.setState({values});\n        }\n    };\n\n    addUsers = (users: UserProfile[]) => {\n        const values: OptionValue[] = Object.assign([], this.state.values);\n        const existingUserIds = values.map((user) => user.id);\n        for (const user of users) {\n            if (existingUserIds.indexOf(user.id) !== -1) {\n                continue;\n            }\n            values.push(optionValue(user));\n        }\n\n        this.setState({values});\n    };\n\n    getUserProfiles = (page?: number) => {\n        const pageNum = page ? page + 1 : 0;\n        if (this.props.restrictDirectMessage === 'any') {\n            this.props.actions.getProfiles(pageNum, USERS_PER_PAGE * 2).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        } else {\n            this.props.actions.getProfilesInTeam(this.props.currentTeamId || '', pageNum, USERS_PER_PAGE * 2).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        }\n    };\n\n    handlePageChange = (page: number, prevPage: number) => {\n        if (page > prevPage) {\n            this.setUsersLoadingState(true);\n            this.getUserProfiles(page);\n        }\n    };\n\n    resetPaging = () => {\n        this.multiselect.current?.resetPaging();\n    };\n\n    search = debounce((term: string) => {\n        this.props.actions.setModalSearchTerm(term);\n    }, 250);\n\n    handleDelete = (values: OptionValue[]) => {\n        this.setState({values});\n    };\n\n    render() {\n        const body = (\n            <List\n                addValue={this.addValue}\n                currentUserId={this.props.currentUserId}\n                handleDelete={this.handleDelete}\n                handlePageChange={this.handlePageChange}\n                handleSubmit={this.handleSubmit}\n                handleHide={this.handleHide}\n                isExistingChannel={this.props.isExistingChannel}\n                loading={this.state.loadingUsers}\n                saving={this.state.saving}\n                search={this.search}\n                selectedItemRef={this.selectedItemRef}\n                totalCount={this.props.totalCount}\n                users={this.props.users}\n                values={this.state.values}\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-direct-channels'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                onEntered={this.loadModalData}\n                role='dialog'\n                aria-labelledby='moreDmModalLabel'\n                id='moreDmModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='moreDmModalLabel'\n                    >\n                        <FormattedMessage\n                            id='more_direct_channels.title'\n                            defaultMessage='Direct Messages'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body\n                    role='application'\n                >\n                    {body}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-tertiary'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {searchGroupChannels} from 'mattermost-redux/actions/channels';\nimport {\n    getProfiles,\n    getProfilesInTeam,\n    getTotalUsersStats,\n    searchProfiles,\n} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getCurrentUserId,\n    getProfiles as selectProfiles,\n    getProfilesInCurrentChannel,\n    getProfilesInCurrentTeam,\n    makeSearchProfilesStartingWithTerm,\n    searchProfilesInCurrentTeam,\n    getTotalUsersStats as getTotalUsersStatsSelector,\n} from 'mattermost-redux/selectors/entities/users';\n\nimport {openDirectChannelToUserId, openGroupChannelToUserIds} from 'actions/channel_actions';\nimport {loadStatusesForProfilesList, loadProfilesMissingStatus} from 'actions/status_actions';\nimport {loadProfilesForGroupChannels} from 'actions/user_actions';\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport type {GlobalState} from 'types/store';\n\nimport MoreDirectChannels from './more_direct_channels';\n\ntype OwnProps = {\n    isExistingChannel: boolean;\n}\n\nconst makeMapStateToProps = () => {\n    const searchProfilesStartingWithTerm = makeSearchProfilesStartingWithTerm();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const currentUserId = getCurrentUserId(state);\n        let currentChannelMembers;\n        if (ownProps.isExistingChannel) {\n            currentChannelMembers = getProfilesInCurrentChannel(state);\n        }\n\n        const config = getConfig(state);\n        const restrictDirectMessage = config.RestrictDirectMessage;\n\n        const searchTerm = state.views.search.modalSearch;\n\n        let users: UserProfile[];\n        if (searchTerm) {\n            if (restrictDirectMessage === 'any') {\n                users = searchProfilesStartingWithTerm(state, searchTerm, false);\n            } else {\n                users = searchProfilesInCurrentTeam(state, searchTerm, false);\n            }\n        } else if (restrictDirectMessage === 'any') {\n            users = selectProfiles(state);\n        } else {\n            users = getProfilesInCurrentTeam(state);\n        }\n\n        const team = getCurrentTeam(state);\n        const stats = getTotalUsersStatsSelector(state) || {total_users_count: 0};\n\n        return {\n            currentTeamId: team?.id,\n            currentTeamName: team?.name,\n            searchTerm,\n            users,\n            currentChannelMembers,\n            currentUserId,\n            restrictDirectMessage,\n            totalCount: stats.total_users_count ?? 0,\n        };\n    };\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getProfiles,\n            getProfilesInTeam,\n            loadProfilesMissingStatus,\n            getTotalUsersStats,\n            loadStatusesForProfilesList,\n            loadProfilesForGroupChannels,\n            openDirectChannelToUserId,\n            openGroupChannelToUserIds,\n            searchProfiles,\n            searchGroupChannels,\n            setModalSearchTerm,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(MoreDirectChannels);\n"],"names":["UserDetails","props","currentUserId","option","status","id","delete_at","deleteAt","is_bot","isBot","last_picture_update","lastPictureUpdate","displayName","displayEntireNameForUser","modalName","React","FormattedMessage","defaultMessage","values","displayname","ProfilePicture","src","Client4","undefined","size","className","BotTag","isGuest","roles","GuestTag","CustomStatusEmoji","userID","showTooltip","emojiSize","spanStyle","display","flex","alignItems","email","propTypes","_pt","connect","state","ownProps","getCurrentUserId","getStatusForUserId","isGroupChannel","type","optionValue","_objectSpread","value","label","display_name","username","TIME_SPEC","useTime","style","ranges","within","ListItem","ref","isMobileView","isSelected","add","select","last_post_at","lastPostAt","details","GMDetails","handleClick","useCallback","handleMouseEnter","classNames","onClick","onMouseEnter","Boolean","Timestamp","Object","assign","profiles","length","map","profile","concat","join","getIsMobileView","MAX_SELECTABLE_VALUES","Constants","List","renderOptionValue","selectedItemRef","key","dispatch","useDispatch","handleSubmitImmediatelyOn","intl","useIntl","note","remainingText","isExistingChannel","num","a","chunks","href","e","preventDefault","handleHide","openModal","modalId","ModalIdentifiers","dialogType","NewChannelModal","handleCreateChannel","options","useMemo","MultiSelect","optionRenderer","valueRenderer","renderValue","ariaLabelRenderer","renderAriaLabel","perPage","handlePageChange","handleInput","search","handleDelete","handleAdd","addValue","handleSubmit","noteText","maxValues","numRemainingText","buttonSubmitText","buttonSubmitLoadingText","submitImmediatelyOn","saving","loading","users","totalCount","placeholderText","formatMessage","data","_username","getOptions","getUsersWithDMs","createSelector","getAllChannels","allChannels","directChannels","filter","channel","usersWithDMs","otherUserId","getUserIdFromChannelName","name","otherUser","find","user","push","getFilteredGroupChannels","getChannelsWithUserProfiles","views","modalSearch","channelsWithProfiles","searchTerm","filterProfilesStartingWithTerm","every","filteredGroupChannels","isSearch","recents","sort","b","slice","usersWithoutDMs","some","other","localeCompare","makeGetOptions","MoreDirectChannels","constructor","_this","super","this","_defineProperty","getUserProfiles","actions","getTotalUsersStats","loadProfilesMissingStatus","setModalSearchTerm","setState","show","loadingState","loadingUsers","_this$props$onModalDi","_this$props","_this$props$onExited","_this$props2","exitToChannel","getHistory","onModalDismissed","call","onExited","arguments","userIds","v","done","result","error","currentTeamName","openDirectChannelToUserId","then","openGroupChannelToUserIds","addUsers","indexOf","existingUserIds","page","pageNum","restrictDirectMessage","getProfiles","USERS_PER_PAGE","setUsersLoadingState","getProfilesInTeam","currentTeamId","prevPage","_this$multiselect$cur","multiselect","current","resetPaging","debounce","term","searchTimeoutId","currentChannelMembers","i","updateFromProps","prevProps","clearTimeout","teamId","setTimeout","async","profilesData","groupChannelsData","Promise","all","searchProfiles","team_id","searchGroupChannels","loadStatusesForProfilesList","loadProfilesForGroupChannels","componentDidUpdate","render","body","Modal","dialogClassName","onHide","handleExit","onEntered","loadModalData","role","closeButton","componentClass","isRequired","makeMapStateToProps","searchProfilesStartingWithTerm","makeSearchProfilesStartingWithTerm","_stats$total_users_co","getProfilesInCurrentChannel","getConfig","RestrictDirectMessage","searchProfilesInCurrentTeam","selectProfiles","getProfilesInCurrentTeam","team","getCurrentTeam","stats","getTotalUsersStatsSelector","total_users_count","bindActionCreators"],"sourceRoot":""}