{"version":3,"file":"7438.d7d8047661ea4959905f.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/actions/views/admin.ts","webpack://mattermost-webapp/./src/components/cloud_effects/admin_cloud_effects.ts","webpack://mattermost-webapp/./src/components/common/hooks/useShowAdminLimitReached.ts","webpack://mattermost-webapp/./src/components/common/hooks/usePreference.ts","webpack://mattermost-webapp/./src/components/cloud_effects/index.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {UserReportOptions, UserReport, UserReportFilter, ReportDuration} from '@mattermost/types/reports';\n\nimport {logError} from 'mattermost-redux/actions/errors';\nimport {forceLogoutIfNecessary} from 'mattermost-redux/actions/helpers';\nimport {Client4} from 'mattermost-redux/client';\nimport type {ActionFuncAsync} from 'mattermost-redux/types/actions';\n\nimport {ActionTypes} from 'utils/constants';\n\nimport type {AdminConsoleUserManagementTableProperties} from 'types/store/views';\n\nexport function setNeedsLoggedInLimitReachedCheck(data: boolean) {\n    return {\n        type: ActionTypes.NEEDS_LOGGED_IN_LIMIT_REACHED_CHECK,\n        data,\n    };\n}\n\n/**\n * Action to set the properties of the admin console user management table. Only pass the properties you want to set/modify. If you pass no properties, the table properties will be cleared.\n */\nexport function setAdminConsoleUsersManagementTableProperties(data?: Partial<AdminConsoleUserManagementTableProperties>) {\n    if (!data) {\n        return {\n            type: ActionTypes.CLEAR_ADMIN_CONSOLE_USER_MANAGEMENT_TABLE_PROPERTIES,\n            data: null,\n        };\n    }\n\n    return {\n        type: ActionTypes.SET_ADMIN_CONSOLE_USER_MANAGEMENT_TABLE_PROPERTIES,\n        data,\n    };\n}\n\nexport function getUserReports(options = {} as UserReportOptions): ActionFuncAsync<UserReport[]> {\n    return async (dispatch, getState) => {\n        let data;\n        try {\n            data = await Client4.getUsersForReporting(options);\n        } catch (error) {\n            forceLogoutIfNecessary(error, dispatch, getState);\n            dispatch(logError(error));\n            return {error: error as ServerError};\n        }\n\n        return {data};\n    };\n}\n\nexport function getUserCountForReporting(filter = {} as UserReportFilter): ActionFuncAsync<number> {\n    return async (dispatch, getState) => {\n        let data;\n        try {\n            data = await Client4.getUserCountForReporting(filter);\n        } catch (error) {\n            forceLogoutIfNecessary(error, dispatch, getState);\n            dispatch(logError(error));\n            return {error: error as ServerError};\n        }\n\n        return {data};\n    };\n}\n\nexport function startUsersBatchExport(dateRange: ReportDuration): ActionFuncAsync {\n    return async (dispatch, getState) => {\n        try {\n            await Client4.startUsersBatchExport(dateRange);\n        } catch (error) {\n            forceLogoutIfNecessary(error, dispatch, getState);\n            dispatch(logError(error));\n            return {error: error as ServerError};\n        }\n\n        return {data: true};\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport useShowAdminLimitReached from 'components/common/hooks/useShowAdminLimitReached';\n\nexport default function AdminCloudEffects() {\n    useShowAdminLimitReached();\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// import React from 'react';\nimport {defineMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {setNeedsLoggedInLimitReachedCheck} from 'actions/views/admin';\nimport {closeModal, openModal} from 'actions/views/modals';\nimport {getNeedsLoggedInLimitReachedCheck} from 'selectors/views/admin';\n\nimport CloudUsageModal from 'components/cloud_usage_modal';\nimport useOpenPricingModal from 'components/common/hooks/useOpenPricingModal';\n\nimport {ModalIdentifiers, Preferences} from 'utils/constants';\n\nimport useGetLimits from './useGetLimits';\nimport useGetUsage from './useGetUsage';\nimport usePreference from './usePreference';\n\n// intended to only be run for admins of cloud instances.\nexport default function useShowAdminLimitReached() {\n    const usage = useGetUsage();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const [limits, limitsLoaded] = useGetLimits();\n    const needsLoggedInLimitReachedCheck = useSelector(getNeedsLoggedInLimitReachedCheck);\n    const messageLimit = limits?.messages?.history;\n    const [shownLimitsReachedOnLogin, setShownLimitsReachedOnLogin] = usePreference(\n        Preferences.CATEGORY_CLOUD_LIMITS,\n        Preferences.SHOWN_LIMITS_REACHED_ON_LOGIN,\n    );\n    const openPricingModal = useOpenPricingModal();\n\n    if (!limitsLoaded || !usage.messages.historyLoaded || messageLimit === undefined || !needsLoggedInLimitReachedCheck || shownLimitsReachedOnLogin === 'true') {\n        return;\n    }\n\n    if (usage.messages.history > messageLimit) {\n        setShownLimitsReachedOnLogin('true');\n        dispatch(openModal({\n            modalId: ModalIdentifiers.CLOUD_LIMITS,\n            dialogType: CloudUsageModal,\n            dialogProps: {\n                title: defineMessage({\n                    id: 'workspace_limits.modals.limits_reached.title',\n                    defaultMessage: '{limitName} limit reached',\n                    values: {\n                        limitName: intl.formatMessage({\n                            id: 'workspace_limits.modals.limits_reached.title.message_history',\n                            defaultMessage: 'Message history',\n                        }),\n                    },\n                }),\n                description: defineMessage({\n                    id: 'workspace_limits.modals.limits_reached.description.message_history',\n                    defaultMessage: 'Your sent message history is no longer available but you can still send messages. Upgrade to a paid plan and get unlimited access to your message history.',\n                }),\n                secondaryAction: {\n                    message: defineMessage({\n                        id: 'workspace_limits.modals.close',\n                        defaultMessage: 'Close',\n                    }),\n                    onClick: () => {\n                        dispatch(closeModal(ModalIdentifiers.CLOUD_LIMITS));\n                    },\n                },\n                primaryAction: {\n                    message: defineMessage({\n                        id: 'workspace_limits.modals.view_plan_options',\n                        defaultMessage: 'View plan options',\n                    }),\n                    onClick: () => {\n                        dispatch(closeModal(ModalIdentifiers.CLOUD_LIMITS));\n                        openPricingModal({trackingLocation: 'admin_login_limit_reached_dashboard'});\n                    },\n                },\n                onClose: () => {\n                    dispatch(closeModal(ModalIdentifiers.CLOUD_LIMITS));\n                },\n                needsTheme: true,\n            },\n        }));\n    }\n    dispatch(setNeedsLoggedInLimitReachedCheck(false));\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useCallback, useMemo} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {PreferenceType} from '@mattermost/types/preferences';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport type {GlobalState} from 'types/store';\n\nexport default function usePreference(category: string, name: string): [string | undefined, (value: string) => Promise<ActionResult>] {\n    const dispatch = useDispatch();\n\n    const userId = useSelector(getCurrentUserId);\n    const preferenceValue = useSelector((state: GlobalState) => getPreference(state, category, name));\n\n    const setPreference = useCallback((value: string) => {\n        const preference: PreferenceType = {\n            category,\n            name,\n            user_id: userId,\n            value,\n        };\n        return dispatch(savePreferences(userId, [preference]));\n    }, [category, name, userId]);\n\n    return useMemo(() => ([preferenceValue, setPreference]), [preferenceValue, setPreference]);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {isCurrentLicenseCloud} from 'mattermost-redux/selectors/entities/cloud';\nimport {isCurrentUserSystemAdmin} from 'mattermost-redux/selectors/entities/users';\n\nimport AdminCloudEffects from './admin_cloud_effects';\n\nexport default function CloudEffectsWrapper() {\n    const isCloud = useSelector(isCurrentLicenseCloud);\n\n    const isAdmin = useSelector(isCurrentUserSystemAdmin);\n\n    if (!isCloud || !isAdmin) {\n        return null;\n    }\n\n    // This render can become more complex if need be, rendering multiple\n    // effect components according to conditions.\n    return <AdminCloudEffects/>;\n}\n"],"names":["setNeedsLoggedInLimitReachedCheck","data","type","ActionTypes","setAdminConsoleUsersManagementTableProperties","getUserReports","options","arguments","length","undefined","async","dispatch","getState","Client4","error","forceLogoutIfNecessary","logError","getUserCountForReporting","filter","startUsersBatchExport","dateRange","AdminCloudEffects","_limits$messages","usage","useGetUsage","useDispatch","intl","useIntl","limits","limitsLoaded","useGetLimits","needsLoggedInLimitReachedCheck","useSelector","getNeedsLoggedInLimitReachedCheck","messageLimit","messages","history","shownLimitsReachedOnLogin","setShownLimitsReachedOnLogin","category","name","userId","getCurrentUserId","preferenceValue","state","getPreference","setPreference","useCallback","value","preference","user_id","savePreferences","useMemo","usePreference","Preferences","openPricingModal","useOpenPricingModal","historyLoaded","openModal","modalId","ModalIdentifiers","dialogType","CloudUsageModal","dialogProps","title","defineMessage","id","defaultMessage","values","limitName","formatMessage","description","secondaryAction","message","onClick","closeModal","primaryAction","trackingLocation","onClose","needsTheme","useShowAdminLimitReached","CloudEffectsWrapper","isCloud","isCurrentLicenseCloud","isAdmin","isCurrentUserSystemAdmin","React"],"sourceRoot":""}