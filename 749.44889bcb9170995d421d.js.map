{"version":3,"file":"749.44889bcb9170995d421d.js","mappings":"yTAwBe,SAASA,EAAcC,GAE5B,IAF6B,cACnCC,GACID,EACJ,MAAME,GAAOC,EAAAA,EAAAA,WACPC,GAAiBC,EAAAA,EAAAA,aAAYC,EAAAA,IAC7BC,GAAWC,EAAAA,EAAAA,eAEXC,GAAqBC,EAAAA,EAAAA,cAAY,KAC9BN,EAAeO,SAIpBJ,GAASK,EAAAA,EAAAA,IAAqBR,EAAeS,KAAKC,GAAMA,EAAEC,QAC1DC,EAAAA,EAAAA,IAAW,KAAM,+CAA8C,GAChE,CAACZ,EAAgBG,IAEpB,OAA8B,IAA1BH,EAAeO,OACR,KAIPM,IAAAA,cAAA,OAAKC,UAAU,kDACXD,IAAAA,cAACE,EAAAA,EAA2B,CAACC,YAAalB,EAAKmB,cAAc,CAACN,GAAI,wBAAyBO,eAAgB,aACvGL,IAAAA,cAACM,EAAAA,EAA0B,CAACR,GAAG,WAC3BE,IAAAA,cAACO,EAAAA,EAAkB,CACfT,GAAI,UACJN,mBAAoBA,EACpBgB,YAAarB,EAAeO,SAEhCM,IAAAA,cAACS,EAAAA,GAAc,MACfT,IAAAA,cAACU,EAAAA,EAAyB,CAACZ,GAAI,cAGvCE,IAAAA,cAAA,OAAKC,UAAU,+BACXD,IAAAA,cAAA,MACIW,KAAK,OACLV,UAAU,mBAETd,EAAeS,KAAI,CAACgB,EAASC,IAEtBb,IAAAA,cAACc,EAAAA,EAAc,CACXC,IAAKH,EAAQd,GACbkB,aAAcH,EACdI,UAAWL,EAAQd,GACnBd,cAAeA,EACfkC,qBAAqB,EACrBC,mBAAmB,EACnBC,aAAa,EACbC,sBAAsB,QAQtD,CAACvC,EAAAwC,UAAA,CA3DGtC,cAAauC,IAAAA,KAAAA,W","sources":["webpack://mattermost-webapp/./src/components/sidebar/unread_channels.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {readMultipleChannels} from 'mattermost-redux/actions/channels';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {getUnreadChannels} from 'selectors/views/channel_sidebar';\n\nimport * as Menu from 'components/menu';\n\nimport CreateNewCategoryMenuItem from './sidebar_category/sidebar_category_menu/create_new_category_menu_item';\nimport MarkAsReadMenuItem from './sidebar_category/sidebar_category_menu/mark_as_read_menu_item';\nimport SidebarCategoryGenericMenu from './sidebar_category/sidebar_category_menu/sidebar_category_generic_menu';\nimport {SidebarCategoryHeaderStatic} from './sidebar_category_header';\nimport SidebarChannel from './sidebar_channel';\n\ntype Props = {\n    setChannelRef: (channelId: string, ref: HTMLLIElement) => void;\n};\n\nexport default function UnreadChannels({\n    setChannelRef,\n}: Props) {\n    const intl = useIntl();\n    const unreadChannels = useSelector(getUnreadChannels);\n    const dispatch = useDispatch();\n\n    const handleViewCategory = useCallback(() => {\n        if (!unreadChannels.length) {\n            return;\n        }\n\n        dispatch(readMultipleChannels(unreadChannels.map((v) => v.id)));\n        trackEvent('ui', 'ui_sidebar_category_menu_viewUnreadCategory');\n    }, [unreadChannels, dispatch]);\n\n    if (unreadChannels.length === 0) {\n        return null;\n    }\n\n    return (\n        <div className='SidebarChannelGroup dropDisabled a11y__section'>\n            <SidebarCategoryHeaderStatic displayName={intl.formatMessage({id: 'sidebar.types.unreads', defaultMessage: 'UNREADS'})}>\n                <SidebarCategoryGenericMenu id='unreads'>\n                    <MarkAsReadMenuItem\n                        id={'unreads'}\n                        handleViewCategory={handleViewCategory}\n                        numChannels={unreadChannels.length}\n                    />\n                    <Menu.Separator/>\n                    <CreateNewCategoryMenuItem id={'unreads'}/>\n                </SidebarCategoryGenericMenu>\n            </SidebarCategoryHeaderStatic>\n            <div className='SidebarChannelGroup_content'>\n                <ul\n                    role='list'\n                    className='NavGroupContent'\n                >\n                    {unreadChannels.map((channel, index) => {\n                        return (\n                            <SidebarChannel\n                                key={channel.id}\n                                channelIndex={index}\n                                channelId={channel.id}\n                                setChannelRef={setChannelRef}\n                                isCategoryCollapsed={false}\n                                isCategoryDragged={false}\n                                isDraggable={false}\n                                isAutoSortedCategory={true}\n                            />\n                        );\n                    })}\n                </ul>\n            </div>\n        </div>\n    );\n}\n"],"names":["UnreadChannels","_ref","setChannelRef","intl","useIntl","unreadChannels","useSelector","getUnreadChannels","dispatch","useDispatch","handleViewCategory","useCallback","length","readMultipleChannels","map","v","id","trackEvent","React","className","SidebarCategoryHeaderStatic","displayName","formatMessage","defaultMessage","SidebarCategoryGenericMenu","MarkAsReadMenuItem","numChannels","Menu","CreateNewCategoryMenuItem","role","channel","index","SidebarChannel","key","channelIndex","channelId","isCategoryCollapsed","isCategoryDragged","isDraggable","isAutoSortedCategory","propTypes","_pt"],"sourceRoot":""}