{"version":3,"file":"6142.288a1b60218faeb89856.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/common/hooks/useCopyText.ts","webpack://mattermost-webapp/./src/components/widgets/icons/mail_icon.tsx","webpack://mattermost-webapp/../node_modules/react-select/async-creatable/dist/react-select.browser.esm.js","webpack://mattermost-webapp/./src/components/widgets/icons/mail_plus_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/inputs/users_emails_input.tsx","webpack://mattermost-webapp/../node_modules/core-js/modules/es.promise.all-settled.js","webpack://mattermost-webapp/../node_modules/core-js/modules/esnext.promise.all-settled.js"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useRef, useCallback, useState} from 'react';\n\ntype CopyOptions = {\n    successCopyTimeout?: number;\n    text: string;\n    trackCallback?: () => void;\n};\n\ntype CopyResponse = {\n    copiedRecently: boolean;\n    copyError: boolean;\n    onClick: () => void;\n};\n\nconst DEFAULT_COPY_TIMEOUT = 4000;\n\nexport default function useCopyText(options: CopyOptions): CopyResponse {\n    const [copiedRecently, setCopiedRecently] = useState(false);\n    const [copyError, setCopyError] = useState(false);\n    const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n    let successCopyTimeout = DEFAULT_COPY_TIMEOUT;\n    if (options.successCopyTimeout || options.successCopyTimeout === 0) {\n        successCopyTimeout = options.successCopyTimeout;\n    }\n\n    const onClick = useCallback(() => {\n        if (options.trackCallback) {\n            options.trackCallback();\n        }\n\n        if (timerRef.current) {\n            clearTimeout(timerRef.current);\n            timerRef.current = null;\n        }\n        const clipboard = navigator.clipboard;\n        if (clipboard) {\n            clipboard.writeText(options.text).\n                then(() => {\n                    setCopiedRecently(true);\n                    setCopyError(false);\n                }).\n                catch(() => {\n                    setCopiedRecently(false);\n                    setCopyError(true);\n                });\n        } else {\n            const textField = document.createElement('textarea');\n            textField.innerText = options.text;\n            textField.style.position = 'fixed';\n            textField.style.opacity = '0';\n\n            document.body.appendChild(textField);\n            textField.select();\n\n            try {\n                const success = document.execCommand('copy');\n                setCopiedRecently(success);\n                setCopyError(!success);\n            } catch (err) {\n                setCopiedRecently(false);\n                setCopyError(true);\n            }\n            textField.remove();\n        }\n\n        timerRef.current = setTimeout(() => {\n            setCopiedRecently(false);\n            setCopyError(false);\n        }, successCopyTimeout);\n    }, [options.text, successCopyTimeout]);\n\n    return {\n        copiedRecently,\n        copyError,\n        onClick,\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function MailIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='24px'\n                height='24px'\n                viewBox='0 0 24 24'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.mail', defaultMessage: 'Mail Icon'})}\n            >\n                <path d='M4,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4C2.89,20 2,19.1 2,18V6C2,4.89 2.89,4 4,4M12,11L20,6H4L12,11M4,18H20V8.37L12,13.36L4,8.37V18Z'/>\n            </svg>\n        </span>\n    );\n}\n","import '@babel/runtime/helpers/esm/objectWithoutProperties';\nimport '@babel/runtime/helpers/esm/extends';\nimport '@babel/runtime/helpers/esm/toConsumableArray';\nimport '@babel/runtime/helpers/esm/objectSpread';\nimport '@babel/runtime/helpers/esm/classCallCheck';\nimport '@babel/runtime/helpers/esm/createClass';\nimport '@babel/runtime/helpers/esm/possibleConstructorReturn';\nimport '@babel/runtime/helpers/esm/getPrototypeOf';\nimport '@babel/runtime/helpers/esm/inherits';\nimport '@babel/runtime/helpers/esm/assertThisInitialized';\nimport '@babel/runtime/helpers/esm/defineProperty';\nimport 'react';\nimport 'memoize-one';\nimport '@emotion/core';\nimport 'react-dom';\nimport 'prop-types';\nimport '@babel/runtime/helpers/esm/typeof';\nimport 'raf';\nimport '../../dist/chunk-762c4cd6.browser.esm.js';\nimport { b as Select, a as manageState } from '../../dist/chunk-f5c2e42b.browser.esm.js';\nimport '@emotion/css';\nimport '@babel/runtime/helpers/esm/taggedTemplateLiteral';\nimport 'react-input-autosize';\nimport { makeAsyncSelect } from '../../async/dist/react-select.browser.esm.js';\nimport { makeCreatableSelect } from '../../creatable/dist/react-select.browser.esm.js';\n\nvar SelectCreatable = makeCreatableSelect(Select);\nvar SelectCreatableState = manageState(SelectCreatable);\nvar AsyncCreatable = makeAsyncSelect(SelectCreatableState);\n\nexport default AsyncCreatable;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function MailPlusIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='24px'\n                height='24px'\n                viewBox='0 0 24 24'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.add-mail', defaultMessage: 'Add Mail Icon'})}\n            >\n                <path d='M3,4C1.89,4 1,4.89 1,6V18A2,2 0 0,0 3,20H14V18H3V8.37L11,13.36L19,8.37V13H21V6A2,2 0 0,0 19,4H3M3,6H19L11,11L3,6M19,15V18H16V20H19V23H21V20H24V18H21V15H19Z'/>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {FormattedMessage, defineMessages} from 'react-intl';\nimport {components} from 'react-select';\nimport type {FormatOptionLabelMeta, InputActionMeta, InputProps, OptionsType, Styles, ValueType} from 'react-select';\nimport AsyncCreatable from 'react-select/async-creatable';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport CloseCircleSolidIcon from 'components/widgets/icons/close_circle_solid_icon';\nimport MailIcon from 'components/widgets/icons/mail_icon';\nimport MailPlusIcon from 'components/widgets/icons/mail_plus_icon';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport BotTag from 'components/widgets/tag/bot_tag';\nimport GuestTag from 'components/widgets/tag/guest_tag';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport {getDisplayName, getLongDisplayNameParts, imageURLForUser} from 'utils/utils';\n\nimport './users_emails_input.scss';\n\ntype Props = {\n    placeholder: string;\n    ariaLabel: string;\n    usersLoader: (search: string, callback: (users: UserProfile[]) => void) => Promise<UserProfile[]> | undefined;\n    onUsersLoad?: (users: UserProfile[]) => void;\n    onBlur?: () => void;\n    onChange: (change: Array<UserProfile | string>) => void;\n    showError?: boolean;\n    errorMessage?: MessageDescriptor;\n    errorMessageValues?: Record<string, React.ReactNode>;\n    value: Array<UserProfile | string>;\n    onInputChange: (change: string) => void;\n    inputValue: string;\n    noMatchMessage?: MessageDescriptor;\n    validAddressMessage?: MessageDescriptor;\n    loadingMessage?: MessageDescriptor;\n    emailInvitationsEnabled: boolean;\n    extraErrorText?: React.ReactNode;\n    autoFocus?: boolean;\n    suppressNoOptionsMessage?: boolean;\n    onPaste?: (e: ClipboardEvent) => void;\n}\n\nexport type EmailInvite = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    options: UserProfile[];\n}\n\nconst multipleValuesDelimiter = /[\\s,;]+/;\n\nconst messages = defineMessages({\n    loadingDefault: {\n        id: 'widgets.users_emails_input.loading',\n        defaultMessage: 'Loading',\n    },\n    noMatchDefault: {\n        id: 'widgets.users_emails_input.no_user_found_matching',\n        defaultMessage: 'No one found matching **{text}**. Enter their email to invite them.',\n    },\n    validAddressDefault: {\n        id: 'widgets.users_emails_input.valid_email',\n        defaultMessage: 'Add **{email}**',\n    },\n});\n\nexport default class UsersEmailsInput extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        noMatchMessage: messages.noMatchDefault,\n        validAddress: messages.validAddressDefault,\n        loadingMessage: messages.loadingDefault,\n        showError: false,\n    };\n    private selectRef: RefObject<AsyncCreatable<UserProfile | EmailInvite> & { handleInputChange: (newValue: string, actionMeta: InputActionMeta | { action: 'custom' }) => string }>;\n\n    constructor(props: Props) {\n        super(props);\n        this.selectRef = React.createRef();\n        this.state = {\n            options: [],\n        };\n    }\n\n    renderUserName = (user: UserProfile) => {\n        const parts = getLongDisplayNameParts(user);\n        let fullName = null;\n        if (parts.fullName) {\n            fullName = (<span className='fullname'>{parts.fullName}</span>);\n        }\n        let nickname = null;\n        if (parts.nickname) {\n            nickname = (<span className='nickname'>{parts.nickname}</span>);\n        }\n\n        return (\n            <>\n                {parts.displayName}\n                {fullName}\n                {nickname}\n            </>\n        );\n    };\n\n    loadingMessage = (): string => {\n        const text = (\n            <FormattedMessage\n                {...this.props.loadingMessage}\n            />\n        );\n\n        // faking types to satisfy the interface for the version of react-select we are on.\n        return (<LoadingSpinner text={text}/>) as unknown as string;\n    };\n\n    getOptionValue = (obj: UserProfile | EmailInvite): string => {\n        if (this.isUserProfile(obj)) {\n            return obj.id;\n        }\n        return obj.value;\n    };\n\n    formatOptionLabel = (user: UserProfile | EmailInvite, options: FormatOptionLabelMeta<UserProfile | EmailInvite>) => {\n        const profileImg = imageURLForUser((user as UserProfile).id, (user as UserProfile).last_picture_update);\n        let guestBadge = null;\n        let botBadge = null;\n\n        if ((user as UserProfile).is_bot) {\n            botBadge = <BotTag/>;\n        }\n\n        if (!isEmail((user as EmailInvite).value) && isGuest((user as UserProfile).roles)) {\n            guestBadge = <GuestTag/>;\n        }\n\n        if (options.context === 'menu') {\n            if ((user as EmailInvite).value && isEmail((user as EmailInvite).value)) {\n                return this.getCreateLabel((user as EmailInvite).value);\n            }\n            return (\n                <React.Fragment>\n                    <Avatar\n                        size='lg'\n                        username={(user as UserProfile).username}\n                        url={profileImg}\n                    />\n                    {this.renderUserName(user as UserProfile)}\n                    {botBadge}\n                    {guestBadge}\n                </React.Fragment>\n            );\n        }\n\n        if ((user as EmailInvite).value && isEmail((user as EmailInvite).value)) {\n            return (\n                <React.Fragment>\n                    <MailIcon className='mail-icon'/>\n                    <span>{(user as EmailInvite).value}</span>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <Avatar\n                    size='sm'\n                    username={(user as UserProfile).username}\n                    url={profileImg}\n                />\n                {getDisplayName(user as UserProfile)}\n                {botBadge}\n                {guestBadge}\n            </React.Fragment>\n        );\n    };\n\n    onChange = (value: ValueType<UserProfile | EmailInvite>) => {\n        if (this.props.onChange) {\n            if (value) {\n                this.props.onChange((value as Array<UserProfile | EmailInvite>).map((v) => {\n                    if (this.isUserProfile(v)) {\n                        return v;\n                    }\n                    return v.value;\n                }));\n            } else {\n                this.props.onChange([]);\n            }\n        }\n    };\n\n    getCreateLabel = (value: string) => (\n        <React.Fragment>\n            <MailPlusIcon className='mail-plus-icon'/>\n            <FormattedMarkdownMessage\n                key='widgets.users_emails_input.valid_email'\n                {...this.props.validAddressMessage}\n                values={{email: value}}\n                disableLinks={true}\n            />\n        </React.Fragment>\n    );\n\n    Input = (props: InputProps) => {\n        const handlePaste = (e: ClipboardEvent) => {\n            e.preventDefault();\n            const clipboardText = e.clipboardData?.getData('Text') || '';\n            this.appendDelimitedValues(clipboardText);\n\n            if (this.props.onPaste) {\n                this.props.onPaste(e);\n            }\n        };\n\n        return (\n            <components.Input\n                {...props}\n\n                // The onPaste is not part of the InputProps type definition. It's fixed in v5 of react-select.\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore - The type definition for the Input component is incorrect.\n                onPaste={handlePaste}\n            />\n        );\n    };\n\n    NoOptionsMessage = (props: Record<string, any>) => {\n        const inputValue = props.selectProps.inputValue;\n        if (!inputValue) {\n            return null;\n        }\n\n        const Msg: any = components.NoOptionsMessage;\n        return (\n            <div className='users-emails-input__option users-emails-input__option--no-matches'>\n                <Msg {...props}>\n                    <FormattedMarkdownMessage\n                        {...this.props.noMatchMessage}\n                        values={{text: inputValue}}\n                        disableLinks={true}\n                    />\n                </Msg>\n            </div>\n        );\n    };\n\n    MultiValueRemove = ({children, innerProps}: {children: React.ReactNode | React.ReactNodeArray; innerProps: Record<string, any>}) => (\n        <div {...innerProps}>\n            {children || <CloseCircleSolidIcon/>}\n        </div>\n    );\n\n    components = {\n        NoOptionsMessage: this.props.suppressNoOptionsMessage ? () => null : this.NoOptionsMessage,\n        MultiValueRemove: this.MultiValueRemove,\n        IndicatorsContainer: () => null,\n        Input: this.Input,\n    };\n\n    handleInputChange = async (inputValue: string, action: InputActionMeta) => {\n        if (action.action === 'input-blur' && inputValue !== '') {\n            const values = this.formatValuesForCreatable();\n\n            // Check if the input is an existing user by username or email.\n            const option = this.state.options.find((o) =>\n                this.props.inputValue === o.username || this.props.inputValue === ('@' + o.username) ||\n                this.props.inputValue === o.email,\n            );\n\n            if (option) {\n                this.onChange([...values, option]);\n                this.props.onInputChange('');\n                return;\n            }\n\n            // Check if the input is a valid new email, if the email invitations are enabled.\n            if (this.props.emailInvitationsEnabled && isEmail(this.props.inputValue)) {\n                const email = this.props.inputValue;\n                this.onChange([...values, {value: email, label: email}]);\n                this.props.onInputChange('');\n            }\n        } else if (action.action === 'input-change' && inputValue !== '' && inputValue?.[inputValue.length - 1].match(multipleValuesDelimiter)) {\n            const newValuesCount = await this.appendDelimitedValues(inputValue);\n            if (newValuesCount === 0) {\n                return;\n            }\n        }\n        if (action.action !== 'input-blur' && action.action !== 'menu-close') {\n            this.props.onInputChange(inputValue);\n        }\n    };\n\n    formatValuesForCreatable = () => {\n        return this.props.value.map((v) => {\n            if ((v as UserProfile).id) {\n                return v as UserProfile;\n            }\n            return {label: v, value: v} as EmailInvite;\n        });\n    };\n\n    optionsLoader = (_input: string, callback: (options: UserProfile[]) => void) => {\n        const customCallback = (options: UserProfile[]) => {\n            this.setState({options});\n            const accessibleProfiles = options.map((user: UserProfile) => ({...user, label: user.username}));\n            callback(accessibleProfiles);\n            if (this.props.onUsersLoad) {\n                this.props.onUsersLoad(options);\n            }\n        };\n        const result = this.props.usersLoader(this.props.inputValue, customCallback);\n        if (result && result.then) {\n            result.then(customCallback);\n        }\n    };\n\n    showAddEmail = (inputValue: string, value: ValueType<UserProfile | EmailInvite>, options: OptionsType<UserProfile | EmailInvite>): boolean => {\n        return this.props.emailInvitationsEnabled && options.length === 0 && isEmail(inputValue);\n    };\n\n    onFocus = () => {\n        this.selectRef.current?.handleInputChange(this.props.inputValue, {action: 'custom'});\n    };\n\n    onBlur = () => {\n        this.selectRef.current?.handleInputChange(this.props.inputValue, {action: 'input-blur'});\n        if (this.props.onBlur) {\n            this.props.onBlur();\n        }\n    };\n\n    appendDelimitedValues = async (values: string): Promise<number> => {\n        const existingValues = this.formatValuesForCreatable();\n        const entries = [...new Set(values.split(multipleValuesDelimiter))];\n\n        if (entries.length === 0) {\n            return 0;\n        }\n\n        const isUniqueEmail = (values: Array<UserProfile | EmailInvite>, email: string): boolean => {\n            return values.findIndex((v) => (\n                this.isEmailInvite(v) && v.value === email) || (this.isUserProfile(v) && v.email === email),\n            ) === -1;\n        };\n\n        const handleEmail = async (email: string): Promise<UserProfile | string | null> => {\n            if (!isUniqueEmail(existingValues, email)) {\n                return null;\n            }\n            const resp = await this.searchByEmail(email);\n            return resp || email;\n        };\n\n        const isUniqueUsername = (values: Array<UserProfile | EmailInvite>, username: string): boolean => {\n            return values.findIndex((v) => this.isUserProfile(v) && v.username === username) === -1;\n        };\n\n        const handleUsername = async (username: string): Promise<UserProfile | null> => {\n            if (!isUniqueUsername(existingValues, username)) {\n                return null;\n            }\n            return this.searchByUsername(username);\n        };\n\n        const promises = entries.map(async (entry) => {\n            if (entry === '') {\n                return Promise.resolve(null);\n            }\n\n            let res;\n            if (this.props.emailInvitationsEnabled && isEmail(entry)) {\n                res = await handleEmail(entry);\n            } else {\n                res = await handleUsername(entry);\n            }\n\n            if (typeof res === 'string') {\n                return Promise.resolve({value: res, label: res});\n            } else if (this.isUserProfile(res as UserProfile)) {\n                return Promise.resolve(res);\n            }\n            return Promise.resolve(null);\n        });\n\n        const newValues: Array<UserProfile | EmailInvite> = [];\n\n        (await Promise.allSettled(promises)).reduce((acc, v) => {\n            if (v.status === 'fulfilled') {\n                acc.push(v.value);\n            }\n            return acc;\n        }, [] as Array<UserProfile | EmailInvite | null>).forEach((v) => {\n            if (!v) {\n                return;\n            }\n\n            if (this.isEmailInvite(v) && (!isUniqueEmail(existingValues, v.value) || !isUniqueEmail(newValues, v.value))) {\n                return;\n            }\n\n            if (this.isUserProfile(v) && (\n                !isUniqueUsername(existingValues, v.username) || !isUniqueEmail(existingValues, v.email) ||\n                !isUniqueUsername(newValues, v.username) || !isUniqueEmail(newValues, v.email)\n            )) {\n                return;\n            }\n\n            newValues.push(v);\n        });\n\n        this.onChange([...existingValues, ...newValues]);\n        this.props.onInputChange('');\n\n        return newValues.length;\n    };\n\n    isUserProfile = (obj: UserProfile | EmailInvite): obj is UserProfile => {\n        return (obj as UserProfile).id !== undefined;\n    };\n\n    isEmailInvite = (obj: UserProfile | EmailInvite): obj is EmailInvite => {\n        return (obj as EmailInvite).value !== undefined;\n    };\n\n    searchByEmail = async (value: string): Promise<UserProfile | null> => {\n        let data;\n        try {\n            data = await Client4.getUserByEmail(value);\n        } catch (error) {\n            return null;\n        }\n        return data?.delete_at === 0 ? data : null;\n    };\n\n    searchByUsername = async (value: string): Promise<UserProfile | null> => {\n        let data;\n        try {\n            data = await Client4.getUserByUsername(value);\n        } catch (error) {\n            return null;\n        }\n        return data?.delete_at === 0 ? data : null;\n    };\n\n    render() {\n        const values = this.formatValuesForCreatable();\n\n        const Msg: any = components.NoOptionsMessage;\n\n        const styles: Partial<Styles> = {\n            placeholder: (css) => ({\n                ...css,\n\n                pointerEvents: 'none',\n                userSelect: 'none',\n            }),\n            input: (css) => ({\n                ...css,\n\n                display: 'flex',\n                flex: '1 1 auto',\n\n                '> div': {\n                    width: '100%',\n                },\n\n                input: {\n                    width: '100% !important',\n                    textAlign: 'left',\n                },\n            }),\n        };\n\n        return (\n            <>\n                <AsyncCreatable\n                    ref={this.selectRef}\n                    onChange={this.onChange}\n                    loadOptions={this.optionsLoader}\n                    isValidNewOption={this.showAddEmail}\n                    isMulti={true}\n                    isClearable={false}\n                    className={classNames(\n                        'UsersEmailsInput',\n                        this.props.showError ? 'error' : '',\n                        {empty: this.props.inputValue === ''},\n                        {'no-selections': values.length === 0},\n                    )}\n                    classNamePrefix='users-emails-input'\n                    placeholder={this.props.placeholder}\n                    components={this.components}\n                    getOptionValue={this.getOptionValue}\n                    formatOptionLabel={this.formatOptionLabel}\n                    defaultOptions={false}\n                    defaultMenuIsOpen={false}\n                    openMenuOnClick={false}\n                    loadingMessage={this.loadingMessage}\n                    onInputChange={this.handleInputChange}\n                    inputValue={this.props.inputValue}\n                    openMenuOnFocus={true}\n                    onFocus={this.onFocus}\n                    onBlur={this.onBlur}\n                    tabSelectsValue={true}\n                    value={values}\n                    aria-label={this.props.ariaLabel}\n                    autoFocus={this.props.autoFocus}\n                    styles={styles}\n                />\n                {this.props.showError && (\n                    <div className='InputErrorBox'>\n                        <Msg>\n                            <FormattedMarkdownMessage\n                                {...this.props.errorMessage}\n                                values={this.props.errorMessageValues}\n                                disableLinks={true}\n                            />\n                        </Msg>\n                        {this.props.extraErrorText || null}\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\nvar iterate = require('../internals/iterate');\n\n// `Promise.allSettled` method\n// https://tc39.es/ecma262/#sec-promise.allsettled\n$({ target: 'Promise', stat: true }, {\n  allSettled: function allSettled(iterable) {\n    var C = this;\n    var capability = newPromiseCapabilityModule.f(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var promiseResolve = aCallable(C.resolve);\n      var values = [];\n      var counter = 0;\n      var remaining = 1;\n      iterate(iterable, function (promise) {\n        var index = counter++;\n        var alreadyCalled = false;\n        remaining++;\n        call(promiseResolve, C, promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'fulfilled', value: value };\n          --remaining || resolve(values);\n        }, function (error) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[index] = { status: 'rejected', reason: error };\n          --remaining || resolve(values);\n        });\n      });\n      --remaining || resolve(values);\n    });\n    if (result.error) reject(result.value);\n    return capability.promise;\n  }\n});\n","// TODO: Remove from `core-js@4`\nrequire('../modules/es.promise.all-settled.js');\n"],"names":["DEFAULT_COPY_TIMEOUT","useCopyText","options","copiedRecently","setCopiedRecently","useState","copyError","setCopyError","timerRef","useRef","successCopyTimeout","onClick","useCallback","trackCallback","current","clearTimeout","clipboard","navigator","writeText","text","then","catch","textField","document","createElement","innerText","style","position","opacity","body","appendChild","select","success","execCommand","err","remove","setTimeout","MailIcon","props","formatMessage","useIntl","React","width","height","viewBox","role","id","defaultMessage","d","SelectCreatable","SelectCreatableState","MailPlusIcon","multipleValuesDelimiter","messages","defineMessages","loadingDefault","noMatchDefault","validAddressDefault","UsersEmailsInput","constructor","super","_defineProperty","user","parts","getLongDisplayNameParts","fullName","className","nickname","displayName","FormattedMessage","this","loadingMessage","LoadingSpinner","obj","isUserProfile","value","profileImg","imageURLForUser","last_picture_update","guestBadge","botBadge","is_bot","BotTag","isEmail","isGuest","roles","GuestTag","context","getCreateLabel","Avatar","size","username","url","renderUserName","getDisplayName","onChange","map","v","FormattedMarkdownMessage","Object","assign","key","validAddressMessage","values","email","disableLinks","components","onPaste","e","_e$clipboardData","preventDefault","clipboardText","clipboardData","getData","appendDelimitedValues","inputValue","selectProps","Msg","noMatchMessage","_ref","children","innerProps","CloseCircleSolidIcon","NoOptionsMessage","suppressNoOptionsMessage","MultiValueRemove","IndicatorsContainer","Input","async","action","formatValuesForCreatable","option","state","find","o","onInputChange","emailInvitationsEnabled","label","length","match","_input","callback","customCallback","setState","accessibleProfiles","_objectSpread","onUsersLoad","result","usersLoader","_this$selectRef$curre","selectRef","handleInputChange","_this$selectRef$curre2","onBlur","existingValues","entries","Set","split","isUniqueEmail","findIndex","isEmailInvite","handleEmail","searchByEmail","isUniqueUsername","handleUsername","searchByUsername","promises","entry","Promise","resolve","res","newValues","allSettled","reduce","acc","status","push","forEach","undefined","_data","data","Client4","error","delete_at","_data2","render","styles","placeholder","css","pointerEvents","userSelect","input","display","flex","textAlign","AsyncCreatable","ref","loadOptions","optionsLoader","isValidNewOption","showAddEmail","isMulti","isClearable","classNames","showError","empty","classNamePrefix","getOptionValue","formatOptionLabel","defaultOptions","defaultMenuIsOpen","openMenuOnClick","openMenuOnFocus","onFocus","tabSelectsValue","ariaLabel","autoFocus","errorMessage","errorMessageValues","extraErrorText","validAddress","$","call","aCallable","newPromiseCapabilityModule","perform","iterate","target","stat","iterable","C","capability","f","reject","promiseResolve","counter","remaining","promise","index","alreadyCalled","reason"],"sourceRoot":""}