{"version":3,"file":"2574.95702d8811126dc19dfa.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/widgets/inputs/url_input/url_input.tsx","webpack://mattermost-webapp/./src/components/channel_name_form_field/channel_name_form_field.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/check_circle_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/globe_circle_solid_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/lock_circle_solid_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/icons/upgrade_badge_icon.tsx","webpack://mattermost-webapp/./src/components/widgets/public-private-selector/public-private-selector.tsx","webpack://mattermost-webapp/./src/components/new_channel_modal/new_channel_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useEffect, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport {getShortenedURL} from 'utils/url';\n\nimport Input from '../input/input';\n\nimport './url_input.scss';\n\ntype URLInputProps = {\n    base: string;\n    path?: string;\n    pathInfo: string;\n    limit?: number;\n    maxLength?: number;\n    shortenLength?: number;\n    error?: string;\n    className?: string;\n    onChange?: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n    onBlur?: (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n};\n\nfunction UrlInput({\n    base,\n    path,\n    pathInfo,\n    limit,\n    maxLength,\n    shortenLength,\n    error,\n    className,\n    onChange,\n    onBlur,\n}: URLInputProps) {\n    const {formatMessage} = useIntl();\n\n    const [editing, setEditing] = useState(false);\n\n    useEffect(() => {\n        if (error) {\n            setEditing(true);\n        }\n    }, [error]);\n\n    const fullPath = `${base}/${path ? `${path}/` : ''}`;\n    const fullURL = `${fullPath}${editing ? '' : pathInfo}`;\n    const isShortenedURL = shortenLength && fullURL.length > shortenLength;\n    const hasError = Boolean(error);\n\n    const handleOnInputChange = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        event.preventDefault();\n\n        if (onChange) {\n            onChange(event);\n        }\n    };\n\n    const handleOnInputBlur = (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        event.preventDefault();\n\n        setEditing(hasError);\n\n        if (onBlur) {\n            onBlur(event);\n        }\n    };\n\n    const handleOnButtonClick = () => {\n        if (!hasError) {\n            setEditing(!editing);\n        }\n    };\n\n    const urlInputLabel = (\n        <span\n            className='url-input-label'\n            data-testid='urlInputLabel'\n        >\n            {formatMessage({id: 'url_input.label.url', defaultMessage: 'URL: '})}\n            {isShortenedURL ? getShortenedURL(fullURL, shortenLength) : fullURL}\n        </span>\n    );\n\n    return (\n        <div className={classNames('url-input-main', className)}>\n            <div className='url-input-container'>\n                {isShortenedURL ? (\n                    <WithTooltip\n                        id='urlTooltip'\n                        title={fullURL}\n                        placement='top'\n                    >\n                        {urlInputLabel}\n                    </WithTooltip>\n\n                ) : (\n                    urlInputLabel\n                )}\n                {(editing || hasError) && (\n                    <Input\n                        data-testid='channelURLInput'\n                        name='url-input'\n                        type='text'\n                        containerClassName='url-input-editable-container'\n                        wrapperClassName='url-input-editable-wrapper'\n                        inputClassName='url-input-editable-path'\n                        autoFocus={true}\n                        autoComplete='off'\n                        value={pathInfo}\n                        limit={limit}\n                        maxLength={maxLength}\n                        hasError={hasError}\n                        onChange={handleOnInputChange}\n                        onBlur={handleOnInputBlur}\n                    />\n                )}\n                <button\n                    className={classNames('url-input-button', {disabled: hasError})}\n                    disabled={hasError}\n                    onClick={handleOnButtonClick}\n                >\n                    <span className='url-input-button-label'>\n                        {editing ? formatMessage({id: 'url_input.buttonLabel.done', defaultMessage: 'Done'}) : formatMessage({id: 'url_input.buttonLabel.edit', defaultMessage: 'Edit'})}\n                    </span>\n                </button>\n            </div>\n            {error && (\n                <div className='url-input-error'>\n                    <i className='icon icon-alert-outline'/>\n                    <span>{error}</span>\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default UrlInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useRef, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport type {CustomMessageInputType} from 'components/widgets/inputs/input/input';\nimport Input from 'components/widgets/inputs/input/input';\nimport URLInput from 'components/widgets/inputs/url_input/url_input';\n\nimport Constants from 'utils/constants';\nimport {cleanUpUrlable, getSiteURL, validateChannelUrl} from 'utils/url';\nimport {generateSlug, localizeMessage} from 'utils/utils';\n\nexport type Props = {\n    value: string;\n    name: string;\n    placeholder: string;\n    onDisplayNameChange: (name: string) => void;\n    onURLChange: (url: string) => void;\n    autoFocus?: boolean;\n    onErrorStateChange?: (isError: boolean) => void;\n    team?: Team;\n    urlError?: string;\n}\n\nimport './channel_name_form_field.scss';\n\nfunction validateDisplayName(displayNameParam: string) {\n    const errors: string[] = [];\n\n    const displayName = displayNameParam.trim();\n\n    if (displayName.length < Constants.MIN_CHANNELNAME_LENGTH) {\n        errors.push(localizeMessage('channel_modal.name.longer', 'Channel names must have at least 2 characters.'));\n    }\n\n    if (displayName.length > Constants.MAX_CHANNELNAME_LENGTH) {\n        errors.push(localizeMessage('channel_modal.name.shorter', 'Channel names must have maximum 64 characters.'));\n    }\n\n    return errors;\n}\n\n// Component for input fields for editing channel display name\n// along with stuff to edit its URL.\nconst ChannelNameFormField = (props: Props): JSX.Element => {\n    const intl = useIntl();\n    const {formatMessage} = intl;\n\n    const displayNameModified = useRef<boolean>(false);\n    const [displayNameError, setDisplayNameError] = useState<string>('');\n    const displayName = useRef<string>('');\n    const urlModified = useRef<boolean>(false);\n    const [url, setURL] = useState<string>('');\n    const [urlError, setURLError] = useState<string>('');\n    const [inputCustomMessage, setInputCustomMessage] = useState<CustomMessageInputType | null>(null);\n\n    const currentTeamName = useSelector(getCurrentTeam)?.name;\n    const teamName = props.team ? props.team.name : currentTeamName;\n\n    const handleOnDisplayNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        const {target: {value: updatedDisplayName}} = e;\n\n        const displayNameErrors = validateDisplayName(updatedDisplayName);\n\n        // set error if any, else clear it\n        setDisplayNameError(displayNameErrors.length ? displayNameErrors[displayNameErrors.length - 1] : '');\n        displayName.current = updatedDisplayName;\n        props.onDisplayNameChange(updatedDisplayName);\n\n        if (!urlModified.current) {\n            // if URL isn't explicitly modified, it's derived from the display name\n            const cleanURL = cleanUpUrlable(updatedDisplayName);\n            setURL(cleanURL);\n            setURLError('');\n            props.onURLChange(cleanURL);\n        }\n    }, [props.onDisplayNameChange, props.onURLChange]);\n\n    const handleOnDisplayNameBlur = useCallback(() => {\n        if (displayName.current && !url) {\n            const url = generateSlug();\n            setURL(url);\n            props.onURLChange(url);\n        }\n        if (!displayNameModified.current) {\n            displayNameModified.current = true;\n            setInputCustomMessage(null);\n        }\n    }, [props.onURLChange, displayName.current, url, displayNameModified]);\n\n    const handleOnURLChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        e.preventDefault();\n        const {target: {value: url}} = e;\n\n        const cleanURL = url.toLowerCase().replace(/\\s/g, '-');\n        const urlErrors = validateChannelUrl(cleanURL, intl) as string[];\n\n        setURLError(urlErrors.length ? urlErrors[urlErrors.length - 1] : '');\n        setURL(cleanURL);\n        urlModified.current = true;\n        props.onURLChange(cleanURL);\n    }, [props.onURLChange]);\n\n    useEffect(() => {\n        if (props.onErrorStateChange) {\n            props.onErrorStateChange(Boolean(displayNameError) || Boolean(urlError));\n        }\n    }, [displayNameError, urlError]);\n\n    return (\n        <React.Fragment>\n            <Input\n                type='text'\n                autoComplete='off'\n                autoFocus={props.autoFocus !== false}\n                required={true}\n                name={props.name}\n                containerClassName={`${props.name}-container`}\n                inputClassName={`${props.name}-input channel-name-input-field`}\n                label={formatMessage({id: 'channel_modal.name.label', defaultMessage: 'Channel name'})}\n                placeholder={props.placeholder}\n                limit={Constants.MAX_CHANNELNAME_LENGTH}\n                value={props.value}\n                customMessage={inputCustomMessage}\n                onChange={handleOnDisplayNameChange}\n                onBlur={handleOnDisplayNameBlur}\n            />\n            <URLInput\n                className='new-channel-modal__url'\n                base={getSiteURL()}\n                path={`${teamName}/channels`}\n                pathInfo={url}\n                limit={Constants.MAX_CHANNELNAME_LENGTH}\n                shortenLength={Constants.DEFAULT_CHANNELURL_SHORTEN_LENGTH}\n                error={urlError || props.urlError}\n                onChange={handleOnURLChange}\n            />\n        </React.Fragment>\n    );\n};\n\nexport default ChannelNameFormField;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function CheckCircleIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n\n    return (\n        <span {...props}>\n            <svg\n                width='22'\n                height='22'\n                viewBox='0 0 22 22'\n                xmlns='http://www.w3.org/2000/svg'\n                aria-label={formatMessage({id: 'generic_icons.check.circle', defaultMessage: 'Check Circle Icon'})}\n            >\n                <path\n                    d='M11 0.992024C9.192 0.992024 7.512 1.44802 5.96 2.36002C4.44 3.24002 3.24 4.44002 2.36 5.96002C1.448 7.51202 0.992 9.19202 0.992 11C0.992 12.808 1.448 14.488 2.36 16.04C3.24 17.56 4.44 18.76 5.96 19.64C7.512 20.552 9.192 21.008 11 21.008C12.808 21.008 14.488 20.552 16.04 19.64C17.56 18.76 18.76 17.56 19.64 16.04C20.552 14.488 21.008 12.808 21.008 11C21.008 9.19202 20.552 7.51202 19.64 5.96002C18.76 4.44002 17.56 3.24002 16.04 2.36002C14.488 1.44802 12.808 0.992024 11 0.992024ZM9.248 15.68L7.832 14.288L5 11.456L6.416 10.04L9.248 12.872L15.608 6.48802L17.024 7.90402L9.248 15.68Z'\n                />\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function GlobeCircleSolidIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n\n    return (\n        <span {...props}>\n            <svg\n                width='40'\n                height='40'\n                viewBox='0 0 40 40'\n                xmlns='http://www.w3.org/2000/svg'\n                aria-label={formatMessage({id: 'generic_icons.globe.circleSolid', defaultMessage: 'Globe Circle Solid Icon'})}\n            >\n                <rect\n                    width='40'\n                    height='40'\n                    rx='20'\n                    fillOpacity='0.08'\n                />\n                <path\n                    d='M20 8.31042C17.8304 8.31042 15.8144 8.85762 13.952 9.95202C12.1472 11.0272 10.7072 12.4672 9.632 14.272C8.5376 16.1344 7.9904 18.1504 7.9904 20.32C7.9904 22.4896 8.5376 24.5056 9.632 26.368C10.7072 28.1728 12.1472 29.6128 13.952 30.688C15.8144 31.7824 17.8304 32.3296 20 32.3296C22.1696 32.3296 24.1856 31.7824 26.048 30.688C27.8528 29.6128 29.2928 28.1728 30.368 26.368C31.4624 24.5056 32.0096 22.4896 32.0096 20.32C32.0096 18.1504 31.4624 16.1344 30.368 14.272C29.2928 12.4672 27.8528 11.0272 26.048 9.95202C24.1856 8.85762 22.1696 8.31042 20 8.31042ZM29.5904 20.9248C29.3792 21.2128 28.8896 21.5296 28.1216 21.8752C27.1616 22.2976 26.0576 22.6144 24.8096 22.8256V18.7648C26.5184 18.4576 27.8336 18.0928 28.7552 17.6704C28.7936 17.632 28.8704 17.5936 28.9856 17.5552C29.12 17.5168 29.2064 17.4784 29.2448 17.44C29.4752 18.2656 29.5904 19.2256 29.5904 20.32V20.9248ZM18.2144 25.5904C18.4064 25.5904 18.6944 25.6096 19.0784 25.648C19.4816 25.6864 19.7888 25.7056 20 25.7056C20.8064 25.7056 21.4112 25.6672 21.8144 25.5904C21.5264 26.7424 21.2096 27.7024 20.864 28.4704C20.5568 29.1616 20.2688 29.6032 20 29.7952C19.712 29.584 19.4144 29.1424 19.1072 28.4704C18.7232 27.664 18.4256 26.704 18.2144 25.5904ZM20 23.3152C18.9632 23.3152 18.2048 23.2768 17.7248 23.2C17.7248 22.9312 17.7056 22.5088 17.6672 21.9328C17.6288 21.2416 17.6096 20.704 17.6096 20.32V18.9952C18.1664 19.072 18.9632 19.1104 20 19.1104C21.0368 19.1104 21.8336 19.072 22.3904 18.9952V20.32C22.3904 20.704 22.3712 21.2416 22.3328 21.9328C22.2944 22.5088 22.2752 22.9312 22.2752 23.2C21.7952 23.2768 21.0368 23.3152 20 23.3152ZM22.16 16.6048C21.68 16.6816 20.96 16.72 20 16.72C19.04 16.72 18.32 16.6816 17.84 16.6048C18.0704 15.0688 18.416 13.7248 18.8768 12.5728C19.2608 11.6128 19.6352 10.9984 20 10.7296C20.3648 10.9984 20.7392 11.6128 21.1232 12.5728C21.584 13.7248 21.9296 15.0688 22.16 16.6048ZM28.1504 15.28C27.536 15.5296 27.0272 15.7216 26.624 15.856C25.9328 16.0864 25.2416 16.2496 24.5504 16.3456C24.4352 15.424 24.2624 14.5216 24.032 13.6384C23.8016 12.7552 23.5424 11.9776 23.2544 11.3056C25.3472 12.0544 26.9792 13.3792 28.1504 15.28ZM11.8496 15.28C12.464 14.3392 13.184 13.5424 14.0096 12.8896C14.8736 12.1792 15.8336 11.6512 16.8896 11.3056C16.2752 12.6496 15.7952 14.3296 15.4496 16.3456C13.9712 16.0192 12.7712 15.664 11.8496 15.28ZM10.8704 17.44C10.928 17.4784 11.0144 17.5264 11.1296 17.584L11.36 17.6704C12.3968 18.1312 13.7216 18.496 15.3344 18.7648C15.2768 18.976 15.2384 19.216 15.2192 19.4848C15.2 19.6576 15.1904 19.936 15.1904 20.32C15.1904 21.4336 15.2384 22.2688 15.3344 22.8256C14.0864 22.6144 12.9824 22.2976 12.0224 21.8752C11.2352 21.5296 10.736 21.2128 10.5248 20.9248V20.32C10.4672 19.84 10.4672 19.3408 10.5248 18.8224C10.5824 18.304 10.6976 17.8432 10.8704 17.44ZM11.2448 24.1504C12.7424 24.7456 14.2208 25.1488 15.68 25.36C15.872 26.6464 16.2752 27.9616 16.8896 29.3056C15.6224 28.8832 14.4992 28.2208 13.52 27.3184C12.5408 26.416 11.7824 25.36 11.2448 24.1504ZM28.7552 24.1504C28.2176 25.36 27.4592 26.416 26.48 27.3184C25.5008 28.2208 24.3776 28.8832 23.1104 29.3056C23.7248 27.9616 24.128 26.6464 24.32 25.36C26.2208 25.0912 27.6992 24.688 28.7552 24.1504Z'\n                />\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function LockCircleSolidIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n\n    return (\n        <span {...props}>\n            <svg\n                width='40'\n                height='40'\n                viewBox='0 0 40 40'\n                xmlns='http://www.w3.org/2000/svg'\n                aria-label={formatMessage({id: 'generic_icons.lock.circleSolid', defaultMessage: 'Lock Circle Solid Icon'})}\n            >\n                <rect\n                    width='40'\n                    height='40'\n                    rx='20'\n                    fillOpacity='0.08'\n                />\n                <path\n                    d='M27.2 29.9104V19.1104H12.8V29.9104H27.2ZM27.2 16.72C27.872 16.72 28.4384 16.9504 28.8992 17.4112C29.36 17.872 29.5904 18.4384 29.5904 19.1104V29.9104C29.5904 30.5824 29.3504 31.1488 28.8704 31.6096C28.4096 32.0896 27.8528 32.3296 27.2 32.3296H12.8C12.1472 32.3296 11.5808 32.0896 11.1008 31.6096C10.64 31.1488 10.4096 30.5824 10.4096 29.9104V19.1104C10.4096 18.4384 10.64 17.872 11.1008 17.4112C11.5808 16.9504 12.1472 16.72 12.8 16.72H14.0096V14.3296C14.0096 13.216 14.2688 12.208 14.7872 11.3056C15.3248 10.384 16.0448 9.65442 16.9472 9.11682C17.8688 8.57922 18.8864 8.31042 20 8.31042C21.1136 8.31042 22.1216 8.57922 23.024 9.11682C23.9456 9.65442 24.6656 10.384 25.184 11.3056C25.7216 12.208 25.9904 13.216 25.9904 14.3296V16.72H27.2ZM20 10.7296C19.328 10.7296 18.7136 10.8928 18.1568 11.2192C17.6192 11.5264 17.1872 11.9584 16.8608 12.5152C16.5536 13.0528 16.4 13.6576 16.4 14.3296V16.72H23.6V14.3296C23.6 13.6576 23.4368 13.0528 23.1104 12.5152C22.8032 11.9584 22.3712 11.5264 21.8144 11.2192C21.2768 10.8928 20.672 10.7296 20 10.7296Z'\n                />\n            </svg>\n\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = React.HTMLAttributes<HTMLSpanElement>;\n\nexport default function UpgradeBadgeIcon(props: Props): JSX.Element {\n    const {formatMessage} = useIntl();\n\n    return (\n        <span {...props}>\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                version='1.1'\n                width='100%'\n                height='100%'\n                viewBox='2 2 20 20'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.upgradeBadge', defaultMessage: 'Upgrade badge'})}\n            >\n                <circle\n                    cx='12'\n                    cy='12'\n                    r='10'\n                    fillOpacity='0.08'\n                />\n                <path\n                    d='M12,2c5.523,0,10,4.477,10,10s-4.477,10-10,10S2,17.523,2,12S6.477,2,12,2z M14.994,9.033\n                        c0.218,0.217,0.327,0.47,0.327,0.76s-0.109,0.543-0.327,0.76c-0.218,0.217-0.472,0.326-0.762,0.326s-0.545-0.109-0.762-0.326\n                        c-0.218-0.217-0.327-0.47-0.327-0.76s0.109-0.543,0.327-0.76c0.218-0.217,0.472-0.326,0.762-0.326S14.776,8.816,14.994,9.033z\n                        M16.555,7.477C15.902,6.826,15.115,6.5,14.195,6.5c-0.871,0-1.634,0.326-2.287,0.977c-0.508,0.507-0.823,1.11-0.944,1.809\n                        c-0.097,0.675,0.012,1.315,0.327,1.918L6.5,15.98l1.525,1.52l1.561-1.556l1.561,1.556l1.525-1.52l-1.561-1.556l1.706-1.701\n                        c0.605,0.314,1.246,0.422,1.924,0.326c0.702-0.121,1.307-0.434,1.815-0.941c0.653-0.651,0.968-1.423,0.944-2.316\n                        C17.523,8.9,17.208,8.128,16.555,7.477z'\n                />\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {ChannelType} from '@mattermost/types/channels';\n\nimport CheckCircleIcon from 'components/widgets/icons/check_circle_icon';\nimport GlobeCircleSolidIcon from 'components/widgets/icons/globe_circle_solid_icon';\nimport LockCircleSolidIcon from 'components/widgets/icons/lock_circle_solid_icon';\nimport UpgradeBadge from 'components/widgets/icons/upgrade_badge_icon';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {Constants} from 'utils/constants';\n\nimport './public-private-selector.scss';\n\ntype BigButtonSelectorProps = {\n    id: ChannelType;\n    title: string | React.ReactNode;\n    description: string | React.ReactNode;\n    iconSVG: (props: React.HTMLAttributes<HTMLSpanElement>) => JSX.Element;\n    titleClassName?: string;\n    descriptionClassName?: string;\n    iconClassName?: string;\n    tooltip?: string;\n    selected?: boolean;\n    disabled?: boolean;\n    locked?: boolean;\n    onClick: (id: ChannelType) => void;\n};\n\nconst BigButtonSelector = ({\n    id,\n    title,\n    description,\n    iconSVG: IconSVG,\n    titleClassName,\n    descriptionClassName,\n    iconClassName,\n    tooltip,\n    selected,\n    disabled,\n    locked,\n    onClick,\n}: BigButtonSelectorProps) => {\n    const handleOnClick = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.preventDefault();\n            onClick(id);\n        },\n        [id, onClick],\n    );\n\n    const button = (\n        <button\n            id={`public-private-selector-button-${id}`}\n            className={classNames('public-private-selector-button', {selected, disabled, locked})}\n            onClick={handleOnClick}\n        >\n            <IconSVG className={classNames('public-private-selector-button-icon', iconClassName)}/>\n            <div className='public-private-selector-button-text'>\n                <div className={classNames('public-private-selector-button-title', titleClassName)}>\n                    {title}\n                    {locked && <UpgradeBadge className='public-private-selector-button-icon-upgrade'/>}\n                </div>\n                <div className={classNames('public-private-selector-button-description', descriptionClassName)}>\n                    {description}\n                </div>\n            </div>\n            {selected && <CheckCircleIcon className='public-private-selector-button-icon-check'/>}\n        </button>\n    );\n\n    if (!tooltip) {\n        return button;\n    }\n\n    return (\n        <WithTooltip\n            id=\"'public-private-selector-button-tooltip'\"\n            placement='top'\n            title={tooltip}\n        >\n            {button}\n        </WithTooltip>\n    );\n};\n\ntype ButtonSelectorProps = {\n    title?: string | React.ReactNode;\n    description?: string | React.ReactNode;\n    titleClassName?: string;\n    descriptionClassName?: string;\n    iconClassName?: string;\n    tooltip?: string;\n    selected?: boolean;\n    disabled?: boolean;\n    locked?: boolean;\n};\n\ntype PublicPrivateSelectorProps = {\n    selected: ChannelType;\n    className?: string;\n    publicButtonProps?: ButtonSelectorProps;\n    privateButtonProps?: ButtonSelectorProps;\n    onChange: (selected: ChannelType) => void;\n};\n\nconst PublicPrivateSelector = ({\n    selected,\n    className,\n    publicButtonProps: {\n        title: titlePublic,\n        description: descriptionPublic,\n        titleClassName: titleClassNamePublic,\n        descriptionClassName: descriptionClassNamePublic,\n        iconClassName: iconClassNamePublic,\n        tooltip: tooltipPublic,\n        disabled: disabledPublic,\n        locked: lockedPublic,\n    } = {} as ButtonSelectorProps,\n    privateButtonProps: {\n        title: titlePrivate,\n        description: descriptionPrivate,\n        titleClassName: titleClassNamePrivate,\n        descriptionClassName: descriptionClassNamePrivate,\n        iconClassName: iconClassNamePrivate,\n        tooltip: tooltipPrivate,\n        disabled: disabledPrivate,\n        locked: lockedPrivate,\n    } = {} as ButtonSelectorProps,\n    onChange,\n}: PublicPrivateSelectorProps) => {\n    const {formatMessage} = useIntl();\n\n    const canSelectPublic = !disabledPublic && !lockedPublic;\n    const canSelectPrivate = !disabledPrivate && !lockedPrivate;\n\n    const handleOnClick = useCallback(\n        (selection: ChannelType) => {\n            if (\n                selection === selected ||\n                (selection === Constants.OPEN_CHANNEL && !canSelectPublic) ||\n                (selection === Constants.PRIVATE_CHANNEL && !canSelectPrivate)\n            ) {\n                return;\n            }\n\n            onChange(selection);\n        },\n        [selected, canSelectPublic, canSelectPrivate, onChange],\n    );\n\n    return (\n        <div className={classNames('public-private-selector', className)}>\n            <BigButtonSelector\n                id={Constants.OPEN_CHANNEL as ChannelType}\n                title={titlePublic || formatMessage({id: 'public_private_selector.public.title', defaultMessage: 'Public'})}\n                description={descriptionPublic || formatMessage({id: 'public_private_selector.public.description', defaultMessage: 'Anyone'})}\n                iconSVG={GlobeCircleSolidIcon}\n                titleClassName={titleClassNamePublic}\n                descriptionClassName={descriptionClassNamePublic}\n                iconClassName={iconClassNamePublic}\n                tooltip={tooltipPublic}\n                selected={selected === Constants.OPEN_CHANNEL}\n                disabled={disabledPublic}\n                locked={lockedPublic}\n                onClick={handleOnClick}\n            />\n            <BigButtonSelector\n                id={Constants.PRIVATE_CHANNEL as ChannelType}\n                title={titlePrivate || formatMessage({id: 'public_private_selector.private.title', defaultMessage: 'Private'})}\n                description={descriptionPrivate || formatMessage({id: 'public_private_selector.private.description', defaultMessage: 'Only invited members'})}\n                iconSVG={LockCircleSolidIcon}\n                titleClassName={titleClassNamePrivate}\n                descriptionClassName={descriptionClassNamePrivate}\n                iconClassName={iconClassNamePrivate}\n                tooltip={tooltipPrivate}\n                selected={selected === Constants.PRIVATE_CHANNEL}\n                disabled={disabledPrivate}\n                locked={lockedPrivate}\n                onClick={handleOnClick}\n            />\n        </div>\n    );\n};\n\nexport default PublicPrivateSelector;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useCallback, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Board} from '@mattermost/types/boards';\nimport type {ChannelType, Channel} from '@mattermost/types/channels';\nimport type {ServerError} from '@mattermost/types/errors';\n\nimport {setNewChannelWithBoardPreference} from 'mattermost-redux/actions/boards';\nimport {createChannel} from 'mattermost-redux/actions/channels';\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport Preferences from 'mattermost-redux/constants/preferences';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveICurrentChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {switchToChannel} from 'actions/views/channel';\nimport {closeModal} from 'actions/views/modals';\n\nimport ChannelNameFormField from 'components/channel_name_form_field/channel_name_form_field';\nimport PublicPrivateSelector from 'components/widgets/public-private-selector/public-private-selector';\nimport WithTooltip from 'components/with_tooltip';\n\nimport Pluggable from 'plugins/pluggable';\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport './new_channel_modal.scss';\n\nexport function getChannelTypeFromPermissions(canCreatePublicChannel: boolean, canCreatePrivateChannel: boolean) {\n    let channelType = Constants.OPEN_CHANNEL;\n\n    if (!canCreatePublicChannel && channelType === Constants.OPEN_CHANNEL) {\n        channelType = Constants.PRIVATE_CHANNEL as ChannelType;\n    }\n\n    if (!canCreatePrivateChannel && channelType === Constants.PRIVATE_CHANNEL) {\n        channelType = Constants.OPEN_CHANNEL as ChannelType;\n    }\n\n    return channelType as ChannelType;\n}\n\nconst enum ServerErrorId {\n    CHANNEL_URL_SIZE = 'model.channel.is_valid.1_or_more.app_error',\n    CHANNEL_UPDATE_EXISTS = 'store.sql_channel.update.exists.app_error',\n    CHANNEL_CREATE_EXISTS = 'store.sql_channel.save_channel.exists.app_error',\n    CHANNEL_PURPOSE_SIZE = 'model.channel.is_valid.purpose.app_error',\n}\n\nconst NewChannelModal = () => {\n    const intl = useIntl();\n    const {formatMessage} = intl;\n\n    const currentTeamId = useSelector(getCurrentTeam)?.id;\n\n    const canCreatePublicChannel = useSelector((state: GlobalState) => (currentTeamId ? haveICurrentChannelPermission(state, Permissions.CREATE_PUBLIC_CHANNEL) : false));\n    const canCreatePrivateChannel = useSelector((state: GlobalState) => (currentTeamId ? haveICurrentChannelPermission(state, Permissions.CREATE_PRIVATE_CHANNEL) : false));\n    const dispatch = useDispatch();\n\n    const [type, setType] = useState(getChannelTypeFromPermissions(canCreatePublicChannel, canCreatePrivateChannel));\n    const [displayName, setDisplayName] = useState('');\n    const [url, setURL] = useState('');\n    const [purpose, setPurpose] = useState('');\n    const [urlError, setURLError] = useState('');\n    const [purposeError, setPurposeError] = useState('');\n    const [serverError, setServerError] = useState('');\n    const [channelInputError, setChannelInputError] = useState(false);\n\n    // create a board along with the channel\n    const pluginsComponentsList = useSelector((state: GlobalState) => state.plugins.components);\n    const createBoardFromChannelPlugin = pluginsComponentsList?.CreateBoardFromTemplate;\n    const newChannelWithBoardPulsatingDotState = useSelector((state: GlobalState) => getPreference(state, Preferences.APP_BAR, Preferences.NEW_CHANNEL_WITH_BOARD_TOUR_SHOWED, ''));\n\n    const [canCreateFromPluggable, setCanCreateFromPluggable] = useState(true);\n    const [actionFromPluggable, setActionFromPluggable] = useState<((currentTeamId: string, channelId: string) => Promise<Board>) | undefined>(undefined);\n\n    const handleURLChange = useCallback((newURL: string) => {\n        setURL(newURL);\n        setURLError('');\n    }, []);\n\n    const handleOnModalConfirm = async () => {\n        if (!canCreate || !currentTeamId) {\n            return;\n        }\n\n        const channel: Channel = {\n            team_id: currentTeamId,\n            name: url,\n            display_name: displayName,\n            purpose,\n            header: '',\n            type,\n            create_at: 0,\n            creator_id: '',\n            delete_at: 0,\n            group_constrained: false,\n            id: '',\n            last_post_at: 0,\n            last_root_post_at: 0,\n            scheme_id: '',\n            update_at: 0,\n        };\n\n        try {\n            const {data: newChannel, error} = await dispatch(createChannel(channel, ''));\n            if (error) {\n                onCreateChannelError(error);\n                return;\n            }\n\n            handleOnModalCancel();\n\n            // If template selected, create a new board from this template\n            if (canCreateFromPluggable && createBoardFromChannelPlugin) {\n                try {\n                    addBoardToChannel(newChannel!.id);\n                } catch (e: any) {\n                    // eslint-disable-next-line no-console\n                    console.log(e.message);\n                }\n            }\n            dispatch(switchToChannel(newChannel!));\n        } catch (e) {\n            onCreateChannelError({message: formatMessage({id: 'channel_modal.error.generic', defaultMessage: 'Something went wrong. Please try again.'})});\n        }\n    };\n\n    const addBoardToChannel = async (channelId: string) => {\n        if (!createBoardFromChannelPlugin || !currentTeamId) {\n            return false;\n        }\n        if (!actionFromPluggable) {\n            return false;\n        }\n\n        const action = actionFromPluggable as (currentTeamId: string, channelId: string) => Promise<Board>;\n        if (action && canCreateFromPluggable) {\n            const board = await action(channelId, currentTeamId);\n\n            if (!board?.id) {\n                return false;\n            }\n        }\n\n        // show the new channel with board tour tip\n        if (newChannelWithBoardPulsatingDotState === '') {\n            dispatch(setNewChannelWithBoardPreference({[Preferences.NEW_CHANNEL_WITH_BOARD_TOUR_SHOWED]: false}));\n        }\n        return true;\n    };\n\n    const handleOnModalCancel = () => {\n        dispatch(closeModal(ModalIdentifiers.NEW_CHANNEL_MODAL));\n    };\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const onCreateChannelError = ({server_error_id, message}: ServerError) => {\n        switch (server_error_id) {\n        case ServerErrorId.CHANNEL_URL_SIZE:\n            setURLError(\n                formatMessage({\n                    id: 'channel_modal.handleTooShort',\n                    defaultMessage: 'Channel URL must be 1 or more lowercase alphanumeric characters',\n                }),\n            );\n            break;\n\n        case ServerErrorId.CHANNEL_UPDATE_EXISTS:\n        case ServerErrorId.CHANNEL_CREATE_EXISTS:\n            setURLError(\n                formatMessage({\n                    id: 'channel_modal.alreadyExist',\n                    defaultMessage: 'A channel with that URL already exists',\n                }),\n            );\n            break;\n\n        case ServerErrorId.CHANNEL_PURPOSE_SIZE:\n            setPurposeError(\n                formatMessage({\n                    id: 'channel_modal.purposeTooLong',\n                    defaultMessage: 'The purpose exceeds the maximum of 250 characters',\n                }),\n            );\n            break;\n\n        default:\n            setServerError(message);\n            break;\n        }\n    };\n\n    const handleOnTypeChange = useCallback((channelType: ChannelType) => {\n        setType(channelType);\n        setServerError('');\n    }, []);\n\n    const handleOnPurposeChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        e.preventDefault();\n        const {target: {value: purpose}} = e;\n\n        setPurpose(purpose);\n        setPurposeError('');\n        setServerError('');\n    };\n\n    const handleOnPurposeKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        // Avoid firing the handleEnterKeyPress in GenericModal from purpose textarea\n        e.stopPropagation();\n    };\n\n    const canCreate = displayName && !urlError && type && !purposeError && !serverError && canCreateFromPluggable && !channelInputError;\n\n    const newBoardInfoIcon = (\n        <WithTooltip\n            id='new-channel-with-board-tooltip'\n            title={\n                <>\n                    <div className='title'>\n                        <FormattedMessage\n                            id={'channel_modal.create_board.tooltip_title'}\n                            defaultMessage={'Manage your task with a board'}\n                        />\n                    </div>\n                    <div className='description'>\n                        <FormattedMessage\n                            id={'channel_modal.create_board.tooltip_description'}\n                            defaultMessage={'Use any of our templates to manage your tasks or start from scratch with your own!'}\n                        />\n                    </div>\n                </>\n            }\n            placement='right'\n        >\n            <i className='icon-information-outline'/>\n        </WithTooltip>\n    );\n\n    return (\n        <GenericModal\n            id='new-channel-modal'\n            className='new-channel-modal'\n            modalHeaderText={formatMessage({id: 'channel_modal.modalTitle', defaultMessage: 'Create a new channel'})}\n            confirmButtonText={formatMessage({id: 'channel_modal.createNew', defaultMessage: 'Create channel'})}\n            cancelButtonText={formatMessage({id: 'channel_modal.cancel', defaultMessage: 'Cancel'})}\n            errorText={serverError}\n            isConfirmDisabled={!canCreate}\n            autoCloseOnConfirmButton={false}\n            compassDesign={true}\n            handleConfirm={handleOnModalConfirm}\n            handleEnterKeyPress={handleOnModalConfirm}\n            handleCancel={handleOnModalCancel}\n            onExited={handleOnModalCancel}\n        >\n            <div className='new-channel-modal-body'>\n                <ChannelNameFormField\n                    value={displayName}\n                    name='new-channel-modal-name'\n                    placeholder={formatMessage({id: 'channel_modal.name.placeholder', defaultMessage: 'Enter a name for your new channel'})}\n                    onDisplayNameChange={setDisplayName}\n                    onURLChange={handleURLChange}\n                    onErrorStateChange={setChannelInputError}\n                    urlError={urlError}\n                />\n                <PublicPrivateSelector\n                    className='new-channel-modal-type-selector'\n                    selected={type}\n                    publicButtonProps={{\n                        title: formatMessage({id: 'channel_modal.type.public.title', defaultMessage: 'Public Channel'}),\n                        description: formatMessage({id: 'channel_modal.type.public.description', defaultMessage: 'Anyone can join'}),\n                        disabled: !canCreatePublicChannel,\n                    }}\n                    privateButtonProps={{\n                        title: formatMessage({id: 'channel_modal.type.private.title', defaultMessage: 'Private Channel'}),\n                        description: formatMessage({id: 'channel_modal.type.private.description', defaultMessage: 'Only invited members'}),\n                        disabled: !canCreatePrivateChannel,\n                    }}\n                    onChange={handleOnTypeChange}\n                />\n                <div className='new-channel-modal-purpose-container'>\n                    <textarea\n                        id='new-channel-modal-purpose'\n                        className={classNames('new-channel-modal-purpose-textarea', {'with-error': purposeError})}\n                        placeholder={formatMessage({id: 'channel_modal.purpose.placeholder', defaultMessage: 'Enter a purpose for this channel (optional)'})}\n                        rows={4}\n                        maxLength={Constants.MAX_CHANNELPURPOSE_LENGTH}\n                        autoComplete='off'\n                        value={purpose}\n                        onChange={handleOnPurposeChange}\n                        onKeyDown={handleOnPurposeKeyDown}\n                    />\n                    {purposeError ? (\n                        <div className='new-channel-modal-purpose-error'>\n                            <i className='icon icon-alert-outline'/>\n                            <span>{purposeError}</span>\n                        </div>\n                    ) : (\n                        <div className='new-channel-modal-purpose-info'>\n                            <span>\n                                {formatMessage({id: 'channel_modal.purpose.info', defaultMessage: 'This will be displayed when browsing for channels.'})}\n                            </span>\n                        </div>\n                    )}\n                    {createBoardFromChannelPlugin &&\n                        <Pluggable\n                            pluggableName='CreateBoardFromTemplate'\n                            setCanCreate={setCanCreateFromPluggable}\n                            setAction={setActionFromPluggable}\n                            newBoardInfoIcon={newBoardInfoIcon}\n                        />\n                    }\n                </div>\n            </div>\n        </GenericModal>\n    );\n};\n\nexport default NewChannelModal;\n"],"names":["UrlInput","_ref","base","path","pathInfo","limit","maxLength","shortenLength","error","className","onChange","onBlur","formatMessage","useIntl","editing","setEditing","useState","useEffect","fullPath","concat","fullURL","isShortenedURL","length","hasError","Boolean","urlInputLabel","React","id","defaultMessage","getShortenedURL","classNames","WithTooltip","title","placement","Input","name","type","containerClassName","wrapperClassName","inputClassName","autoFocus","autoComplete","value","event","preventDefault","disabled","onClick","handleOnButtonClick","propTypes","_pt","ChannelNameFormField","props","_useSelector","intl","displayNameModified","useRef","displayNameError","setDisplayNameError","displayName","urlModified","url","setURL","urlError","setURLError","inputCustomMessage","setInputCustomMessage","currentTeamName","useSelector","getCurrentTeam","teamName","team","handleOnDisplayNameChange","useCallback","e","target","updatedDisplayName","displayNameErrors","displayNameParam","errors","trim","Constants","push","localizeMessage","validateDisplayName","current","onDisplayNameChange","cleanURL","cleanUpUrlable","onURLChange","handleOnDisplayNameBlur","generateSlug","handleOnURLChange","toLowerCase","replace","urlErrors","validateChannelUrl","onErrorStateChange","required","label","placeholder","customMessage","URLInput","getSiteURL","CheckCircleIcon","width","height","viewBox","xmlns","d","GlobeCircleSolidIcon","rx","fillOpacity","LockCircleSolidIcon","UpgradeBadgeIcon","version","role","cx","cy","r","BigButtonSelector","description","iconSVG","IconSVG","titleClassName","descriptionClassName","iconClassName","tooltip","selected","locked","handleOnClick","button","UpgradeBadge","isRequired","PublicPrivateSelector","_ref2","publicButtonProps","titlePublic","descriptionPublic","titleClassNamePublic","descriptionClassNamePublic","iconClassNamePublic","tooltipPublic","disabledPublic","lockedPublic","privateButtonProps","titlePrivate","descriptionPrivate","titleClassNamePrivate","descriptionClassNamePrivate","iconClassNamePrivate","tooltipPrivate","disabledPrivate","lockedPrivate","canSelectPublic","canSelectPrivate","selection","getChannelTypeFromPermissions","canCreatePublicChannel","canCreatePrivateChannel","channelType","ServerErrorId","NewChannelModal","currentTeamId","state","haveICurrentChannelPermission","Permissions","dispatch","useDispatch","setType","setDisplayName","purpose","setPurpose","purposeError","setPurposeError","serverError","setServerError","channelInputError","setChannelInputError","pluginsComponentsList","plugins","components","createBoardFromChannelPlugin","CreateBoardFromTemplate","newChannelWithBoardPulsatingDotState","getPreference","Preferences","canCreateFromPluggable","setCanCreateFromPluggable","actionFromPluggable","setActionFromPluggable","undefined","handleURLChange","newURL","handleOnModalConfirm","async","canCreate","channel","team_id","display_name","header","create_at","creator_id","delete_at","group_constrained","last_post_at","last_root_post_at","scheme_id","update_at","data","newChannel","createChannel","onCreateChannelError","handleOnModalCancel","addBoardToChannel","console","log","message","switchToChannel","action","board","channelId","setNewChannelWithBoardPreference","closeModal","ModalIdentifiers","server_error_id","CHANNEL_URL_SIZE","CHANNEL_UPDATE_EXISTS","CHANNEL_CREATE_EXISTS","CHANNEL_PURPOSE_SIZE","handleOnTypeChange","newBoardInfoIcon","FormattedMessage","GenericModal","modalHeaderText","confirmButtonText","cancelButtonText","errorText","isConfirmDisabled","autoCloseOnConfirmButton","compassDesign","handleConfirm","handleEnterKeyPress","handleCancel","onExited","rows","onKeyDown","stopPropagation","Pluggable","pluggableName","setCanCreate","setAction"],"sourceRoot":""}