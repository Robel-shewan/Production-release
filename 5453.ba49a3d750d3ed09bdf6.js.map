{"version":3,"file":"5453.ba49a3d750d3ed09bdf6.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/claim/components/error_label.tsx","webpack://mattermost-webapp/./src/components/claim/components/email_to_ldap.tsx","webpack://mattermost-webapp/./src/components/claim/components/email_to_oauth.tsx","webpack://mattermost-webapp/./src/components/claim/components/ldap_to_email.tsx","webpack://mattermost-webapp/./src/components/claim/components/oauth_to_email.tsx","webpack://mattermost-webapp/./src/components/claim/claim_controller.tsx","webpack://mattermost-webapp/./src/components/claim/index.ts","webpack://mattermost-webapp/./src/components/common/back_button.tsx","webpack://mattermost-webapp/./src/components/header_footer_route/content_layouts/column.tsx","webpack://mattermost-webapp/./src/components/common/svg_images_components/shield_with_checkmark.tsx","webpack://mattermost-webapp/./src/components/login/login_mfa.tsx","webpack://mattermost-webapp/./src/utils/password.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\ntype ErrorLabelProps = {\n    errorText?: string | JSX.Element;\n}\n\nconst ErrorLabel = ({errorText}: ErrorLabelProps) => (errorText ? (\n    <div className='form-group has-error'>\n        <label className='control-label'>{errorText}</label>\n    </div>\n) : null);\n\nexport default memo(ErrorLabel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useRef} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport type {AuthChangeResponse} from '@mattermost/types/users';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\n\nimport LoginMfa from 'components/login/login_mfa';\n\nimport {ClaimErrors} from 'utils/constants';\n\nimport ErrorLabel from './error_label';\n\ntype Props = {\n    email: string | null;\n    siteName?: string;\n    ldapLoginFieldName?: string;\n}\n\nexport type SubmitOptions = {\n    loginId: string;\n    password: string;\n    token?: string;\n    ldapIdParam?: string;\n    ldapPasswordParam?: string;\n}\n\nconst EmailToLDAP = ({email, siteName, ldapLoginFieldName}: Props) => {\n    const {formatMessage} = useIntl();\n\n    const emailPasswordInput = useRef<HTMLInputElement>(null);\n    const ldapIdInput = useRef<HTMLInputElement>(null);\n    const ldapPasswordInput = useRef<HTMLInputElement>(null);\n\n    const [password, setPassword] = React.useState('');\n    const [ldapId, setLdapId] = React.useState<string>('');\n    const [ldapPassword, setLdapPassword] = React.useState<string>('');\n    const [passwordError, setPasswordError] = React.useState('');\n    const [ldapError, setLdapError] = React.useState('');\n    const [ldapPasswordError, setLdapPasswordError] = React.useState('');\n    const [serverError, setServerError] = React.useState('');\n    const [showMfa, setShowMfa] = React.useState(false);\n\n    const preSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const password = emailPasswordInput.current?.value;\n        if (!password) {\n            setPasswordError(formatMessage({id: 'claim.email_to_ldap.pwdError', defaultMessage: 'Please enter your password.'}));\n            setLdapError('');\n            setLdapPasswordError('');\n            setServerError('');\n            return;\n        }\n\n        const ldapId = ldapIdInput.current?.value.trim();\n        if (!ldapId) {\n            setLdapError(formatMessage({id: 'claim.email_to_ldap.ldapIdError', defaultMessage: 'Please enter your AD/LDAP ID.'}));\n            setPasswordError('');\n            setLdapPasswordError('');\n            setServerError('');\n            return;\n        }\n\n        const ldapPassword = ldapPasswordInput.current?.value;\n        if (!ldapPassword) {\n            setLdapPasswordError(formatMessage({id: 'claim.email_to_ldap.ldapPasswordError', defaultMessage: 'Please enter your AD/LDAP password.'}));\n            setLdapError('');\n            setPasswordError('');\n            setServerError('');\n            return;\n        }\n\n        setPassword(password);\n        setLdapId(ldapId);\n        setLdapPassword(ldapPassword);\n\n        if (email) {\n            submit({loginId: email, password, ldapIdParam: ldapId, ldapPasswordParam: ldapPassword});\n        }\n    };\n\n    const submit = ({loginId, password, token = '', ldapIdParam = '', ldapPasswordParam = ''}: SubmitOptions) => {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapIdParam || ldapId,\n            ldapPasswordParam || ldapPassword,\n            (data: AuthChangeResponse) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err: {server_error_id: string; id: string; message: string}) => {\n                if (!showMfa && err.server_error_id === ClaimErrors.MFA_VALIDATE_TOKEN_AUTHENTICATE) {\n                    setShowMfa(true);\n                } else {\n                    switch (err.id) {\n                    case ClaimErrors.ENT_LDAP_LOGIN_USER_NOT_REGISTERED:\n                    case ClaimErrors.ENT_LDAP_LOGIN_USER_FILTERED:\n                    case ClaimErrors.ENT_LDAP_LOGIN_MATCHED_TOO_MANY_USERS:\n                        setLdapError(err.message);\n                        setShowMfa(false);\n                        break;\n                    case ClaimErrors.ENT_LDAP_LOGIN_INVALID_PASSWORD:\n                        setLdapPasswordError(err.message);\n                        setShowMfa(false);\n                        break;\n                    case ClaimErrors.API_USER_INVALID_PASSWORD:\n                        setPasswordError(err.message);\n                        setShowMfa(false);\n                        break;\n                    default:\n                        setServerError(err.message);\n                        setShowMfa(false);\n                    }\n                }\n            },\n        );\n    };\n\n    const loginPlaceholder = ldapLoginFieldName || formatMessage({id: 'claim.email_to_ldap.ldapId', defaultMessage: 'AD/LDAP ID'});\n\n    if (showMfa) {\n        return (\n            <LoginMfa\n                loginId={email}\n                password={password}\n                title={formatMessage({id: 'claim.email_to_ldap.title', defaultMessage: 'Switch Email/Password Account to AD/LDAP'})}\n                onSubmit={submit}\n            />\n        );\n    }\n    return (\n        <>\n            <h3>\n                <FormattedMessage\n                    id='claim.email_to_ldap.title'\n                    defaultMessage='Switch Email/Password Account to AD/LDAP'\n                />\n            </h3>\n            <form\n                onSubmit={preSubmit}\n                className={classNames('form-group', {'has-error': serverError})}\n            >\n                <p>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.ssoType'\n                        defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.ssoNote'\n                        defaultMessage='You must already have a valid AD/LDAP account'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.enterPwd'\n                        defaultMessage='Enter the password for your {site} email account'\n                        values={{site: siteName}}\n                    />\n                </p>\n                <input\n                    type='text'\n                    className='hidden'\n                    name='fakeusernameremembered'\n                />\n                <div className={classNames('form-group', {'has-error': passwordError})}>\n                    <input\n                        type='password'\n                        className='form-control'\n                        name='emailPassword'\n                        ref={emailPasswordInput}\n                        autoComplete='off'\n                        placeholder={formatMessage({id: 'claim.email_to_ldap.pwd', defaultMessage: 'Password'})}\n                        spellCheck='false'\n                    />\n                </div>\n                <ErrorLabel errorText={passwordError}/>\n                <p>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.enterLdapPwd'\n                        defaultMessage='Enter the ID and password for your AD/LDAP account'\n                    />\n                </p>\n                <div className={classNames('form-group', {'has-error': ldapError})}>\n                    <input\n                        type='text'\n                        className='form-control'\n                        name='ldapId'\n                        ref={ldapIdInput}\n                        autoComplete='off'\n                        placeholder={loginPlaceholder}\n                        spellCheck='false'\n                    />\n                </div>\n                <ErrorLabel errorText={ldapError}/>\n                <div className={classNames('form-group', {'has-error': ldapPasswordError})}>\n                    <input\n                        type='password'\n                        className='form-control'\n                        name='ldapPassword'\n                        ref={ldapPasswordInput}\n                        autoComplete='off'\n                        placeholder={formatMessage({id: 'claim.email_to_ldap.ldapPwd', defaultMessage: 'AD/LDAP Password'})}\n                        spellCheck='false'\n                    />\n                </div>\n                <ErrorLabel errorText={ldapPasswordError}/>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                >\n                    <FormattedMessage\n                        id='claim.email_to_ldap.switchTo'\n                        defaultMessage='Switch Account to AD/LDAP'\n                    />\n                </button>\n                <ErrorLabel errorText={serverError}/>\n            </form>\n        </>\n    );\n};\n\nexport default EmailToLDAP;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useState, useRef} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport type {AuthChangeResponse} from '@mattermost/types/users';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\n\nimport LoginMfa from 'components/login/login_mfa';\n\nimport Constants, {ClaimErrors} from 'utils/constants';\nimport {toTitleCase} from 'utils/utils';\n\nimport type {SubmitOptions} from './email_to_ldap';\nimport ErrorLabel from './error_label';\n\ntype Props = {\n    newType: string | null;\n    email: string;\n    siteName?: string;\n}\n\nconst EmailToOAuth = (props: Props) => {\n    const {formatMessage} = useIntl();\n\n    const [showMfa, setShowMfa] = useState(false);\n    const [password, setPassword] = useState('');\n    const [serverError, setServerError] = useState<string>('');\n    const passwordInput = useRef<HTMLInputElement>(null);\n\n    const preSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const password = passwordInput.current?.value;\n        if (!password) {\n            setServerError(formatMessage({id: 'claim.email_to_oauth.pwdError', defaultMessage: 'Please enter your password.'}));\n            return;\n        }\n\n        setPassword(password);\n\n        setServerError('');\n\n        submit({loginId: props.email, password});\n    };\n\n    const submit = ({loginId, password, token = ''}: SubmitOptions) => {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            props.newType,\n            (data: AuthChangeResponse) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err: {server_error_id: string; message: string}) => {\n                if (!showMfa && err.server_error_id === ClaimErrors.MFA_VALIDATE_TOKEN_AUTHENTICATE) {\n                    setShowMfa(true);\n                } else {\n                    setServerError(err.message);\n                    setShowMfa(false);\n                }\n            },\n        );\n    };\n\n    const type = (props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : toTitleCase(props.newType || ''));\n    const uiType = `${type} SSO`;\n\n    if (showMfa) {\n        return (\n            <LoginMfa\n                loginId={props.email}\n                password={password}\n                title={formatMessage({id: 'claim.email_to_oauth.title', defaultMessage: 'Switch Email/Password Account to {uiType}'})}\n                onSubmit={submit}\n            />\n        );\n    }\n    return (\n        <>\n            <h3>\n                <FormattedMessage\n                    id='claim.email_to_oauth.title'\n                    defaultMessage='Switch Email/Password Account to {uiType}'\n                    values={{uiType}}\n                />\n            </h3>\n            <form onSubmit={preSubmit}>\n                <p>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.ssoType'\n                        defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                        values={{type}}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.ssoNote'\n                        defaultMessage='You must already have a valid {type} account'\n                        values={{type}}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.enterPwd'\n                        defaultMessage='Enter the password for your {site} account'\n                        values={{site: props.siteName}}\n                    />\n                </p>\n                <div className={classNames('form-group', {'has-error': serverError})}>\n                    <input\n                        type='password'\n                        className='form-control'\n                        name='password'\n                        ref={passwordInput}\n                        placeholder={formatMessage({id: 'claim.email_to_oauth.pwd', defaultMessage: 'Password'})}\n                        spellCheck='false'\n                    />\n                </div>\n                <ErrorLabel errorText={serverError}/>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                >\n                    <FormattedMessage\n                        id='claim.email_to_oauth.switchTo'\n                        defaultMessage='Switch Account to {uiType}'\n                        values={{uiType}}\n                    />\n                </button>\n            </form>\n        </>\n    );\n};\n\nexport default EmailToOAuth;\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useRef, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport type {AuthChangeResponse} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport LoginMfa from 'components/login/login_mfa';\n\nimport {ClaimErrors} from 'utils/constants';\nimport {isValidPassword} from 'utils/password';\nimport {localizeMessage} from 'utils/utils';\n\nimport type {SubmitOptions} from './email_to_ldap';\nimport ErrorLabel from './error_label';\n\nimport type {PasswordConfig} from '../claim_controller';\n\ntype Props = {\n    email: string | null;\n    switchLdapToEmail: (ldapPassword: string, email: string, password: string, token: string) => Promise<ActionResult<AuthChangeResponse>>;\n    passwordConfig?: PasswordConfig;\n}\n\nconst LDAPToEmail = (props: Props) => {\n    const [passwordError, setPasswordError] = useState<string | JSX.Element>('');\n    const [confirmError, setConfirmError] = useState('');\n    const [ldapPasswordError, setLdapPasswordError] = useState('');\n    const [serverError, setServerError] = useState('');\n    const [password, setPassword] = useState('');\n    const [ldapPassword, setLdapPassword] = useState('');\n    const [showMfa, setShowMfa] = useState(true);\n\n    const ldapPasswordInput = useRef<HTMLInputElement>(null);\n    const passwordInput = useRef<HTMLInputElement>(null);\n    const passwordConfirmInput = useRef<HTMLInputElement>(null);\n\n    const {formatMessage} = useIntl();\n\n    const preSubmit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const ldapPassword = ldapPasswordInput.current?.value;\n        if (!ldapPassword) {\n            setLdapPasswordError(localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.'));\n            setPasswordError('');\n            setConfirmError('');\n            setServerError('');\n            return;\n        }\n\n        const password = passwordInput.current?.value;\n        if (!password) {\n            setPasswordError(localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.'));\n            setConfirmError('');\n            setLdapPasswordError('');\n            setServerError('');\n            return;\n        }\n\n        if (props.passwordConfig) {\n            const {valid, error} = isValidPassword(password, props.passwordConfig);\n            if (!valid && error) {\n                setPasswordError(error);\n                setConfirmError('');\n                setLdapPasswordError('');\n                setServerError('');\n                return;\n            }\n        }\n\n        const confirmPassword = passwordConfirmInput.current?.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            setConfirmError(localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.'));\n            setPasswordError('');\n            setLdapPasswordError('');\n            setServerError('');\n            return;\n        }\n\n        setPassword(password);\n        setLdapPassword(ldapPassword);\n\n        if (props.email) {\n            submit({loginId: props.email, password, ldapPasswordParam: ldapPassword});\n        }\n    };\n\n    const submit = ({loginId, password, token = '', ldapPasswordParam}: SubmitOptions) => {\n        props.switchLdapToEmail(ldapPasswordParam || ldapPassword, loginId, password, token).then(({data, error: err}) => {\n            if (data?.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    setPasswordError(err.message);\n                    setShowMfa(false);\n                } else if (err.server_error_id === ClaimErrors.ENT_LDAP_LOGIN_INVALID_PASSWORD) {\n                    setLdapPasswordError(err.message);\n                    setShowMfa(false);\n                } else if (!showMfa && err.server_error_id === ClaimErrors.MFA_VALIDATE_TOKEN_AUTHENTICATE) {\n                    setShowMfa(true);\n                } else {\n                    setServerError(err.message);\n                    setShowMfa(false);\n                }\n            }\n        });\n    };\n\n    if (showMfa) {\n        return (\n            <LoginMfa\n                loginId={props.email}\n                password={password}\n                title={formatMessage({id: 'claim.ldap_to_email.title', defaultMessage: 'Switch AD/LDAP Account to Email/Password'})}\n                onSubmit={submit}\n            />\n        );\n    }\n    return (\n        <>\n            <h3>\n                <FormattedMessage\n                    id='claim.ldap_to_email.title'\n                    defaultMessage='Switch AD/LDAP Account to Email/Password'\n                />\n            </h3>\n            <form\n                onSubmit={preSubmit}\n                className={classNames('form-group', {'has-error': serverError})}\n            >\n                <p>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.email'\n                        defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Mattermost.'\n                        values={{email: props.email}}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.enterLdapPwd'\n                        defaultMessage='AD/LDAP Password:'\n                    />\n                </p>\n                <div className={classNames('form-group', {'has-error': ldapPasswordError})}>\n                    <input\n                        type='password'\n                        className='form-control'\n                        name='ldapPassword'\n                        ref={ldapPasswordInput}\n                        placeholder={formatMessage({id: 'claim.ldap_to_email.ldapPwd', defaultMessage: 'AD/LDAP Password'})}\n                        spellCheck='false'\n                    />\n                </div>\n                <ErrorLabel errorText={ldapPasswordError}/>\n                <p>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.enterPwd'\n                        defaultMessage='New email login password:'\n                    />\n                </p>\n                <div className={classNames('form-group', {'has-error': passwordError})}>\n                    <input\n                        ref={passwordInput}\n                        type='password'\n                        className='form-control'\n                        name='password'\n                        placeholder={formatMessage({id: 'claim.ldap_to_email.pwd', defaultMessage: 'Password'})}\n                        spellCheck='false'\n                    />\n                </div>\n                <ErrorLabel errorText={passwordError}/>\n                <div className={classNames('form-group', {'has-error': confirmError})}>\n                    <input\n                        ref={passwordConfirmInput}\n                        type='password'\n                        className='form-control'\n                        name='passwordconfirm'\n                        placeholder={formatMessage({id: 'claim.ldap_to_email.confirm', defaultMessage: 'Confirm Password'})}\n                        spellCheck='false'\n                    />\n                </div>\n                <ErrorLabel errorText={confirmError}/>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                >\n                    <FormattedMessage\n                        id='claim.ldap_to_email.switchTo'\n                        defaultMessage='Switch account to email/password'\n                    />\n                </button>\n                <ErrorLabel errorText={serverError}/>\n            </form>\n        </>\n    );\n};\n\nexport default LDAPToEmail;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useRef, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport type {AuthChangeResponse} from '@mattermost/types/users';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\n\nimport Constants from 'utils/constants';\nimport {isValidPassword} from 'utils/password';\nimport {localizeMessage, toTitleCase} from 'utils/utils';\n\nimport ErrorLabel from './error_label';\n\ntype Props = {\n    currentType: string | null;\n    email: string | null;\n    siteName?: string;\n    passwordConfig?: PasswordConfig;\n}\n\nconst OAuthToEmail = (props: Props) => {\n    const intl = useIntl();\n    const passwordInput = useRef<HTMLInputElement>(null);\n    const passwordConfirmInput = useRef<HTMLInputElement>(null);\n\n    const [error, setError] = useState<string | JSX.Element>('');\n\n    const submit = (e: React.FormEvent) => {\n        e.preventDefault();\n\n        const password = passwordInput.current?.value;\n        if (!password) {\n            setError(localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.'));\n            return;\n        }\n\n        if (props.passwordConfig) {\n            const {valid, error} = isValidPassword(password, props.passwordConfig);\n            if (!valid && error) {\n                setError(error);\n                return;\n            }\n        }\n\n        const confirmPassword = passwordConfirmInput.current?.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            setError(localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.'));\n            return;\n        }\n\n        setError('');\n\n        oauthToEmail(\n            props.currentType,\n            props.email,\n            password,\n            (data: AuthChangeResponse) => {\n                if (data?.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err: {message: string}) => {\n                setError(err.message);\n            },\n        );\n    };\n\n    const uiType = `${(props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : toTitleCase(props.currentType || ''))} SSO`;\n\n    return (\n        <>\n            <h3>\n                <FormattedMessage\n                    id='claim.oauth_to_email.title'\n                    defaultMessage='Switch {type} Account to Email'\n                    values={{type: uiType}}\n                />\n            </h3>\n            <form onSubmit={submit}>\n                <p>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.description'\n                        defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.enterNewPwd'\n                        defaultMessage='Enter a new password for your {site} email account'\n                        values={{site: props.siteName}}\n                    />\n                </p>\n                <div className={classNames('form-group', {'has-error': error})}>\n                    <input\n                        type='password'\n                        className='form-control'\n                        name='password'\n                        ref={passwordInput}\n                        placeholder={intl.formatMessage({\n                            id: 'claim.oauth_to_email.newPwd',\n                            defaultMessage: 'New Password',\n                        })}\n                        spellCheck='false'\n                    />\n                </div>\n                <div className={classNames('form-group', {'has-error': error})}>\n                    <input\n                        type='password'\n                        className='form-control'\n                        name='passwordconfirm'\n                        ref={passwordConfirmInput}\n                        placeholder={intl.formatMessage({\n                            id: 'claim.oauth_to_email.confirm',\n                            defaultMessage: 'Confirm Password',\n                        })}\n                        spellCheck='false'\n                    />\n                </div>\n                <ErrorLabel errorText={error}/>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                >\n                    <FormattedMessage\n                        id='claim.oauth_to_email.switchTo'\n                        defaultMessage='Switch {type} to Email and Password'\n                        values={{type: uiType}}\n                    />\n                </button>\n            </form>\n        </>\n    );\n};\n\nexport default OAuthToEmail;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport type { AuthChangeResponse } from \"@mattermost/types/users\";\n\nimport type { ActionResult } from \"mattermost-redux/types/actions\";\n\nimport EmailToLDAP from \"components/claim/components/email_to_ldap\";\nimport EmailToOAuth from \"components/claim/components/email_to_oauth\";\nimport LDAPToEmail from \"components/claim/components/ldap_to_email\";\nimport OAuthToEmail from \"components/claim/components/oauth_to_email\";\nimport BackButton from \"components/common/back_button\";\n\nimport logoImage from \"images/logo.png\";\n\nexport interface PasswordConfig {\n    minimumLength: number;\n    requireLowercase: boolean;\n    requireUppercase: boolean;\n    requireNumber: boolean;\n    requireSymbol: boolean;\n}\n\ntype Location = {\n    search: string;\n};\n\nexport type Props = {\n    location: Location;\n    siteName?: string;\n    ldapLoginFieldName?: string;\n    passwordConfig?: PasswordConfig;\n    match: {\n        url: string;\n    };\n    actions: {\n        switchLdapToEmail: (\n            ldapPassword: string,\n            email: string,\n            emailPassword: string,\n            mfaCode?: string\n        ) => Promise<ActionResult<AuthChangeResponse>>;\n    };\n};\n\nexport default class ClaimController extends React.PureComponent<Props> {\n    render(): JSX.Element {\n        const email = new URLSearchParams(this.props.location.search).get(\n            \"email\"\n        );\n        const newType = new URLSearchParams(this.props.location.search).get(\n            \"new_type\"\n        );\n        const currentType = new URLSearchParams(this.props.location.search).get(\n            \"old_type\"\n        );\n\n        return (\n            <div>\n                <BackButton />\n                <div className=\"col-sm-12\">\n                    <div className=\"signup-team__container\">\n                        <img\n                            alt={\"signup logo\"}\n                            className=\"signup-team-logo\"\n                            src={logoImage}\n                        />\n                        <div id=\"claim\">\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={\n                                                this.props.passwordConfig\n                                            }\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email || \"\"}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={\n                                                this.props.passwordConfig\n                                            }\n                                            switchLdapToEmail={\n                                                this.props.actions\n                                                    .switchLdapToEmail\n                                            }\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={\n                                                this.props.ldapLoginFieldName\n                                            }\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\nimport {getConfig, getPasswordConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport ClaimController from './claim_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName as string;\n    const ldapLoginFieldName = config.LdapLoginFieldName as string;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    className?: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nconst BackButton = ({url, className, onClick}: Props): JSX.Element => {\n    return (\n        <div className={classNames('signup-header', className)}>\n            <Link\n                data-testid='back_button'\n                onClick={onClick}\n                to={url}\n            >\n                <svg\n                    width='9'\n                    height='15'\n                    viewBox='0 0 9 15'\n                    fill='none'\n                    xmlns='http://www.w3.org/2000/svg'\n                >\n                    <path\n                        d='M7.64331 15L0 7.5L7.64331 0L9 1.33125L2.71338 7.5L9 13.6688L7.64331 15Z'\n                        fill='white'\n                    />\n                </svg>\n            </Link>\n        </div>\n    );\n};\nBackButton.defaultProps = {\n    url: '/',\n};\n\nexport default BackButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type ReactNode} from 'react';\n\nimport Constants from 'utils/constants';\n\nimport './column.scss';\n\ntype ColumnProps = {\n    title: ReactNode;\n    message: ReactNode;\n    SVGElement?: React.ReactNode;\n    extraContent?: React.ReactNode;\n    onEnterKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\nconst Column = ({title, message, SVGElement, extraContent, onEnterKeyDown}: ColumnProps) => {\n    const handleOnEnterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (onEnterKeyDown && e.key === Constants.KeyCodes.ENTER[0]) {\n            onEnterKeyDown(e);\n        }\n    };\n\n    return (\n        <div\n            className='content-layout-column'\n            onKeyDown={handleOnEnterKeyDown}\n            tabIndex={0}\n        >\n            <div className='content-layout-column-svg'>\n                {SVGElement}\n            </div>\n            <h1 className='content-layout-column-title'>\n                {title}\n            </h1>\n            <p className='content-layout-column-message'>\n                {message}\n            </p>\n            {extraContent && (\n                <div className='content-layout-column-extra-content'>\n                    {extraContent}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Column;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n}\n\nconst Svg = (props: SvgProps) => (\n    <svg\n        width={props.width?.toString() || '102'}\n        height={props.height?.toString() || '123'}\n        viewBox='0 0 102 123'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            d='M101.675 27.9958L99.2946 16.0841C98.9367 14.3239 97.8957 12.7705 96.3927 11.7537C85.2266 4.1723 70.423 0.223633 51.0193 0.223633C31.6156 0.223633 16.7987 4.17233 5.67264 11.7801C4.17376 12.8008 3.13398 14.3524 2.7708 16.1104L0.336967 27.9958C0.184635 28.743 0.245121 29.5171 0.511798 30.2325C0.778474 30.948 1.24096 31.5769 1.84808 32.0498C5.05752 34.5111 6.51514 37.7622 7.19714 41.8688C7.96339 46.1871 7.78096 50.6168 6.6622 54.8599C-3.27367 93.2541 13.4555 110.72 50.9524 122.777C88.3958 110.72 105.165 93.2541 95.2293 54.8599C94.1175 50.6158 93.9351 46.1876 94.6944 41.8688C95.4299 37.7622 96.8875 34.5111 100.043 32.0498C100.675 31.593 101.162 30.9705 101.451 30.2536C101.74 29.5366 101.817 28.7542 101.675 27.9958Z'\n            fill='#CC8F00'\n        />\n        <path\n            d='M51.019 113.063C16.9455 101.507 8.05264 87.1071 15.8088 57.1236C17.2606 51.6118 17.4932 45.8575 16.4908 40.2496C15.7615 35.2997 13.534 30.681 10.0986 26.9954L11.7568 18.8348C21.4921 12.4906 34.3433 9.41064 51.019 9.41064C67.6947 9.41064 80.5324 12.4906 90.2677 18.8348L91.9259 26.9954C88.4947 30.6822 86.2718 35.301 85.5471 40.2496C84.5448 45.8575 84.7773 51.6118 86.2291 57.1236C93.9451 87.0939 85.0925 101.572 51.019 113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.019 113.063C16.9455 101.507 8.05264 87.1071 15.8088 57.1236C17.2606 51.6118 17.4932 45.8575 16.4908 40.2496C15.7615 35.2997 13.534 30.681 10.0986 26.9954L11.7568 18.8348C21.4921 12.4906 34.3433 9.41064 51.019 9.41064C67.6947 9.41064 80.5324 12.4906 90.2677 18.8348L91.9259 26.9954C88.4947 30.6822 86.2718 35.301 85.5471 40.2496C84.5448 45.8575 84.7773 51.6118 86.2291 57.1236C93.9451 87.0939 85.0925 101.572 51.019 113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.019 52.4511V9.43701C34.3433 9.43701 21.4921 12.5169 11.7568 18.8611L10.0986 27.0217C13.534 30.7073 15.7615 35.3261 16.4908 40.276C17.2085 44.307 17.2852 48.4233 16.7181 52.4774L51.019 52.4511Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.0195 113.063C85.093 101.573 93.9457 87.0941 86.2297 57.1237C85.8321 55.5847 85.5241 54.0247 85.3069 52.4512H51.0195V113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M15.809 57.1237C8.05289 87.1072 16.9457 101.507 51.0192 113.063V52.4512H16.7184C16.5058 54.0245 16.2022 55.5845 15.809 57.1237Z'\n            fill='#FFD470'\n        />\n        <path\n            d='M51.0195 9.43701V52.4774H85.3069C84.7377 48.423 84.8189 44.3057 85.5476 40.276C86.2723 35.3274 88.4952 30.7085 91.9264 27.0217L90.2682 18.8611C80.5731 12.4906 67.6819 9.43701 51.0195 9.43701Z'\n            fill='#FFD470'\n        />\n        <path\n            d='M71.0644 38.9336L43.4633 68.8118L35.4531 62.8361H31L43.4633 82.7505L75.5175 38.9336H71.0644Z'\n            fill='#6F370B'\n        />\n    </svg>\n);\n\nexport default Svg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type ReactNode, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {SubmitOptions} from 'components/claim/components/email_to_ldap';\nimport ShieldWithCheckmarkSVG from 'components/common/svg_images_components/shield_with_checkmark';\nimport ColumnLayout from 'components/header_footer_route/content_layouts/column';\nimport SaveButton from 'components/save_button';\nimport Input, {SIZE} from 'components/widgets/inputs/input/input';\n\nimport './login_mfa.scss';\n\ntype LoginMfaProps = {\n    loginId: string | null;\n    password: string;\n    title?: ReactNode;\n    subtitle?: ReactNode;\n    onSubmit: ({loginId, password, token}: SubmitOptions) => void;\n}\n\nconst LoginMfa = ({loginId, password, title, subtitle, onSubmit}: LoginMfaProps) => {\n    const {formatMessage} = useIntl();\n\n    const [token, setToken] = useState('');\n    const [saving, setSaving] = useState(false);\n\n    const handleInputOnChange = ({target: {value: token}}: React.ChangeEvent<HTMLInputElement>) => {\n        setToken(token.trim().replace(/\\s/g, ''));\n    };\n\n    const handleSaveButtonOnClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n        e.preventDefault();\n\n        if (!saving) {\n            setSaving(true);\n\n            onSubmit({loginId: loginId || '', password, token});\n        }\n    };\n\n    const onEnterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (token) {\n            handleSaveButtonOnClick(e);\n        }\n    };\n\n    return (\n        <ColumnLayout\n            title={title || formatMessage({id: 'login_mfa.title', defaultMessage: 'Enter MFA Token'})}\n            message={subtitle || formatMessage({id: 'login_mfa.subtitle', defaultMessage: 'To complete the sign in process, please enter a token from your smartphone\\'s authenticator'})}\n            SVGElement={<ShieldWithCheckmarkSVG/>}\n            extraContent={(\n                <div className='login-mfa-form'>\n                    <Input\n                        name='token'\n                        containerClassName='login-mfa-form-input'\n                        type='text'\n                        inputSize={SIZE.LARGE}\n                        value={token}\n                        onChange={handleInputOnChange}\n                        placeholder={formatMessage({id: 'login_mfa.token', defaultMessage: 'Enter MFA Token'})}\n                        autoFocus={true}\n                        disabled={saving}\n                    />\n                    <div className='login-mfa-form-button-container'>\n                        <SaveButton\n                            extraClasses='login-mfa-form-button-submit large'\n                            saving={saving}\n                            disabled={!token}\n                            onClick={handleSaveButtonOnClick}\n                            defaultMessage={formatMessage({id: 'login_mfa.submit', defaultMessage: 'Submit'})}\n                            savingMessage={formatMessage({id: 'login_mfa.saving', defaultMessage: 'Logging in…'})}\n                        />\n                    </div>\n                </div>\n            )}\n            onEnterKeyDown={onEnterKeyDown}\n        />\n    );\n};\n\nexport default LoginMfa;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {IntlShape} from 'react-intl';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport Constants from 'utils/constants';\n\nexport function isValidPassword(password: string, passwordConfig: PasswordConfig, intl?: IntlShape) {\n    let errorId = passwordErrors.passwordError.id;\n    const telemetryErrorIds = [];\n    let valid = true;\n    const minimumLength = passwordConfig.minimumLength || Constants.MIN_PASSWORD_LENGTH;\n\n    if (password.length < minimumLength || password.length > Constants.MAX_PASSWORD_LENGTH) {\n        valid = false;\n        telemetryErrorIds.push({field: 'password', rule: 'error_length'});\n    }\n\n    if (passwordConfig.requireLowercase) {\n        if (!password.match(/[a-z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Lowercase';\n        telemetryErrorIds.push({field: 'password', rule: 'lowercase'});\n    }\n\n    if (passwordConfig.requireUppercase) {\n        if (!password.match(/[A-Z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Uppercase';\n        telemetryErrorIds.push({field: 'password', rule: 'uppercase'});\n    }\n\n    if (passwordConfig.requireNumber) {\n        if (!password.match(/[0-9]/)) {\n            valid = false;\n        }\n\n        errorId += 'Number';\n        telemetryErrorIds.push({field: 'password', rule: 'number'});\n    }\n\n    if (passwordConfig.requireSymbol) {\n        if (!password.match(/[ !\"\\\\#$%&'()*+,-./:;<=>?@[\\]^_`|~]/)) {\n            valid = false;\n        }\n\n        errorId += 'Symbol';\n        telemetryErrorIds.push({field: 'password', rule: 'symbol'});\n    }\n\n    let error;\n    if (!valid) {\n        error = intl ? (\n            intl.formatMessage(\n                {\n                    id: errorId,\n                    defaultMessage: 'Must be {min}-{max} characters long.',\n                },\n                {\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                },\n            )\n        ) : (\n            <FormattedMessage\n                id={errorId}\n                defaultMessage='Must be {min}-{max} characters long.'\n                values={{\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    return {valid, error, telemetryErrorIds};\n}\n\nexport const passwordErrors = defineMessages({\n    passwordError: {id: 'user.settings.security.passwordError', defaultMessage: 'Must be {min}-{max} characters long.'},\n    passwordErrorLowercase: {id: 'user.settings.security.passwordErrorLowercase', defaultMessage: 'Must be {min}-{max} characters long and include lowercase letters.'},\n    passwordErrorLowercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseNumber', defaultMessage: 'Must be {min}-{max} characters long and include lowercase letters and numbers.'},\n    passwordErrorLowercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseNumberSymbol', defaultMessage: 'Must be {min}-{max} characters long and include lowercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseSymbol', defaultMessage: 'Must be {min}-{max} characters long and include lowercase letters and special characters.'},\n    passwordErrorLowercaseUppercase: {id: 'user.settings.security.passwordErrorLowercaseUppercase', defaultMessage: 'Must be {min}-{max} characters long and include both lowercase and uppercase letters.'},\n    passwordErrorLowercaseUppercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumber', defaultMessage: 'Must be {min}-{max} characters long and include both lowercase and uppercase letters, and numbers.'},\n    passwordErrorLowercaseUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol', defaultMessage: 'Must be {min}-{max} characters long and include both lowercase and uppercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseUppercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseSymbol', defaultMessage: 'Must be {min}-{max} characters long and include both lowercase and uppercase letters, and special characters.'},\n    passwordErrorNumber: {id: 'user.settings.security.passwordErrorNumber', defaultMessage: 'Must be {min}-{max} characters long and include numbers.'},\n    passwordErrorNumberSymbol: {id: 'user.settings.security.passwordErrorNumberSymbol', defaultMessage: 'Must be {min}-{max} characters long and include numbers and special characters.'},\n    passwordErrorSymbol: {id: 'user.settings.security.passwordErrorSymbol', defaultMessage: 'Must be {min}-{max} characters long and include special characters.'},\n    passwordErrorUppercase: {id: 'user.settings.security.passwordErrorUppercase', defaultMessage: 'Must be {min}-{max} characters long and include uppercase letters.'},\n    passwordErrorUppercaseNumber: {id: 'user.settings.security.passwordErrorUppercaseNumber', defaultMessage: 'Must be {min}-{max} characters long and include uppercase letters, and numbers.'},\n    passwordErrorUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorUppercaseNumberSymbol', defaultMessage: 'Must be {min}-{max} characters long and include uppercase letters, numbers, and special characters.'},\n    passwordErrorUppercaseSymbol: {id: 'user.settings.security.passwordErrorUppercaseSymbol', defaultMessage: 'Must be {min}-{max} characters long and include uppercase letters, and special characters.'},\n});\n"],"names":["ErrorLabel","_ref","errorText","React","className","propTypes","_pt","memo","EmailToLDAP","email","siteName","ldapLoginFieldName","formatMessage","useIntl","emailPasswordInput","useRef","ldapIdInput","ldapPasswordInput","password","setPassword","ldapId","setLdapId","ldapPassword","setLdapPassword","passwordError","setPasswordError","ldapError","setLdapError","ldapPasswordError","setLdapPasswordError","serverError","setServerError","showMfa","setShowMfa","submit","_ref2","loginId","token","ldapIdParam","ldapPasswordParam","emailToLdap","data","follow_link","window","location","href","err","server_error_id","ClaimErrors","id","message","loginPlaceholder","defaultMessage","LoginMfa","title","onSubmit","FormattedMessage","e","_emailPasswordInput$c","_ldapIdInput$current","_ldapPasswordInput$cu","preventDefault","current","value","trim","classNames","values","site","type","name","ref","autoComplete","placeholder","spellCheck","EmailToOAuth","props","useState","passwordInput","emailToOAuth","newType","Constants","toTitleCase","uiType","concat","_passwordInput$curren","LDAPToEmail","confirmError","setConfirmError","passwordConfirmInput","switchLdapToEmail","then","error","startsWith","_passwordConfirmInput","localizeMessage","passwordConfig","valid","isValidPassword","confirmPassword","OAuthToEmail","intl","setError","currentType","oauthToEmail","ClaimController","render","URLSearchParams","this","search","get","BackButton","alt","src","logoImage","Switch","Route","path","match","url","actions","isRequired","minimumLength","requireLowercase","requireUppercase","requireNumber","requireSymbol","connect","state","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","dispatch","bindActionCreators","onClick","Link","to","width","height","viewBox","fill","xmlns","d","defaultProps","Column","SVGElement","extraContent","onEnterKeyDown","onKeyDown","key","tabIndex","Svg","_props$width","_props$height","toString","subtitle","setToken","saving","setSaving","handleSaveButtonOnClick","ColumnLayout","ShieldWithCheckmarkSVG","Input","containerClassName","inputSize","SIZE","onChange","target","replace","autoFocus","disabled","SaveButton","extraClasses","savingMessage","errorId","passwordErrors","telemetryErrorIds","length","push","field","rule","min","max","defineMessages","passwordErrorLowercase","passwordErrorLowercaseNumber","passwordErrorLowercaseNumberSymbol","passwordErrorLowercaseSymbol","passwordErrorLowercaseUppercase","passwordErrorLowercaseUppercaseNumber","passwordErrorLowercaseUppercaseNumberSymbol","passwordErrorLowercaseUppercaseSymbol","passwordErrorNumber","passwordErrorNumberSymbol","passwordErrorSymbol","passwordErrorUppercase","passwordErrorUppercaseNumber","passwordErrorUppercaseNumberSymbol","passwordErrorUppercaseSymbol"],"sourceRoot":""}