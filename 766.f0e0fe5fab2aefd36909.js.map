{"version":3,"file":"766.f0e0fe5fab2aefd36909.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/common/hooks/useCopyText.ts","webpack://mattermost-webapp/./src/components/common/svg_images_components/alert_svg.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/components/editable_area.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/components/linelimiter.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/about_area_channel.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/about_area_dm.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/about_area_gm.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/about_area.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/header.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/menu.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/top_buttons.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/channel_info_rhs.tsx","webpack://mattermost-webapp/./src/components/channel_info_rhs/index.ts","webpack://mattermost-webapp/./src/components/channel_members_rhs/action_bar.tsx","webpack://mattermost-webapp/./src/components/channel_members_rhs/header.tsx","webpack://mattermost-webapp/./src/components/channel_members_rhs/search.tsx","webpack://mattermost-webapp/./src/components/channel_members_rhs/channel_members_rhs.tsx","webpack://mattermost-webapp/./src/components/channel_members_rhs/index.ts","webpack://mattermost-webapp/./src/components/info_toast/info_toast.tsx","webpack://mattermost-webapp/./src/components/post_edit_history/restore_post_modal.tsx","webpack://mattermost-webapp/./src/components/post_edit_history/edited_post_item/edited_post_item.tsx","webpack://mattermost-webapp/./src/components/post_edit_history/edited_post_item/index.ts","webpack://mattermost-webapp/./src/components/post_edit_history/post_edit_history.tsx","webpack://mattermost-webapp/./src/components/post_edit_history/index.ts","webpack://mattermost-webapp/./src/components/resizable_sidebar/resizable_rhs/index.tsx","webpack://mattermost-webapp/./src/components/rhs_card_header/rhs_card_header.tsx","webpack://mattermost-webapp/./src/components/rhs_card_header/index.tsx","webpack://mattermost-webapp/./src/components/rhs_card/rhs_card.tsx","webpack://mattermost-webapp/./src/components/rhs_card/index.ts","webpack://mattermost-webapp/./src/components/tours/crt_tour/crt_threads_pane_tutorial_tip.tsx","webpack://mattermost-webapp/./src/components/rhs_header_post/rhs_header_post.tsx","webpack://mattermost-webapp/./src/components/rhs_header_post/index.ts","webpack://mattermost-webapp/./src/components/rhs_thread/rhs_thread.tsx","webpack://mattermost-webapp/./src/components/rhs_thread/index.ts","webpack://mattermost-webapp/./src/plugins/rhs_plugin/rhs_plugin.tsx","webpack://mattermost-webapp/./src/plugins/rhs_plugin/index.ts","webpack://mattermost-webapp/./src/components/sidebar_right/sidebar_right.tsx","webpack://mattermost-webapp/./src/components/sidebar_right/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useRef, useCallback, useState} from 'react';\n\ntype CopyOptions = {\n    successCopyTimeout?: number;\n    text: string;\n    trackCallback?: () => void;\n};\n\ntype CopyResponse = {\n    copiedRecently: boolean;\n    copyError: boolean;\n    onClick: () => void;\n};\n\nconst DEFAULT_COPY_TIMEOUT = 4000;\n\nexport default function useCopyText(options: CopyOptions): CopyResponse {\n    const [copiedRecently, setCopiedRecently] = useState(false);\n    const [copyError, setCopyError] = useState(false);\n    const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n    let successCopyTimeout = DEFAULT_COPY_TIMEOUT;\n    if (options.successCopyTimeout || options.successCopyTimeout === 0) {\n        successCopyTimeout = options.successCopyTimeout;\n    }\n\n    const onClick = useCallback(() => {\n        if (options.trackCallback) {\n            options.trackCallback();\n        }\n\n        if (timerRef.current) {\n            clearTimeout(timerRef.current);\n            timerRef.current = null;\n        }\n        const clipboard = navigator.clipboard;\n        if (clipboard) {\n            clipboard.writeText(options.text).\n                then(() => {\n                    setCopiedRecently(true);\n                    setCopyError(false);\n                }).\n                catch(() => {\n                    setCopiedRecently(false);\n                    setCopyError(true);\n                });\n        } else {\n            const textField = document.createElement('textarea');\n            textField.innerText = options.text;\n            textField.style.position = 'fixed';\n            textField.style.opacity = '0';\n\n            document.body.appendChild(textField);\n            textField.select();\n\n            try {\n                const success = document.execCommand('copy');\n                setCopiedRecently(success);\n                setCopyError(!success);\n            } catch (err) {\n                setCopiedRecently(false);\n                setCopyError(true);\n            }\n            textField.remove();\n        }\n\n        timerRef.current = setTimeout(() => {\n            setCopiedRecently(false);\n            setCopyError(false);\n        }, successCopyTimeout);\n    }, [options.text, successCopyTimeout]);\n\n    return {\n        copiedRecently,\n        copyError,\n        onClick,\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width: number;\n    height: number;\n};\n\nconst AlertSvg = (props: SvgProps) => (\n    <svg\n        width={props.width ? props.width.toString() : '110'}\n        height={props.height ? props.height.toString() : '100'}\n        viewBox='0 0 110 100'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            d='M26.4736 81.0278C23.2554 81.0278 21.7973 78.708 23.2333 75.8728L49.2438 24.7796C50.7166 21.9517 53.0364 21.9517 54.4798 24.7796L80.483 75.8728C81.9558 78.7006 80.483 81.0278 77.2427 81.0278H26.4736Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='M47.7783 43.6764L50.4515 61.6378C50.4773 61.9942 50.6371 62.3276 50.8988 62.571C51.1604 62.8144 51.5045 62.9497 51.8618 62.9497C52.2192 62.9497 52.5632 62.8144 52.8249 62.571C53.0865 62.3276 53.2463 61.9942 53.2721 61.6378L55.9453 43.6764C56.4314 36.673 47.2849 36.673 47.7783 43.6764Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M51.8582 64.8853C52.6677 64.8867 53.4586 65.1281 54.1309 65.5789C54.8033 66.0297 55.327 66.6697 55.6358 67.418C55.9446 68.1663 56.0246 68.9893 55.8657 69.7831C55.7069 70.5769 55.3164 71.3058 54.7435 71.8777C54.1706 72.4496 53.441 72.8388 52.6469 72.9962C51.8529 73.1536 51.03 73.0721 50.2822 72.7619C49.5345 72.4518 48.8954 71.927 48.4458 71.2538C47.9963 70.5806 47.7563 69.7893 47.7563 68.9798C47.7563 68.4415 47.8624 67.9084 48.0686 67.4112C48.2749 66.9139 48.5772 66.4622 48.9582 66.0819C49.3392 65.7016 49.7914 65.4002 50.2891 65.1948C50.7867 64.9895 51.3199 64.8843 51.8582 64.8853Z'\n            fill='#2D3039'\n        />\n    </svg>\n);\n\nexport default AlertSvg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nconst EditButton = styled.button`\n    border: 0;\n    margin: 0px;\n    padding: 0px;\n    border-radius: 4px;\n    background: rgba(var(--center-channel-color-rgb), 0.04);\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    &:hover {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n    }\n    width: 24px;\n    height: 24px;\n    i.icon {\n        font-size: 14.4px;\n    }\n`;\n\nconst EmptyPlace = styled.button`\n    padding: 0px;\n    background: transparent;\n    border: 0px;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    i {\n        display: none;\n        font-size: 14px;\n        margin-left: 4px;\n    }\n    &:hover {\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n        i {\n            display: inline-block;\n        }\n    }\n`;\n\ninterface EditableAreaProps {\n    editable: boolean;\n    content: React.ReactNode;\n    emptyLabel: string;\n    onEdit: () => void;\n    className?: string;\n}\n\nconst EditableAreaBase = ({editable, content, emptyLabel, onEdit, className}: EditableAreaProps) => {\n    const {formatMessage} = useIntl();\n\n    const allowEditArea = editable && content;\n\n    return (\n        <div className={className}>\n            <div className='EditableArea__content'>\n                {content}\n                {!content && editable && (\n                    <EmptyPlace\n                        onClick={onEdit}\n                        aria-label={formatMessage({id: 'channel_info_rhs.edit_link', defaultMessage: 'Edit'})}\n                    >\n                        {emptyLabel}\n                        <i className='icon icon-pencil-outline edit-icon'/>\n                    </EmptyPlace>\n                )}\n            </div>\n            <div className='EditableArea__edit'>\n                {allowEditArea ? (\n                    <EditButton\n                        onClick={onEdit}\n                        aria-label={formatMessage({id: 'channel_info_rhs.edit_link', defaultMessage: 'Edit'})}\n                    >\n                        <i className='icon icon-pencil-outline'/>\n                    </EditButton>\n                ) : ''}\n            </div>\n        </div>\n    );\n};\n\nconst EditableArea = styled(EditableAreaBase)`\n    display: flex;\n    &>.EditableArea__content {\n        flex: 1;\n        p:last-child {\n            margin-bottom:0;\n        }\n    }\n    &:hover {\n        &>.EditableArea__edit {\n            visibility: visible;\n        }\n    }\n\n    &>.EditableArea__edit {\n        visibility: hidden;\n        width: 24px;\n    }\n`;\n\nexport default EditableArea;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useRef, useState} from 'react';\nimport {CSSTransition} from 'react-transition-group';\nimport styled from 'styled-components';\n\ninterface LineLimiterProps {\n    children: React.ReactNode;\n    maxLines: number;\n    lineHeight: number;\n    moreText: string;\n    lessText: string;\n    className?: string;\n    errorMargin?: number;\n}\n\nconst LineLimiterBase = ({children, maxLines, lineHeight, moreText, lessText, errorMargin = 0.1, className}: LineLimiterProps) => {\n    const maxLineHeight = maxLines * lineHeight;\n\n    const [needLimiter, setNeedLimiter] = useState(false);\n    const [open, setOpen] = useState(false);\n    const [maxHeight, setMaxHeight] = useState('inherit');\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        if (ref === null || ref.current === null) {\n            return;\n        }\n\n        const contentHeight = ref.current.scrollHeight;\n        const margin = maxLineHeight * errorMargin;\n        if (contentHeight > (maxLineHeight + margin)) {\n            setNeedLimiter(true);\n\n            if (open) {\n                setMaxHeight(`${contentHeight}px`);\n            } else {\n                setMaxHeight(`${maxLineHeight}px`);\n            }\n        } else {\n            setNeedLimiter(false);\n            setMaxHeight('inherit');\n        }\n    }, [children, open]);\n\n    return (\n        <CSSTransition\n            in={open}\n            timeout={500}\n            classNames='LineLimiter--Transition-'\n        >\n            <>\n                <div\n                    className={className}\n                    style={{maxHeight}}\n                >\n                    <div>\n                        <div ref={ref}>{children}</div>\n                    </div>\n                </div>\n                {needLimiter && (\n                    <ToggleButton\n                        className='LineLimiter__toggler'\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? lessText : moreText}\n                    </ToggleButton>\n                )}\n            </>\n        </CSSTransition>\n    );\n};\n\nconst ToggleButton = styled.button`\n    border: 0px;\n    background-color: var(--center-channel-bg);\n    color: var(--button-bg);\n    padding: 0;\n    margin: 0;\n`;\n\nconst LineLimiter = styled(LineLimiterBase)<LineLimiterProps>`\n    transition: max-height 0.5s ease;\n    line-height: ${(props) => props.lineHeight}px;\n    overflow: hidden;\n\n    p {\n        margin-bottom: ${(props) => props.lineHeight}px;\n    }\n\n    span[data-emoticon] {\n        max-height: ${(props) => props.lineHeight}px;\n        .emoticon {\n            max-height: ${(props) => props.lineHeight}px;\n            min-height: ${(props) => props.lineHeight}px;\n         }\n    }\n\n    .markdown-inline-img__container img.markdown-inline-img {\n        max-height: ${(props) => props.lineHeight}px !important;\n        margin-top: 0 !important;\n        margin-bottom: 0 !important;\n    }\n\n    & > * {\n       overflow: hidden;\n    }\n`;\n\nexport default LineLimiter;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport Markdown from 'components/markdown';\n\nimport EditableArea from './components/editable_area';\nimport LineLimiter from './components/linelimiter';\n\nconst ChannelId = styled.div`\n    margin-bottom: 12px;\n    font-size: 11px;\n    line-height: 16px;\n    letter-spacing: 0.02em;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n`;\n\nconst ChannelPurpose = styled.div`\n    margin-bottom: 12px;\n    &.ChannelPurpose--is-dm {\n        margin-bottom: 16px;\n    }\n`;\n\nconst ChannelDescriptionHeading = styled.div`\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    font-size: 12px;\n    font-style: normal;\n    font-weight: 600;\n    line-height: 16px;\n    letter-spacing: 0.24px;\n    text-transform: uppercase;\n    padding: 6px 0px;\n`;\n\nconst ChannelHeader = styled.div`\n    margin-bottom: 12px;\n`;\n\ninterface Props {\n    channel: Channel;\n    canEditChannelProperties: boolean;\n    actions: {\n        editChannelPurpose: () => void;\n        editChannelHeader: () => void;\n    };\n}\n\nconst AboutAreaChannel = ({channel, canEditChannelProperties, actions}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            {(channel.purpose || canEditChannelProperties) && (\n                <ChannelPurpose>\n                    <ChannelDescriptionHeading>\n                        {formatMessage({id: 'channel_info_rhs.about_area.channel_purpose.heading', defaultMessage: 'Channel Purpose'})}\n                    </ChannelDescriptionHeading>\n                    <EditableArea\n                        editable={canEditChannelProperties}\n                        content={channel.purpose && (\n                            <LineLimiter\n                                maxLines={4}\n                                lineHeight={20}\n                                moreText={formatMessage({id: 'channel_info_rhs.about_area.channel_purpose.line_limiter.more', defaultMessage: 'more'})}\n                                lessText={formatMessage({id: 'channel_info_rhs.about_area.channel_purpose.line_limiter.less', defaultMessage: 'less'})}\n                            >\n                                <Markdown message={channel.purpose}/>\n                            </LineLimiter>\n                        )}\n                        onEdit={actions.editChannelPurpose}\n                        emptyLabel={formatMessage({id: 'channel_info_rhs.about_area.add_channel_purpose', defaultMessage: 'Add a channel purpose'})}\n                    />\n                </ChannelPurpose>\n            )}\n\n            {(channel.header || canEditChannelProperties) && (\n                <ChannelHeader>\n                    <ChannelDescriptionHeading>\n                        {formatMessage({id: 'channel_info_rhs.about_area.channel_header.heading', defaultMessage: 'Channel Header'})}\n                    </ChannelDescriptionHeading>\n                    <EditableArea\n                        content={channel.header && (\n                            <LineLimiter\n                                maxLines={4}\n                                lineHeight={20}\n                                moreText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.more', defaultMessage: 'more'})}\n                                lessText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.less', defaultMessage: 'less'})}\n                            >\n                                <Markdown message={channel.header}/>\n                            </LineLimiter>\n                        )}\n                        editable={canEditChannelProperties}\n                        onEdit={actions.editChannelHeader}\n                        emptyLabel={formatMessage({id: 'channel_info_rhs.about_area.add_channel_header', defaultMessage: 'Add a channel header'})}\n                    />\n                </ChannelHeader>\n            )}\n\n            <ChannelId>\n                {formatMessage({id: 'channel_info_rhs.about_area_id', defaultMessage: 'ID:'})} {channel.id}\n            </ChannelId>\n        </>\n    );\n};\n\nexport default AboutAreaChannel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport Markdown from 'components/markdown';\nimport ProfilePicture from 'components/profile_picture';\nimport BotTag from 'components/widgets/tag/bot_tag';\nimport GuestTag from 'components/widgets/tag/guest_tag';\n\nimport type {DMUser} from './channel_info_rhs';\nimport EditableArea from './components/editable_area';\nimport LineLimiter from './components/linelimiter';\n\nconst Username = styled.p`\n    font-family: Metropolis, sans-serif;\n    font-size: 18px;\n    line-height: 24px;\n    color: rgb(var(--center-channel-color-rgb));\n    font-weight: 600;\n    margin: 0;\n`;\n\nconst ChannelHeader = styled.div`\n    margin-bottom: 12px;\n`;\n\nconst UserInfoContainer = styled.div`\n    display: flex;\n    align-items: center;\n    margin-bottom: 12px;\n`;\n\nconst UserAvatar = styled.div`\n    .status {\n        bottom: 0;\n        right: 0;\n        height: 18px;\n        width: 18px;\n        & svg {\n            min-height: 14.4px;\n        }\n    }\n`;\n\nconst UserInfo = styled.div`\n    margin-left: 12px;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst UsernameContainer = styled.div`\n    display: flex;\n    gap: 8px\n`;\n\nconst UserPosition = styled.div`\n    line-height: 20px;\n\n    p {\n        margin-bottom: 0;\n    }\n`;\n\nconst ChannelId = styled.div`\n    margin-bottom: 12px;\n    font-size: 11px;\n    line-height: 16px;\n    letter-spacing: 0.02em;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n`;\n\ninterface Props {\n    channel: Channel;\n    dmUser: DMUser;\n    actions: {\n        editChannelHeader: () => void;\n    };\n}\n\nconst AboutAreaDM = ({channel, dmUser, actions}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            <UserInfoContainer>\n                <UserAvatar>\n                    <ProfilePicture\n                        src={Client4.getProfilePictureUrl(dmUser.user.id, dmUser.user.last_picture_update)}\n                        isBot={dmUser.user.is_bot}\n                        status={dmUser.status ? dmUser.status : undefined}\n                        username={dmUser.display_name}\n                        userId={dmUser.user.id}\n                        channelId={channel.id}\n                        size='xl'\n                    />\n                </UserAvatar>\n                <UserInfo>\n                    <UsernameContainer>\n                        <Username>{dmUser.display_name}</Username>\n                        {dmUser.user.is_bot && <BotTag/>}\n                        {dmUser.is_guest && <GuestTag/>}\n                    </UsernameContainer>\n                    <UserPosition>\n                        <Markdown message={dmUser.user.is_bot ? dmUser.user.bot_description : dmUser.user.position}/>\n                    </UserPosition>\n                </UserInfo>\n            </UserInfoContainer>\n\n            {!dmUser.user.is_bot && (\n                <ChannelHeader>\n                    <EditableArea\n                        content={channel.header && (\n                            <LineLimiter\n                                maxLines={4}\n                                lineHeight={20}\n                                moreText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.more', defaultMessage: 'more'})}\n                                lessText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.less', defaultMessage: 'less'})}\n                            >\n                                <Markdown message={channel.header}/>\n                            </LineLimiter>\n                        )}\n                        editable={true}\n                        onEdit={actions.editChannelHeader}\n                        emptyLabel={formatMessage({id: 'channel_info_rhs.about_area.add_channel_header', defaultMessage: 'Add a channel header'})}\n                    />\n                </ChannelHeader>\n            )}\n\n            <ChannelId>\n                {formatMessage({id: 'channel_info_rhs.about_area_id', defaultMessage: 'ID:'})} {channel.id}\n            </ChannelId>\n        </>\n    );\n};\n\nexport default AboutAreaDM;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport Markdown from 'components/markdown';\nimport ProfilePicture from 'components/profile_picture';\nimport UserProfileElement from 'components/user_profile';\n\nimport EditableArea from './components/editable_area';\nimport LineLimiter from './components/linelimiter';\n\nconst Usernames = styled.p`\n    font-family: Metropolis, sans-serif;\n    font-size: 18px;\n    line-height: 24px;\n    color: rgb(var(--center-channel-color-rgb));\n    font-weight: 600;\n    margin: 0;\n`;\n\nconst ProfilePictures = styled.div`\n    margin-bottom: 10px;\n`;\n\ninterface ProfilePictureContainerProps {\n    position: number;\n}\n\nconst ProfilePictureContainer = styled.div<ProfilePictureContainerProps>`\n    display: inline-block;\n    position: relative;\n    left: ${(props) => props.position * -15}px;\n\n    & img {\n        border: 2px solid white;\n    }\n`;\n\nconst UsersArea = styled.div`\n    margin-bottom: 12px;\n    &.ChannelPurpose--is-dm {\n        margin-bottom: 16px;\n    }\n`;\n\nconst ChannelHeader = styled.div`\n    margin-bottom: 12px;\n`;\n\nconst ChannelId = styled.div`\n    margin-bottom: 12px;\n    font-size: 11px;\n    line-height: 16px;\n    letter-spacing: 0.02em;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n`;\n\ninterface Props {\n    channel: Channel;\n    gmUsers: UserProfile[];\n    actions: {\n        editChannelHeader: () => void;\n    };\n}\n\nconst AboutAreaGM = ({channel, gmUsers, actions}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <>\n            <UsersArea>\n                <ProfilePictures>\n                    {gmUsers.map((user, idx) => (\n                        <ProfilePictureContainer\n                            key={user.id}\n                            position={idx}\n                        >\n                            <ProfilePicture\n                                src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                                size='xl'\n                                userId={user.id}\n                                username={user.username}\n                                channelId={channel.id}\n                            />\n                        </ProfilePictureContainer>\n                    ))}\n                </ProfilePictures>\n                <Usernames>\n                    {gmUsers.map((user, i, {length}) => (\n                        <React.Fragment key={user.id}>\n                            <UserProfileElement\n                                userId={user.id}\n                                channelId={channel.id}\n                            />\n                            {(i + 1 !== length) && (<span>{', '}</span>)}\n                        </React.Fragment>\n                    ))}\n                </Usernames>\n            </UsersArea>\n\n            <ChannelHeader>\n                <EditableArea\n                    content={channel.header && (\n                        <LineLimiter\n                            maxLines={4}\n                            lineHeight={20}\n                            moreText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.more', defaultMessage: 'more'})}\n                            lessText={formatMessage({id: 'channel_info_rhs.about_area.channel_header.line_limiter.less', defaultMessage: 'less'})}\n                        >\n                            <Markdown message={channel.header}/>\n                        </LineLimiter>\n                    )}\n                    editable={true}\n                    onEdit={actions.editChannelHeader}\n                    emptyLabel={formatMessage({id: 'channel_info_rhs.about_area.add_channel_header', defaultMessage: 'Add a channel header'})}\n                />\n            </ChannelHeader>\n\n            <ChannelId>\n                {formatMessage({id: 'channel_info_rhs.about_area_id', defaultMessage: 'ID:'})} {channel.id}\n            </ChannelId>\n        </>\n    );\n};\n\nexport default AboutAreaGM;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport Constants from 'utils/constants';\n\nimport AboutAreaChannel from './about_area_channel';\nimport AboutAreaDM from './about_area_dm';\nimport AboutAreaGM from './about_area_gm';\nimport type {DMUser} from './channel_info_rhs';\n\nconst Container = styled.div`\n    overflow-wrap: anywhere;\n    padding: 24px;\n    padding-bottom: 12px;\n\n    font-size: 14px;\n    line-height: 20px;\n\n    & .status-wrapper {\n        height: 50px;\n    }\n\n    & .text-empty {\n        padding: 0px;\n        background: transparent;\n        border: 0px;\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n    }\n`;\n\ninterface Props {\n    channel: Channel;\n    dmUser?: DMUser;\n    gmUsers?: UserProfile[];\n    canEditChannelProperties: boolean;\n    actions: {\n        editChannelPurpose: () => void;\n        editChannelHeader: () => void;\n    };\n}\n\nconst AboutArea = ({channel, dmUser, gmUsers, canEditChannelProperties, actions}: Props) => {\n    return (\n        <Container>\n            {channel.type === Constants.DM_CHANNEL && dmUser && (\n                <AboutAreaDM\n                    channel={channel}\n                    dmUser={dmUser}\n                    actions={{editChannelHeader: actions.editChannelHeader}}\n                />\n            )}\n            {channel.type === Constants.GM_CHANNEL && gmUsers && (\n                <AboutAreaGM\n                    channel={channel}\n                    gmUsers={gmUsers!}\n                    actions={{editChannelHeader: actions.editChannelHeader}}\n                />\n            )}\n            {[Constants.OPEN_CHANNEL, Constants.PRIVATE_CHANNEL].includes(channel.type) && (\n                <AboutAreaChannel\n                    channel={channel}\n                    canEditChannelProperties={canEditChannelProperties}\n                    actions={actions}\n                />\n            )}\n        </Container>\n    );\n};\n\nexport default AboutArea;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport WithTooltip from 'components/with_tooltip';\n\ninterface Props {\n    channel: Channel;\n    isArchived: boolean;\n    isMobile: boolean;\n    onClose: () => void;\n}\n\nconst Icon = styled.i`\n    font-size:12px;\n`;\n\nconst HeaderTitle = styled.span`\n    line-height: 2.4rem;\n`;\n\nconst Header = ({channel, isArchived, isMobile, onClose}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div className='sidebar--right__header'>\n            <span className='sidebar--right__title'>\n                {isMobile && (\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={onClose}\n                        aria-label={formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i\n                            className='icon icon-arrow-back-ios'\n                        />\n                    </button>\n                )}\n                <HeaderTitle>\n                    <FormattedMessage\n                        id='channel_info_rhs.header.title'\n                        defaultMessage='Info'\n                    />\n                </HeaderTitle>\n\n                {channel.display_name &&\n                <span\n                    className='style--none sidebar--right__title__subtitle'\n                >\n                    {isArchived && (<Icon className='icon icon-archive-outline'/>)}\n                    {channel.display_name}\n                </span>\n                }\n            </span>\n\n            <WithTooltip\n                id='closeSidebarTooltip'\n                placement='top'\n                title={\n                    <FormattedMessage\n                        id='rhs_header.closeSidebarTooltip'\n                        defaultMessage='Close'\n                    />\n                }\n            >\n                <button\n                    id='rhsCloseButton'\n                    type='button'\n                    className='sidebar--right__close btn btn-icon btn-sm'\n                    aria-label={formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                    onClick={onClose}\n                >\n                    <i\n                        className='icon icon-close'\n                    />\n                </button>\n            </WithTooltip>\n        </div>\n    );\n};\n\nexport default Header;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel, ChannelStats} from '@mattermost/types/channels';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport {Constants} from 'utils/constants';\n\nconst MenuItemContainer = styled.div`\n    padding: 8px 16px;\n    flex: 1;\n    display: flex;\n`;\n\nconst Icon = styled.div`\n    color: rgba(var(--center-channel-color-rgb), var(--icon-opacity));\n`;\n\nconst MenuItemText = styled.div`\n    padding-left: 8px;\n    flex: 1;\n`;\n\nconst RightSide = styled.div`\n    display: flex;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n`;\n\nconst Badge = styled.div`\n    font-size: 12px;\n    line-height: 18px;\n    width: 20px;\n    display: flex;\n    place-content: center;\n`;\n\ninterface MenuItemProps {\n    className?: string;\n    icon: JSX.Element;\n    text: string;\n    opensSubpanel?: boolean;\n    badge?: string|number|JSX.Element;\n    onClick: () => void;\n}\n\nconst menuItem = ({icon, text, className, opensSubpanel, badge, onClick}: MenuItemProps) => {\n    const hasRightSide = (badge !== undefined) || opensSubpanel;\n\n    return (\n        <div className={className}>\n            <MenuItemContainer onClick={onClick}>\n                <Icon>{icon}</Icon>\n                <MenuItemText>\n                    {text}\n                </MenuItemText>\n\n                {hasRightSide && (\n                    <RightSide>\n                        {badge !== undefined && (\n                            <Badge>{badge}</Badge>\n                        )}\n                        {opensSubpanel && (\n                            <Icon><i className='icon icon-chevron-right'/></Icon>\n                        )}\n                    </RightSide>\n                )}\n            </MenuItemContainer>\n        </div>\n    );\n};\n\nconst MenuItem = styled(menuItem)`\n    display: flex;\n    width: 100%;\n    height: 40px;\n    flex-direction: row;\n    align-items: center;\n    cursor: pointer;\n\n    &:hover {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n\n        ${Icon} {\n            color: rgba(var(--center-channel-color-rgb), var(--icon-opacity-hover));\n        }\n    }\n`;\n\ninterface MenuProps {\n    channel: Channel;\n    channelStats: ChannelStats;\n    isArchived: boolean;\n\n    className?: string;\n\n    actions: {\n        openNotificationSettings: () => void;\n        showChannelFiles: (channelId: string) => void;\n        showPinnedPosts: (channelId: string | undefined) => void;\n        showChannelMembers: (channelId: string) => void;\n        getChannelStats: (channelId: string, includeFileCount: boolean) => Promise<{data: ChannelStats}>;\n    };\n}\n\nconst Menu = ({channel, channelStats, isArchived, className, actions}: MenuProps) => {\n    const {formatMessage} = useIntl();\n    const [loadingStats, setLoadingStats] = useState(true);\n\n    const showNotificationPreferences = channel.type !== Constants.DM_CHANNEL && !isArchived;\n    const showMembers = channel.type !== Constants.DM_CHANNEL;\n    const fileCount = channelStats?.files_count >= 0 ? channelStats?.files_count : 0;\n\n    useEffect(() => {\n        actions.getChannelStats(channel.id, true).then(() => {\n            setLoadingStats(false);\n        });\n        return () => {\n            setLoadingStats(true);\n        };\n    }, [channel.id]);\n\n    return (\n        <div\n            className={className}\n            data-testid='channel_info_rhs-menu'\n        >\n            {showNotificationPreferences && (\n                <MenuItem\n                    icon={<i className='icon icon-bell-outline'/>}\n                    text={formatMessage({id: 'channel_info_rhs.menu.notification_preferences', defaultMessage: 'Notification Preferences'})}\n                    onClick={actions.openNotificationSettings}\n                />\n            )}\n            {showMembers && (\n                <MenuItem\n                    icon={<i className='icon icon-account-outline'/>}\n                    text={formatMessage({id: 'channel_info_rhs.menu.members', defaultMessage: 'Members'})}\n                    opensSubpanel={true}\n                    badge={channelStats.member_count}\n                    onClick={() => actions.showChannelMembers(channel.id)}\n                />\n            )}\n            <MenuItem\n                icon={<i className='icon icon-pin-outline'/>}\n                text={formatMessage({id: 'channel_info_rhs.menu.pinned', defaultMessage: 'Pinned messages'})}\n                opensSubpanel={true}\n                badge={channelStats?.pinnedpost_count}\n                onClick={() => actions.showPinnedPosts(channel.id)}\n            />\n            <MenuItem\n                icon={<i className='icon icon-file-text-outline'/>}\n                text={formatMessage({id: 'channel_info_rhs.menu.files', defaultMessage: 'Files'})}\n                opensSubpanel={true}\n                badge={loadingStats ? <LoadingSpinner/> : fileCount}\n                onClick={() => actions.showChannelFiles(channel.id)}\n            />\n        </div>\n    );\n};\n\nconst StyledMenu = styled(Menu)`\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    padding: 16px 0;\n\n    font-size: 14px;\n    line-height: 20px;\n    color: rgb(var(--center-channel-color-rgb));\n`;\n\nexport default StyledMenu;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl, FormattedMessage} from 'react-intl';\nimport styled from 'styled-components';\n\nimport useCopyText from 'components/common/hooks/useCopyText';\n\nimport Constants from 'utils/constants';\n\nconst ChannelInfoRhsTopButtons = styled.div`\n    display: flex;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    margin-top: 24px;\n    padding: 0 18px;\n`;\n\nconst Button = styled.button`\n    flex: 1;\n    padding: 12px 0 10px 0;\n    border: 0;\n    margin: 0 6px;\n    background: rgba(var(--center-channel-color-rgb), 0.04);\n    border-radius: 4px;\n\n    &:hover {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n        color: rgba(var(--center-channel-color-rgb), 0.8);\n\n        & i {\n            color: rgba(var(--center-channel-color-rgb), var(--icon-opacity-hover));\n        }\n    }\n\n    &:active,\n    &.active {\n        background: rgba(var(--button-bg-rgb), 0.08);\n        color: var(--button-bg);\n\n        & i {\n            color: var(--button-bg-rgb);\n        }\n    }\n\n    & i {\n        color: rgba(var(--center-channel-color-rgb), var(--icon-opacity));\n        font-size: 24px;\n    }\n\n    & span {\n        font-size: 10px;\n        font-weight: 600;\n        line-height: 16px;\n    }\n`;\n\nconst CopyButton = styled(Button)`\n    transition: background-color 0.5s ease;\n\n    &:active,\n    &.active {\n        background: rgba(var(--center-channel-color-rgb), 0.08);\n        color: rgba(var(--center-channel-color-rgb), 0.75);\n        transition: none;\n    }\n\n    &.success {\n        background: var(--denim-status-online);\n        color: var(--button-color);\n    }\n`;\n\nexport interface Props {\n    channelType: string;\n    channelURL?: string;\n\n    isFavorite: boolean;\n    isMuted: boolean;\n    isInvitingPeople: boolean;\n\n    canAddPeople: boolean;\n\n    actions: {\n        toggleFavorite: () => void;\n        toggleMute: () => void;\n        addPeople: () => void;\n    };\n}\n\nexport default function TopButtons({\n    channelType,\n    channelURL,\n    isFavorite,\n    isMuted,\n    isInvitingPeople,\n    canAddPeople: propsCanAddPeople,\n    actions,\n}: Props) {\n    const {formatMessage} = useIntl();\n\n    const copyLink = useCopyText({\n        text: channelURL || '',\n        successCopyTimeout: 1000,\n    });\n\n    const canAddPeople = ([Constants.OPEN_CHANNEL, Constants.PRIVATE_CHANNEL].includes(channelType) && propsCanAddPeople) || channelType === Constants.GM_CHANNEL;\n\n    const canCopyLink = [Constants.OPEN_CHANNEL, Constants.PRIVATE_CHANNEL].includes(channelType);\n\n    // Favorite Button State\n    const favoriteIcon = isFavorite ? 'icon-star' : 'icon-star-outline';\n    const favoriteText = isFavorite ? formatMessage({id: 'channel_info_rhs.top_buttons.favorited', defaultMessage: 'Favorited'}) : formatMessage({id: 'channel_info_rhs.top_buttons.favorite', defaultMessage: 'Favorite'});\n\n    // Mute Button State\n    const mutedIcon = isMuted ? 'icon-bell-off-outline' : 'icon-bell-outline';\n    const mutedText = isMuted ? formatMessage({id: 'channel_info_rhs.top_buttons.muted', defaultMessage: 'Muted'}) : formatMessage({id: 'channel_info_rhs.top_buttons.mute', defaultMessage: 'Mute'});\n\n    // Copy Button State\n    const copyIcon = copyLink.copiedRecently ? 'icon-check' : 'icon-link-variant';\n    const copyText = copyLink.copiedRecently ? formatMessage({id: 'channel_info_rhs.top_buttons.copied', defaultMessage: 'Copied'}) : formatMessage({id: 'channel_info_rhs.top_buttons.copy', defaultMessage: 'Copy Link'});\n\n    return (\n        <ChannelInfoRhsTopButtons>\n            <Button\n                onClick={actions.toggleFavorite}\n                className={isFavorite ? 'active' : ''}\n            >\n                <div>\n                    <i className={'icon ' + favoriteIcon}/>\n                </div>\n                <span>{favoriteText}</span>\n            </Button>\n            <Button\n                onClick={actions.toggleMute}\n                className={isMuted ? 'active' : ''}\n            >\n                <div>\n                    <i className={'icon ' + mutedIcon}/>\n                </div>\n                <span>{mutedText}</span>\n            </Button>\n            {canAddPeople && (\n                <Button\n                    onClick={actions.addPeople}\n                    className={isInvitingPeople ? 'active' : ''}\n                >\n                    <div>\n                        <i className='icon icon-account-plus-outline'/>\n                    </div>\n                    <span>\n                        <FormattedMessage\n                            id='channel_info_rhs.top_buttons.add_people'\n                            defaultMessage='Add People'\n                        />\n                    </span>\n                </Button>\n            )}\n            {canCopyLink && (\n                <CopyButton\n                    onClick={copyLink.onClick}\n                    className={copyLink.copiedRecently ? 'success' : ''}\n                >\n                    <div>\n                        <i className={'icon ' + copyIcon}/>\n                    </div>\n                    <span>{copyText}</span>\n                </CopyButton>\n            )}\n        </ChannelInfoRhsTopButtons>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport styled from 'styled-components';\n\nimport type {Channel, ChannelStats} from '@mattermost/types/channels';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelNotificationsModal from 'components/channel_notifications_modal';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport EditChannelPurposeModal from 'components/edit_channel_purpose_modal';\nimport MoreDirectChannels from 'components/more_direct_channels';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\n\nimport type {ModalData} from 'types/actions';\n\nimport AboutArea from './about_area';\nimport Header from './header';\nimport Menu from './menu';\nimport TopButtons from './top_buttons';\n\nconst Divider = styled.div`\n    width: 88%;\n    border: 1px solid rgba(var(--center-channel-color-rgb), 0.04);\n    margin: 0 auto;\n`;\n\nexport interface DMUser {\n    user: UserProfile;\n    display_name: string;\n    is_guest: boolean;\n    status: string;\n}\n\nexport interface Props {\n    channel: Channel;\n    channelStats: ChannelStats;\n    currentUser: UserProfile;\n    currentTeam: Team;\n\n    isArchived: boolean;\n    isFavorite: boolean;\n    isMuted: boolean;\n    isInvitingPeople: boolean;\n    isMobile: boolean;\n\n    canManageMembers: boolean;\n    canManageProperties: boolean;\n\n    dmUser?: DMUser;\n    channelMembers: UserProfile[];\n\n    actions: {\n        closeRightHandSide: () => void;\n        unfavoriteChannel: (channelId: string) => void;\n        favoriteChannel: (channelId: string) => void;\n        unmuteChannel: (userId: string, channelId: string) => void;\n        muteChannel: (userId: string, channelId: string) => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n        showChannelFiles: (channelId: string) => void;\n        showPinnedPosts: (channelId: string | undefined) => void;\n        showChannelMembers: (channelId: string) => void;\n        getChannelStats: (channelId: string) => Promise<{data: ChannelStats}>;\n    };\n}\n\nconst ChannelInfoRhs = ({\n    channel,\n    channelStats,\n    isArchived,\n    isFavorite,\n    isMuted,\n    isInvitingPeople,\n    isMobile,\n    currentTeam,\n    currentUser,\n    dmUser,\n    channelMembers,\n    canManageMembers,\n    canManageProperties,\n    actions,\n}: Props) => {\n    const currentUserId = currentUser.id;\n    const channelURL = getSiteURL() + '/' + currentTeam.name + '/channels/' + channel.name;\n\n    const toggleFavorite = () => {\n        if (isFavorite) {\n            actions.unfavoriteChannel(channel.id);\n            return;\n        }\n        actions.favoriteChannel(channel.id);\n    };\n\n    const toggleMute = () => {\n        if (isMuted) {\n            actions.unmuteChannel(currentUserId, channel.id);\n            return;\n        }\n        actions.muteChannel(currentUserId, channel.id);\n    };\n\n    const addPeople = () => {\n        if (channel.type === Constants.GM_CHANNEL) {\n            return actions.openModal({\n                modalId: ModalIdentifiers.CREATE_DM_CHANNEL,\n                dialogType: MoreDirectChannels,\n                dialogProps: {isExistingChannel: true},\n            });\n        }\n\n        return actions.openModal({\n            modalId: ModalIdentifiers.CHANNEL_INVITE,\n            dialogType: ChannelInviteModal,\n            dialogProps: {channel},\n        });\n    };\n\n    const editChannelPurpose = () => actions.openModal({\n        modalId: ModalIdentifiers.EDIT_CHANNEL_PURPOSE,\n        dialogType: EditChannelPurposeModal,\n        dialogProps: {channel},\n    });\n\n    const editChannelHeader = () => actions.openModal({\n        modalId: ModalIdentifiers.EDIT_CHANNEL_HEADER,\n        dialogType: EditChannelHeaderModal,\n        dialogProps: {channel},\n    });\n\n    const openNotificationSettings = () => actions.openModal({\n        modalId: ModalIdentifiers.CHANNEL_NOTIFICATIONS,\n        dialogType: ChannelNotificationsModal,\n        dialogProps: {channel, currentUser},\n    });\n\n    const gmUsers = channelMembers.filter((user) => {\n        return user.id !== currentUser.id;\n    });\n\n    const canEditChannelProperties = !isArchived && canManageProperties;\n\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body'\n        >\n            <Header\n                channel={channel}\n                isArchived={isArchived}\n                isMobile={isMobile}\n                onClose={actions.closeRightHandSide}\n            />\n\n            <TopButtons\n                channelType={channel.type}\n                channelURL={channelURL}\n\n                isFavorite={isFavorite}\n                isMuted={isMuted}\n                isInvitingPeople={isInvitingPeople}\n\n                canAddPeople={canManageMembers}\n\n                actions={{toggleFavorite, toggleMute, addPeople}}\n            />\n\n            <AboutArea\n                channel={channel}\n\n                dmUser={dmUser}\n                gmUsers={gmUsers}\n\n                canEditChannelProperties={canEditChannelProperties}\n\n                actions={{\n                    editChannelHeader,\n                    editChannelPurpose,\n                }}\n            />\n\n            <Divider/>\n\n            <Menu\n                channel={channel}\n                channelStats={channelStats}\n                isArchived={isArchived}\n                actions={{\n                    openNotificationSettings,\n                    showChannelFiles: actions.showChannelFiles,\n                    showPinnedPosts: actions.showPinnedPosts,\n                    showChannelMembers: actions.showChannelMembers,\n                    getChannelStats: actions.getChannelStats,\n                }}\n            />\n        </div>\n    );\n};\n\nexport default memo(ChannelInfoRhs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport {unfavoriteChannel, favoriteChannel, getChannelStats} from 'mattermost-redux/actions/channels';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {getCurrentChannel, isCurrentChannelFavorite, isCurrentChannelMuted, isCurrentChannelArchived, getCurrentChannelStats} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/common';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {getProfilesInCurrentChannel, getStatusForUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport {muteChannel, unmuteChannel} from 'actions/channel_actions';\nimport {openModal} from 'actions/views/modals';\nimport {closeRightHandSide, showChannelFiles, showChannelMembers, showPinnedPosts} from 'actions/views/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {getDisplayNameByUser, getUserIdFromChannelId} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport RHS from './channel_info_rhs';\nimport type {Props} from './channel_info_rhs';\n\nconst EMPTY_CHANNEL_STATS = {\n    member_count: 0,\n    guest_count: 0,\n    pinnedpost_count: 0,\n    files_count: 0,\n};\n\nfunction mapStateToProps(state: GlobalState) {\n    const channel = getCurrentChannel(state);\n    const currentUser = getCurrentUser(state);\n    const currentTeam = getCurrentTeam(state);\n    const channelStats = getCurrentChannelStats(state) || EMPTY_CHANNEL_STATS;\n    const isArchived = isCurrentChannelArchived(state);\n    const isFavorite = isCurrentChannelFavorite(state);\n    const isMuted = isCurrentChannelMuted(state);\n    const isInvitingPeople = isModalOpen(state, ModalIdentifiers.CHANNEL_INVITE) || isModalOpen(state, ModalIdentifiers.CREATE_DM_CHANNEL);\n    const isMobile = getIsMobileView(state);\n\n    const isPrivate = channel?.type === Constants.PRIVATE_CHANNEL;\n    const canManageMembers = haveIChannelPermission(state, currentTeam?.id, channel?.id, isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS);\n    const canManageProperties = haveIChannelPermission(state, currentTeam?.id, channel?.id, isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES);\n\n    const channelMembers = getProfilesInCurrentChannel(state);\n\n    const props = {\n        channel,\n        currentUser,\n        currentTeam,\n        isArchived,\n        isFavorite,\n        isMuted,\n        isInvitingPeople,\n        isMobile,\n        canManageMembers,\n        canManageProperties,\n        channelStats,\n        channelMembers,\n    } as Props;\n\n    if (channel?.type === Constants.DM_CHANNEL) {\n        const user = getUser(state, getUserIdFromChannelId(channel.name, currentUser.id));\n        props.dmUser = {\n            user,\n            display_name: getDisplayNameByUser(state, user),\n            is_guest: isGuest(user.roles),\n            status: getStatusForUserId(state, user.id),\n        };\n    }\n\n    return props;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            closeRightHandSide,\n            unfavoriteChannel,\n            favoriteChannel,\n            unmuteChannel,\n            muteChannel,\n            openModal,\n            showChannelFiles,\n            showPinnedPosts,\n            showChannelMembers,\n            getChannelStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RHS);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport styled from 'styled-components';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nconst Title = styled.div`\n    flex:1;\n    font-family: 'Open Sans', sans-serif;\n    font-weight: 600;\n    font-size: 14px;\n    line-height: 20px;\n`;\n\nconst Actions = styled.div`\n    button + button {\n        margin-left: 8px;\n    }\n`;\n\nconst Button = styled.button`\n    border: none;\n    background: transparent;\n    width: fit-content;\n    padding: 8px 16px;\n    border-radius: 4px;\n    font-size: 12px;\n    font-weight: 600;\n    line-height: 16px;\n    &.add-members, &.manage-members-done {\n        background-color: var(--button-bg);\n        color: var(--button-color);\n        &:hover, &:active, &:focus {\n            background: linear-gradient(0deg, rgba(var(--center-channel-color-rgb), 0.16), rgba(var(--center-channel-color-rgb), 0.16)), var(--button-bg);\n            color: var(--button-color);\n        }\n    }\n    &.manage-members {\n        background: rgba(var(--button-bg-rgb),0.08);\n        color: var(--button-bg);\n        &:hover, &:focus {\n            background: rgba(var(--button-bg-rgb),0.12);\n        }\n        &:active {\n            background: rgba(var(--button-bg-rgb),0.16);\n        }\n    }\n`;\n\nconst ButtonIcon = styled.i`\n    font-size: 14.4px;\n`;\n\nexport interface Props {\n    className?: string;\n    channelType: string;\n    membersCount: number;\n    canManageMembers: boolean;\n    editing: boolean;\n    actions: {\n        startEditing: () => void;\n        stopEditing: () => void;\n        inviteMembers: () => void;\n    };\n}\n\nconst ActionBar = ({className, channelType, membersCount, canManageMembers, editing, actions}: Props) => {\n    const showManageButton = channelType !== Constants.GM_CHANNEL && membersCount > 1;\n\n    const handleShortcut = useCallback((e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && editing) {\n            actions.stopEditing();\n        }\n    }, [editing, actions]);\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleShortcut);\n        return () => {\n            document.removeEventListener('keydown', handleShortcut);\n        };\n    }, [handleShortcut]);\n\n    return (\n        <div className={className}>\n            <Title>\n                {editing ? (\n                    <FormattedMessage\n                        id='channel_members_rhs.action_bar.managing_title'\n                        defaultMessage='Managing Members'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='channel_members_rhs.action_bar.members_count_title'\n                        defaultMessage='{members_count} members'\n                        values={{members_count: membersCount}}\n                    />\n                )}\n\n            </Title>\n\n            {canManageMembers && (\n                <Actions>\n                    {editing ? (\n                        <Button\n                            onClick={actions.stopEditing}\n                            className='manage-members-done'\n                        >\n                            <FormattedMessage\n                                id='channel_members_rhs.action_bar.done_button'\n                                defaultMessage='Done'\n                            />\n                        </Button>\n                    ) : (\n                        <>\n                            {showManageButton && (\n                                <Button\n                                    className='manage-members'\n                                    onClick={actions.startEditing}\n                                >\n                                    <FormattedMessage\n                                        id='channel_members_rhs.action_bar.manage_button'\n                                        defaultMessage='Manage'\n                                    />\n                                </Button>\n                            )}\n                            <Button\n                                onClick={actions.inviteMembers}\n                                className='add-members'\n                            >\n                                <ButtonIcon\n                                    className='icon-account-plus-outline'\n                                    title='Add Icon'\n                                />\n                                <FormattedMessage\n                                    id='channel_members_rhs.action_bar.add_button'\n                                    defaultMessage='Add'\n                                />\n                            </Button>\n                        </>\n                    )}\n\n                </Actions>\n            )}\n        </div>\n    );\n};\n\nexport default styled(ActionBar)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: 16px 20px;\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport WithTooltip from 'components/with_tooltip';\n\ninterface Props {\n    channel: Channel;\n    canGoBack: boolean;\n\n    onClose: () => void;\n    goBack: () => void;\n}\n\nconst HeaderTitle = styled.span`\n    line-height: 2.4rem;\n`;\n\nconst Header = ({channel, canGoBack, onClose, goBack}: Props) => {\n    const {formatMessage} = useIntl();\n\n    return (\n        <div className='sidebar--right__header'>\n            <span className='sidebar--right__title'>\n\n                {canGoBack && (\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={goBack}\n                        aria-label={formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i\n                            className='icon icon-arrow-back-ios'\n                        />\n                    </button>\n                )}\n\n                <HeaderTitle>\n                    <FormattedMessage\n                        id='channel_members_rhs.header.title'\n                        defaultMessage='Members'\n                    />\n                </HeaderTitle>\n\n                {channel.display_name &&\n                    <span\n                        className='style--none sidebar--right__title__subtitle'\n                    >\n                        {channel.display_name}\n                    </span>\n                }\n            </span>\n\n            <WithTooltip\n                id='closeSidebarTooltip'\n                placement='top'\n                title={\n                    <FormattedMessage\n                        id='rhs_header.closeSidebarTooltip'\n                        defaultMessage='Close'\n                    />\n                }\n            >\n                <button\n                    id='rhsCloseButton'\n                    type='button'\n                    className='sidebar--right__close btn btn-icon btn-sm'\n                    aria-label={formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                    onClick={onClose}\n                >\n                    <i\n                        className='icon icon-close'\n                    />\n                </button>\n            </WithTooltip>\n        </div>\n    );\n};\n\nexport default Header;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\nimport styled from 'styled-components';\n\nimport Input from 'components/widgets/inputs/input/input';\n\ninterface Props {\n    className?: string;\n    terms: string;\n    onInput: (terms: string) => void;\n}\n\nconst SearchBar = ({className, terms, onInput}: Props) => {\n    const {formatMessage} = useIntl();\n\n    let inputSuffix;\n    if (terms.length > 0) {\n        inputSuffix = (\n            <button\n                className='style--none'\n                onClick={() => onInput('')}\n                aria-label={formatMessage({\n                    id: 'channel_members_rhs.search_bar.aria.cancel_search_button',\n                    defaultMessage: 'cancel members search',\n                })}\n            >\n                <i className={'icon icon-close-circle'}/>\n            </button>\n        );\n    }\n\n    return (\n        <div className={className}>\n            <Input\n                data-testid='channel-member-rhs-search'\n                value={terms}\n                onInput={(e) => onInput(e.currentTarget.value)}\n                inputPrefix={<i className={'icon icon-magnify'}/>}\n                inputSuffix={inputSuffix}\n                placeholder={formatMessage({\n                    id: 'channel_members_rhs.search_bar.placeholder',\n                    defaultMessage: 'Search members',\n                })}\n                useLegend={false}\n            />\n        </div>\n    );\n};\n\nexport default styled(SearchBar)`\n    display: flex;\n    padding: 0px 20px 12px;\n\n    .Input_container .Input_wrapper {\n        padding: 0 8px;\n    }\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport debounce from 'lodash/debounce';\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useHistory} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {ProfilesInChannelSortBy} from 'mattermost-redux/actions/users';\n\nimport AlertBanner from 'components/alert_banner';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ExternalLink from 'components/external_link';\nimport MoreDirectChannels from 'components/more_direct_channels';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport type {ModalData} from 'types/actions';\n\nimport ActionBar from './action_bar';\nimport Header from './header';\nimport MemberList from './member_list';\nimport SearchBar from './search';\n\nconst USERS_PER_PAGE = 100;\nexport interface ChannelMember {\n    user: UserProfile;\n    membership?: ChannelMembership;\n    status?: string;\n    displayName: string;\n}\n\nconst MembersContainer = styled.div`\n    flex: 1 1 auto;\n    padding: 0 4px 16px;\n`;\n\nexport interface Props {\n    channel: Channel;\n    currentUserIsChannelAdmin: boolean;\n    membersCount: number;\n    searchTerms: string;\n    canGoBack: boolean;\n    teamUrl: string;\n    channelMembers: ChannelMember[];\n    canManageMembers: boolean;\n    editing: boolean;\n\n    actions: {\n        openModal: <P>(modalData: ModalData<P>) => void;\n        openDirectChannelToUserId: (userId: string) => Promise<{data: Channel}>;\n        closeRightHandSide: () => void;\n        goBack: () => void;\n        setChannelMembersRhsSearchTerm: (terms: string) => void;\n        loadProfilesAndReloadChannelMembers: (page: number, perParge: number, channelId: string, sort: string) => void;\n        loadMyChannelMemberAndRole: (channelId: string) => void;\n        setEditChannelMembers: (active: boolean) => void;\n        searchProfilesAndChannelMembers: (term: string, options: any) => Promise<{data: UserProfile[]}>;\n    };\n}\n\nexport enum ListItemType {\n    Member = 'member',\n    FirstSeparator = 'first-separator',\n    Separator = 'separator',\n}\n\nexport interface ListItem {\n    type: ListItemType;\n    data: ChannelMember | JSX.Element;\n}\n\nexport default function ChannelMembersRHS({\n    channel,\n    currentUserIsChannelAdmin,\n    searchTerms,\n    membersCount,\n    canGoBack,\n    teamUrl,\n    channelMembers,\n    canManageMembers,\n    editing = false,\n    actions,\n}: Props) {\n    const history = useHistory();\n\n    const [list, setList] = useState<ListItem[]>([]);\n\n    const [page, setPage] = useState(0);\n    const [isNextPageLoading, setIsNextPageLoading] = useState(false);\n    const {formatMessage} = useIntl();\n\n    const searching = searchTerms !== '';\n\n    const isDefaultChannel = channel.name === Constants.DEFAULT_CHANNEL;\n\n    // show search if there's more than 20 or if the user have an active search.\n    const showSearch = searching || membersCount >= 20;\n\n    useEffect(() => {\n        return () => {\n            actions.setChannelMembersRhsSearchTerm('');\n        };\n    }, []);\n\n    useEffect(() => {\n        const listcp: ListItem[] = [];\n        let memberDone = false;\n\n        for (let i = 0; i < channelMembers.length; i++) {\n            const member = channelMembers[i];\n            if (listcp.length === 0) {\n                let text = null;\n                if (member.membership?.scheme_admin === true) {\n                    text = (\n                        <FormattedMessage\n                            id='channel_members_rhs.list.channel_admin_title'\n                            defaultMessage='CHANNEL ADMINS'\n                        />\n                    );\n                } else {\n                    text = (\n                        <FormattedMessage\n                            id='channel_members_rhs.list.channel_members_title'\n                            defaultMessage='MEMBERS'\n                        />\n                    );\n                    memberDone = true;\n                }\n\n                listcp.push({\n                    type: ListItemType.FirstSeparator,\n                    data: <FirstMemberListSeparator>{text}</FirstMemberListSeparator>,\n                });\n            } else if (!memberDone && member.membership?.scheme_admin === false) {\n                listcp.push({\n                    type: ListItemType.Separator,\n                    data: <MemberListSeparator>\n                        <FormattedMessage\n                            id='channel_members_rhs.list.channel_members_title'\n                            defaultMessage='MEMBERS'\n                        />\n                    </MemberListSeparator>,\n                });\n                memberDone = true;\n            }\n\n            listcp.push({type: ListItemType.Member, data: member});\n        }\n        if (JSON.stringify(list) !== JSON.stringify(listcp)) {\n            setList(listcp);\n        }\n    }, [channelMembers]);\n\n    useEffect(() => {\n        if (channel.type === Constants.DM_CHANNEL) {\n            let rhsAction = actions.closeRightHandSide;\n            if (canGoBack) {\n                rhsAction = actions.goBack;\n            }\n            rhsAction();\n            return;\n        }\n\n        setPage(0);\n        setIsNextPageLoading(false);\n        actions.setChannelMembersRhsSearchTerm('');\n        actions.loadProfilesAndReloadChannelMembers(0, USERS_PER_PAGE, channel.id, ProfilesInChannelSortBy.Admin);\n        actions.loadMyChannelMemberAndRole(channel.id);\n    }, [channel.id, channel.type]);\n\n    const setSearchTerms = async (terms: string) => {\n        actions.setChannelMembersRhsSearchTerm(terms);\n    };\n\n    const doSearch = useCallback(debounce(async (terms: string) => {\n        await actions.searchProfilesAndChannelMembers(terms, {in_team_id: channel.team_id, in_channel_id: channel.id});\n    }, Constants.SEARCH_TIMEOUT_MILLISECONDS), [actions.searchProfilesAndChannelMembers]);\n\n    useEffect(() => {\n        if (searchTerms) {\n            doSearch(searchTerms);\n        }\n    }, [searchTerms]);\n\n    const inviteMembers = () => {\n        if (channel.type === Constants.GM_CHANNEL) {\n            return actions.openModal({\n                modalId: ModalIdentifiers.CREATE_DM_CHANNEL,\n                dialogType: MoreDirectChannels,\n                dialogProps: {isExistingChannel: true},\n            });\n        }\n\n        return actions.openModal({\n            modalId: ModalIdentifiers.CHANNEL_INVITE,\n            dialogType: ChannelInviteModal,\n            dialogProps: {channel},\n        });\n    };\n\n    const openDirectMessage = useCallback(async (user: UserProfile) => {\n        // we first prepare the DM channel...\n        await actions.openDirectChannelToUserId(user.id);\n\n        // ... and then redirect to it\n        history.push(teamUrl + '/messages/@' + user.username);\n\n        await actions.closeRightHandSide();\n    }, [actions.openDirectChannelToUserId, history, teamUrl, actions.closeRightHandSide]);\n\n    const loadMore = useCallback(async () => {\n        setIsNextPageLoading(true);\n\n        await actions.loadProfilesAndReloadChannelMembers(page + 1, USERS_PER_PAGE, channel.id, ProfilesInChannelSortBy.Admin);\n        setPage(page + 1);\n\n        setIsNextPageLoading(false);\n    }, [actions.loadProfilesAndReloadChannelMembers, page, channel.id],\n    );\n\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body'\n        >\n\n            <Header\n                channel={channel}\n                canGoBack={canGoBack}\n                onClose={actions.closeRightHandSide}\n                goBack={actions.goBack}\n            />\n\n            <ActionBar\n                channelType={channel.type}\n                membersCount={membersCount}\n                canManageMembers={canManageMembers}\n                editing={editing}\n                actions={{\n                    startEditing: () => actions.setEditChannelMembers(true),\n                    stopEditing: () => actions.setEditChannelMembers(false),\n                    inviteMembers,\n                }}\n            />\n\n            {/* Users with user management permissions have special restrictions in the default channel */}\n            {(editing && isDefaultChannel && !currentUserIsChannelAdmin) && (\n                <AlertContainer>\n                    <AlertBanner\n                        mode='info'\n                        variant='app'\n                        message={formatMessage({\n                            id: 'channel_members_rhs.default_channel_moderation_restrictions',\n                            defaultMessage: 'In this channel, you can only remove guests. Only <link>channel admins</link> can manage other members.',\n                        }, {\n                            link: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='https://docs.mattermost.com/welcome/about-user-roles.html#channel-admin'\n                                    location='channel_members_rhs'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        })}\n                    />\n                </AlertContainer>\n            )}\n\n            {showSearch && (\n                <SearchBar\n                    terms={searchTerms}\n                    onInput={setSearchTerms}\n                />\n            )}\n\n            <MembersContainer>\n                {channelMembers.length > 0 && (\n                    <MemberList\n                        searchTerms={searchTerms}\n                        members={list}\n                        editing={editing}\n                        channel={channel}\n                        openDirectMessage={openDirectMessage}\n                        loadMore={loadMore}\n                        hasNextPage={channelMembers.length < membersCount}\n                        isNextPageLoading={isNextPageLoading}\n                    />\n                )}\n            </MembersContainer>\n        </div>\n    );\n}\n\nconst MemberListSeparator = styled.div`\n    font-weight: 600;\n    font-size: 12px;\n    line-height: 28px;\n    letter-spacing: 0.02em;\n    text-transform: uppercase;\n    padding: 0px 12px;\n    color: rgba(var(--center-channel-color-rgb), 0.75);\n    margin-top: 16px;\n`;\n\nconst FirstMemberListSeparator = styled(MemberListSeparator)`\n    margin-top: 0px;\n`;\n\nconst AlertContainer = styled.div`\n    padding: 0 20px 15px;\n`;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\nimport type {RelationOneToOne} from '@mattermost/types/utilities';\n\nimport {loadMyChannelMemberAndRole} from 'mattermost-redux/actions/channels';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {\n    getCurrentChannel,\n    getCurrentChannelStats,\n    getMembersInCurrentChannel,\n    getMyCurrentChannelMembership,\n    isCurrentChannelArchived,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {haveIChannelPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getCurrentRelativeTeamUrl, getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getActiveProfilesInCurrentChannelWithoutSorting,\n    getUserStatuses, searchActiveProfilesInCurrentChannel,\n} from 'mattermost-redux/selectors/entities/users';\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {openDirectChannelToUserId} from 'actions/channel_actions';\nimport {loadProfilesAndReloadChannelMembers, searchProfilesAndChannelMembers} from 'actions/user_actions';\nimport {openModal} from 'actions/views/modals';\nimport {closeRightHandSide, goBack, setEditChannelMembers} from 'actions/views/rhs';\nimport {setChannelMembersRhsSearchTerm} from 'actions/views/search';\nimport {getIsEditingMembers, getPreviousRhsState} from 'selectors/rhs';\n\nimport {Constants, RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport RHS from './channel_members_rhs';\nimport type {Props, ChannelMember} from './channel_members_rhs';\n\nconst buildProfileList = (\n    profilesInCurrentChannel: UserProfile[],\n    userStatuses: RelationOneToOne<UserProfile, string>,\n    teammateNameDisplaySetting: string,\n    membersInCurrentChannel: Record<string, ChannelMembership>,\n) => {\n    const channelMembers: ChannelMember[] = [];\n    profilesInCurrentChannel.forEach((profile) => {\n        if (!membersInCurrentChannel[profile.id]) {\n            return;\n        }\n\n        channelMembers.push({\n            user: profile,\n            membership: membersInCurrentChannel[profile.id],\n            status: userStatuses[profile.id],\n            displayName: displayUsername(profile, teammateNameDisplaySetting),\n        });\n    });\n\n    channelMembers.sort((a, b) => {\n        if (a.membership?.scheme_admin === b.membership?.scheme_admin) {\n            return a.displayName.localeCompare(b.displayName);\n        }\n\n        if (a.membership?.scheme_admin === true) {\n            return -1;\n        }\n        return 1;\n    });\n\n    return channelMembers;\n};\n\nconst getProfiles = createSelector(\n    'getProfiles',\n    getActiveProfilesInCurrentChannelWithoutSorting,\n    getUserStatuses,\n    getTeammateNameDisplaySetting,\n    getMembersInCurrentChannel,\n    buildProfileList,\n);\n\nconst searchProfiles = createSelector(\n    'searchProfiles',\n    (state: GlobalState, search: string) => searchActiveProfilesInCurrentChannel(state, search, false),\n    getUserStatuses,\n    getTeammateNameDisplaySetting,\n    getMembersInCurrentChannel,\n    buildProfileList,\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    const channel = getCurrentChannel(state);\n    const currentTeam = getCurrentTeam(state);\n    const currentUser = getMyCurrentChannelMembership(state);\n    const {member_count: membersCount} = getCurrentChannelStats(state) || {member_count: 0};\n\n    if (!channel) {\n        return {\n            channel: {} as Channel,\n            currentUserIsChannelAdmin: false,\n            channelMembers: [],\n            channelAdmins: [],\n            searchTerms: '',\n            membersCount,\n            canManageMembers: false,\n            canGoBack: false,\n            teamUrl: '',\n        } as unknown as Props;\n    }\n\n    const isArchived = isCurrentChannelArchived(state);\n    const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n    const canManageMembers = haveIChannelPermission(\n        state,\n        currentTeam?.id,\n        channel.id,\n        isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS,\n    ) && !isArchived;\n\n    const searchTerms = state.views.search.channelMembersRhsSearch || '';\n\n    let channelMembers: ChannelMember[] = [];\n    if (searchTerms === '') {\n        channelMembers = getProfiles(state);\n    } else {\n        channelMembers = searchProfiles(state, searchTerms.trim());\n    }\n\n    const teamUrl = getCurrentRelativeTeamUrl(state);\n    const prevRhsState = getPreviousRhsState(state);\n    const hasInfoPrevState = prevRhsState === RHSStates.CHANNEL_INFO ||\n        prevRhsState === RHSStates.CHANNEL_FILES ||\n        prevRhsState === RHSStates.PIN;\n\n    const canGoBack = Boolean(hasInfoPrevState);\n    const editing = getIsEditingMembers(state);\n\n    const currentUserIsChannelAdmin = currentUser && currentUser.scheme_admin;\n\n    return {\n        channel,\n        currentUserIsChannelAdmin,\n        membersCount,\n        searchTerms,\n        teamUrl,\n        canGoBack,\n        canManageMembers,\n        channelMembers,\n        editing,\n    } as Props;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            openModal,\n            openDirectChannelToUserId,\n            closeRightHandSide,\n            goBack,\n            setChannelMembersRhsSearchTerm,\n            loadProfilesAndReloadChannelMembers,\n            loadMyChannelMemberAndRole,\n            setEditChannelMembers,\n            searchProfilesAndChannelMembers,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RHS);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {useEffect, useCallback} from 'react';\nimport {useIntl} from 'react-intl';\nimport {CSSTransition} from 'react-transition-group';\n\nimport IconButton from '@mattermost/compass-components/components/icon-button'; // eslint-disable-line no-restricted-imports\n\nimport './info_toast.scss';\n\ntype Props = {\n    content: {\n        icon?: JSX.Element;\n        message: string;\n        undo?: () => void;\n    };\n    className?: string;\n    onExited: () => void;\n}\n\nfunction InfoToast({content, onExited, className}: Props): JSX.Element {\n    const {formatMessage} = useIntl();\n    const closeToast = useCallback(() => {\n        onExited();\n    }, [onExited]);\n\n    const undoTodo = useCallback(() => {\n        content.undo?.();\n        onExited();\n    }, [content.undo, onExited]);\n\n    const toastContainerClassname = classNames('info-toast', className);\n\n    useEffect(() => {\n        const timer = setTimeout(() => {\n            onExited();\n        }, 5000);\n\n        return () => clearTimeout(timer);\n    }, [onExited]);\n\n    return (\n        <CSSTransition\n            in={Boolean(content)}\n            classNames='toast'\n            mountOnEnter={true}\n            unmountOnExit={true}\n            timeout={300}\n            appear={true}\n        >\n            <div className={toastContainerClassname}>\n                {content.icon}\n                <span>{content.message}</span>\n                {content.undo && (\n                    <button\n                        onClick={undoTodo}\n                        className='info-toast__undo'\n                    >\n                        {formatMessage({\n                            id: 'post_info.edit.undo',\n                            defaultMessage: 'Undo',\n                        })}\n                    </button>\n                )}\n                <IconButton\n                    className='info-toast__icon_button'\n                    onClick={closeToast}\n                    icon='close'\n                    size='sm'\n                    inverted={true}\n                />\n            </div>\n        </CSSTransition>\n    );\n}\n\nexport default React.memo(InfoToast);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {defineMessages, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Post} from '@mattermost/types/posts';\n\nimport PostMessageView from 'components/post_view/post_message_view';\n\nconst modalMessages = defineMessages({\n    title: {\n        id: 'post_info.edit.restore',\n        defaultMessage: 'Restore this version',\n    },\n    titleQuestion: {\n        id: 'post_info.edit.restore_question',\n        defaultMessage: 'Restore this version?',\n    },\n});\n\ntype Props = {\n    post: Post;\n    postHeader: JSX.Element;\n    actions: {\n        handleRestore: (post: Post) => void;\n    };\n    onExited: () => void;\n}\n\nconst RestorePostModal = ({post, postHeader, actions, onExited}: Props) => {\n    const {formatMessage} = useIntl();\n    const onHide = () => onExited();\n\n    const handleRestore = async () => {\n        await actions.handleRestore(post);\n        onHide();\n    };\n\n    const modalHeaderText = (\n        <div className='edit-post-history__restore__modal__header'>\n            {formatMessage(modalMessages.titleQuestion)}\n        </div>\n    );\n\n    return (\n        <GenericModal\n            compassDesign={true}\n            onExited={onHide}\n            enforceFocus={false}\n            id='restorePostModal'\n            aria-labelledby='restorePostModalLabel'\n            modalHeaderText={modalHeaderText}\n            handleCancel={onHide}\n            cancelButtonClassName='cancel-button'\n            handleConfirm={handleRestore}\n        >\n            <div className='edit-post-history__restore__modal__content'>\n                {postHeader}\n                <PostMessageView\n                    post={post}\n                    overflowType='ellipsis'\n                    maxHeight={100}\n                    showPostEditedIndicator={false}\n                />\n            </div>\n        </GenericModal>\n    );\n};\n\nexport default memo(RestorePostModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {memo, useCallback, useState} from 'react';\nimport {defineMessages, useIntl} from 'react-intl';\n\nimport IconButton from '@mattermost/compass-components/components/icon-button'; // eslint-disable-line no-restricted-imports\nimport {CheckIcon} from '@mattermost/compass-icons/components';\nimport type {Post} from '@mattermost/types/posts';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport CompassThemeProvider from 'components/compass_theme_provider/compass_theme_provider';\nimport InfoToast from 'components/info_toast/info_toast';\nimport PostAriaLabelDiv from 'components/post_view/post_aria_label_div';\nimport PostMessageContainer from 'components/post_view/post_message_view';\nimport Timestamp, {RelativeRanges} from 'components/timestamp';\nimport UserProfileComponent from 'components/user_profile';\nimport Avatar from 'components/widgets/users/avatar';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {imageURLForUser} from 'utils/utils';\n\nimport RestorePostModal from '../restore_post_modal';\n\nimport type {PropsFromRedux} from './index';\n\nconst DATE_RANGES = [\n    RelativeRanges.TODAY_TITLE_CASE,\n    RelativeRanges.YESTERDAY_TITLE_CASE,\n];\n\nconst itemMessages = defineMessages({\n    helpText: {\n        id: 'post_info.edit.restore',\n        defaultMessage: 'Restore this version',\n    },\n    currentVersionText: {\n        id: 'post_info.edit.current_version',\n        defaultMessage: 'Current Version',\n    },\n    ariaLabelMessage: {\n        id: 'post_info.edit.aria_label',\n        defaultMessage: 'Select to restore an old message.',\n    },\n});\n\nexport type Props = PropsFromRedux & {\n    post: Post;\n    isCurrent?: boolean;\n    theme: Theme;\n}\n\nconst EditedPostItem = ({post, isCurrent = false, postCurrentVersion, theme, actions}: Props) => {\n    const {formatMessage} = useIntl();\n    const [open, setOpen] = useState(isCurrent);\n\n    const openRestorePostModal = useCallback(() => {\n        const restorePostModalData = {\n            modalId: ModalIdentifiers.RESTORE_POST_MODAL,\n            dialogType: RestorePostModal,\n            dialogProps: {\n                post,\n                postHeader,\n                actions: {\n                    handleRestore,\n                },\n            },\n        };\n\n        actions.openModal(restorePostModalData);\n    }, [actions, post]);\n\n    const togglePost = () => setOpen((prevState) => !prevState);\n\n    if (!post) {\n        return null;\n    }\n\n    const showInfoTooltip = () => {\n        const infoToastModalData = {\n            modalId: ModalIdentifiers.INFO_TOAST,\n            dialogType: InfoToast,\n            dialogProps: {\n                content: {\n                    icon: <CheckIcon size={18}/>,\n                    message: 'Restored Message',\n                    undo: handleUndo,\n                },\n            },\n        };\n\n        actions.openModal(infoToastModalData);\n    };\n\n    const handleRestore = async () => {\n        if (!postCurrentVersion || !post || postCurrentVersion.message === post.message) {\n            actions.closeRightHandSide();\n            return;\n        }\n\n        const updatedPost = {\n            message: post.message,\n            id: postCurrentVersion.id,\n            channel_id: postCurrentVersion.channel_id,\n        };\n\n        const result = await actions.editPost(updatedPost as Post);\n        if (result.data) {\n            actions.closeRightHandSide();\n            showInfoTooltip();\n        }\n    };\n\n    const handleUndo = async () => {\n        if (!postCurrentVersion) {\n            actions.closeRightHandSide();\n            return;\n        }\n\n        await actions.editPost(postCurrentVersion);\n    };\n\n    const currentVersionIndicator = isCurrent ? (\n        <div className='edit-post-history__current__indicator'>\n            {formatMessage(itemMessages.currentVersionText)}\n        </div>\n    ) : null;\n\n    const profileSrc = imageURLForUser(post.user_id);\n\n    const overwriteName = post.props ? post.props.override_username : '';\n    const postHeader = (\n        <div className='edit-post-history__header'>\n            <span className='profile-icon'>\n                <Avatar\n                    size={'sm'}\n                    url={profileSrc}\n                    className={'avatar-post-preview'}\n                />\n            </span>\n            <div className={'edit-post-history__header__username'}>\n                <UserProfileComponent\n                    userId={post.user_id}\n                    disablePopover={true}\n                    overwriteName={overwriteName}\n                />\n            </div>\n        </div>\n    );\n\n    const message = (\n        <PostMessageContainer\n            post={post}\n            isRHS={true}\n            showPostEditedIndicator={false}\n        />\n    );\n\n    const messageContainer = (\n        <div className='edit-post-history__content_container'>\n            {postHeader}\n            <div className='post__content'>\n                <div className='search-item-snippet post__body'>\n                    {message}\n                </div>\n            </div>\n        </div>\n    );\n\n    const restoreButton = isCurrent ? null : (\n        <WithTooltip\n            id='editPostRestoreTooltip'\n            placement='left'\n            title={formatMessage(itemMessages.helpText)}\n        >\n            <IconButton\n                className='edit-post-history__icon__button restore-icon'\n                size={'sm'}\n                icon={'restore'}\n                onClick={openRestorePostModal}\n                compact={true}\n                aria-label={formatMessage(itemMessages.ariaLabelMessage)}\n            />\n        </WithTooltip>\n    );\n\n    const postContainerClass = classNames('edit-post-history__container', {'edit-post-history__container__background': open});\n    const timeStampValue = post.edit_at === 0 ? post.create_at : post.edit_at;\n\n    return (\n        <CompassThemeProvider theme={theme}>\n            <div\n                className={postContainerClass}\n                onClick={togglePost}\n            >\n                <PostAriaLabelDiv\n                    className={'a11y__section post'}\n                    id={'searchResult_' + post.id}\n                    post={post}\n                >\n                    <div\n                        className='edit-post-history__title__container'\n                        aria-hidden='true'\n                    >\n                        <div className='edit-post-history__date__badge__container'>\n                            <IconButton\n                                size={'sm'}\n                                icon={open ? 'chevron-down' : 'chevron-right'}\n                                compact={true}\n                                aria-label='Toggle to see an old message.'\n                                className='edit-post-history__icon__button'\n                            />\n                            <span className='edit-post-history__date'>\n                                <Timestamp\n                                    value={timeStampValue}\n                                    ranges={DATE_RANGES}\n                                />\n                            </span>\n                            {currentVersionIndicator}\n                        </div>\n                        {restoreButton}\n                    </div>\n                    {open && messageContainer}\n                </PostAriaLabelDiv>\n            </div>\n        </CompassThemeProvider>\n    );\n};\n\nexport default memo(EditedPostItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {openModal} from 'actions/views/modals';\nimport {editPost} from 'actions/views/posts';\nimport {closeRightHandSide} from 'actions/views/rhs';\nimport {getSelectedPostId} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport EditedPostItem from './edited_post_item';\n\nfunction mapStateToProps(state: GlobalState) {\n    const selectedPostId = getSelectedPostId(state) || '';\n    const theme = getTheme(state);\n\n    return {\n        theme,\n        postCurrentVersion: getPost(state, selectedPostId),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            editPost,\n            closeRightHandSide,\n            openModal,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(EditedPostItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect, useRef, useState} from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getPostEditHistory} from 'mattermost-redux/actions/posts';\n\nimport AlertIcon from 'components/common/svg_images_components/alert_svg';\nimport LoadingScreen from 'components/loading_screen';\nimport SearchResultsHeader from 'components/search_results_header';\n\nimport EditedPostItem from './edited_post_item';\n\nimport type {PropsFromRedux} from './index';\nimport './post_edit_history.scss';\n\nconst renderView = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--view'\n    />\n);\n\nconst renderThumbHorizontal = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--horizontal'\n    />\n);\n\nconst renderThumbVertical = (props: Record<string, unknown>): JSX.Element => (\n    <div\n        {...props}\n        className='scrollbar--vertical'\n    />\n);\n\nconst PostEditHistory = ({\n    channelDisplayName,\n    originalPost,\n}: PropsFromRedux) => {\n    const [postEditHistory, setPostEditHistory] = useState<Post[]>([]);\n    const [hasError, setHasError] = useState<boolean>(false);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const dispatch = useDispatch();\n    const scrollbars = useRef<Scrollbars | null>(null);\n    const {formatMessage} = useIntl();\n    const retrieveErrorHeading = formatMessage({\n        id: 'post_info.edit.history.retrieveError',\n        defaultMessage: 'Unable to load edit history',\n    });\n    const retrieveErrorSubheading = formatMessage({\n        id: 'post_info.edit.history.retrieveErrorVerbose',\n        defaultMessage: 'There was an error loading the history for this message. Check your network connection or try again later.',\n    });\n\n    useEffect(() => {\n        const fetchPostEditHistory = async () => {\n            setIsLoading(true);\n            const result = await dispatch(getPostEditHistory(originalPost.id));\n            if (result.data) {\n                setPostEditHistory(result.data);\n                setHasError(false);\n            } else {\n                setHasError(true);\n                setPostEditHistory([]);\n            }\n            setIsLoading(false);\n        };\n        fetchPostEditHistory();\n        scrollbars.current?.scrollToTop();\n    }, [originalPost, dispatch]);\n\n    useEffect(() => {\n        setPostEditHistory([]);\n        setHasError(false);\n    }, [originalPost.id]);\n\n    const title = formatMessage({\n        id: 'search_header.title_edit.history',\n        defaultMessage: 'Edit History',\n    });\n\n    const errorContainer: JSX.Element = (\n        <div className='edit-post-history__error_container'>\n            <div className='edit-post-history__error_item'>\n                <AlertIcon\n                    width={127}\n                    height={127}\n                />\n                <p className='edit-post-history__error_heading'>\n                    {retrieveErrorHeading}\n                </p>\n                <p className='edit-post-history__error_subheading'>\n                    {retrieveErrorSubheading}\n                </p>\n            </div>\n        </div>\n    );\n\n    if (isLoading && postEditHistory.length === 0) {\n        return (\n            <div\n                id='rhsContainer'\n                className='sidebar-right__body sidebar-right__edit-post-history'\n            >\n                <LoadingScreen\n                    style={{\n                        display: 'grid',\n                        placeContent: 'center',\n                        flex: '1',\n                    }}\n                />\n            </div>\n        );\n    }\n\n    const currentItem = (\n        <EditedPostItem\n            post={originalPost}\n            key={originalPost.id}\n            isCurrent={true}\n        />\n    );\n\n    const postEditItems = [currentItem, ...postEditHistory.map((postEdited) => (\n        <EditedPostItem\n            key={postEdited.id}\n            post={postEdited}\n        />\n    ))];\n\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body sidebar-right__edit-post-history'\n        >\n            <Scrollbars\n                ref={scrollbars}\n                autoHide={true}\n                autoHideTimeout={500}\n                autoHideDuration={500}\n                renderThumbHorizontal={renderThumbHorizontal}\n                renderThumbVertical={renderThumbVertical}\n                renderView={renderView}\n            >\n                <SearchResultsHeader>\n                    {title}\n                    <div className='sidebar--right__title__channel'>{channelDisplayName}</div>\n                </SearchResultsHeader>\n                {hasError ? errorContainer : postEditItems}\n            </Scrollbars>\n        </div>\n    );\n};\n\nexport default memo(PostEditHistory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport {getChannel, getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\n\nimport {getSelectedPostId} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport PostEditHistory from './post_edit_history';\n\nfunction mapStateToProps(state: GlobalState) {\n    const selectedPostId = getSelectedPostId(state) || '';\n    const originalPost = getPost(state, selectedPostId);\n    const channel = getCurrentChannel(state) ?? getChannel(state, originalPost.channel_id);\n    const channelDisplayName = channel?.display_name || '';\n\n    return {\n        channelDisplayName,\n        originalPost,\n    };\n}\n\nconst connector = connect(mapStateToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PostEditHistory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {HTMLAttributes} from 'react';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {getIsRhsExpanded, getRhsSize} from 'selectors/rhs';\n\nimport {CssVarKeyForResizable, RHS_MIN_MAX_WIDTH, ResizeDirection} from '../constants';\nimport ResizableDivider from '../resizable_divider';\nimport {shouldRhsOverlapChannelView} from '../utils';\n\ninterface Props extends HTMLAttributes<'div'> {\n    children: React.ReactNode;\n    rightWidthHolderRef: React.RefObject<HTMLDivElement>;\n}\n\nfunction ResizableRhs({\n    role,\n    children,\n    id,\n    className,\n    rightWidthHolderRef,\n}: Props) {\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const rhsSize = useSelector(getRhsSize);\n    const isRhsExpanded = useSelector(getIsRhsExpanded);\n\n    const [previousRhsExpanded, setPreviousRhsExpanded] = useState(false);\n\n    const defaultWidth = RHS_MIN_MAX_WIDTH[rhsSize].default;\n\n    const shouldRhsOverlap = shouldRhsOverlapChannelView(rhsSize);\n\n    const handleResize = (_: number, cssVarProp: string, cssVarValue: string) => {\n        const rightWidthHolderRefElement = rightWidthHolderRef.current;\n\n        if (!rightWidthHolderRefElement) {\n            return;\n        }\n\n        if (!shouldRhsOverlap) {\n            rightWidthHolderRefElement.style.setProperty(cssVarProp, cssVarValue);\n        }\n    };\n\n    const handleResizeEnd = (_: number, cssVarProp: string) => {\n        const rightWidthHolderRefElement = rightWidthHolderRef.current;\n\n        if (!rightWidthHolderRefElement) {\n            return;\n        }\n\n        rightWidthHolderRefElement.style.removeProperty(cssVarProp);\n    };\n\n    const handleDividerDoubleClick = (_: number, cssVarProp: string) => {\n        handleResizeEnd(_, cssVarProp);\n\n        document.body.classList.add('layout-changing');\n\n        setTimeout(() => {\n            document.body.classList.remove('layout-changing');\n        }, 1000);\n    };\n\n    // If max-width is applied immediately when expanded is collapsed, the transition will not work correctly.\n    useEffect(() => {\n        const containerRefElement = containerRef.current;\n\n        if (!containerRefElement) {\n            return;\n        }\n\n        setPreviousRhsExpanded(isRhsExpanded);\n\n        if (previousRhsExpanded && !isRhsExpanded) {\n            containerRefElement.classList.add('resize-disabled');\n\n            setTimeout(() => {\n                containerRefElement.classList.remove('resize-disabled');\n            }, 1000);\n        }\n    }, [isRhsExpanded]);\n\n    return (\n        <div\n            id={id}\n            className={className}\n            role={role}\n            ref={containerRef}\n        >\n            {children}\n            <ResizableDivider\n                name='rhsResizeHandle'\n                globalCssVar={CssVarKeyForResizable.RHS}\n                defaultWidth={defaultWidth}\n                dir={ResizeDirection.RIGHT}\n                disabled={isRhsExpanded}\n                containerRef={containerRef}\n                onResize={handleResize}\n                onResizeEnd={handleResizeEnd}\n                onDividerDoubleClick={handleDividerDoubleClick}\n            />\n        </div>\n    );\n}\n\nexport default ResizableRhs;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, type IntlShape} from 'react-intl';\n\nimport KeyboardShortcutSequence, {\n    KEYBOARD_SHORTCUTS,\n} from 'components/keyboard_shortcuts/keyboard_shortcuts_sequence';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {RhsState} from 'types/store/rhs';\n\ntype Props = {\n    intl: IntlShape;\n    previousRhsState?: RhsState;\n    isExpanded: boolean;\n    actions: {\n        showMentions: () => void;\n        showSearchResults: () => void;\n        showFlaggedPosts: () => void;\n        showPinnedPosts: () => void;\n        closeRightHandSide: () => void;\n        toggleRhsExpanded: () => void;\n    };\n};\n\nclass RhsCardHeader extends React.PureComponent<Props> {\n    handleBack = (e: React.MouseEvent<HTMLButtonElement>): void => {\n        e.preventDefault();\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.CHANNEL_FILES:\n            this.props.actions.showSearchResults();\n            break;\n        case RHSStates.SEARCH:\n            this.props.actions.showSearchResults();\n            break;\n        case RHSStates.MENTION:\n            this.props.actions.showMentions();\n            break;\n        case RHSStates.FLAG:\n            this.props.actions.showFlaggedPosts();\n            break;\n        case RHSStates.PIN:\n            this.props.actions.showPinnedPosts();\n            break;\n        default:\n            break;\n        }\n    };\n\n    render(): React.ReactNode {\n        let back;\n        let title;\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n            title = (\n                <FormattedMessage\n                    id='rhs_header.backToResultsTooltip'\n                    defaultMessage='Back to search results'\n                />\n            );\n            break;\n        case RHSStates.FLAG:\n            title = (\n                <FormattedMessage\n                    id='rhs_header.backToFlaggedTooltip'\n                    defaultMessage='Back to saved messages'\n                />\n            );\n            break;\n        case RHSStates.PIN:\n            title = (\n                <FormattedMessage\n                    id='rhs_header.backToPinnedTooltip'\n                    defaultMessage='Back to pinned messages'\n                />\n            );\n            break;\n        }\n\n        const expandSidebarTooltip = (\n            <>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand the right sidebar'\n                />\n                <KeyboardShortcutSequence\n                    shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                    hideDescription={true}\n                    isInsideTooltip={true}\n                />\n            </>\n        );\n\n        const shrinkSidebarTooltip = (\n            <>\n                <FormattedMessage\n                    id='rhs_header.collapseSidebarTooltip'\n                    defaultMessage='Collapse the right sidebar'\n                />\n                <KeyboardShortcutSequence\n                    shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                    hideDescription={true}\n                    isInsideTooltip={true}\n                />\n            </>\n        );\n\n        if (title) {\n            back = (\n                <WithTooltip\n                    id='backToResultsTooltip'\n                    title={title}\n                    placement='top'\n                >\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={this.handleBack}\n                        aria-label={this.props.intl.formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i\n                            className='icon icon-arrow-back-ios'\n                        />\n                    </button>\n                </WithTooltip>\n            );\n        }\n\n        return (\n            <div className='sidebar--right__header'>\n                <span className='sidebar--right__title'>\n                    {back}\n                    <FormattedMessage\n                        id='search_header.title5'\n                        defaultMessage='Extra information'\n                    />\n                </span>\n                <div className='pull-right'>\n                    <WithTooltip\n                        id={this.props.isExpanded ? 'shrinkSidebarTooltip' : 'expandSidebarTooltip'}\n                        title={this.props.isExpanded ? shrinkSidebarTooltip : expandSidebarTooltip}\n                        placement='bottom'\n                    >\n                        <button\n                            type='button'\n                            className='sidebar--right__expand btn btn-icon btn-sm'\n                            aria-label='Expand'\n                            onClick={this.props.actions.toggleRhsExpanded}\n                        >\n                            <i\n                                className='icon icon-arrow-expand'\n                                aria-label={this.props.intl.formatMessage({id: 'rhs_header.expandSidebarTooltip.icon', defaultMessage: 'Expand Sidebar Icon'})}\n                            />\n                            <i\n                                className='icon icon-arrow-collapse'\n                                aria-label={this.props.intl.formatMessage({id: 'rhs_header.collapseSidebarTooltip.icon', defaultMessage: 'Collapse Sidebar Icon'})}\n                            />\n                        </button>\n                    </WithTooltip>\n                    <WithTooltip\n                        id='closeSidebarTooltip'\n                        title={\n                            <FormattedMessage\n                                id='rhs_header.closeSidebarTooltip'\n                                defaultMessage='Close'\n                            />\n                        }\n                        placement={'top'}\n                    >\n                        <button\n                            type='button'\n                            className='sidebar--right__close btn btn-icon btn-sm'\n                            aria-label='Close'\n                            onClick={this.props.actions.closeRightHandSide}\n                        >\n                            <i\n                                className='icon icon-close'\n                                aria-label={this.props.intl.formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                            />\n                        </button>\n                    </WithTooltip>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(RhsCardHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {AnyAction, Dispatch} from 'redux';\n\nimport {\n    showMentions,\n    showSearchResults,\n    showFlaggedPosts,\n    showPinnedPosts,\n    closeRightHandSide,\n    toggleRhsExpanded,\n} from 'actions/views/rhs';\nimport {getIsRhsExpanded} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport RhsCardHeader from './rhs_card_header';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isExpanded: getIsRhsExpanded(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators({\n            showMentions,\n            showSearchResults,\n            showFlaggedPosts,\n            showPinnedPosts,\n            closeRightHandSide,\n            toggleRhsExpanded,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RhsCardHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport deepEqual from 'fast-deep-equal';\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport Scrollbars from 'react-custom-scrollbars';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {Post} from '@mattermost/types/posts';\n\nimport {emitCloseRightHandSide} from 'actions/global_actions';\n\nimport Markdown from 'components/markdown';\nimport PostProfilePicture from 'components/post_profile_picture';\nimport RhsCardHeader from 'components/rhs_card_header';\nimport UserProfile from 'components/user_profile';\n\nimport Constants from 'utils/constants';\nimport DelayedAction from 'utils/delayed_action';\n\nimport type {PostPluginComponent} from 'types/store/plugins';\nimport type {RhsState} from 'types/store/rhs';\n\ntype Props = {\n    isMobileView: boolean;\n    selected?: Post;\n    pluginPostCardTypes?: Record<string, PostPluginComponent>;\n    previousRhsState?: RhsState;\n    enablePostUsernameOverride?: boolean;\n    teamUrl?: string;\n};\n\ntype State = {\n    isScrolling: boolean;\n};\n\nexport function renderView(props: Props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--view'\n        />\n    );\n}\n\nexport function renderThumbHorizontal(props: Props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--horizontal'\n        />\n    );\n}\n\nexport function renderThumbVertical(props: Props) {\n    return (\n        <div\n            {...props}\n            className='scrollbar--vertical'\n        />\n    );\n}\n\nexport default class RhsCard extends React.Component<Props, State> {\n    scrollStopAction: DelayedAction;\n\n    static defaultProps = {\n        pluginPostCardTypes: {},\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.scrollStopAction = new DelayedAction(this.handleScrollStop);\n\n        this.state = {\n            isScrolling: false,\n        };\n    }\n\n    shouldComponentUpdate(nextProps: Props, nextState: State) {\n        if (!deepEqual(nextProps.selected?.props?.card, this.props.selected?.props?.card)) {\n            return true;\n        }\n        if (nextState.isScrolling !== this.state.isScrolling) {\n            return true;\n        }\n        return false;\n    }\n\n    handleScroll = () => {\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        this.scrollStopAction.fireAfter(Constants.SCROLL_DELAY);\n    };\n\n    handleScrollStop = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    };\n\n    handleClick = () => {\n        if (this.props.isMobileView) {\n            emitCloseRightHandSide();\n        }\n    };\n\n    render() {\n        if (this.props.selected == null) {\n            return (<div/>);\n        }\n\n        const {selected, pluginPostCardTypes, teamUrl} = this.props;\n        const postType = selected.type;\n        let content: ReactNode = null;\n        if (pluginPostCardTypes?.hasOwnProperty(postType)) {\n            const PluginComponent = pluginPostCardTypes[postType].component;\n            content = <PluginComponent post={selected}/>;\n        }\n\n        if (!content) {\n            content = (\n                <div className='info-card'>\n                    <Markdown message={(selected.props && selected.props.card) || ''}/>\n                </div>\n            );\n        }\n\n        let user = (\n            <UserProfile\n                userId={selected.user_id}\n                hideStatus={true}\n                disablePopover={true}\n            />\n        );\n        if (selected.props.override_username && this.props.enablePostUsernameOverride) {\n            user = (\n                <UserProfile\n                    userId={selected.user_id}\n                    hideStatus={true}\n                    disablePopover={true}\n                    overwriteName={selected.props.override_username}\n                />\n            );\n        }\n        const avatar = (\n            <PostProfilePicture\n                compactDisplay={false}\n                post={selected}\n                userId={selected.user_id}\n            />\n        );\n\n        return (\n            <div className='sidebar-right__body sidebar-right__card'>\n                <RhsCardHeader previousRhsState={this.props.previousRhsState}/>\n                <Scrollbars\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderThumbHorizontal}\n                    renderThumbVertical={renderThumbVertical}\n                    renderView={renderView}\n                    onScroll={this.handleScroll}\n                >\n                    <div className='post-right__scroll'>\n                        {content}\n                        <div className='d-flex post-card--info'>\n                            <div className='post-card--post-by overflow--ellipsis'>\n                                <FormattedMessage\n                                    id='rhs_card.message_by'\n                                    defaultMessage='Message by {avatar} {user}'\n                                    values={{user, avatar}}\n                                />\n                            </div>\n                            <div className='post-card--view-post'>\n                                <Link\n                                    to={`${teamUrl}/pl/${selected.id}`}\n                                    className='post__permalink'\n                                    onClick={this.handleClick}\n                                >\n                                    <FormattedMessage\n                                        id='rhs_card.jump'\n                                        defaultMessage='Jump'\n                                    />\n                                </Link>\n                            </div>\n                        </div>\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSelectedPostCard} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport RhsCard from './rhs_card';\n\nfunction mapStateToProps(state: GlobalState) {\n    const selected = getSelectedPostCard(state);\n    const config = getConfig(state);\n    const enablePostUsernameOverride = config.EnablePostUsernameOverride === 'true';\n\n    return {\n        enablePostUsernameOverride,\n        isMobileView: getIsMobileView(state),\n        selected,\n        pluginPostCardTypes: state.plugins.postCardTypes,\n        teamUrl: getCurrentRelativeTeamUrl(state),\n    };\n}\n\nexport default connect(mapStateToProps)(RhsCard);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {TourTip, useFollowElementDimensions, useMeasurePunchouts} from '@mattermost/components';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\n\nimport {Constants, Preferences} from 'utils/constants';\n\nconst translate = {x: 2, y: 25};\n\nconst CRTThreadsPaneTutorialTip = () => {\n    const dispatch = useDispatch();\n    const {formatMessage} = useIntl();\n    const currentUserId = useSelector(getCurrentUserId);\n\n    const dimensions = useFollowElementDimensions('sidebar-right');\n\n    const title = (\n        <FormattedMessage\n            id='tutorial_threads.threads_pane.title'\n            defaultMessage={'Viewing a thread in the sidebar'}\n        />\n    );\n\n    const screen = (\n        <p>\n            {formatMessage<ReactNode>(\n                {\n                    id: 'tutorial_threads.threads_pane.description',\n                    defaultMessage: 'Click the <b>Follow</b> button to be notified about replies and see it in your <b>Threads</b> view. Within a thread, the <b>New Messages</b> line shows you where you left off.',\n                },\n                {\n                    b: (value: string) => <b>{value}</b>,\n                },\n            )}\n        </p>\n    );\n\n    const nextBtn = (): JSX.Element => {\n        return (\n            <FormattedMessage\n                id={'tutorial_tip.got_it'}\n                defaultMessage={'Got it'}\n            />\n        );\n    };\n\n    const onDismiss = (e: React.MouseEvent) => {\n        e.preventDefault();\n        const preferences = [\n            {\n                user_id: currentUserId,\n                category: Preferences.CRT_THREAD_PANE_STEP,\n                name: currentUserId,\n                value: Constants.CrtThreadPaneSteps.FINISHED.toString(),\n            },\n        ];\n        dispatch(savePreferences(currentUserId, preferences));\n    };\n\n    const overlayPunchOut = useMeasurePunchouts(['rhsContainer'], [dimensions?.width]);\n\n    return (\n        <TourTip\n            show={true}\n            screen={screen}\n            title={title}\n            overlayPunchOut={overlayPunchOut}\n            placement='left'\n            pulsatingDotPlacement='top-start'\n            pulsatingDotTranslate={translate}\n            step={1}\n            singleTip={true}\n            showOptOut={false}\n            handleDismiss={onDismiss}\n            handleNext={onDismiss}\n            interactivePunchOut={true}\n            nextBtn={nextBtn()}\n        />\n    );\n};\n\nexport default CRTThreadsPaneTutorialTip;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, type WrappedComponentProps} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport KeyboardShortcutSequence, {\n    KEYBOARD_SHORTCUTS,\n} from 'components/keyboard_shortcuts/keyboard_shortcuts_sequence';\nimport FollowButton from 'components/threading/common/follow_button';\nimport CRTThreadsPaneTutorialTip\n    from 'components/tours/crt_tour/crt_threads_pane_tutorial_tip';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {getHistory} from 'utils/browser_history';\nimport {RHSStates} from 'utils/constants';\n\nimport type {RhsState} from 'types/store/rhs';\n\ninterface Props extends WrappedComponentProps {\n    isExpanded: boolean;\n    isMobileView: boolean;\n    rootPostId: string;\n    previousRhsState?: RhsState;\n    relativeTeamUrl: string;\n    channel: Channel;\n    isCollapsedThreadsEnabled: boolean;\n    isFollowingThread?: boolean;\n    currentTeamId: string;\n    showThreadsTutorialTip: boolean;\n    currentUserId: string;\n    setRhsExpanded: (b: boolean) => void;\n    showMentions: () => void;\n    showSearchResults: () => void;\n    showFlaggedPosts: () => void;\n    showPinnedPosts: () => void;\n    goBack: () => void;\n    closeRightHandSide: (e?: React.MouseEvent) => void;\n    toggleRhsExpanded: (e: React.MouseEvent) => void;\n    setThreadFollow: (userId: string, teamId: string, threadId: string, newState: boolean) => void;\n}\n\nclass RhsHeaderPost extends React.PureComponent<Props> {\n    handleBack = (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n        case RHSStates.FLAG:\n        case RHSStates.PIN:\n            this.props.goBack();\n            break;\n        default:\n            break;\n        }\n    };\n\n    handleJumpClick = () => {\n        if (this.props.isMobileView) {\n            this.props.closeRightHandSide();\n        }\n\n        this.props.setRhsExpanded(false);\n        const teamUrl = this.props.relativeTeamUrl;\n        getHistory().push(`${teamUrl}/pl/${this.props.rootPostId}`);\n    };\n\n    handleFollowChange = () => {\n        const {currentTeamId, currentUserId, rootPostId, isFollowingThread} = this.props;\n        this.props.setThreadFollow(currentUserId, currentTeamId, rootPostId, !isFollowingThread);\n    };\n\n    render() {\n        let back;\n        const {isFollowingThread} = this.props;\n        const {formatMessage} = this.props.intl;\n        const closeSidebarTooltip = (\n            <FormattedMessage\n                id='rhs_header.closeSidebarTooltip'\n                defaultMessage='Close'\n            />\n        );\n\n        let backToResultsTooltip;\n\n        switch (this.props.previousRhsState) {\n        case RHSStates.SEARCH:\n        case RHSStates.MENTION:\n            backToResultsTooltip = (\n                <FormattedMessage\n                    id='rhs_header.backToResultsTooltip'\n                    defaultMessage='Back to search results'\n                />\n            );\n            break;\n        case RHSStates.FLAG:\n            backToResultsTooltip = (\n                <FormattedMessage\n                    id='rhs_header.backToFlaggedTooltip'\n                    defaultMessage='Back to saved messages'\n                />\n            );\n            break;\n        case RHSStates.PIN:\n            backToResultsTooltip = (\n                <FormattedMessage\n                    id='rhs_header.backToPinnedTooltip'\n                    defaultMessage='Back to pinned messages'\n                />\n            );\n            break;\n        }\n\n        //rhsHeaderTooltipContent contains tooltips content for expand or shrink sidebarTooltip.\n        // if props.isExpanded is true, defaultMessage would feed from 'shrinkTooltip', else 'expandTooltip'\n        const rhsHeaderTooltipContent = this.props.isExpanded ? (\n            <>\n                <FormattedMessage\n                    id='rhs_header.collapseSidebarTooltip'\n                    defaultMessage='Collapse the right sidebar'\n                />\n                <KeyboardShortcutSequence\n                    shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                    hideDescription={true}\n                    isInsideTooltip={true}\n                />\n            </>\n        ) : (\n            <>\n                <FormattedMessage\n                    id='rhs_header.expandSidebarTooltip'\n                    defaultMessage='Expand the right sidebar'\n                />\n                <KeyboardShortcutSequence\n                    shortcut={KEYBOARD_SHORTCUTS.navExpandSidebar}\n                    hideDescription={true}\n                    isInsideTooltip={true}\n                />\n            </>\n        );\n\n        const channelName = this.props.channel.display_name;\n\n        if (backToResultsTooltip) {\n            back = (\n                <WithTooltip\n                    id='backToResultsTooltip'\n                    placement='top'\n                    title={backToResultsTooltip}\n                >\n                    <button\n                        className='sidebar--right__back btn btn-icon btn-sm'\n                        onClick={this.handleBack}\n                        aria-label={formatMessage({id: 'rhs_header.back.icon', defaultMessage: 'Back Icon'})}\n                    >\n                        <i\n                            className='icon icon-arrow-back-ios'\n                        />\n                    </button>\n                </WithTooltip>\n            );\n        }\n\n        return (\n            <div className='sidebar--right__header'>\n                <span className='sidebar--right__title'>\n                    {back}\n                    <FormattedMessage\n                        id='rhs_header.details'\n                        defaultMessage='Thread'\n                    />\n                    {channelName &&\n                        <button\n                            onClick={this.handleJumpClick}\n                            className='style--none sidebar--right__title__channel'\n                        >\n                            {channelName}\n                        </button>\n                    }\n                </span>\n                <div className='controls'>\n                    {this.props.isCollapsedThreadsEnabled ? (\n                        <FollowButton\n                            className='sidebar--right__follow__thread'\n                            isFollowing={isFollowingThread}\n                            onClick={this.handleFollowChange}\n                        />\n                    ) : null}\n\n                    <WithTooltip\n                        id={this.props.isExpanded ? 'shrinkSidebarTooltip' : 'expandSidebarTooltip'}\n                        placement='bottom'\n                        title={rhsHeaderTooltipContent}\n                    >\n                        <button\n                            type='button'\n                            className='sidebar--right__expand btn btn-icon btn-sm'\n                            aria-label='Expand'\n                            onClick={this.props.toggleRhsExpanded}\n                        >\n                            <i\n                                className='icon icon-arrow-expand'\n                                aria-label={formatMessage({id: 'rhs_header.expandSidebarTooltip.icon', defaultMessage: 'Expand Sidebar Icon'})}\n                            />\n                            <i\n                                className='icon icon-arrow-collapse'\n                                aria-label={formatMessage({id: 'rhs_header.collapseSidebarTooltip.icon', defaultMessage: 'Collapse Sidebar Icon'})}\n                            />\n                        </button>\n                    </WithTooltip>\n\n                    <WithTooltip\n                        id='closeSidebarTooltip'\n                        placement='top'\n                        title={closeSidebarTooltip}\n                    >\n                        <button\n                            id='rhsCloseButton'\n                            type='button'\n                            className='sidebar--right__close btn btn-icon btn-sm'\n                            aria-label='Close'\n                            onClick={this.props.closeRightHandSide}\n                        >\n                            <i\n                                className='icon icon-close'\n                                aria-label={formatMessage({id: 'rhs_header.closeTooltip.icon', defaultMessage: 'Close Sidebar Icon'})}\n                            />\n                        </button>\n                    </WithTooltip>\n                </div>\n                {this.props.showThreadsTutorialTip && <CRTThreadsPaneTutorialTip/>}\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(RhsHeaderPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ComponentProps} from 'react';\nimport {connect} from 'react-redux';\n\nimport {setThreadFollow} from 'mattermost-redux/actions/threads';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {getInt, isCollapsedThreadsEnabled, onboardingTourTipsEnabled} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\nimport {makeGetThreadOrSynthetic} from 'mattermost-redux/selectors/entities/threads';\nimport {getCurrentUserId, getCurrentUserMentionKeys} from 'mattermost-redux/selectors/entities/users';\n\nimport {\n    setRhsExpanded,\n    showMentions,\n    showSearchResults,\n    showFlaggedPosts,\n    showPinnedPosts,\n    showChannelFiles,\n    closeRightHandSide,\n    toggleRhsExpanded,\n    goBack,\n} from 'actions/views/rhs';\nimport {getIsRhsExpanded} from 'selectors/rhs';\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport {CrtThreadPaneSteps, Preferences} from 'utils/constants';\nimport {matchUserMentionTriggersWithMessageMentions} from 'utils/post_utils';\nimport {allAtMentions} from 'utils/text_formatting';\n\nimport type {GlobalState} from 'types/store';\n\nimport RhsHeaderPost from './rhs_header_post';\n\ntype OwnProps = Pick<ComponentProps<typeof RhsHeaderPost>, 'rootPostId'>\n\nfunction makeMapStateToProps() {\n    const getThreadOrSynthetic = makeGetThreadOrSynthetic();\n\n    return function mapStateToProps(state: GlobalState, {rootPostId}: OwnProps) {\n        let isFollowingThread = false;\n\n        const collapsedThreads = isCollapsedThreadsEnabled(state);\n        const root = getPost(state, rootPostId);\n        const currentUserId = getCurrentUserId(state);\n        const tipStep = getInt(state, Preferences.CRT_THREAD_PANE_STEP, currentUserId);\n\n        if (root && collapsedThreads) {\n            const thread = getThreadOrSynthetic(state, root);\n            isFollowingThread = thread.is_following;\n\n            if (isFollowingThread === null && thread.reply_count === 0) {\n                const currentUserMentionKeys = getCurrentUserMentionKeys(state);\n                const rootMessageMentionKeys = allAtMentions(root.message);\n\n                isFollowingThread = matchUserMentionTriggersWithMessageMentions(currentUserMentionKeys, rootMessageMentionKeys);\n            }\n        }\n\n        const showThreadsTutorialTip = tipStep === CrtThreadPaneSteps.THREADS_PANE_POPOVER && isCollapsedThreadsEnabled(state) && onboardingTourTipsEnabled(state);\n\n        return {\n            isExpanded: getIsRhsExpanded(state),\n            isMobileView: getIsMobileView(state),\n            relativeTeamUrl: getCurrentRelativeTeamUrl(state),\n            currentTeamId: getCurrentTeamId(state),\n            currentUserId,\n            isCollapsedThreadsEnabled: collapsedThreads,\n            isFollowingThread,\n            showThreadsTutorialTip,\n        };\n    };\n}\n\nconst actions = {\n    setRhsExpanded,\n    showSearchResults,\n    showMentions,\n    showFlaggedPosts,\n    showPinnedPosts,\n    showChannelFiles,\n    closeRightHandSide,\n    toggleRhsExpanded,\n    setThreadFollow,\n    goBack,\n};\n\nexport default connect(makeMapStateToProps, actions)(RhsHeaderPost);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Post} from '@mattermost/types/posts';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {closeRightHandSide} from 'actions/views/rhs';\n\nimport RhsHeaderPost from 'components/rhs_header_post';\nimport ThreadViewer from 'components/threading/thread_viewer';\n\nimport type {FakePost, RhsState} from 'types/store/rhs';\n\ntype Props = {\n    currentTeam?: Team;\n    channel?: Channel;\n    selected: Post | FakePost;\n    previousRhsState?: RhsState;\n}\n\nconst RhsThread = ({\n    currentTeam,\n    channel,\n    selected,\n    previousRhsState,\n}: Props) => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (channel?.team_id && channel.team_id !== currentTeam?.id) {\n            // if team-scoped and mismatched team, close rhs\n            dispatch(closeRightHandSide());\n        }\n    }, [currentTeam, channel]);\n\n    if (selected == null || !channel) {\n        return (\n            <div/>\n        );\n    }\n\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body'\n        >\n            <RhsHeaderPost\n                rootPostId={selected.id}\n                channel={channel}\n                previousRhsState={previousRhsState}\n            />\n            <ThreadViewer\n                rootPostId={selected.id}\n                useRelativeTimestamp={true}\n                isThreadView={false}\n            />\n        </div>\n    );\n};\n\nexport default memo(RhsThread);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSelectedChannel, getSelectedPost} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\n\nimport RhsThread from './rhs_thread';\n\nfunction mapStateToProps(state: GlobalState) {\n    const selected = getSelectedPost(state);\n    const channel = getSelectedChannel(state);\n    const currentTeam = getCurrentTeam(state);\n\n    return {\n        selected,\n        channel,\n        currentTeam,\n    };\n}\nexport default connect(mapStateToProps)(RhsThread);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport SearchResultsHeader from 'components/search_results_header';\n\nimport Pluggable from 'plugins/pluggable';\n\nexport type Props = {\n    showPluggable: boolean;\n    pluggableId: string;\n    title: React.ReactNode;\n}\n\nconst RhsPlugin = ({showPluggable, pluggableId, title}: Props) => {\n    return (\n        <div\n            id='rhsContainer'\n            className='sidebar-right__body'\n        >\n            <SearchResultsHeader>\n                {title}\n            </SearchResultsHeader>\n            {\n                showPluggable &&\n                <Pluggable\n                    pluggableName='RightHandSidebarComponent'\n                    pluggableId={pluggableId}\n                />\n            }\n        </div>\n    );\n};\n\nexport default React.memo(RhsPlugin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getPluggableId} from 'selectors/rhs';\n\nimport type {GlobalState} from 'types/store';\nimport type {PluginComponent} from 'types/store/plugins';\n\nimport RHSPlugin from './rhs_plugin';\n\nfunction mapStateToProps(state: GlobalState) {\n    const rhsPlugins: PluginComponent[] = state.plugins.components.RightHandSidebarComponent;\n    const pluggableId = getPluggableId(state);\n    const pluginComponent = rhsPlugins.find((element: PluginComponent) => element.id === pluggableId);\n    const pluginTitle = pluginComponent ? pluginComponent.title : '';\n\n    return {\n        showPluggable: Boolean(pluginComponent),\n        pluggableId,\n        title: pluginTitle,\n    };\n}\n\nexport default connect(mapStateToProps)(RHSPlugin);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {ProductIdentifier} from '@mattermost/types/products';\nimport type {Team} from '@mattermost/types/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport ChannelInfoRhs from 'components/channel_info_rhs';\nimport ChannelMembersRhs from 'components/channel_members_rhs';\nimport FileUploadOverlay from 'components/file_upload_overlay';\nimport LoadingScreen from 'components/loading_screen';\nimport PostEditHistory from 'components/post_edit_history';\nimport ResizableRhs from 'components/resizable_sidebar/resizable_rhs';\nimport RhsCard from 'components/rhs_card';\nimport RhsThread from 'components/rhs_thread';\nimport Search from 'components/search/index';\n\nimport RhsPlugin from 'plugins/rhs_plugin';\nimport Constants from 'utils/constants';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/keyboard';\nimport {isMac} from 'utils/user_agent';\n\nimport type {RhsState} from 'types/store/rhs';\n\nexport type Props = {\n    isExpanded: boolean;\n    isOpen: boolean;\n    channel?: Channel;\n    team?: Team;\n    teamId: Team['id'];\n    productId: ProductIdentifier;\n    postRightVisible: boolean;\n    postCardVisible: boolean;\n    searchVisible: boolean;\n    isPinnedPosts: boolean;\n    isChannelFiles: boolean;\n    isChannelInfo: boolean;\n    isChannelMembers: boolean;\n    isPluginView: boolean;\n    isPostEditHistory: boolean;\n    previousRhsState: RhsState;\n    rhsChannel?: Channel;\n    selectedPostId: string;\n    selectedPostCardId: string;\n    actions: {\n        setRhsExpanded: (expanded: boolean) => void;\n        showPinnedPosts: (channelId: string) => void;\n        openRHSSearch: () => void;\n        closeRightHandSide: () => void;\n        openAtPrevious: (previous: Partial<Props> | undefined) => void;\n        updateSearchTerms: (terms: string) => void;\n        showChannelFiles: (channelId: string) => void;\n        showChannelInfo: (channelId: string) => void;\n    };\n}\n\ntype State = {\n    isOpened: boolean;\n}\n\nexport default class SidebarRight extends React.PureComponent<Props, State> {\n    sidebarRight: React.RefObject<HTMLDivElement>;\n    sidebarRightWidthHolder: React.RefObject<HTMLDivElement>;\n    previous: Partial<Props> | undefined = undefined;\n    focusSearchBar?: () => void;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.sidebarRightWidthHolder = React.createRef<HTMLDivElement>();\n        this.sidebarRight = React.createRef<HTMLDivElement>();\n        this.state = {\n            isOpened: false,\n        };\n    }\n\n    setPrevious = () => {\n        if (!this.props.isOpen) {\n            return;\n        }\n\n        this.previous = {\n            searchVisible: this.props.searchVisible,\n            isPinnedPosts: this.props.isPinnedPosts,\n            isChannelFiles: this.props.isChannelFiles,\n            isChannelInfo: this.props.isChannelInfo,\n            isChannelMembers: this.props.isChannelMembers,\n            isPostEditHistory: this.props.isPostEditHistory,\n            selectedPostId: this.props.selectedPostId,\n            selectedPostCardId: this.props.selectedPostCardId,\n            previousRhsState: this.props.previousRhsState,\n        };\n    };\n\n    handleShortcut = (e: KeyboardEvent) => {\n        const channelInfoShortcutMac = isMac() && e.shiftKey;\n        const channelInfoShortcut = !isMac() && e.altKey;\n\n        if (cmdOrCtrlPressed(e, true)) {\n            if (e.shiftKey && isKeyPressed(e, Constants.KeyCodes.PERIOD)) {\n                e.preventDefault();\n                if (this.props.isOpen) {\n                    if (this.props.isExpanded) {\n                        this.props.actions.setRhsExpanded(false);\n                    } else {\n                        this.props.actions.setRhsExpanded(true);\n                    }\n                } else {\n                    this.props.actions.openAtPrevious(this.previous);\n                }\n            } else if (isKeyPressed(e, Constants.KeyCodes.PERIOD)) {\n                e.preventDefault();\n                if (this.props.isOpen) {\n                    this.props.actions.closeRightHandSide();\n                } else {\n                    this.props.actions.openAtPrevious(this.previous);\n                }\n            } else if (isKeyPressed(e, Constants.KeyCodes.I) && (channelInfoShortcutMac || channelInfoShortcut)) {\n                e.preventDefault();\n                if (this.props.isOpen && this.props.isChannelInfo) {\n                    this.props.actions.closeRightHandSide();\n                } else if (this.props.channel) {\n                    this.props.actions.showChannelInfo(this.props.channel.id);\n                }\n            }\n        }\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleShortcut);\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleShortcut);\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const wasOpen = prevProps.searchVisible || prevProps.postRightVisible;\n        const isOpen = this.props.searchVisible || this.props.postRightVisible;\n\n        if (!wasOpen && isOpen) {\n            trackEvent('ui', 'ui_rhs_opened');\n        }\n\n        const {actions, isChannelFiles, isPinnedPosts, rhsChannel, channel} = this.props;\n        if (isPinnedPosts && prevProps.isPinnedPosts === isPinnedPosts && rhsChannel && rhsChannel.id !== prevProps.rhsChannel?.id) {\n            actions.showPinnedPosts(rhsChannel.id);\n        }\n\n        if (isChannelFiles && prevProps.isChannelFiles === isChannelFiles && rhsChannel && rhsChannel.id !== prevProps.rhsChannel?.id) {\n            actions.showChannelFiles(rhsChannel.id);\n        }\n\n        // in the case of navigating to another channel\n        // or from global threads to a channel\n        // we shrink the sidebar\n        if (\n            (channel && prevProps.channel && (channel.id !== prevProps.channel.id)) ||\n            (channel && !prevProps.channel)\n        ) {\n            this.props.actions.setRhsExpanded(false);\n        }\n\n        // close when changing products or teams\n        if (\n            (prevProps.teamId && this.props.teamId !== prevProps.teamId) ||\n            this.props.productId !== prevProps.productId\n        ) {\n            this.props.actions.closeRightHandSide();\n        }\n\n        this.setPrevious();\n    }\n\n    handleClickOutside = (e: MouseEvent) => {\n        if (\n            (this.props.isOpen && this.props.isExpanded) && // can be collapsed\n            e.target && // has target\n            document.getElementById('root')?.contains(e.target as Element) &&//  within Root\n            !this.sidebarRight.current?.contains(e.target as Element) && // not within RHS\n            !document.getElementById('global-header')?.contains(e.target as Element) && // not within Global Header\n            !document.querySelector('.app-bar')?.contains(e.target as Element) // not within App Bar\n        ) {\n            this.props.actions.setRhsExpanded(false);\n        }\n    };\n\n    handleUpdateSearchTerms = (term: string) => {\n        this.props.actions.updateSearchTerms(term);\n        this.focusSearchBar?.();\n    };\n\n    getSearchBarFocus = (focusSearchBar: () => void) => {\n        this.focusSearchBar = focusSearchBar;\n    };\n\n    render() {\n        const {\n            team,\n            channel,\n            rhsChannel,\n            postRightVisible,\n            postCardVisible,\n            previousRhsState,\n            searchVisible,\n            isPluginView,\n            isOpen,\n            isChannelInfo,\n            isChannelMembers,\n            isExpanded,\n            isPostEditHistory,\n        } = this.props;\n\n        if (!isOpen) {\n            return null;\n        }\n\n        const teamNeeded = true;\n        let selectedChannelNeeded;\n        let currentChannelNeeded;\n        let content = null;\n\n        if (postRightVisible) {\n            selectedChannelNeeded = true;\n            content = (\n                <div className='post-right__container'>\n                    <FileUploadOverlay overlayType='right'/>\n                    <RhsThread previousRhsState={previousRhsState}/>\n                </div>\n            );\n        } else if (postCardVisible) {\n            content = <RhsCard previousRhsState={previousRhsState}/>;\n        } else if (isPluginView) {\n            content = <RhsPlugin/>;\n        } else if (isChannelInfo) {\n            currentChannelNeeded = true;\n            content = <ChannelInfoRhs/>;\n        } else if (isChannelMembers) {\n            currentChannelNeeded = true;\n            content = <ChannelMembersRhs/>;\n        } else if (isPostEditHistory) {\n            content = <PostEditHistory/>;\n        }\n\n        const isRHSLoading = Boolean(\n            (teamNeeded && !team) ||\n            (selectedChannelNeeded && !rhsChannel) ||\n            (currentChannelNeeded && !channel),\n        );\n\n        const channelDisplayName = rhsChannel ? rhsChannel.display_name : '';\n\n        const isSidebarRightExpanded = (postRightVisible || postCardVisible || isPluginView || searchVisible || isPostEditHistory) && isExpanded;\n        const containerClassName = classNames('sidebar--right', 'move--left is-open', {\n            'sidebar--right--expanded expanded': isSidebarRightExpanded,\n        });\n\n        return (\n            <>\n                <div\n                    className={'sidebar--right sidebar--right--width-holder'}\n                    ref={this.sidebarRightWidthHolder}\n                />\n                <ResizableRhs\n                    className={containerClassName}\n                    id='sidebar-right'\n                    role='complementary'\n                    rightWidthHolderRef={this.sidebarRightWidthHolder}\n                >\n                    <div\n                        className='sidebar-right-container'\n                        ref={this.sidebarRight}\n                    >\n                        {isRHSLoading ? (\n                            <div className='sidebar-right__body'>\n                                {/* Sometimes the channel/team is not loaded yet, so we need to wait for it */}\n                                <LoadingScreen centered={true}/>\n                            </div>\n                        ) : (\n                            <Search\n                                isSideBarRight={true}\n                                isSideBarRightOpen={true}\n                                getFocus={this.getSearchBarFocus}\n                                channelDisplayName={channelDisplayName}\n                            >\n                                {content}\n                            </Search>\n                        )}\n                    </div>\n                </ResizableRhs>\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\nimport type {RouteComponentProps} from 'react-router-dom';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setRhsExpanded, showChannelInfo, showPinnedPosts, showChannelFiles, openRHSSearch, closeRightHandSide, openAtPrevious, updateSearchTerms} from 'actions/views/rhs';\nimport {selectCurrentProductId} from 'selectors/products';\nimport {\n    getIsRhsExpanded,\n    getIsRhsOpen,\n    getRhsState,\n    getSelectedChannel,\n    getSelectedPostId,\n    getSelectedPostCardId,\n    getPreviousRhsState,\n} from 'selectors/rhs';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport SidebarRight from './sidebar_right';\n\nfunction mapStateToProps(state: GlobalState, props: RouteComponentProps) {\n    const rhsState = getRhsState(state);\n    const channel = getCurrentChannel(state);\n    const team = getCurrentTeam(state);\n    const teamId = team?.id ?? '';\n    const productId = selectCurrentProductId(state, props.location.pathname);\n\n    const selectedPostId = getSelectedPostId(state);\n    const selectedPostCardId = getSelectedPostCardId(state);\n\n    return {\n        isExpanded: getIsRhsExpanded(state),\n        isOpen: getIsRhsOpen(state),\n        channel,\n        postRightVisible: Boolean(selectedPostId) && rhsState !== RHSStates.EDIT_HISTORY,\n        postCardVisible: Boolean(selectedPostCardId),\n        searchVisible: Boolean(rhsState) && rhsState !== RHSStates.PLUGIN,\n        previousRhsState: getPreviousRhsState(state),\n        isPinnedPosts: rhsState === RHSStates.PIN,\n        isChannelFiles: rhsState === RHSStates.CHANNEL_FILES,\n        isChannelInfo: rhsState === RHSStates.CHANNEL_INFO,\n        isChannelMembers: rhsState === RHSStates.CHANNEL_MEMBERS,\n        isPluginView: rhsState === RHSStates.PLUGIN,\n        isPostEditHistory: rhsState === RHSStates.EDIT_HISTORY,\n        rhsChannel: getSelectedChannel(state),\n        selectedPostId,\n        selectedPostCardId,\n        team,\n        teamId,\n        productId,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            setRhsExpanded,\n            showPinnedPosts,\n            openRHSSearch,\n            closeRightHandSide,\n            openAtPrevious,\n            updateSearchTerms,\n            showChannelFiles,\n            showChannelInfo,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SidebarRight));\n"],"names":["DEFAULT_COPY_TIMEOUT","useCopyText","options","copiedRecently","setCopiedRecently","useState","copyError","setCopyError","timerRef","useRef","successCopyTimeout","onClick","useCallback","trackCallback","current","clearTimeout","clipboard","navigator","writeText","text","then","catch","textField","document","createElement","innerText","style","position","opacity","body","appendChild","select","success","execCommand","err","remove","setTimeout","AlertSvg","props","React","width","toString","height","viewBox","fill","xmlns","d","propTypes","_pt","EditButton","styled","displayName","EmptyPlace","EditableAreaBase","_ref","editable","content","emptyLabel","onEdit","className","formatMessage","useIntl","allowEditArea","id","defaultMessage","withConfig","LineLimiterBase","children","maxLines","lineHeight","moreText","lessText","errorMargin","maxLineHeight","needLimiter","setNeedLimiter","open","setOpen","maxHeight","setMaxHeight","ref","useEffect","contentHeight","scrollHeight","concat","CSSTransition","in","timeout","classNames","ToggleButton","ChannelId","ChannelPurpose","ChannelDescriptionHeading","ChannelHeader","AboutAreaChannel","channel","canEditChannelProperties","actions","purpose","EditableArea","LineLimiter","Markdown","message","editChannelPurpose","header","editChannelHeader","isRequired","Username","UserInfoContainer","UserAvatar","UserInfo","UsernameContainer","UserPosition","AboutAreaDM","dmUser","ProfilePicture","src","Client4","user","last_picture_update","isBot","is_bot","status","undefined","username","display_name","userId","channelId","size","BotTag","is_guest","GuestTag","bot_description","Usernames","ProfilePictures","ProfilePictureContainer","UsersArea","AboutAreaGM","gmUsers","map","idx","key","i","_ref2","length","UserProfileElement","Container","AboutArea","type","Constants","includes","Icon","HeaderTitle","Header","isArchived","isMobile","onClose","FormattedMessage","WithTooltip","placement","title","MenuItemContainer","MenuItemText","RightSide","Badge","MenuItem","icon","opensSubpanel","badge","hasRightSide","Menu","channelStats","loadingStats","setLoadingStats","showNotificationPreferences","showMembers","fileCount","files_count","getChannelStats","openNotificationSettings","member_count","showChannelMembers","pinnedpost_count","showPinnedPosts","LoadingSpinner","showChannelFiles","ChannelInfoRhsTopButtons","Button","CopyButton","TopButtons","channelType","channelURL","isFavorite","isMuted","isInvitingPeople","canAddPeople","propsCanAddPeople","copyLink","canCopyLink","favoriteIcon","favoriteText","mutedIcon","mutedText","copyIcon","copyText","toggleFavorite","toggleMute","addPeople","Divider","ChannelInfoRhs","currentTeam","currentUser","channelMembers","canManageMembers","canManageProperties","currentUserId","getSiteURL","name","filter","closeRightHandSide","unfavoriteChannel","favoriteChannel","unmuteChannel","muteChannel","openModal","modalId","ModalIdentifiers","dialogType","MoreDirectChannels","dialogProps","isExistingChannel","ChannelInviteModal","EditChannelHeaderModal","EditChannelPurposeModal","ChannelNotificationsModal","memo","EMPTY_CHANNEL_STATS","guest_count","connect","state","getCurrentChannel","getCurrentUser","getCurrentTeam","getCurrentChannelStats","isCurrentChannelArchived","isCurrentChannelFavorite","isCurrentChannelMuted","isModalOpen","getIsMobileView","isPrivate","haveIChannelPermission","Permissions","getProfilesInCurrentChannel","getUser","getUserIdFromChannelId","getDisplayNameByUser","isGuest","roles","getStatusForUserId","dispatch","bindActionCreators","RHS","Title","Actions","ButtonIcon","ActionBar","membersCount","editing","showManageButton","handleShortcut","e","isKeyPressed","stopEditing","addEventListener","removeEventListener","values","members_count","startEditing","inviteMembers","canGoBack","goBack","SearchBar","terms","onInput","inputSuffix","Input","value","currentTarget","inputPrefix","placeholder","useLegend","MembersContainer","ListItemType","ChannelMembersRHS","currentUserIsChannelAdmin","searchTerms","teamUrl","history","useHistory","list","setList","page","setPage","isNextPageLoading","setIsNextPageLoading","searching","isDefaultChannel","showSearch","setChannelMembersRhsSearchTerm","listcp","memberDone","_member$membership2","member","_member$membership","membership","scheme_admin","push","FirstSeparator","data","FirstMemberListSeparator","Separator","MemberListSeparator","Member","JSON","stringify","rhsAction","loadProfilesAndReloadChannelMembers","ProfilesInChannelSortBy","loadMyChannelMemberAndRole","doSearch","debounce","async","searchProfilesAndChannelMembers","in_team_id","team_id","in_channel_id","openDirectMessage","openDirectChannelToUserId","loadMore","setEditChannelMembers","AlertContainer","AlertBanner","mode","variant","link","msg","ExternalLink","href","location","MemberList","members","hasNextPage","buildProfileList","profilesInCurrentChannel","userStatuses","teammateNameDisplaySetting","membersInCurrentChannel","forEach","profile","displayUsername","sort","a","b","_a$membership","_b$membership","_a$membership2","localeCompare","getProfiles","createSelector","getActiveProfilesInCurrentChannelWithoutSorting","getUserStatuses","getTeammateNameDisplaySetting","getMembersInCurrentChannel","searchProfiles","search","searchActiveProfilesInCurrentChannel","getMyCurrentChannelMembership","channelAdmins","views","channelMembersRhsSearch","trim","getCurrentRelativeTeamUrl","prevRhsState","getPreviousRhsState","hasInfoPrevState","RHSStates","Boolean","getIsEditingMembers","InfoToast","onExited","closeToast","undoTodo","_content$undo","undo","call","toastContainerClassname","timer","mountOnEnter","unmountOnExit","appear","IconButton","inverted","modalMessages","defineMessages","titleQuestion","RestorePostModal","post","postHeader","onHide","modalHeaderText","GenericModal","compassDesign","enforceFocus","handleCancel","cancelButtonClassName","handleConfirm","handleRestore","PostMessageView","overflowType","showPostEditedIndicator","DATE_RANGES","RelativeRanges","itemMessages","helpText","currentVersionText","ariaLabelMessage","EditedPostItem","isCurrent","postCurrentVersion","theme","openRestorePostModal","restorePostModalData","updatedPost","channel_id","editPost","showInfoTooltip","infoToastModalData","CheckIcon","handleUndo","currentVersionIndicator","profileSrc","imageURLForUser","user_id","overwriteName","override_username","Avatar","url","UserProfileComponent","disablePopover","PostMessageContainer","isRHS","messageContainer","restoreButton","compact","postContainerClass","timeStampValue","edit_at","create_at","CompassThemeProvider","togglePost","prevState","PostAriaLabelDiv","Timestamp","ranges","selectedPostId","getSelectedPostId","getTheme","getPost","renderView","Object","assign","renderThumbHorizontal","renderThumbVertical","PostEditHistory","channelDisplayName","originalPost","postEditHistory","setPostEditHistory","hasError","setHasError","isLoading","setIsLoading","useDispatch","scrollbars","retrieveErrorHeading","retrieveErrorSubheading","_scrollbars$current","result","getPostEditHistory","fetchPostEditHistory","scrollToTop","errorContainer","AlertIcon","LoadingScreen","display","placeContent","flex","postEditItems","postEdited","Scrollbars","autoHide","autoHideTimeout","autoHideDuration","SearchResultsHeader","_getCurrentChannel","getChannel","ResizableRhs","role","rightWidthHolderRef","containerRef","rhsSize","useSelector","getRhsSize","isRhsExpanded","getIsRhsExpanded","previousRhsExpanded","setPreviousRhsExpanded","defaultWidth","RHS_MIN_MAX_WIDTH","default","shouldRhsOverlap","shouldRhsOverlapChannelView","handleResizeEnd","_","cssVarProp","rightWidthHolderRefElement","removeProperty","containerRefElement","classList","add","ResizableDivider","globalCssVar","CssVarKeyForResizable","dir","ResizeDirection","disabled","onResize","handleResize","cssVarValue","setProperty","onResizeEnd","onDividerDoubleClick","handleDividerDoubleClick","RhsCardHeader","constructor","arguments","_defineProperty","preventDefault","this","previousRhsState","showSearchResults","showMentions","showFlaggedPosts","render","back","expandSidebarTooltip","KeyboardShortcutSequence","shortcut","KEYBOARD_SHORTCUTS","hideDescription","isInsideTooltip","shrinkSidebarTooltip","handleBack","intl","isExpanded","toggleRhsExpanded","injectIntl","RhsCard","super","isScrolling","setState","scrollStopAction","fireAfter","isMobileView","emitCloseRightHandSide","DelayedAction","handleScrollStop","shouldComponentUpdate","nextProps","nextState","_nextProps$selected","_nextProps$selected$p","_this$props$selected","_this$props$selected$","deepEqual","selected","card","pluginPostCardTypes","postType","hasOwnProperty","PluginComponent","component","UserProfile","hideStatus","enablePostUsernameOverride","avatar","PostProfilePicture","compactDisplay","onScroll","handleScroll","Link","to","handleClick","getSelectedPostCard","getConfig","EnablePostUsernameOverride","plugins","postCardTypes","translate","x","y","CRTThreadsPaneTutorialTip","getCurrentUserId","dimensions","useFollowElementDimensions","screen","onDismiss","preferences","category","Preferences","savePreferences","overlayPunchOut","useMeasurePunchouts","TourTip","show","pulsatingDotPlacement","pulsatingDotTranslate","step","singleTip","showOptOut","handleDismiss","handleNext","interactivePunchOut","nextBtn","RhsHeaderPost","setRhsExpanded","relativeTeamUrl","getHistory","rootPostId","currentTeamId","isFollowingThread","setThreadFollow","closeSidebarTooltip","backToResultsTooltip","rhsHeaderTooltipContent","channelName","handleJumpClick","isCollapsedThreadsEnabled","FollowButton","isFollowing","handleFollowChange","showThreadsTutorialTip","getThreadOrSynthetic","makeGetThreadOrSynthetic","collapsedThreads","root","tipStep","getInt","thread","is_following","reply_count","currentUserMentionKeys","getCurrentUserMentionKeys","rootMessageMentionKeys","allAtMentions","matchUserMentionTriggersWithMessageMentions","CrtThreadPaneSteps","onboardingTourTipsEnabled","getCurrentTeamId","RhsThread","ThreadViewer","useRelativeTimestamp","isThreadView","getSelectedPost","getSelectedChannel","RhsPlugin","showPluggable","pluggableId","Pluggable","pluggableName","rhsPlugins","components","RightHandSidebarComponent","getPluggableId","pluginComponent","find","element","pluginTitle","RHSPlugin","SidebarRight","isOpen","previous","searchVisible","isPinnedPosts","isChannelFiles","isChannelInfo","isChannelMembers","isPostEditHistory","selectedPostCardId","channelInfoShortcutMac","isMac","shiftKey","channelInfoShortcut","altKey","cmdOrCtrlPressed","openAtPrevious","showChannelInfo","_document$getElementB","_this$sidebarRight$cu","_document$getElementB2","_document$querySelect","target","getElementById","contains","sidebarRight","querySelector","term","_this$focusSearchBar","updateSearchTerms","focusSearchBar","sidebarRightWidthHolder","isOpened","componentDidMount","handleClickOutside","componentWillUnmount","componentDidUpdate","prevProps","_prevProps$rhsChannel","_prevProps$rhsChannel2","wasOpen","postRightVisible","trackEvent","rhsChannel","teamId","productId","setPrevious","team","postCardVisible","isPluginView","selectedChannelNeeded","currentChannelNeeded","FileUploadOverlay","overlayType","ChannelMembersRhs","isRHSLoading","isSidebarRightExpanded","containerClassName","centered","Search","isSideBarRight","isSideBarRightOpen","getFocus","getSearchBarFocus","openRHSSearch","withRouter","_team$id","rhsState","getRhsState","selectCurrentProductId","pathname","getSelectedPostCardId","getIsRhsOpen"],"sourceRoot":""}