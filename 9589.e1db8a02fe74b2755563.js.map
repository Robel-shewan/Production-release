{"version":3,"file":"9589.e1db8a02fe74b2755563.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/widgets/modals/components/checkbox_with_select_item.tsx","webpack://mattermost-webapp/./src/components/widgets/modals/components/modal_header.tsx","webpack://mattermost-webapp/./src/components/widgets/modals/components/radio_setting_item.tsx","webpack://mattermost-webapp/./src/components/channel_notifications_modal/utils.tsx","webpack://mattermost-webapp/./src/components/channel_notifications_modal/channel_notifications_modal.tsx","webpack://mattermost-webapp/./src/components/channel_notifications_modal/index.ts","webpack://mattermost-webapp/./src/components/resizable_sidebar/resizable_divider.tsx","webpack://mattermost-webapp/./src/components/resizable_sidebar/utils.ts","webpack://mattermost-webapp/./src/stores/hooks.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\nimport ReactSelect from 'react-select';\nimport type {ValueType} from 'react-select';\n\nimport type {BaseSettingItemProps} from './base_setting_item';\nimport BaseSettingItem from './base_setting_item';\nimport type {FieldsetCheckbox} from './checkbox_setting_item';\nimport type {FieldsetReactSelect, Option} from './react_select_item';\n\ntype Props = BaseSettingItemProps & {\n    containerClassName?: string;\n    descriptionAboveContent?: boolean;\n    checkboxFieldTitle: ReactNode;\n    checkboxFieldData: FieldsetCheckbox;\n    checkboxFieldValue: boolean;\n    handleCheckboxChange: (e: boolean) => void;\n    selectFieldData: FieldsetReactSelect;\n    selectFieldValue?: Option;\n    handleSelectChange: (selected: ValueType<Option>) => void;\n    isSelectDisabled?: boolean;\n    selectPlaceholder?: string;\n}\n\nexport default function CheckboxWithSelectSettingItem({\n    title,\n    description,\n    containerClassName,\n    descriptionAboveContent = false,\n    checkboxFieldTitle,\n    checkboxFieldData,\n    checkboxFieldValue,\n    handleCheckboxChange,\n    selectFieldData,\n    selectFieldValue,\n    handleSelectChange,\n    isSelectDisabled,\n    selectPlaceholder,\n}: Props) {\n    const content = (\n        <>\n            <fieldset\n                key={checkboxFieldData.name}\n                className='mm-modal-generic-section-item__fieldset-checkbox-ctr'\n            >\n                <label className='mm-modal-generic-section-item__fieldset-checkbox'>\n                    <input\n                        className='mm-modal-generic-section-item__input-checkbox'\n                        data-testid={checkboxFieldData.dataTestId}\n                        type='checkbox'\n                        name={checkboxFieldData.name}\n                        checked={checkboxFieldValue}\n                        onChange={(e) => handleCheckboxChange(e.target.checked)}\n                    />\n                    {checkboxFieldTitle}\n                </label>\n            </fieldset>\n            <fieldset className='mm-modal-generic-section-item__fieldset-react-select'>\n                <ReactSelect\n                    id={selectFieldData.id}\n                    inputId={selectFieldData.inputId}\n                    aria-labelledby={selectFieldData.ariaLabelledby}\n                    className='react-select singleSelect react-select-top'\n                    classNamePrefix='react-select'\n                    options={selectFieldData.options}\n                    clearable={selectFieldData.clearable}\n                    isClearable={selectFieldData.clearable}\n                    isDisabled={isSelectDisabled}\n                    isSearchable={false}\n                    placeholder={selectPlaceholder}\n                    onChange={(value) => handleSelectChange(value)}\n                    value={selectFieldValue}\n                    components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                />\n            </fieldset>\n        </>\n    );\n\n    return (\n        <BaseSettingItem\n            title={title}\n            content={content}\n            isContentInline={true}\n            description={description}\n            className={containerClassName}\n            descriptionAboveContent={descriptionAboveContent}\n        />\n    );\n}\n\nfunction NoIndicatorSeparatorComponent() {\n    return null;\n}\n\nexport type SelectOption = {\n    value: string;\n    label: ReactNode;\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport './modal_header.scss';\n\ntype Props = {\n    id: string;\n    title: string;\n    subtitle: string;\n    handleClose?: (e: React.MouseEvent) => void;\n}\n\nfunction ModalHeader({id, title, subtitle, handleClose}: Props) {\n    return (\n        <header className='mm-modal-header'>\n            <h1\n                id={`mm-modal-header-${id}`}\n                className='mm-modal-header__title'\n                tabIndex={0}\n            >\n                {title}\n            </h1>\n            <div className='mm-modal-header__vertical-divider'/>\n            <p className='mm-modal-header__subtitle'>{subtitle}</p>\n            <div\n                className='mm-modal-header__ctr'\n                onClick={handleClose}\n            >\n                <button className='btn btn-icon'>\n                    <i className='icon icon-close'/>\n                </button>\n            </div>\n        </header>\n    );\n}\nexport default ModalHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\n\nimport type {BaseSettingItemProps} from './base_setting_item';\nimport BaseSettingItem from './base_setting_item';\n\nexport type FieldsetRadio = {\n    options: Array<{\n        dataTestId?: string;\n        title: ReactNode;\n        name: string;\n        key: string;\n        value: string;\n        suffix?: JSX.Element;\n    }>;\n}\n\ntype Props = BaseSettingItemProps & {\n    className?: string;\n    inputFieldData: FieldsetRadio;\n    inputFieldValue: string;\n    handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nfunction RadioSettingItem({\n    title,\n    description,\n    className,\n    inputFieldData,\n    inputFieldValue,\n    handleChange,\n}: Props): JSX.Element {\n    const fields = inputFieldData.options.map((option) => {\n        return (\n            <label\n                key={option.key}\n                className='mm-modal-generic-section-item__label-radio'\n            >\n                <input\n                    id={option.key}\n                    data-testid={option.dataTestId}\n                    type='radio'\n                    name={option.name}\n                    checked={option.value === inputFieldValue}\n                    value={option.value}\n                    onChange={handleChange}\n                />\n                {option.title}\n                {option.suffix}\n            </label>\n        );\n    });\n\n    const content = (\n        <fieldset className='mm-modal-generic-section-item__fieldset-radio'>\n            {[...fields]}\n        </fieldset>\n    );\n    return (\n        <BaseSettingItem\n            className={className}\n            content={content}\n            title={title}\n            description={description}\n        />\n    );\n}\n\nexport default RadioSettingItem;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {ChannelNotifyProps} from '@mattermost/types/channels';\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport type {FieldsetCheckbox} from 'components/widgets/modals/components/checkbox_setting_item';\nimport type {FieldsetRadio} from 'components/widgets/modals/components/radio_setting_item';\nimport type {FieldsetReactSelect} from 'components/widgets/modals/components/react_select_item';\n\nimport {DesktopSound, NotificationLevels} from 'utils/constants';\nimport {optionsOfMessageNotificationSoundsSelect} from 'utils/notification_sounds';\n\nexport type ChannelMemberNotifyProps = Partial<ChannelNotifyProps> & Pick<UserNotifyProps, 'desktop_threads' | 'push_threads'>\n\nconst MuteChannelInputFieldData: FieldsetCheckbox = {\n    name: 'mute channel',\n    dataTestId: 'muteChannel',\n};\n\nconst DesktopReplyThreadsInputFieldData: FieldsetCheckbox = {\n    name: 'desktop reply threads',\n    dataTestId: 'desktopReplyThreads',\n};\n\nconst MobileReplyThreadsInputFieldData: FieldsetCheckbox = {\n    name: 'mobile reply threads',\n    dataTestId: 'mobileReplyThreads',\n};\n\nexport const sameMobileSettingsDesktopInputFieldData: FieldsetCheckbox = {\n    name: 'same mobile settings as Desktop',\n    dataTestId: 'sameMobileSettingsDesktop',\n};\n\nexport const IgnoreMentionsInputFieldData: FieldsetCheckbox = {\n    name: 'ignore mentions',\n    dataTestId: 'ignoreMentions',\n};\n\nexport const AutoFollowThreadsInputFieldData: FieldsetCheckbox = {\n    name: 'auto follow threads',\n    dataTestId: 'autoFollowThreads',\n};\n\nexport const desktopNotificationInputFieldData = (defaultOption: string): FieldsetRadio => {\n    return {\n        options: [\n            {\n                dataTestId: `desktopNotification-${NotificationLevels.ALL}`,\n                title: (\n                    <FormattedMessage\n                        id='channel_notifications.desktopNotificationAllLabel'\n                        defaultMessage='All new messages'\n                    />\n                ),\n                name: `desktopNotification-${NotificationLevels.ALL}`,\n                key: `desktopNotification-${NotificationLevels.ALL}`,\n                value: NotificationLevels.ALL,\n                suffix: defaultOption === NotificationLevels.ALL ? (\n                    <FormattedMessage\n                        id='channel_notifications.default'\n                        defaultMessage='(default)'\n                    />) : undefined,\n            },\n            {\n                dataTestId: `desktopNotification-${NotificationLevels.MENTION}`,\n                title: (\n                    <FormattedMessage\n                        id='channel_notifications.desktopNotificationMentionLabel'\n                        defaultMessage='Mentions, direct messages, and keywords only'\n                    />\n                ),\n                name: `desktopNotification-${NotificationLevels.MENTION}`,\n                key: `desktopNotification-${NotificationLevels.MENTION}`,\n                value: NotificationLevels.MENTION,\n                suffix: defaultOption === NotificationLevels.MENTION ? (\n                    <FormattedMessage\n                        id='channel_notifications.default'\n                        defaultMessage='(default)'\n                    />) : undefined,\n            },\n            {\n                dataTestId: `desktopNotification-${NotificationLevels.NONE}`,\n                title: (\n                    <FormattedMessage\n                        id='channel_notifications.desktopNotificationNothingLabel'\n                        defaultMessage='Nothing'\n                    />\n                ),\n                name: `desktopNotification-${NotificationLevels.NONE}`,\n                key: `desktopNotification-${NotificationLevels.NONE}`,\n                value: NotificationLevels.NONE,\n                suffix: defaultOption === NotificationLevels.NONE ? (\n                    <FormattedMessage\n                        id='channel_notifications.default'\n                        defaultMessage='(default)'\n                    />) : undefined,\n            },\n        ],\n    };\n};\n\nexport const desktopNotificationSoundsCheckboxFieldData: FieldsetCheckbox = {\n    name: 'desktopNotificationSoundsCheckbox',\n    dataTestId: 'desktopNotificationSoundsCheckbox',\n};\n\nexport const desktopNotificationSoundsSelectFieldData: FieldsetReactSelect = {\n    id: 'desktopNotificationSoundsSelect',\n    inputId: 'desktopNotificationSoundsSelectInputId',\n    options: optionsOfMessageNotificationSoundsSelect,\n};\n\nexport const mobileNotificationInputFieldData = (defaultOption: string): FieldsetRadio => {\n    return {\n        options: [\n            {\n                dataTestId: `MobileNotification-${NotificationLevels.ALL}`,\n                title: (\n                    <FormattedMessage\n                        id='channel_notifications.MobileNotificationAllLabel'\n                        defaultMessage='All new messages'\n                    />\n                ),\n                name: `MobileNotification-${NotificationLevels.ALL}`,\n                key: `MobileNotification-${NotificationLevels.ALL}`,\n                value: NotificationLevels.ALL,\n                suffix: defaultOption === NotificationLevels.ALL ? (\n                    <FormattedMessage\n                        id='channel_notifications.default'\n                        defaultMessage='(default)'\n                    />) : undefined,\n            },\n            {\n                dataTestId: `MobileNotification-${NotificationLevels.MENTION}`,\n                title: (\n                    <FormattedMessage\n                        id='channel_notifications.MobileNotificationMentionLabel'\n                        defaultMessage='Mentions, direct messages, and keywords only'\n                    />\n                ),\n                name: `MobileNotification-${NotificationLevels.MENTION}`,\n                key: `MobileNotification-${NotificationLevels.MENTION}`,\n                value: NotificationLevels.MENTION,\n                suffix: defaultOption === NotificationLevels.MENTION ? (\n                    <FormattedMessage\n                        id='channel_notifications.default'\n                        defaultMessage='(default)'\n                    />) : undefined,\n            },\n            {\n                dataTestId: `MobileNotification-${NotificationLevels.NONE}`,\n                title: (\n                    <FormattedMessage\n                        id='channel_notifications.MobileNotificationNothingLabel'\n                        defaultMessage='Nothing'\n                    />\n                ),\n                name: `MobileNotification-${NotificationLevels.NONE}`,\n                key: `MobileNotification-${NotificationLevels.NONE}`,\n                value: NotificationLevels.NONE,\n                suffix: defaultOption === NotificationLevels.NONE ? (\n                    <FormattedMessage\n                        id='channel_notifications.default'\n                        defaultMessage='(default)'\n                    />) : undefined,\n            },\n        ],\n    };\n};\n\n/**\n * This conversion is needed because User's preference for desktop sound is stored as either true or false. On the other hand,\n * Channel's specific desktop sound is stored as either On or Off.\n */\nexport function convertDesktopSoundNotifyPropFromUserToDesktop(userNotifyDesktopSound?: UserNotifyProps['desktop_sound']) {\n    if (!userNotifyDesktopSound) {\n        return DesktopSound.OFF;\n    }\n\n    if (userNotifyDesktopSound === 'true') {\n        return DesktopSound.ON;\n    }\n\n    return DesktopSound.ON;\n}\n\nconst utils = {\n    desktopNotificationInputFieldData,\n    desktopNotificationSoundsCheckboxFieldData,\n    desktopNotificationSoundsSelectFieldData,\n    IgnoreMentionsInputFieldData,\n    mobileNotificationInputFieldData,\n    MuteChannelInputFieldData,\n    DesktopReplyThreadsInputFieldData,\n    MobileReplyThreadsInputFieldData,\n    AutoFollowThreadsInputFieldData,\n    sameMobileSettingsDesktopInputFieldData,\n};\n\nexport default utils;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport type {ValueType} from 'react-select';\n\nimport {BellOffOutlineIcon, RefreshIcon} from '@mattermost/compass-icons/components';\nimport type {Channel, ChannelNotifyProps} from '@mattermost/types/channels';\nimport type {UserNotifyProps, UserProfile} from '@mattermost/types/users';\n\nimport AlertBanner from 'components/alert_banner';\nimport CheckboxSettingItem from 'components/widgets/modals/components/checkbox_setting_item';\nimport CheckboxWithSelectSettingItem from 'components/widgets/modals/components/checkbox_with_select_item';\nimport ModalHeader from 'components/widgets/modals/components/modal_header';\nimport ModalSection from 'components/widgets/modals/components/modal_section';\nimport RadioSettingItem from 'components/widgets/modals/components/radio_setting_item';\nimport type {Option} from 'components/widgets/modals/components/react_select_item';\n\nimport {IgnoreChannelMentions, NotificationLevels, DesktopSound} from 'utils/constants';\nimport {getValueOfNotificationSoundsSelect, notificationSoundKeys, stopTryNotificationRing, tryNotificationSound} from 'utils/notification_sounds';\n\nimport type {ChannelMemberNotifyProps} from './utils';\nimport utils, {convertDesktopSoundNotifyPropFromUserToDesktop} from './utils';\n\nimport type {PropsFromRedux} from './index';\n\nimport './channel_notifications_modal.scss';\n\ntype Props = PropsFromRedux & {\n\n    /**\n     * Function that is called when the modal has been hidden and should be removed\n     */\n    onExited: () => void;\n\n    /**\n     * Object with info about current channel\n     */\n    channel: Channel;\n\n    /**\n     * Object with info about current user\n     */\n    currentUser: UserProfile;\n};\n\nfunction getUseSameDesktopSetting(currentUserNotifyProps: UserNotifyProps, channelMemberNotifyProps?: ChannelMemberNotifyProps) {\n    const isSameAsDesktop = channelMemberNotifyProps ? channelMemberNotifyProps?.desktop === channelMemberNotifyProps?.push : currentUserNotifyProps.push === currentUserNotifyProps.desktop;\n    const isSameAsDesktopThreads = channelMemberNotifyProps ? channelMemberNotifyProps?.desktop_threads === channelMemberNotifyProps?.push_threads : currentUserNotifyProps.push_threads === currentUserNotifyProps.desktop_threads;\n    return isSameAsDesktop && isSameAsDesktopThreads;\n}\n\nfunction getStateFromNotifyProps(currentUserNotifyProps: UserNotifyProps, channelMemberNotifyProps?: ChannelMemberNotifyProps) {\n    let ignoreChannelMentionsDefault: ChannelNotifyProps['ignore_channel_mentions'] = IgnoreChannelMentions.OFF;\n\n    if (channelMemberNotifyProps?.mark_unread === NotificationLevels.MENTION || (currentUserNotifyProps.channel && currentUserNotifyProps.channel === 'false')) {\n        ignoreChannelMentionsDefault = IgnoreChannelMentions.ON;\n    }\n\n    let ignoreChannelMentions = channelMemberNotifyProps?.ignore_channel_mentions;\n    if (!ignoreChannelMentions || ignoreChannelMentions === IgnoreChannelMentions.DEFAULT) {\n        ignoreChannelMentions = ignoreChannelMentionsDefault;\n    }\n\n    const desktop = channelMemberNotifyProps?.desktop === NotificationLevels.DEFAULT ? currentUserNotifyProps.desktop : (channelMemberNotifyProps?.desktop || currentUserNotifyProps.desktop);\n    const push = channelMemberNotifyProps?.push === NotificationLevels.DEFAULT ? currentUserNotifyProps.desktop : (channelMemberNotifyProps?.push || currentUserNotifyProps.push);\n\n    let desktopSound;\n    if (channelMemberNotifyProps && channelMemberNotifyProps.desktop_sound) {\n        desktopSound = channelMemberNotifyProps.desktop_sound;\n    } else {\n        desktopSound = convertDesktopSoundNotifyPropFromUserToDesktop(currentUserNotifyProps.desktop_sound);\n    }\n\n    let desktopNotificationSound;\n    if (channelMemberNotifyProps && channelMemberNotifyProps.desktop_notification_sound) {\n        desktopNotificationSound = channelMemberNotifyProps.desktop_notification_sound;\n    } else if (currentUserNotifyProps && currentUserNotifyProps.desktop_notification_sound) {\n        desktopNotificationSound = currentUserNotifyProps.desktop_notification_sound;\n    } else {\n        desktopNotificationSound = notificationSoundKeys[0] as ChannelNotifyProps['desktop_notification_sound'];\n    }\n\n    return {\n        desktop,\n        desktop_threads: channelMemberNotifyProps?.desktop_threads || NotificationLevels.ALL,\n        desktop_sound: desktopSound,\n        desktop_notification_sound: desktopNotificationSound,\n        mark_unread: channelMemberNotifyProps?.mark_unread || NotificationLevels.ALL,\n        push,\n        push_threads: channelMemberNotifyProps?.push_threads || NotificationLevels.ALL,\n        ignore_channel_mentions: ignoreChannelMentions,\n        channel_auto_follow_threads: channelMemberNotifyProps?.channel_auto_follow_threads || 'off',\n    };\n}\n\ntype SettingsType = {\n    desktop: ChannelNotifyProps['desktop'];\n    desktop_threads: ChannelNotifyProps['desktop_threads'];\n    desktop_sound: ChannelNotifyProps['desktop_sound'];\n    desktop_notification_sound: ChannelNotifyProps['desktop_notification_sound'];\n    mark_unread: ChannelNotifyProps['mark_unread'];\n    push: ChannelNotifyProps['push'];\n    push_threads: ChannelNotifyProps['push_threads'];\n    ignore_channel_mentions: ChannelNotifyProps['ignore_channel_mentions'];\n    channel_auto_follow_threads: ChannelNotifyProps['channel_auto_follow_threads'];\n};\n\nexport default function ChannelNotificationsModal(props: Props) {\n    const {formatMessage} = useIntl();\n    const [show, setShow] = useState(true);\n    const [serverError, setServerError] = useState('');\n    const [mobileSettingsSameAsDesktop, setMobileSettingsSameAsDesktop] = useState<boolean>(getUseSameDesktopSetting(props.currentUser.notify_props, props.channelMember?.notify_props));\n    const [settings, setSettings] = useState<SettingsType>(getStateFromNotifyProps(props.currentUser.notify_props, props.channelMember?.notify_props));\n\n    function handleHide() {\n        setShow(false);\n    }\n\n    const handleChange = useCallback((values: Record<string, string>) => {\n        setSettings((prevSettings) => ({...prevSettings, ...values}));\n    }, []);\n\n    const handleMobileSettingsChange = useCallback(() => {\n        setMobileSettingsSameAsDesktop((prevSettings) => !prevSettings);\n        setSettings((prevSettings) => ({...prevSettings, push: prevSettings.desktop, push_threads: prevSettings.desktop_threads}));\n    }, []);\n\n    const muteOrIgnoreSectionContent = (\n        <>\n            <CheckboxSettingItem\n                inputFieldTitle={\n                    <FormattedMessage\n                        id='channel_notifications.muteChannelTitle'\n                        defaultMessage='Mute channel'\n                    />\n                }\n                description={formatMessage({\n                    id: 'channel_notifications.muteChannelDesc',\n                    defaultMessage: 'Turns off notifications for this channel. You\\'ll still see badges if you\\'re mentioned.',\n                })}\n                inputFieldValue={settings.mark_unread === 'mention'}\n                inputFieldData={utils.MuteChannelInputFieldData}\n                handleChange={(e) => handleChange({mark_unread: e ? 'mention' : 'all'})}\n            />\n            <CheckboxSettingItem\n                inputFieldTitle={\n                    <FormattedMessage\n                        id='channel_notifications.ignoreMentionsTitle'\n                        defaultMessage='Ignore mentions for @channel, @here and @all'\n                    />\n                }\n                description={formatMessage({\n                    id: 'channel_notifications.ignoreMentionsDesc',\n                    defaultMessage: 'When enabled, @channel, @here and @all will not trigger mentions or mention notifications in this channel',\n                })}\n                inputFieldValue={settings.ignore_channel_mentions === 'on'}\n                inputFieldData={utils.IgnoreMentionsInputFieldData}\n                handleChange={(e) => handleChange({ignore_channel_mentions: e ? 'on' : 'off'})}\n            />\n        </>\n    );\n\n    const handleChangeForMessageNotificationSoundSelect = (selectedOption: ValueType<Option>) => {\n        stopTryNotificationRing();\n\n        if (selectedOption && 'value' in selectedOption) {\n            handleChange({desktop_notification_sound: ((selectedOption as Option).value)});\n            tryNotificationSound(selectedOption.value);\n        }\n    };\n\n    const desktopNotificationsSectionContent = (\n        <>\n            <RadioSettingItem\n                title={formatMessage({\n                    id: 'channel_notifications.NotifyMeTitle',\n                    defaultMessage: 'Notify me about…',\n                })}\n                inputFieldValue={settings.desktop}\n                inputFieldData={utils.desktopNotificationInputFieldData(props.currentUser.notify_props.desktop)}\n                handleChange={(e) => handleChange({desktop: e.target.value})}\n            />\n            {props.collapsedReplyThreads && settings.desktop === 'mention' &&\n                <CheckboxSettingItem\n                    title={formatMessage({\n                        id: 'channel_notifications.ThreadsReplyTitle',\n                        defaultMessage: 'Thread reply notifications',\n                    })}\n                    inputFieldValue={settings.desktop_threads === 'all'}\n                    inputFieldData={utils.DesktopReplyThreadsInputFieldData}\n                    inputFieldTitle={\n                        <FormattedMessage\n                            id='channel_notifications.checkbox.threadsReplyTitle'\n                            defaultMessage=\"Notify me about replies to threads I\\'m following\"\n                        />\n                    }\n                    handleChange={(e) => handleChange({desktop_threads: e ? 'all' : 'mention'})}\n                />\n            }\n            {settings.desktop !== 'none' && (\n                <CheckboxWithSelectSettingItem\n                    title={formatMessage({\n                        id: 'channel_notifications.desktopNotifications.title',\n                        defaultMessage: 'Sounds',\n                    })}\n                    checkboxFieldTitle={\n                        <FormattedMessage\n                            id='channel_notifications.desktopNotifications.soundEnable'\n                            defaultMessage='Message notification sounds'\n                        />\n                    }\n                    checkboxFieldValue={settings.desktop_sound === DesktopSound.ON}\n                    checkboxFieldData={utils.desktopNotificationSoundsCheckboxFieldData}\n                    handleCheckboxChange={(isChecked) => handleChange({desktop_sound: isChecked ? DesktopSound.ON : DesktopSound.OFF})}\n                    selectFieldData={utils.desktopNotificationSoundsSelectFieldData}\n                    selectFieldValue={getValueOfNotificationSoundsSelect(settings.desktop_notification_sound)}\n                    isSelectDisabled={settings.desktop_sound !== 'on'}\n                    selectPlaceholder={formatMessage({\n                        id: 'channel_notifications.desktopNotifications.soundSelectPlaceholder',\n                        defaultMessage: 'Select a sound',\n                    })}\n                    handleSelectChange={handleChangeForMessageNotificationSoundSelect}\n                />\n            )}\n        </>\n    );\n\n    const mobileNotificationsSectionContent = (\n        <>\n            <CheckboxSettingItem\n                inputFieldTitle={\n                    <FormattedMessage\n                        id='channel_notifications.checkbox.sameMobileSettingsDesktop'\n                        defaultMessage='Use the same notification settings as desktop'\n                    />\n                }\n                inputFieldValue={mobileSettingsSameAsDesktop}\n                inputFieldData={utils.sameMobileSettingsDesktopInputFieldData}\n                handleChange={() => handleMobileSettingsChange()}\n            />\n            {!mobileSettingsSameAsDesktop && (\n                <>\n                    <RadioSettingItem\n                        title={formatMessage({\n                            id: 'channel_notifications.NotifyMeTitle',\n                            defaultMessage: 'Notify me about…',\n                        })}\n                        inputFieldValue={settings.push}\n                        inputFieldData={utils.mobileNotificationInputFieldData(props.currentUser.notify_props.push)}\n                        handleChange={(e) => handleChange({push: e.target.value})}\n                    />\n                    {props.collapsedReplyThreads && settings.push === 'mention' &&\n                    <CheckboxSettingItem\n                        title={formatMessage({\n                            id: 'channel_notifications.ThreadsReplyTitle',\n                            defaultMessage: 'Thread reply notifications',\n                        })}\n                        inputFieldTitle={\n                            <FormattedMessage\n                                id='channel_notifications.checkbox.threadsReplyTitle'\n                                defaultMessage=\"Notify me about replies to threads I\\'m following\"\n                            />\n                        }\n                        inputFieldValue={settings.push_threads === 'all'}\n                        inputFieldData={utils.MobileReplyThreadsInputFieldData}\n                        handleChange={(e) => handleChange({push_threads: e ? 'all' : 'mention'})}\n                    />}\n                </>\n            )}\n        </>\n    );\n\n    const autoFollowThreadsSectionContent = (\n        <CheckboxSettingItem\n            inputFieldTitle={\n                <FormattedMessage\n                    id='channel_notifications.checkbox.autoFollowThreadsTitle'\n                    defaultMessage='Automatically follow threads in this channel'\n                />\n            }\n            inputFieldValue={settings.channel_auto_follow_threads === 'on'}\n            inputFieldData={utils.AutoFollowThreadsInputFieldData}\n            handleChange={(e) => handleChange({channel_auto_follow_threads: e ? 'on' : 'off'})}\n        />\n    );\n\n    function handleSave() {\n        const userSettings: Partial<SettingsType> = {...settings};\n        if (!props.collapsedReplyThreads) {\n            delete userSettings.push_threads;\n            delete userSettings.desktop_threads;\n            delete userSettings.channel_auto_follow_threads;\n        }\n        props.actions.updateChannelNotifyProps(props.currentUser.id, props.channel.id, userSettings).then((value) => {\n            const {error} = value;\n            if (error) {\n                setServerError(error.message);\n            } else {\n                handleHide();\n            }\n        });\n    }\n\n    const resetToDefaultBtn = useCallback((sectionName: string) => {\n        const userNotifyProps = {\n            ...props.currentUser.notify_props,\n            desktop_notification_sound: props.currentUser.notify_props?.desktop_notification_sound ?? notificationSoundKeys[0] as ChannelNotifyProps['desktop_notification_sound'],\n        };\n\n        function resetToDefault(sectionName: string) {\n            if (sectionName === 'desktop') {\n                setSettings({\n                    ...settings,\n                    desktop: userNotifyProps.desktop,\n                    desktop_threads: userNotifyProps.desktop_threads || settings.desktop_threads,\n                    desktop_sound: convertDesktopSoundNotifyPropFromUserToDesktop(userNotifyProps.desktop_sound),\n                    desktop_notification_sound: userNotifyProps?.desktop_notification_sound ?? notificationSoundKeys[0] as ChannelNotifyProps['desktop_notification_sound'],\n                });\n            }\n\n            if (sectionName === 'push') {\n                setSettings({...settings, push: userNotifyProps.desktop, push_threads: userNotifyProps.push_threads || settings.push_threads});\n            }\n        }\n\n        const isDesktopSameAsDefault =\n            userNotifyProps.desktop === settings.desktop &&\n            userNotifyProps.desktop_threads === settings.desktop_threads &&\n            userNotifyProps.desktop_notification_sound === settings.desktop_notification_sound &&\n            convertDesktopSoundNotifyPropFromUserToDesktop(userNotifyProps.desktop_sound) === settings.desktop_sound;\n\n        const isPushSameAsDefault = (userNotifyProps.push === settings.push && userNotifyProps.push_threads === settings.push_threads);\n\n        if ((sectionName === 'desktop' && isDesktopSameAsDefault) || (sectionName === 'push' && isPushSameAsDefault)) {\n            return undefined;\n        }\n\n        return (\n            <button\n                className='channel-notifications-settings-modal__reset-btn'\n                onClick={() => resetToDefault(sectionName)}\n                data-testid={`resetToDefaultButton-${sectionName}`}\n            >\n                <RefreshIcon\n                    size={14}\n                    color={'currentColor'}\n                />\n                <FormattedMessage\n                    id='channel_notifications.resetToDefault'\n                    defaultMessage='Reset to default'\n                />\n            </button>\n        );\n    }, [props.currentUser.notify_props, settings]);\n\n    const desktopAndMobileNotificationSectionContent = settings.mark_unread === 'all' ? (\n        <>\n            <div className='channel-notifications-settings-modal__divider'/>\n            <ModalSection\n                title={formatMessage({\n                    id: 'channel_notifications.desktopNotificationsTitle',\n                    defaultMessage: 'Desktop Notifications',\n                })}\n                titleSuffix={resetToDefaultBtn('desktop')}\n                description={formatMessage({\n                    id: 'channel_notifications.desktopNotificationsDesc',\n                    defaultMessage: 'Available on Chrome, Edge, Firefox, and the Mattermost Desktop App.',\n                })}\n                content={desktopNotificationsSectionContent}\n            />\n            <div className='channel-notifications-settings-modal__divider'/>\n            <ModalSection\n                title={formatMessage({\n                    id: 'channel_notifications.mobileNotificationsTitle',\n                    defaultMessage: 'Mobile Notifications',\n                })}\n                titleSuffix={resetToDefaultBtn('push')}\n                description={formatMessage({\n                    id: 'channel_notifications.mobileNotificationsDesc',\n                    defaultMessage: 'Notification alerts are pushed to your mobile device when there is activity in Mattermost.',\n                })}\n                content={mobileNotificationsSectionContent}\n            />\n        </>\n    ) : (\n        <AlertBanner\n            id='channelNotificationsMutedBanner'\n            mode='info'\n            variant='app'\n            customIcon={\n                <BellOffOutlineIcon\n                    size={24}\n                    color={'currentColor'}\n                />\n            }\n            title={\n                <FormattedMessage\n                    id='channel_notifications.alertBanner.title'\n                    defaultMessage='This channel is muted'\n                />\n            }\n            message={\n                <FormattedMessage\n                    id='channel_notifications.alertBanner.description'\n                    defaultMessage='All other notification preferences for this channel are disabled'\n                />\n            }\n        />\n    );\n\n    return (\n        <Modal\n            dialogClassName='a11y__modal channel-notifications-settings-modal'\n            show={show}\n            onHide={handleHide}\n            onExited={props.onExited}\n            role='dialog'\n            aria-labelledby='channelNotificationModalLabel'\n            style={{display: 'flex', placeItems: 'center'}}\n        >\n            <ModalHeader\n                id={'channelNotificationModalLabel'}\n                title={formatMessage({\n                    id: 'channel_notifications.preferences',\n                    defaultMessage: 'Notification Preferences',\n                })}\n                subtitle={props.channel.display_name}\n                handleClose={handleHide}\n            />\n            <main className='channel-notifications-settings-modal__body'>\n                <ModalSection\n                    title={formatMessage({\n                        id: 'channel_notifications.muteAndIgnore',\n                        defaultMessage: 'Mute or ignore',\n                    })}\n                    content={muteOrIgnoreSectionContent}\n                />\n                {desktopAndMobileNotificationSectionContent}\n                {props.collapsedReplyThreads &&\n                    <>\n                        <div className='channel-notifications-settings-modal__divider'/>\n                        <ModalSection\n                            title={formatMessage({\n                                id: 'channel_notifications.autoFollowThreadsTitle',\n                                defaultMessage: 'Follow all threads in this channel',\n                            })}\n                            description={formatMessage({\n                                id: 'channel_notifications.autoFollowThreadsDesc',\n                                defaultMessage: 'When enabled, all new replies in this channel will be automatically followed and will appear in your Threads view.',\n                            })}\n                            content={autoFollowThreadsSectionContent}\n                        />\n                    </>\n                }\n            </main>\n            <footer className='channel-notifications-settings-modal__footer'>\n                {serverError &&\n                    <span className='channel-notifications-settings-modal__server-error'>\n                        {serverError}\n                    </span>\n                }\n                <button\n                    className='btn btn-tertiary btn-md'\n                    onClick={handleHide}\n                >\n                    <FormattedMessage\n                        id='generic_btn.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </button>\n                <button\n                    className='btn btn-primary btn-md'\n                    onClick={handleSave}\n                >\n                    <FormattedMessage\n                        id='generic_btn.save'\n                        defaultMessage='Save'\n                    />\n                </button>\n            </footer>\n        </Modal>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\nimport {getMyCurrentChannelMembership} from 'mattermost-redux/selectors/entities/channels';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {\n    isCollapsedThreadsEnabled,\n} from 'mattermost-redux/selectors/entities/preferences';\n\nimport type {GlobalState} from 'types/store/index';\n\nimport ChannelNotificationsModal from './channel_notifications_modal';\n\nconst mapStateToProps = (state: GlobalState) => ({\n    collapsedReplyThreads: isCollapsedThreadsEnabled(state),\n    channelMember: getMyCurrentChannelMembership(state),\n    sendPushNotifications: getConfig(state).SendPushNotifications === 'true',\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>\n\nexport default connector(ChannelNotificationsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport type {MouseEventHandler, RefObject} from 'react';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {useSelector} from 'react-redux';\nimport styled, {createGlobalStyle, css} from 'styled-components';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {getIsMobileView} from 'selectors/views/browser';\nimport {useGlobalState} from 'stores/hooks';\n\nimport type {CssVarKeyForResizable} from './constants';\nimport {ResizeDirection} from './constants';\nimport {isSizeLessThanSnapSize, isSnapableSpeed, shouldSnapWhenSizeGrown, shouldSnapWhenSizeShrunk} from './utils';\n\ntype Props = {\n    id?: string;\n    className?: string;\n    name: string;\n    disabled?: boolean;\n    defaultWidth: number;\n    globalCssVar: CssVarKeyForResizable;\n    dir: ResizeDirection;\n    containerRef: RefObject<HTMLElement>;\n    onResizeStart?: (startWidth: number) => void;\n    onResize?: (width: number, cssVarProperty: string, cssVarValue: string) => void;\n    onResizeEnd?: (finalWidth: number, cssVarProperty: string, cssVarValue: string) => void;\n    onDividerDoubleClick?: (prevWidth: number, cssVarProperty: string) => void;\n}\n\nconst Divider = styled.div<{isActive: boolean}>`\n    position: absolute;\n    z-index: 50;\n    top: 0;\n    width: 12px;\n    height: 100%;\n    cursor: col-resize;\n    &.left {\n        right: -12px;\n    }\n\n    &::after {\n        position: absolute;\n        width: 4px;\n        height: 100%;\n        background-color: ${({isActive}) => (isActive ? 'var(--sidebar-text-active-border)' : 'transparent')};\n        content: '';\n    }\n    &:hover {\n        &::after {\n            background-color: var(--sidebar-text-active-border);\n            transition: background-color 400ms step-end;\n        }\n    }\n    &.snapped {\n        &::after {\n            animation: emphasis-sidebar-resize-line 800ms;\n        }\n    }\n`;\n\nconst ResizableDividerGlobalStyle = createGlobalStyle<{active: boolean; varName: CssVarKeyForResizable; width: number | null}>`\n    ${({active}) => active && css`\n        body {\n            cursor: col-resize;\n            user-select: none;\n        }\n    `}\n    ${({varName, width}) => width && css`\n        :root {\n            --${varName}: ${width}px;\n        }\n    `}\n`;\n\nfunction ResizableDivider({\n    id,\n    name,\n    className,\n    disabled,\n    dir,\n    containerRef,\n    defaultWidth,\n    onResize,\n    onResizeStart,\n    onResizeEnd,\n    onDividerDoubleClick,\n    ...props\n}: Props) {\n    const resizeLineRef = useRef<HTMLDivElement>(null);\n\n    const startWidth = useRef(0);\n    const lastWidth = useRef<number | null>(null);\n\n    const previousClientX = useRef(0);\n\n    const cssVarKey = `--${props.globalCssVar}`;\n\n    const currentUserID = useSelector(getCurrentUserId);\n    const isMobileView = useSelector(getIsMobileView);\n\n    const [isActive, setIsActive] = useState(false);\n    const [width, setWidth] = useGlobalState<number | null>(null, `resizable_${name}:`, currentUserID);\n\n    const defaultOnResizeChange = (width: number, cssVarProp: string, cssVarValue: string) => {\n        containerRef.current?.style.setProperty(cssVarProp, cssVarValue);\n        lastWidth.current = width;\n    };\n\n    const handleOnResize = (width: number, cssVarProp: string, cssVarValue: string) => {\n        if (onResize) {\n            onResize(width, cssVarProp, cssVarValue);\n        }\n\n        defaultOnResizeChange(width, cssVarProp, cssVarValue);\n    };\n\n    const reset = () => {\n        startWidth.current = 0;\n        previousClientX.current = 0;\n        lastWidth.current = null;\n    };\n\n    const onMouseDown: MouseEventHandler<HTMLDivElement> = (e) => {\n        if (disabled || !containerRef.current) {\n            return;\n        }\n        previousClientX.current = e.clientX;\n        startWidth.current = containerRef.current.getBoundingClientRect().width;\n\n        setIsActive(true);\n\n        if (onResizeStart) {\n            onResizeStart(startWidth.current);\n        }\n\n        handleOnResize(startWidth.current, cssVarKey, `${startWidth.current}px`);\n\n        document.body.classList.add('layout-changing');\n    };\n\n    useEffect(() => {\n        if (!isActive || disabled) {\n            reset();\n            return undefined;\n        }\n        const onMouseMove = (e: MouseEvent) => {\n            const resizeLine = resizeLineRef.current;\n\n            if (!isActive) {\n                return;\n            }\n\n            if (!resizeLine) {\n                return;\n            }\n\n            e.preventDefault();\n\n            const previousWidth = lastWidth.current ?? 0;\n            let widthDiff = 0;\n\n            switch (dir) {\n            case ResizeDirection.LEFT:\n                widthDiff = e.clientX - previousClientX.current;\n                break;\n            case ResizeDirection.RIGHT:\n                widthDiff = previousClientX.current - e.clientX;\n                break;\n            }\n\n            const newWidth = previousWidth + widthDiff;\n\n            if (resizeLine.classList.contains('snapped')) {\n                const diff = newWidth - defaultWidth;\n\n                if (isSizeLessThanSnapSize(diff)) {\n                    return;\n                }\n\n                handleOnResize(newWidth, cssVarKey, `${newWidth}px`);\n\n                resizeLine.classList.remove('snapped');\n                previousClientX.current = e.clientX;\n\n                return;\n            }\n\n            previousClientX.current = e.clientX;\n\n            const shouldSnap = shouldSnapWhenSizeGrown(newWidth, previousWidth, defaultWidth) || shouldSnapWhenSizeShrunk(newWidth, previousWidth, defaultWidth);\n\n            if (isSnapableSpeed(newWidth - previousWidth) && shouldSnap) {\n                switch (dir) {\n                case ResizeDirection.LEFT:\n                    previousClientX.current += defaultWidth - newWidth;\n                    break;\n                case ResizeDirection.RIGHT:\n                    previousClientX.current += newWidth - defaultWidth;\n                    break;\n                }\n\n                handleOnResize(defaultWidth, cssVarKey, `${defaultWidth}px`);\n\n                resizeLine.classList.add('snapped');\n                return;\n            }\n\n            handleOnResize(newWidth, cssVarKey, `${newWidth}px`);\n        };\n\n        const onMouseUp = () => {\n            const finalWidth = containerRef.current?.getBoundingClientRect().width;\n            if (isActive && finalWidth) {\n                setWidth(finalWidth);\n                onResizeEnd?.(finalWidth, cssVarKey, `${finalWidth}px`);\n            }\n\n            containerRef.current?.style.removeProperty(cssVarKey);\n            document.body.classList.remove('layout-changing');\n            reset();\n            setIsActive(false);\n        };\n\n        window.addEventListener('mousemove', onMouseMove);\n        window.addEventListener('mouseup', onMouseUp);\n\n        return () => {\n            window.removeEventListener('mousemove', onMouseMove);\n            window.removeEventListener('mouseup', onMouseUp);\n        };\n    }, [isActive, disabled]);\n\n    const onDoubleClick = () => {\n        onDividerDoubleClick?.(width ?? 0, cssVarKey);\n        reset();\n        setWidth(null);\n    };\n\n    if (disabled || isMobileView) {\n        return null;\n    }\n\n    return (\n        <>\n            <Divider\n                id={id}\n                className={classNames(className, {\n                    left: dir === ResizeDirection.LEFT,\n                    right: dir === ResizeDirection.RIGHT,\n                })}\n                ref={resizeLineRef}\n                isActive={isActive}\n                onMouseDown={onMouseDown}\n                onDoubleClick={onDoubleClick}\n            />\n            <ResizableDividerGlobalStyle\n                varName={props.globalCssVar}\n                width={width}\n                active={isActive}\n            />\n        </>\n\n    );\n}\n\nexport default ResizableDivider;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {SidebarSize, SIDEBAR_SNAP_SIZE, SIDEBAR_SNAP_SPEED_LIMIT} from './constants';\n\nexport const isSizeLessThanSnapSize = (size: number) => {\n    return Math.abs(size) <= SIDEBAR_SNAP_SIZE;\n};\n\nexport const isSnapableSpeed = (speed: number) => {\n    return Math.abs(speed) <= SIDEBAR_SNAP_SPEED_LIMIT;\n};\n\nexport const shouldSnapWhenSizeGrown = (newWidth: number, prevWidth: number, defaultWidth: number) => {\n    const diff = defaultWidth - newWidth;\n    const isGrowing = newWidth > prevWidth;\n\n    return diff >= 0 && diff <= SIDEBAR_SNAP_SIZE && isGrowing;\n};\n\nexport const shouldSnapWhenSizeShrunk = (newWidth: number, prevWidth: number, defaultWidth: number) => {\n    const diff = newWidth - defaultWidth;\n    const isShrinking = newWidth < prevWidth;\n\n    return diff >= 0 && diff <= SIDEBAR_SNAP_SIZE && isShrinking;\n};\n\nexport const shouldRhsOverlapChannelView = (size: SidebarSize) => size === SidebarSize.MEDIUM;\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useCallback} from 'react';\nimport {useSelector, useDispatch, shallowEqual} from 'react-redux';\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {makeGetGlobalItem} from 'selectors/storage';\n\nconst currentUserAndTeamSuffix = createSelector('currentUserAndTeamSuffix', [\n    getCurrentUserId,\n    getCurrentTeamId,\n], (\n    userId,\n    teamId,\n) => {\n    return `:${userId}:${teamId}`;\n});\n\n/**\n *\n * @param initialValue\n * @param name name of stored value, prepended to suffix\n * @param suffix to provide scope; defaults to user and team\n */\nexport function useGlobalState<TVal>(\n    initialValue: TVal,\n    name: string,\n    suffix?: string,\n): [TVal, (value: TVal) => ReturnType<typeof setGlobalItem>] {\n    const dispatch = useDispatch();\n    const defaultSuffix = useSelector(currentUserAndTeamSuffix);\n    const suffixToUse = suffix || defaultSuffix;\n    const storedKey = `${name}${suffixToUse}`;\n\n    const value = useSelector(makeGetGlobalItem(storedKey, initialValue), shallowEqual);\n    const setValue = useCallback((newValue) => dispatch(setGlobalItem(storedKey, newValue)), [storedKey]);\n\n    return [\n        value,\n        setValue,\n    ];\n}\n"],"names":["CheckboxWithSelectSettingItem","_ref","title","description","containerClassName","descriptionAboveContent","checkboxFieldTitle","checkboxFieldData","checkboxFieldValue","handleCheckboxChange","selectFieldData","selectFieldValue","handleSelectChange","isSelectDisabled","selectPlaceholder","content","React","key","name","className","dataTestId","type","checked","onChange","e","target","ReactSelect","id","inputId","ariaLabelledby","classNamePrefix","options","clearable","isClearable","isDisabled","isSearchable","placeholder","value","components","IndicatorSeparator","NoIndicatorSeparatorComponent","BaseSettingItem","isContentInline","ModalHeader","subtitle","handleClose","concat","tabIndex","onClick","propTypes","_pt","RadioSettingItem","inputFieldData","inputFieldValue","handleChange","fields","map","option","suffix","isRequired","convertDesktopSoundNotifyPropFromUserToDesktop","userNotifyDesktopSound","DesktopSound","desktopNotificationInputFieldData","defaultOption","NotificationLevels","FormattedMessage","defaultMessage","undefined","desktopNotificationSoundsCheckboxFieldData","desktopNotificationSoundsSelectFieldData","optionsOfMessageNotificationSoundsSelect","IgnoreMentionsInputFieldData","mobileNotificationInputFieldData","MuteChannelInputFieldData","DesktopReplyThreadsInputFieldData","MobileReplyThreadsInputFieldData","AutoFollowThreadsInputFieldData","sameMobileSettingsDesktopInputFieldData","ChannelNotificationsModal","props","_props$channelMember","_props$channelMember2","formatMessage","useIntl","show","setShow","useState","serverError","setServerError","mobileSettingsSameAsDesktop","setMobileSettingsSameAsDesktop","currentUserNotifyProps","channelMemberNotifyProps","isSameAsDesktop","desktop","push","isSameAsDesktopThreads","desktop_threads","push_threads","getUseSameDesktopSetting","currentUser","notify_props","channelMember","settings","setSettings","ignoreChannelMentionsDefault","IgnoreChannelMentions","mark_unread","channel","ignoreChannelMentions","ignore_channel_mentions","desktopSound","desktopNotificationSound","desktop_sound","desktop_notification_sound","notificationSoundKeys","channel_auto_follow_threads","getStateFromNotifyProps","handleHide","useCallback","values","prevSettings","_objectSpread","handleMobileSettingsChange","muteOrIgnoreSectionContent","CheckboxSettingItem","inputFieldTitle","utils","desktopNotificationsSectionContent","collapsedReplyThreads","isChecked","getValueOfNotificationSoundsSelect","selectedOption","stopTryNotificationRing","tryNotificationSound","mobileNotificationsSectionContent","autoFollowThreadsSectionContent","resetToDefaultBtn","sectionName","_props$currentUser$no","_props$currentUser$no2","userNotifyProps","isDesktopSameAsDefault","isPushSameAsDefault","_userNotifyProps$desk","resetToDefault","RefreshIcon","size","color","desktopAndMobileNotificationSectionContent","ModalSection","titleSuffix","AlertBanner","mode","variant","customIcon","BellOffOutlineIcon","message","Modal","dialogClassName","onHide","onExited","role","style","display","placeItems","display_name","userSettings","actions","updateChannelNotifyProps","then","error","connect","state","isCollapsedThreadsEnabled","getMyCurrentChannelMembership","sendPushNotifications","getConfig","SendPushNotifications","dispatch","bindActionCreators","Divider","styled","displayName","isActive","ResizableDividerGlobalStyle","createGlobalStyle","_ref2","active","css","_ref3","varName","width","ResizableDivider","_ref4","disabled","dir","containerRef","defaultWidth","onResize","onResizeStart","onResizeEnd","onDividerDoubleClick","_objectWithoutProperties","_excluded","resizeLineRef","useRef","startWidth","lastWidth","previousClientX","cssVarKey","globalCssVar","currentUserID","useSelector","getCurrentUserId","isMobileView","getIsMobileView","setIsActive","setWidth","useGlobalState","handleOnResize","cssVarProp","cssVarValue","defaultOnResizeChange","_containerRef$current","current","setProperty","reset","useEffect","onMouseMove","_lastWidth$current","resizeLine","preventDefault","previousWidth","widthDiff","ResizeDirection","clientX","newWidth","classList","contains","diff","isSizeLessThanSnapSize","remove","shouldSnap","shouldSnapWhenSizeGrown","shouldSnapWhenSizeShrunk","isSnapableSpeed","add","onMouseUp","_containerRef$current2","_containerRef$current3","finalWidth","getBoundingClientRect","removeProperty","document","body","window","addEventListener","removeEventListener","classNames","left","right","ref","onMouseDown","onDoubleClick","Math","abs","SIDEBAR_SNAP_SIZE","speed","SIDEBAR_SNAP_SPEED_LIMIT","prevWidth","isGrowing","isShrinking","shouldRhsOverlapChannelView","SidebarSize","currentUserAndTeamSuffix","createSelector","getCurrentTeamId","userId","teamId","initialValue","useDispatch","defaultSuffix","suffixToUse","storedKey","makeGetGlobalItem","shallowEqual","newValue","setGlobalItem"],"sourceRoot":""}