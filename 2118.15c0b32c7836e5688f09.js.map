{"version":3,"file":"2118.15c0b32c7836e5688f09.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/file_info_preview/file_info_preview.tsx","webpack://mattermost-webapp/./src/components/file_info_preview/index.ts","webpack://mattermost-webapp/./src/components/archived_preview.tsx","webpack://mattermost-webapp/./src/components/audio_video_preview/audio_video_preview.tsx","webpack://mattermost-webapp/./src/components/audio_video_preview/index.ts","webpack://mattermost-webapp/./src/components/code_preview.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_info/file_preview_modal_info.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/types.ts","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_main_actions/file_preview_modal_main_actions.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_footer/file_preview_modal_footer.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_main_nav/file_preview_modal_main_nav.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal_header/file_preview_modal_header.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/image_preview.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/popover_bar/popover_bar.tsx","webpack://mattermost-webapp/./src/components/file_preview_modal/popover_bar/index.ts","webpack://mattermost-webapp/./src/components/file_preview_modal/file_preview_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport * as Utils from 'utils/utils';\n\ntype Props = {\n    fileInfo: FileInfo;\n    fileUrl: string;\n    canDownloadFiles: boolean;\n};\n\nconst FileInfoPreview = ({\n    fileInfo,\n    fileUrl,\n    canDownloadFiles,\n}: Props) => {\n    // non-image files include a section providing details about the file\n    const infoParts = [];\n\n    if (fileInfo.extension !== '') {\n        infoParts.push(\n            Utils.localizeMessage('file_info_preview.type', 'File type ') +\n        fileInfo.extension.toUpperCase(),\n        );\n    }\n\n    if (fileInfo.size) {\n        infoParts.push(\n            Utils.localizeMessage('file_info_preview.size', 'Size ') +\n        Utils.fileSizeToString(fileInfo.size),\n        );\n    }\n\n    const infoString = infoParts.join(', ');\n\n    let preview = null;\n    if (canDownloadFiles) {\n        preview = (\n            <a\n                className='file-details__preview'\n                href={fileUrl}\n            >\n                <span className='file-details__preview-helper'/>\n                <img\n                    alt={'file preview'}\n                    src={Utils.getFileIconPath(fileInfo)}\n                />\n            </a>\n        );\n    } else {\n        preview = (\n            <span className='file-details__preview'>\n                <span className='file-details__preview-helper'/>\n                <img\n                    alt={'file preview'}\n                    src={Utils.getFileIconPath(fileInfo)}\n                />\n            </span>\n        );\n    }\n\n    return (\n        <div className='file-details__container'>\n            {preview}\n            <div className='file-details'>\n                <div className='file-details__name'>{fileInfo.name}</div>\n                <div className='file-details__info'>{infoString}</div>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(FileInfoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {canDownloadFiles} from 'utils/file_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport FileInfoPreview from './file_info_preview';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        canDownloadFiles: canDownloadFiles(config),\n    };\n}\n\nexport default connect(mapStateToProps)(FileInfoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport {ArchiveOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {FileInfo} from '@mattermost/types/files';\n\ninterface Props {\n    fileInfo: FileInfo;\n}\n\nexport default function FileInfoPreview(props: Props) {\n    const intl = useIntl();\n\n    const infoString = intl.formatMessage({\n        id: 'workspace_limits.archived_file.archived',\n        defaultMessage: 'This file is archived',\n    });\n\n    const preview = (\n        <span className='file-details__preview file-details__preview--archived'>\n            <ArchiveOutlineIcon\n                size={80}\n                color={'rgba(var(--center-channel-color-rgb), 0.48)'}\n                data-testid='archived-file-icon'\n            />\n        </span>\n    );\n\n    return (\n        <div className='file-details__container'>\n            {preview}\n            <div className='file-details'>\n                <div className='file-details__name'>{props.fileInfo.name}</div>\n                <div className='file-details__info'>{infoString}</div>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport FileInfoPreview from 'components/file_info_preview';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    fileInfo: FileInfo;\n    fileUrl: string;\n    isMobileView: boolean;\n}\n\ntype State = {\n    canPlay: boolean;\n}\n\nexport default class AudioVideoPreview extends React.PureComponent<Props, State> {\n    sourceRef = React.createRef<HTMLSourceElement>();\n    videoRef = React.createRef<HTMLVideoElement>();\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            canPlay: true,\n        };\n    }\n\n    componentDidMount() {\n        this.handleFileInfoChanged();\n\n        if (this.sourceRef.current) {\n            this.sourceRef.current.addEventListener('error', this.handleLoadError, {once: true});\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.handleFileInfoChanged();\n        }\n\n        if (this.sourceRef.current) {\n            this.sourceRef.current.addEventListener('error', this.handleLoadError, {once: true});\n        }\n    }\n\n    handleFileInfoChanged = () => {\n        let video = this.videoRef.current;\n        if (!video) {\n            video = document.createElement('video');\n        }\n\n        this.setState({\n            canPlay: true,\n        });\n    };\n\n    handleLoadError = () => {\n        this.setState({\n            canPlay: false,\n        });\n    };\n\n    stop = () => {\n        if (this.videoRef.current) {\n            const video = this.videoRef.current;\n            video.pause();\n            video.currentTime = 0;\n        }\n    };\n\n    render() {\n        if (!this.state.canPlay) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        let width = Constants.WEB_VIDEO_WIDTH;\n        let height = Constants.WEB_VIDEO_HEIGHT;\n        if (this.props.isMobileView) {\n            width = Constants.MOBILE_VIDEO_WIDTH;\n            height = Constants.MOBILE_VIDEO_HEIGHT;\n        }\n\n        // add a key to the video to prevent React from using an old video source while a new one is loading\n        return (\n            <video\n                key={this.props.fileInfo.id}\n                ref={this.videoRef}\n                data-setup='{}'\n                controls={true}\n                width={width}\n                height={height}\n            >\n                <source\n                    ref={this.sourceRef}\n                    src={this.props.fileUrl}\n                />\n            </video>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport AudioVideoPreview from './audio_video_preview';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(AudioVideoPreview);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport FileInfoPreview from 'components/file_info_preview';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport Constants from 'utils/constants';\nimport * as SyntaxHighlighting from 'utils/syntax_highlighting';\n\nimport type {LinkInfo} from './file_preview_modal/types';\n\ntype Props = {\n    fileInfo: FileInfo;\n    fileUrl: string;\n    className: string;\n    getContent?: (code: string) => void;\n};\n\ntype State = {\n    code: string;\n    lang: string;\n    highlighted: string;\n    loading: boolean;\n    success: boolean;\n    prevFileUrl?: string;\n}\n\nexport default class CodePreview extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            code: '',\n            lang: '',\n            highlighted: '',\n            loading: true,\n            success: true,\n        };\n    }\n\n    componentDidMount() {\n        this.getCode();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.fileUrl !== state.prevFileUrl) {\n            const usedLanguage = SyntaxHighlighting.getLanguageFromFileExtension(props.fileInfo.extension);\n\n            if (!usedLanguage || props.fileInfo.size > Constants.CODE_PREVIEW_MAX_FILE_SIZE) {\n                return {\n                    code: '',\n                    lang: '',\n                    loading: false,\n                    success: false,\n                    prevFileUrl: props.fileUrl,\n                };\n            }\n\n            return {\n                code: '',\n                lang: usedLanguage,\n                loading: true,\n                prevFileUrl: props.fileUrl,\n            };\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.getCode();\n        }\n    }\n\n    getCode = async () => {\n        if (!this.state.lang || this.props.fileInfo.size > Constants.CODE_PREVIEW_MAX_FILE_SIZE) {\n            return;\n        }\n        try {\n            const data = await fetch(this.props.fileUrl);\n            const text = await data.text();\n            this.handleReceivedCode(text);\n        } catch (e) {\n            this.handleReceivedError();\n        }\n    };\n\n    handleReceivedCode = async (data: string | Node) => {\n        let code = data as string;\n        const Data = data as Node;\n        if (Data.nodeName === '#document') {\n            code = new XMLSerializer().serializeToString(Data);\n        }\n        this.props.getContent?.(code);\n        this.setState({\n            code,\n            highlighted: await SyntaxHighlighting.highlight(this.state.lang, code),\n            loading: false,\n            success: true,\n        });\n    };\n\n    handleReceivedError = () => {\n        this.setState({loading: false, success: false});\n    };\n\n    static supports(fileInfo: FileInfo | LinkInfo) {\n        return Boolean(SyntaxHighlighting.getLanguageFromFileExtension(fileInfo.extension));\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const language = SyntaxHighlighting.getLanguageName(this.state.lang);\n\n        return (\n            <div className='post-code code-preview'>\n                <span className='post-code__language'>\n                    {`${this.props.fileInfo.name} - ${language}`}\n                </span>\n                <div className='hljs'>\n                    <div className='post-code__line-numbers'>\n                        {SyntaxHighlighting.renderLineNumbers(this.state.code)}\n                    </div>\n                    <code dangerouslySetInnerHTML={{__html: this.state.highlighted}}/>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Post} from '@mattermost/types/posts';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {makeGetChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {\n    getUser as selectUser,\n    makeGetDisplayName,\n} from 'mattermost-redux/selectors/entities/users';\n\nimport Avatar from 'components/widgets/users/avatar/avatar';\n\nimport {imageURLForUser} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport './file_preview_modal_info.scss';\n\ninterface Props {\n    showFileName: boolean;\n    filename: string;\n    post?: Post;\n}\n\nconst displayNameGetter = makeGetDisplayName();\n\nconst FilePreviewModalInfo: React.FC<Props> = (props: Props) => {\n    const user = useSelector((state: GlobalState) => selectUser(state, props.post?.user_id ?? '')) as UserProfile | undefined;\n    const channel = useSelector((state: GlobalState) => {\n        const getChannel = makeGetChannel();\n        return getChannel(state, {id: props.post?.channel_id ?? ''});\n    });\n    const name = useSelector((state: GlobalState) => displayNameGetter(state, props.post?.user_id ?? '', true));\n\n    let info;\n    const channelName = channel ? (\n        <FormattedMessage\n            id='file_preview_modal_info.shared_in'\n            defaultMessage='Shared in ~{name}'\n            values={{\n                name: channel.display_name || channel.name,\n            }}\n        />\n    ) : null;\n    if (props.showFileName) {\n        info = (\n            <>\n                <h5 className='file-preview-modal__file-name'>{props.filename}\n                </h5>\n                <span className='file-preview-modal__file-details'>\n                    <span className='file-preview-modal__file-details-user-name'>{name}</span>\n                    <span className='file-preview-modal__channel'>{channelName}</span>\n                </span>\n            </>\n        );\n    } else {\n        info = (\n            <>\n                <h5 className='file-preview-modal__user-name'>{name}\n                </h5>\n                <span className='file-preview-modal__channel'>{channelName}\n                </span>\n            </>\n        );\n    }\n\n    return (\n        <div className='file-preview-modal__info'>\n            {\n                (props.post && Object.keys(props.post).length > 0) &&\n                <Avatar\n                    size='lg'\n                    url={imageURLForUser(props.post.user_id, user?.last_picture_update)}\n                    className='file-preview-modal__avatar'\n                />\n            }\n\n            <div className='file-preview-modal__info-details'>\n                {info}\n            </div>\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalInfo);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nexport type LinkInfo = {\n    has_preview_image: boolean;\n    link: string;\n    extension: string;\n    name: string;\n}\n\nexport function isFileInfo(info: FileInfo | LinkInfo): info is FileInfo {\n    return Boolean((info as FileInfo).id);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {getFilePublicLink} from 'mattermost-redux/actions/files';\nimport {getFilePublicLink as selectFilePublicLink} from 'mattermost-redux/selectors/entities/files';\n\nimport CopyButton from 'components/copy_button';\nimport ExternalLink from 'components/external_link';\nimport WithTooltip from 'components/with_tooltip';\n\nimport {FileTypes} from 'utils/constants';\nimport {copyToClipboard, getFileType} from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport {isFileInfo} from '../types';\nimport type {LinkInfo} from '../types';\n\nimport './file_preview_modal_main_actions.scss';\n\nconst COPIED_TOOLTIP_DURATION = 2000;\n\ninterface Props {\n    usedInside?: 'Header' | 'Footer';\n    showOnlyClose?: boolean;\n    showClose?: boolean;\n    showPublicLink?: boolean;\n    filename: string;\n    fileURL: string;\n    fileInfo: FileInfo | LinkInfo;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    canCopyContent: boolean;\n    handleModalClose: () => void;\n    content: string;\n}\n\nconst FilePreviewModalMainActions: React.FC<Props> = (props: Props) => {\n    const intl = useIntl();\n\n    const tooltipPlacement = props.usedInside === 'Header' ? 'bottom' : 'top';\n    const selectedFilePublicLink = useSelector((state: GlobalState) => selectFilePublicLink(state)?.link);\n    const dispatch = useDispatch();\n    const [publicLinkCopied, setPublicLinkCopied] = useState(false);\n\n    useEffect(() => {\n        if (isFileInfo(props.fileInfo) && props.enablePublicLink) {\n            dispatch(getFilePublicLink(props.fileInfo.id));\n        }\n    }, [props.fileInfo, props.enablePublicLink]);\n\n    useEffect(() => {\n        if (publicLinkCopied) {\n            setTimeout(() => {\n                setPublicLinkCopied(false);\n            }, COPIED_TOOLTIP_DURATION);\n        }\n    }, [publicLinkCopied]);\n\n    const copyPublicLink = () => {\n        copyToClipboard(selectedFilePublicLink ?? '');\n        setPublicLinkCopied(true);\n    };\n\n    const closeMessage = intl.formatMessage({\n        id: 'full_screen_modal.close',\n        defaultMessage: 'Close',\n    });\n    const closeButton = (\n        <WithTooltip\n            id='close-icon-tooltip'\n            title={closeMessage}\n            placement={tooltipPlacement}\n            key='publicLink'\n        >\n            <button\n                className='file-preview-modal-main-actions__action-item'\n                onClick={props.handleModalClose}\n                aria-label={closeMessage}\n            >\n                <i className='icon icon-close'/>\n            </button>\n        </WithTooltip>\n    );\n\n    let publicTooltipMessage;\n    if (publicLinkCopied) {\n        publicTooltipMessage = intl.formatMessage({\n            id: 'file_preview_modal_main_actions.public_link-copied',\n            defaultMessage: 'Public link copied',\n        });\n    } else {\n        publicTooltipMessage = intl.formatMessage({\n            id: 'view_image_popover.publicLink',\n            defaultMessage: 'Get a public link',\n        });\n    }\n    const publicLink = (\n        <WithTooltip\n            id='link-variant-icon-tooltip.text'\n            key='filePreviewPublicLink'\n            placement={tooltipPlacement}\n            title={publicTooltipMessage}\n        >\n            <a\n                href='#'\n                className='file-preview-modal-main-actions__action-item'\n                onClick={copyPublicLink}\n                aria-label={publicTooltipMessage}\n            >\n                <i className='icon icon-link-variant'/>\n            </a>\n        </WithTooltip>\n    );\n\n    const downloadMessage = intl.formatMessage({\n        id: 'view_image_popover.download',\n        defaultMessage: 'Download',\n    });\n    const download = (\n        <WithTooltip\n            id='download-icon-tooltip.text'\n            key='download'\n            placement={tooltipPlacement}\n            title={downloadMessage}\n        >\n            <ExternalLink\n                href={props.fileURL}\n                className='file-preview-modal-main-actions__action-item'\n                location='file_preview_modal_main_actions'\n                download={props.filename}\n                aria-label={downloadMessage}\n            >\n                <i className='icon icon-download-outline'/>\n            </ExternalLink>\n        </WithTooltip>\n    );\n\n    const copy = (\n        <CopyButton\n            className='file-preview-modal-main-actions__action-item'\n            isForText={getFileType(props.fileInfo.extension) === FileTypes.TEXT}\n            placement={tooltipPlacement}\n            content={props.content}\n        />\n    );\n    return (\n        <div className='file-preview-modal-main-actions__actions'>\n            {!props.showOnlyClose && props.canCopyContent && copy}\n            {!props.showOnlyClose && props.enablePublicLink && props.showPublicLink && publicLink}\n            {!props.showOnlyClose && props.canDownloadFiles && download}\n            {props.showClose && closeButton}\n        </div>\n    );\n};\n\nFilePreviewModalMainActions.defaultProps = {\n    showOnlyClose: false,\n    usedInside: 'Header',\n    showClose: true,\n    showPublicLink: true,\n};\n\nexport default memo(FilePreviewModalMainActions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport FilePreviewModalInfo from '../file_preview_modal_info/file_preview_modal_info';\nimport FilePreviewModalMainActions from '../file_preview_modal_main_actions/file_preview_modal_main_actions';\nimport type {LinkInfo} from '../types';\n\nimport './file_preview_modal_footer.scss';\n\ninterface Props {\n    fileInfo: FileInfo | LinkInfo;\n    filename: string;\n    post?: Post;\n    fileURL: string;\n    showPublicLink?: boolean;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    isExternalFile: boolean;\n    handleModalClose: () => void;\n    canCopyContent: boolean;\n    content: string;\n}\n\nconst FilePreviewModalFooter: React.FC<Props> = ({post, ...actionProps}: Props) => {\n    return (\n        <div className='file-preview-modal-footer'>\n            <FilePreviewModalInfo\n                showFileName={false}\n                post={post}\n                filename={actionProps.filename}\n            />\n            <FilePreviewModalMainActions\n                {...actionProps}\n                showClose={false}\n                usedInside='Footer'\n                showOnlyClose={false}\n            />\n        </div>\n    );\n};\nexport default memo(FilePreviewModalFooter);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport './file_preview_modal_main_nav.scss';\n\nimport WithTooltip from 'components/with_tooltip';\n\ninterface Props {\n    fileIndex: number;\n    totalFiles: number;\n    handlePrev: () => void;\n    handleNext: () => void;\n}\n\nconst FilePreviewModalMainNav: React.FC<Props> = (props: Props) => {\n    const leftArrow = (\n        <WithTooltip\n            key='previewArrowLeft'\n            id='close-icon-tooltip'\n            title={\n                <FormattedMessage\n                    id='generic.close'\n                    defaultMessage='Close'\n                />\n            }\n            placement='bottom'\n        >\n            <button\n                id='previewArrowLeft'\n                className='file_preview_modal_main_nav__prev'\n                onClick={props.handlePrev}\n            >\n                <i className='icon icon-chevron-left'/>\n            </button>\n        </WithTooltip>\n    );\n\n    const rightArrow = (\n        <WithTooltip\n            key='publicLink'\n            id='close-icon-tooltip'\n            title={\n                <FormattedMessage\n                    id='generic.next'\n                    defaultMessage='Next'\n                />\n            }\n            placement='bottom'\n        >\n            <button\n                id='previewArrowRight'\n                className='file_preview_modal_main_nav__next'\n                onClick={props.handleNext}\n            >\n                <i className='icon icon-chevron-right'/>\n            </button>\n        </WithTooltip>\n    );\n    return (\n        <div className='file_preview_modal_main_nav'>\n            {leftArrow}\n            <span className='modal-bar-file-count'>\n                <FormattedMessage\n                    id='file_preview_modal_main_nav.file'\n                    defaultMessage='{count, number} of {total, number}'\n                    values={{\n                        count: (props.fileIndex + 1),\n                        total: props.totalFiles,\n                    }}\n                />\n            </span>\n            {rightArrow}\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalMainNav);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport FilePreviewModalInfo from '../file_preview_modal_info/file_preview_modal_info';\nimport FilePreviewModalMainActions from '../file_preview_modal_main_actions/file_preview_modal_main_actions';\nimport FilePreviewModalMainNav from '../file_preview_modal_main_nav/file_preview_modal_main_nav';\nimport type {LinkInfo} from '../types';\n\nimport './file_preview_modal_header.scss';\n\ninterface Props {\n    isMobileView: boolean;\n    fileIndex: number;\n    fileInfo: FileInfo | LinkInfo;\n    totalFiles: number;\n    filename: string;\n    post: Post;\n    fileURL: string;\n    showPublicLink?: boolean;\n    enablePublicLink: boolean;\n    canDownloadFiles: boolean;\n    canCopyContent: boolean;\n    isExternalFile: boolean;\n    handlePrev: () => void;\n    handleNext: () => void;\n    handleModalClose: () => void;\n    content: string;\n}\n\nconst FilePreviewModalHeader: React.FC<Props> = ({post, totalFiles, fileIndex, ...actionProps}: Props) => {\n    let mainActions = (<div/>);\n    if (totalFiles > 1) {\n        mainActions = (\n            <FilePreviewModalMainNav\n                totalFiles={totalFiles}\n                fileIndex={fileIndex}\n                handlePrev={actionProps.handlePrev}\n                handleNext={actionProps.handleNext}\n            />\n        );\n    }\n    const actions = (\n        <FilePreviewModalMainActions\n            {...actionProps}\n            showOnlyClose={actionProps.isMobileView}\n            usedInside='Header'\n        />);\n    return (\n        <div className='file-preview-modal-header'>\n            {actionProps.isMobileView && actions}\n            {!actionProps.isMobileView &&\n            <FilePreviewModalInfo\n                showFileName={true}\n                post={post}\n                filename={actionProps.filename}\n            />\n            }\n            {mainActions}\n            {!actionProps.isMobileView && actions}\n        </div>\n    );\n};\n\nexport default memo(FilePreviewModalHeader);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {FileInfo} from '@mattermost/types/files';\n\nimport {getFilePreviewUrl, getFileDownloadUrl} from 'mattermost-redux/utils/file_utils';\n\nimport './image_preview.scss';\n\ninterface Props {\n    fileInfo: FileInfo;\n    canDownloadFiles: boolean;\n}\n\nexport default function ImagePreview({fileInfo, canDownloadFiles}: Props) {\n    const isExternalFile = !fileInfo.id;\n\n    let fileUrl;\n    let previewUrl;\n    if (isExternalFile) {\n        fileUrl = fileInfo.link;\n        previewUrl = fileInfo.link;\n    } else {\n        fileUrl = getFileDownloadUrl(fileInfo.id);\n        previewUrl = fileInfo.has_preview_image ? getFilePreviewUrl(fileInfo.id) : fileUrl;\n    }\n\n    if (!canDownloadFiles) {\n        return <img src={previewUrl}/>;\n    }\n\n    return (\n        <a\n            className='image_preview'\n            href='#'\n        >\n            <img\n                className='image_preview__image'\n                loading='lazy'\n                data-testid='imagePreview'\n                alt={'preview url image'}\n                src={previewUrl}\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport debounce from 'lodash/debounce';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport {ZoomSettings} from 'utils/constants';\n\nexport interface Props {\n    scale?: number;\n    showZoomControls?: boolean;\n    handleZoomIn?: () => void;\n    handleZoomOut?: () => void;\n    handleZoomReset?: () => void;\n}\n\nexport default class PopoverBar extends React.PureComponent<Props> {\n    render() {\n        const zoomControls: React.ReactNode[] = [];\n        let wrappedZoomControls: React.ReactNode = null;\n        if (this.props.showZoomControls) {\n            let zoomResetButton;\n            let zoomOutButton;\n            let zoomInButton;\n\n            if (this.props.scale && this.props.scale > ZoomSettings.MIN_SCALE) {\n                zoomOutButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomOut && debounce(this.props.handleZoomOut, 300, {maxWait: 300})}>\n                            <i className='icon icon-minus'/>\n                        </a>\n                    </span>\n                );\n            } else {\n                zoomOutButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-minus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <WithTooltip\n                    key='zoomOut'\n                    id='zoom-out-icon-tooltip'\n                    title={\n                        <FormattedMessage\n                            id='view_image.zoom_out'\n                            defaultMessage='Zoom Out'\n                        />\n                    }\n                    placement='top'\n                >\n                    {zoomOutButton}\n                </WithTooltip>,\n            );\n\n            if (this.props.scale && this.props.scale > ZoomSettings.DEFAULT_SCALE) {\n                zoomResetButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomReset}>\n                            <i className='icon icon-magnify-minus'/>\n                        </a>\n                    </span>\n                );\n            } else if (this.props.scale && this.props.scale < ZoomSettings.DEFAULT_SCALE) {\n                zoomResetButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomReset}>\n                            <i className='icon icon-magnify-plus'/>\n                        </a>\n                    </span>\n                );\n            } else {\n                zoomResetButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-magnify-minus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <WithTooltip\n                    key='zoomReset'\n                    id='zoom-reset-icon-tooltip'\n                    title={\n                        <FormattedMessage\n                            id='view_image.zoom_reset'\n                            defaultMessage='Reset Zoom'\n                        />\n                    }\n                    placement='top'\n                >\n                    {zoomResetButton}\n                </WithTooltip>,\n            );\n\n            if (this.props.scale && this.props.scale < ZoomSettings.MAX_SCALE) {\n                zoomInButton = (\n                    <span className='modal-zoom-btn'>\n                        <a onClick={this.props.handleZoomIn && debounce(this.props.handleZoomIn, 300, {maxWait: 300})}>\n                            <i className='icon icon-plus'/>\n                        </a>\n                    </span>\n\n                );\n            } else {\n                zoomInButton = (\n                    <span className='btn-inactive'>\n                        <i className='icon icon-plus'/>\n                    </span>\n                );\n            }\n            zoomControls.push(\n                <WithTooltip\n                    key='zoomIn'\n                    id='zoom-in-icon-tooltip'\n                    title={\n                        <FormattedMessage\n                            id='view_image.zoom_in'\n                            defaultMessage='Zoom In'\n                        />\n                    }\n                    placement='top'\n                >\n                    {zoomInButton}\n                </WithTooltip>,\n            );\n\n            wrappedZoomControls = (\n                <div className='modal-column'>\n                    {zoomControls}\n                </div>\n            );\n        }\n\n        return (\n            <div\n                data-testid='fileCountFooter'\n                className='modal-button-bar file-preview-modal__zoom-bar'\n            >\n                {wrappedZoomControls}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PopoverBar from './popover_bar';\n\nexport default PopoverBar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\n\nimport type {FileInfo} from '@mattermost/types/files';\nimport type {Post} from '@mattermost/types/posts';\n\nimport {getFileDownloadUrl, getFilePreviewUrl, getFileUrl} from 'mattermost-redux/utils/file_utils';\n\nimport ArchivedPreview from 'components/archived_preview';\nimport AudioVideoPreview from 'components/audio_video_preview';\nimport CodePreview from 'components/code_preview';\nimport FileInfoPreview from 'components/file_info_preview';\nimport LoadingImagePreview from 'components/loading_image_preview';\nimport type {Props as PDFPreviewComponentProps} from 'components/pdf_preview';\n\nimport Constants, {FileTypes, ZoomSettings} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport * as Utils from 'utils/utils';\n\nimport type {FilePreviewComponent} from 'types/store/plugins';\n\nimport FilePreviewModalFooter from './file_preview_modal_footer/file_preview_modal_footer';\nimport FilePreviewModalHeader from './file_preview_modal_header/file_preview_modal_header';\nimport ImagePreview from './image_preview';\nimport PopoverBar from './popover_bar';\nimport {isFileInfo} from './types';\nimport type {LinkInfo} from './types';\n\nimport './file_preview_modal.scss';\n\nconst PDFPreview = React.lazy<React.ComponentType<PDFPreviewComponentProps>>(() => import('components/pdf_preview'));\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport type Props = {\n    canDownloadFiles: boolean;\n    enablePublicLink: boolean;\n\n    /**\n     * List of FileInfo to view\n     **/\n    fileInfos: Array<FileInfo | LinkInfo>;\n\n    isMobileView: boolean;\n    pluginFilePreviewComponents: FilePreviewComponent[];\n    onExited: () => void;\n\n    /**\n     * The id of the post the files are attached to\n     */\n    postId?: string;\n\n    /**\n     * The post the files are attached to\n     * Either postId or post can be passed to FilePreviewModal\n     */\n    post?: Post;\n\n    /**\n     * The index number of starting image\n     **/\n    startIndex: number;\n}\n\ntype State = {\n    show: boolean;\n    imageIndex: number;\n    imageHeight: number | string;\n    loaded: Record<number, boolean>;\n    prevFileInfosCount: number;\n    progress: Record<number, number>;\n    showCloseBtn: boolean;\n    showZoomControls: boolean;\n    scale: Record<number, number>;\n    content: string;\n}\n\nexport default class FilePreviewModal extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        fileInfos: [],\n        startIndex: 0,\n        pluginFilePreviewComponents: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n            imageIndex: this.props.startIndex,\n            imageHeight: '100%',\n            loaded: Utils.fillRecord(false, this.props.fileInfos.length),\n            prevFileInfosCount: 0,\n            progress: Utils.fillRecord(0, this.props.fileInfos.length),\n            showCloseBtn: false,\n            showZoomControls: false,\n            scale: Utils.fillRecord(ZoomSettings.DEFAULT_SCALE, this.props.fileInfos.length),\n            content: '',\n        };\n    }\n\n    handleNext = () => {\n        let id = this.state.imageIndex + 1;\n        if (id > this.props.fileInfos.length - 1) {\n            id = 0;\n        }\n        this.showImage(id);\n    };\n\n    handlePrev = () => {\n        let id = this.state.imageIndex - 1;\n        if (id < 0) {\n            id = this.props.fileInfos.length - 1;\n        }\n        this.showImage(id);\n    };\n\n    handleKeyPress = (e: KeyboardEvent) => {\n        if (Keyboard.isKeyPressed(e, KeyCodes.RIGHT)) {\n            this.handleNext();\n        } else if (Keyboard.isKeyPressed(e, KeyCodes.LEFT)) {\n            this.handlePrev();\n        }\n    };\n\n    componentDidMount() {\n        document.addEventListener('keyup', this.handleKeyPress);\n\n        this.showImage(this.props.startIndex);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keyup', this.handleKeyPress);\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        const updatedState: Partial<State> = {};\n        if (props.fileInfos[state.imageIndex] && props.fileInfos[state.imageIndex].extension === FileTypes.PDF) {\n            updatedState.showZoomControls = true;\n        } else {\n            updatedState.showZoomControls = false;\n        }\n        if (props.fileInfos.length !== state.prevFileInfosCount) {\n            updatedState.loaded = Utils.fillRecord(false, props.fileInfos.length);\n            updatedState.progress = Utils.fillRecord(0, props.fileInfos.length);\n            updatedState.prevFileInfosCount = props.fileInfos.length;\n        }\n        return Object.keys(updatedState).length ? updatedState : null;\n    }\n\n    showImage = (id: number) => {\n        this.setState({imageIndex: id});\n\n        const imageHeight = window.innerHeight - 100;\n        this.setState({imageHeight});\n\n        if (!this.state.loaded[id]) {\n            this.loadImage(id);\n        }\n    };\n\n    loadImage = (index: number) => {\n        const fileInfo = this.props.fileInfos[index];\n        if (isFileInfo(fileInfo) && fileInfo.archived) {\n            this.handleImageLoaded(index);\n            return;\n        }\n        const fileType = Utils.getFileType(fileInfo.extension);\n\n        if (fileType === FileTypes.IMAGE && isFileInfo(fileInfo)) {\n            let previewUrl;\n            if (fileInfo.has_preview_image) {\n                previewUrl = getFilePreviewUrl(fileInfo.id);\n            } else {\n                // some images (eg animated gifs) just show the file itself and not a preview\n                previewUrl = getFileUrl(fileInfo.id);\n            }\n\n            Utils.loadImage(\n                previewUrl,\n                () => this.handleImageLoaded(index),\n                (completedPercentage) => this.handleImageProgress(index, completedPercentage),\n            );\n        } else {\n            // there's nothing to load for non-image files\n            this.handleImageLoaded(index);\n        }\n    };\n\n    handleImageLoaded = (index: number) => {\n        this.setState((prevState) => {\n            return {\n                loaded: {\n                    ...prevState.loaded,\n                    [index]: true,\n                },\n            };\n        });\n    };\n\n    handleImageProgress = (index: number, completedPercentage: number) => {\n        this.setState((prevState) => {\n            return {\n                progress: {\n                    ...prevState.progress,\n                    [index]: completedPercentage,\n                },\n            };\n        });\n    };\n\n    onMouseEnterImage = () => {\n        this.setState({showCloseBtn: true});\n    };\n\n    onMouseLeaveImage = () => {\n        this.setState({showCloseBtn: false});\n    };\n\n    setScale = (index: number, scale: number) => {\n        this.setState((prevState) => {\n            return {\n                scale: {\n                    ...prevState.scale,\n                    [index]: scale,\n                },\n            };\n        });\n    };\n\n    handleZoomIn = () => {\n        let newScale = this.state.scale[this.state.imageIndex];\n        newScale = Math.min(newScale + ZoomSettings.SCALE_DELTA, ZoomSettings.MAX_SCALE);\n        this.setScale(this.state.imageIndex, newScale);\n    };\n\n    handleZoomOut = () => {\n        let newScale = this.state.scale[this.state.imageIndex];\n        newScale = Math.max(newScale - ZoomSettings.SCALE_DELTA, ZoomSettings.MIN_SCALE);\n        this.setScale(this.state.imageIndex, newScale);\n    };\n\n    handleZoomReset = () => {\n        this.setScale(this.state.imageIndex, ZoomSettings.DEFAULT_SCALE);\n    };\n\n    handleModalClose = () => {\n        this.setState({show: false});\n    };\n\n    getContent = (content: string) => {\n        this.setState({content});\n    };\n\n    handleBgClose = (e: React.MouseEvent) => {\n        if (e.currentTarget === e.target) {\n            this.handleModalClose();\n        }\n    };\n\n    render() {\n        if (this.props.fileInfos.length < 1 || this.props.fileInfos.length - 1 < this.state.imageIndex) {\n            return null;\n        }\n\n        const fileInfo = this.props.fileInfos[this.state.imageIndex];\n        const fileType = Utils.getFileType(fileInfo.extension);\n\n        let showPublicLink;\n        let fileName;\n        let fileUrl;\n        let fileDownloadUrl;\n        let isExternalFile;\n        let canCopyContent = false;\n        if (isFileInfo(fileInfo)) {\n            showPublicLink = true;\n            fileName = fileInfo.name;\n            fileUrl = getFileUrl(fileInfo.id);\n            fileDownloadUrl = getFileDownloadUrl(fileInfo.id);\n            isExternalFile = false;\n        } else {\n            showPublicLink = false;\n            fileName = fileInfo.name || fileInfo.link;\n            fileUrl = fileInfo.link;\n            fileDownloadUrl = fileInfo.link;\n            isExternalFile = true;\n        }\n\n        let dialogClassName = 'a11y__modal modal-image file-preview-modal';\n\n        let content;\n        let zoomBar;\n\n        if (isFileInfo(fileInfo) && fileInfo.archived) {\n            content = (\n                <ArchivedPreview\n                    fileInfo={fileInfo}\n                />\n            );\n        }\n\n        if (!isFileInfo(fileInfo) || !fileInfo.archived) {\n            if (this.state.loaded[this.state.imageIndex]) {\n                if (fileType === FileTypes.IMAGE || fileType === FileTypes.SVG) {\n                    content = (\n                        <ImagePreview\n                            fileInfo={fileInfo as FileInfo}\n                            canDownloadFiles={this.props.canDownloadFiles}\n                        />\n                    );\n                } else if (fileType === FileTypes.VIDEO || fileType === FileTypes.AUDIO) {\n                    content = (\n                        <AudioVideoPreview\n                            fileInfo={fileInfo as FileInfo}\n                            fileUrl={fileUrl}\n                        />\n                    );\n                } else if (fileType === FileTypes.PDF) {\n                    content = (\n                        <div\n                            className='file-preview-modal__scrollable'\n                            onClick={this.handleBgClose}\n                        >\n                            <React.Suspense fallback={null}>\n                                <PDFPreview\n                                    fileInfo={fileInfo as FileInfo}\n                                    fileUrl={fileUrl}\n                                    scale={this.state.scale[this.state.imageIndex]}\n                                    handleBgClose={this.handleBgClose}\n                                />\n                            </React.Suspense>\n                        </div>\n                    );\n                    zoomBar = (\n                        <PopoverBar\n                            scale={this.state.scale[this.state.imageIndex]}\n                            showZoomControls={this.state.showZoomControls}\n                            handleZoomIn={this.handleZoomIn}\n                            handleZoomOut={this.handleZoomOut}\n                            handleZoomReset={this.handleZoomReset}\n                        />\n                    );\n                } else if (CodePreview.supports(fileInfo)) {\n                    dialogClassName += ' modal-code';\n                    canCopyContent = true;\n                    content = (\n                        <CodePreview\n                            fileInfo={fileInfo as FileInfo}\n                            fileUrl={fileUrl}\n                            getContent={this.getContent}\n                            className='file-preview-modal__code-preview'\n                        />\n                    );\n                } else {\n                    content = (\n                        <FileInfoPreview\n                            fileInfo={fileInfo as FileInfo}\n                            fileUrl={fileUrl}\n                        />\n                    );\n                }\n            } else {\n                // display a progress indicator when the preview for an image is still loading\n                const loading = Utils.localizeMessage('view_image.loading', 'Loading');\n                const progress = Math.floor(this.state.progress[this.state.imageIndex]);\n\n                content = (\n                    <LoadingImagePreview\n                        loading={loading}\n                        progress={progress}\n                    />\n                );\n            }\n        }\n\n        if (isFileInfo(fileInfo) && !fileInfo.archived) {\n            for (const preview of this.props.pluginFilePreviewComponents) {\n                if (preview.override(fileInfo, this.props.post)) {\n                    content = (\n                        <preview.component\n                            fileInfo={fileInfo}\n                            post={this.props.post}\n                            onModalDismissed={this.handleModalClose}\n                        />\n                    );\n                    break;\n                }\n            }\n        }\n\n        return (\n            <Modal\n                show={this.state.show}\n                onHide={this.handleModalClose}\n                onExited={this.props.onExited}\n                className='modal-image file-preview-modal'\n                dialogClassName={dialogClassName}\n                animation={true}\n                backdrop={false}\n                role='dialog'\n                style={{paddingLeft: 0}}\n                aria-labelledby='viewImageModalLabel'\n            >\n                <Modal.Body className='file-preview-modal__body'>\n                    <div\n                        className={'modal-image__wrapper'}\n                        onClick={this.handleModalClose}\n                    >\n                        <div\n                            className='file-preview-modal__main-ctr'\n                            onMouseEnter={this.onMouseEnterImage}\n                            onMouseLeave={this.onMouseLeaveImage}\n                            onClick={(e) => e.stopPropagation()}\n                        >\n                            <Modal.Title\n                                componentClass='div'\n                                id='viewImageModalLabel'\n                                className='file-preview-modal__title'\n                            >\n                                <FilePreviewModalHeader\n                                    isMobileView={this.props.isMobileView}\n                                    post={this.props.post!}\n                                    showPublicLink={showPublicLink}\n                                    fileIndex={this.state.imageIndex}\n                                    totalFiles={this.props.fileInfos?.length}\n                                    filename={fileName}\n                                    fileURL={fileDownloadUrl}\n                                    fileInfo={fileInfo}\n                                    enablePublicLink={this.props.enablePublicLink}\n                                    canDownloadFiles={this.props.canDownloadFiles}\n                                    canCopyContent={canCopyContent}\n                                    isExternalFile={isExternalFile}\n                                    handlePrev={this.handlePrev}\n                                    handleNext={this.handleNext}\n                                    handleModalClose={this.handleModalClose}\n                                    content={this.state.content}\n                                />\n                                {zoomBar}\n                            </Modal.Title>\n                            <div\n                                className={classNames(\n                                    'file-preview-modal__content',\n                                    {\n                                        'file-preview-modal__content-scrollable': (!isFileInfo(fileInfo) || !fileInfo.archived) && this.state.loaded[this.state.imageIndex] && (fileType === FileTypes.PDF),\n                                    },\n                                )}\n                                onClick={this.handleBgClose}\n                            >\n                                {content}\n                            </div>\n                            { this.props.isMobileView &&\n                                <FilePreviewModalFooter\n                                    post={this.props.post}\n                                    showPublicLink={showPublicLink}\n                                    filename={fileName}\n                                    fileURL={fileDownloadUrl}\n                                    fileInfo={fileInfo}\n                                    enablePublicLink={this.props.enablePublicLink}\n                                    canDownloadFiles={this.props.canDownloadFiles}\n                                    canCopyContent={canCopyContent}\n                                    isExternalFile={isExternalFile}\n                                    handleModalClose={this.handleModalClose}\n                                    content={this.state.content}\n                                />\n                            }\n                        </div>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n"],"names":["FileInfoPreview","_ref","fileInfo","fileUrl","canDownloadFiles","infoParts","extension","push","Utils","toUpperCase","size","infoString","join","preview","React","className","href","alt","src","name","propTypes","_pt","connect","state","config","getConfig","props","useIntl","formatMessage","id","defaultMessage","ArchiveOutlineIcon","color","AudioVideoPreview","constructor","super","_defineProperty","video","this","videoRef","current","document","createElement","setState","canPlay","pause","currentTime","componentDidMount","handleFileInfoChanged","sourceRef","addEventListener","handleLoadError","once","componentDidUpdate","prevProps","render","width","Constants","height","isMobileView","key","ref","controls","getIsMobileView","CodePreview","async","lang","data","fetch","text","handleReceivedCode","e","handleReceivedError","_this$props$getConten","_this$props","code","Data","nodeName","XMLSerializer","serializeToString","getContent","call","highlighted","SyntaxHighlighting","loading","success","getCode","getDerivedStateFromProps","prevFileUrl","usedLanguage","supports","Boolean","LoadingSpinner","language","concat","dangerouslySetInnerHTML","__html","displayNameGetter","makeGetDisplayName","FilePreviewModalInfo","user","useSelector","_props$post$user_id","_props$post","selectUser","post","user_id","channel","_props$post$channel_i","_props$post2","makeGetChannel","getChannel","channel_id","_props$post$user_id2","_props$post3","info","channelName","FormattedMessage","values","display_name","showFileName","filename","Object","keys","length","Avatar","url","imageURLForUser","last_picture_update","memo","isFileInfo","FilePreviewModalMainActions","intl","tooltipPlacement","usedInside","selectedFilePublicLink","_selectFilePublicLink","selectFilePublicLink","link","dispatch","useDispatch","publicLinkCopied","setPublicLinkCopied","useState","useEffect","enablePublicLink","getFilePublicLink","setTimeout","closeMessage","closeButton","WithTooltip","title","placement","onClick","handleModalClose","publicTooltipMessage","publicLink","copyPublicLink","copyToClipboard","downloadMessage","download","ExternalLink","fileURL","location","copy","CopyButton","isForText","getFileType","FileTypes","content","showOnlyClose","canCopyContent","showPublicLink","showClose","defaultProps","FilePreviewModalFooter","actionProps","_objectWithoutProperties","_excluded","assign","isExternalFile","FilePreviewModalMainNav","leftArrow","handlePrev","rightArrow","handleNext","count","fileIndex","total","totalFiles","FilePreviewModalHeader","mainActions","actions","ImagePreview","previewUrl","getFileDownloadUrl","has_preview_image","getFilePreviewUrl","PopoverBar","zoomControls","wrappedZoomControls","showZoomControls","zoomResetButton","zoomOutButton","zoomInButton","scale","ZoomSettings","handleZoomOut","debounce","maxWait","handleZoomReset","handleZoomIn","PDFPreview","KeyCodes","FilePreviewModal","imageIndex","fileInfos","showImage","Keyboard","RIGHT","LEFT","imageHeight","window","innerHeight","loaded","loadImage","index","archived","handleImageLoaded","getFileUrl","completedPercentage","handleImageProgress","prevState","_objectSpread","progress","showCloseBtn","newScale","Math","min","setScale","max","show","currentTarget","target","startIndex","prevFileInfosCount","handleKeyPress","componentWillUnmount","removeEventListener","updatedState","_this$props$fileInfos","fileType","fileName","fileDownloadUrl","zoomBar","dialogClassName","ArchivedPreview","handleBgClose","fallback","floor","LoadingImagePreview","pluginFilePreviewComponents","override","component","onModalDismissed","Modal","onHide","onExited","animation","backdrop","role","style","paddingLeft","onMouseEnter","onMouseEnterImage","onMouseLeave","onMouseLeaveImage","stopPropagation","componentClass","classNames","postId"],"sourceRoot":""}