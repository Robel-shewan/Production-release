{"version":3,"file":"2028.f3c9c5cfdace2884e16c.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/actions/views/mfa.js","webpack://mattermost-webapp/./src/components/common/back_button.tsx","webpack://mattermost-webapp/./src/components/mfa/confirm.tsx","webpack://mattermost-webapp/./src/components/mfa/setup/setup.tsx","webpack://mattermost-webapp/./src/components/mfa/setup/index.ts","webpack://mattermost-webapp/./src/components/mfa/mfa_controller/mfa_controller.tsx","webpack://mattermost-webapp/./src/components/mfa/mfa_controller/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/fa_logout_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    className?: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nconst BackButton = ({url, className, onClick}: Props): JSX.Element => {\n    return (\n        <div className={classNames('signup-header', className)}>\n            <Link\n                data-testid='back_button'\n                onClick={onClick}\n                to={url}\n            >\n                <svg\n                    width='9'\n                    height='15'\n                    viewBox='0 0 9 15'\n                    fill='none'\n                    xmlns='http://www.w3.org/2000/svg'\n                >\n                    <path\n                        d='M7.64331 15L0 7.5L7.64331 0L9 1.33125L2.71338 7.5L9 13.6688L7.64331 15Z'\n                        fill='white'\n                    />\n                </svg>\n            </Link>\n        </div>\n    );\n};\nBackButton.defaultProps = {\n    url: '/',\n};\n\nexport default BackButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {redirectUserToDefaultTeam} from 'actions/global_actions';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nconst KeyCodes = Constants.KeyCodes;\n\nconst submit = (e: KeyboardEvent | React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    redirectUserToDefaultTeam();\n};\n\nconst onKeyPress = (e: React.KeyboardEvent<HTMLFormElement>| KeyboardEvent) => {\n    if (isKeyPressed(e as KeyboardEvent, KeyCodes.ENTER)) {\n        submit(e);\n    }\n};\n\nexport default function Confirm() {\n    useEffect(() => {\n        document.body.addEventListener('keydown', onKeyPress);\n\n        return () => {\n            document.body.removeEventListener('keydown', onKeyPress);\n        };\n    }, []);\n\n    return (\n        <div>\n            <form\n                onSubmit={submit}\n                onKeyPress={onKeyPress}\n                className='form-group'\n            >\n                <p>\n                    <FormattedMessage\n                        id='mfa.confirm.complete'\n                        defaultMessage='**Set up complete!**'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='mfa.confirm.secure'\n                        defaultMessage='Your account is now secure. Next time you sign in, you will be asked to enter a code from the Google Authenticator app on your phone.'\n                    />\n                </p>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                >\n                    <FormattedMessage\n                        id='mfa.confirm.okay'\n                        defaultMessage='Okay'\n                    />\n                </button>\n            </form>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, type IntlShape} from 'react-intl';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport ExternalLink from 'components/external_link';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport * as Utils from 'utils/utils';\n\ntype MFAControllerState = {\n    enforceMultifactorAuthentication: boolean;\n};\n\ntype Props = {\n\n    /*\n     * Object containing enforceMultifactorAuthentication\n     */\n    state: MFAControllerState;\n    intl: IntlShape;\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: MFAControllerState) => void;\n\n    currentUser: UserProfile;\n    siteName?: string;\n    enforceMultifactorAuthentication: boolean;\n    actions: {\n        activateMfa: (code: string) => Promise<{\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        generateMfaSecret: () => Promise<{\n            data: {\n                secret: string;\n                qr_code: string;\n            };\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    history: {\n        push(path: string): void;\n    };\n}\n\ntype State = {\n    secret: string;\n    qrCode: string;\n    error?: any | null;\n    serverError?: string;\n}\n\nclass Setup extends React.PureComponent<Props, State> {\n    private input: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {secret: '', qrCode: ''};\n\n        this.input = React.createRef();\n    }\n\n    public componentDidMount(): void {\n        const user = this.props.currentUser;\n        if (!user || user.mfa_active) {\n            this.props.history.push('/');\n            return;\n        }\n\n        this.props.actions.generateMfaSecret().then(({data, error}) => {\n            if (error) {\n                this.setState({\n                    serverError: error.message,\n                });\n                return;\n            }\n\n            this.setState({\n                secret: data.secret,\n                qrCode: data.qr_code,\n            });\n        });\n    }\n\n    submit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        const code = this.input?.current?.value.replace(/\\s/g, '');\n        if (!code || code.length === 0) {\n            this.setState({error: Utils.localizeMessage('mfa.setup.codeError', 'Please enter the code from Google Authenticator.')});\n            return;\n        }\n\n        this.setState({error: null});\n\n        this.props.actions.activateMfa(code).then(({error}) => {\n            if (error) {\n                if (error.server_error_id === 'ent.mfa.activate.authenticate.app_error') {\n                    this.setState({\n                        error: Utils.localizeMessage('mfa.setup.badCode', 'Invalid code. If this issue persists, contact your System Administrator.'),\n                    });\n                } else {\n                    this.setState({\n                        error: error.message,\n                    });\n                }\n\n                return;\n            }\n\n            this.props.history.push('/mfa/confirm');\n        });\n    };\n\n    public render(): JSX.Element {\n        let formClass = 'form-group';\n        let errorContent;\n        if (this.state.error) {\n            errorContent = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let mfaRequired;\n        if (this.props.enforceMultifactorAuthentication) {\n            mfaRequired = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='mfa.setup.required'\n                        defaultMessage='**Multi-factor authentication is required on {siteName}.**'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div>\n                <form\n                    onSubmit={this.submit}\n                    className={formClass}\n                >\n                    {mfaRequired}\n                    <p>\n                        <FormattedMessage\n                            id='mfa.setup.step1'\n                            defaultMessage='<strong>Step 1: </strong>On your phone, download Google Authenticator from <linkiTunes>iTunes</linkiTunes> or <linkGooglePlay>Google Play</linkGooglePlay>'\n                            values={{\n                                strong: (msg: React.ReactNode) => <strong>{msg}</strong>,\n                                linkiTunes: (msg: React.ReactNode) => (\n                                    <ExternalLink\n                                        href='https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8'\n                                        location='mfa_setup'\n                                    >\n                                        {msg}\n                                    </ExternalLink>\n                                ),\n                                linkGooglePlay: (msg: React.ReactNode) => (\n                                    <ExternalLink\n                                        href='https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en'\n                                        location='mfa_setup'\n                                    >\n                                        {msg}\n                                    </ExternalLink>\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step2'\n                            defaultMessage='**Step 2: **Use Google Authenticator to scan this QR code, or manually type in the secret key'\n                        />\n                    </p>\n                    <div className='form-group'>\n                        <div className='col-sm-12'>\n                            <img\n                                alt={'qr code image'}\n                                style={style.qrCode}\n                                src={'data:image/png;base64,' + this.state.qrCode}\n                            />\n                        </div>\n                    </div>\n                    <br/>\n                    <div className='form-group'>\n                        <p className='col-sm-12'>\n                            <FormattedMessage\n                                id='mfa.setup.secret'\n                                defaultMessage='Secret: {secret}'\n                                values={{\n                                    secret: this.state.secret,\n                                }}\n                            />\n                        </p>\n                    </div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step3'\n                            defaultMessage='**Step 3: **Enter the code generated by Google Authenticator'\n                        />\n                    </p>\n                    <p>\n                        <input\n                            ref={this.input}\n                            className='form-control'\n                            placeholder={this.props.intl.formatMessage({id: 'mfa.setup.code', defaultMessage: 'MFA Code'})}\n                            autoFocus={true}\n                        />\n                    </p>\n                    {errorContent}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='mfa.setup.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    qrCode: {maxHeight: 170},\n};\n\nexport default injectIntl(Setup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {activateMfa, generateMfaSecret} from 'actions/views/mfa';\n\nimport Setup from './setup';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        currentUser: getCurrentUser(state),\n        siteName,\n        enforceMultifactorAuthentication,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            activateMfa,\n            generateMfaSecret,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Setup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Route, Switch} from 'react-router-dom';\nimport type {RouteComponentProps} from 'react-router-dom';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\n\nimport BackButton from 'components/common/back_button';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\n\nimport logoImage from 'images/logo.png';\n\nimport Confirm from '../confirm';\nimport Setup from '../setup';\n\ntype Location = {\n    search: string;\n}\n\ntype Props = {\n    location: Location;\n    children?: React.ReactNode;\n    mfa: boolean;\n    enableMultifactorAuthentication: boolean;\n    enforceMultifactorAuthentication: boolean;\n\n    /*\n     * Object from react-router\n     */\n    match: {\n        url: string;\n    };\n}\n\ntype State = {\n    enforceMultifactorAuthentication: boolean;\n}\n\nexport default class MFAController extends React.PureComponent<Props & RouteComponentProps, State> {\n    public constructor(props: Props & RouteComponentProps) {\n        super(props);\n\n        this.state = {enforceMultifactorAuthentication: props.enableMultifactorAuthentication};\n    }\n\n    public componentDidMount(): void {\n        document.body.classList.add('sticky');\n        document.getElementById('root')!.classList.add('container-fluid');\n\n        if (!this.props.enableMultifactorAuthentication) {\n            this.props.history.push('/');\n        }\n    }\n\n    public componentWillUnmount(): void {\n        document.body.classList.remove('sticky');\n        document.getElementById('root')!.classList.remove('container-fluid');\n    }\n\n    public handleOnClick = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        e.preventDefault();\n        emitUserLoggedOutEvent('/login');\n    };\n\n    public updateParent = (state: State): void => {\n        this.setState(state);\n    };\n\n    public render(): JSX.Element {\n        let backButton;\n        if (this.props.mfa && this.props.enforceMultifactorAuthentication) {\n            backButton = (\n                <div className='signup-header'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleOnClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            );\n        } else {\n            backButton = (<BackButton/>);\n        }\n\n        return (\n            <div className='inner-wrap'>\n                <div className='row content'>\n                    <div>\n                        {backButton}\n                        <div className='col-sm-12'>\n                            <div className='signup-team__container'>\n                                <h3>\n                                    <FormattedMessage\n                                        id='mfa.setupTitle'\n                                        defaultMessage='Multi-factor Authentication Setup'\n                                    />\n                                </h3>\n                                <img\n                                    alt={'signup team logo'}\n                                    className='signup-team-logo'\n                                    src={logoImage}\n                                />\n                                <div id='mfa'>\n                                    <Switch>\n                                        <Route\n                                            path={`${this.props.match.url}/setup`}\n                                            render={(props) => (\n                                                <Setup\n                                                    state={this.state}\n                                                    updateParent={this.updateParent}\n                                                    {...props}\n                                                />\n                                            )}\n                                        />\n                                        <Route\n                                            path={`${this.props.match.url}/confirm`}\n                                            render={() => (\n                                                <Confirm/>\n                                            )}\n                                        />\n                                    </Switch>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport MFAController from './mfa_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfa = license.MFA === 'true';\n    const enableMultifactorAuthentication = config.EnableMultifactorAuthentication === 'true';\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        mfa,\n        enableMultifactorAuthentication,\n        enforceMultifactorAuthentication,\n    };\n}\n\nexport default connect(mapStateToProps)(MFAController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function LogoutIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-1x fa-angle-left'\n            title={formatMessage({id: 'generic_icons.logout', defaultMessage: 'Logout Icon'})}\n        />\n    );\n}\n"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","BackButton","_ref","url","className","onClick","React","classNames","Link","to","width","height","viewBox","fill","xmlns","d","propTypes","_pt","defaultProps","KeyCodes","Constants","submit","e","preventDefault","redirectUserToDefaultTeam","onKeyPress","isKeyPressed","ENTER","Confirm","useEffect","document","body","addEventListener","removeEventListener","onSubmit","FormattedMessage","id","defaultMessage","type","Setup","constructor","props","super","_defineProperty","_this$input","_this$input$current","this","input","current","value","replace","length","setState","error","actions","then","server_error_id","Utils","message","history","push","state","secret","qrCode","componentDidMount","user","currentUser","mfa_active","_ref2","data","serverError","qr_code","render","errorContent","mfaRequired","formClass","enforceMultifactorAuthentication","FormattedMarkdownMessage","values","siteName","strong","msg","linkiTunes","ExternalLink","href","location","linkGooglePlay","alt","style","src","ref","placeholder","intl","formatMessage","autoFocus","isRequired","updateParent","maxHeight","injectIntl","connect","config","getConfig","SiteName","EnforceMultifactorAuthentication","getCurrentUser","bindActionCreators","MFAController","emitUserLoggedOutEvent","enableMultifactorAuthentication","classList","add","getElementById","componentWillUnmount","remove","backButton","mfa","handleOnClick","LogoutIcon","logoImage","Switch","Route","path","concat","match","Object","assign","search","children","license","getLicense","MFA","EnableMultifactorAuthentication","useIntl","title"],"sourceRoot":""}