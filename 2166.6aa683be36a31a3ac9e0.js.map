{"version":3,"file":"2166.6aa683be36a31a3ac9e0.js","mappings":"mSAUA,MAAMA,EAAwBA,IAC1BC,IAAAA,cAACC,EAAAA,EAAI,CACDC,GAAG,4BACHC,WAAWC,EAAAA,EAAAA,IAAgB,+BAAgC,gBAAgBC,eAE3EL,IAAAA,cAACM,GAA0B,CAACC,UAAU,KAI9C,GAAeC,EAAAA,EAAAA,MAAKT,G,4mBCmBpB,MAAMU,UAAiCT,IAAAA,cAA2BU,WAAAA,GAAA,SAAAC,WAAAC,EAAA,kBAC3CC,MAAOC,EAAoBC,KAC1C,MAAM,KAACC,SAAcC,KAAKC,MAAMC,QAAQC,6BAA6BH,KAAKC,MAAMG,QAAQnB,GAAIa,EAAYD,EAAYQ,EAAAA,GACpH,MAAO,CACHC,MAAOP,EAAKQ,OACZC,WAAYT,EAAKU,gBACpB,IACJd,EAAA,2BAE2B,CAACe,EAAaC,IAAmBX,KAAKC,MAAMC,QAAQU,oBAAoBF,EAAKzB,GAAIe,KAAKC,MAAMG,QAAQnB,GAAI4B,EAAAA,GAAAA,SAAsBC,MAAKlB,UAC3Je,EAAUI,SAAS,CAACC,SAAS,IAC7B,MAAM,MAACV,EAAK,WAAEE,SAAoBG,EAAUV,MAAMgB,UAAUN,EAAUI,SAASG,KAAMP,EAAUQ,MAAMrB,YACrGa,EAAUI,SAAS,CAACC,SAAS,EAAOV,QAAOE,cAAY,MACzDb,EAAA,eAEc,KACZK,KAAKC,MAAMC,QAAQkB,WAAWC,EAAAA,GAAAA,sBAAuC,IACxE1B,EAAA,2BAE2B,KACxBK,KAAKsB,SACLtB,KAAKC,MAAMC,QAAQqB,UAAU,CAACC,QAASH,EAAAA,GAAAA,mBAAqCI,WAAYC,EAAAA,GAAyB,IACpH/B,EAAA,+BAE+BC,MAAOc,EAAaC,EAAgBgB,KAChE3B,KAAKC,MAAMC,QAAQ0B,mBAAmBlB,EAAKzB,GAAIe,KAAKC,MAAMG,QAAQnB,GAAI4B,EAAAA,GAAAA,QAAsB,CAACgB,aAAcF,IAAiBb,MAAKlB,UAC7He,EAAUI,SAAS,CAACC,SAAS,IAC7B,MAAM,MAACV,EAAK,WAAEE,SAAoBG,EAAUV,MAAMgB,UAAUN,EAAUI,SAASG,KAAMP,EAAUQ,MAAMrB,kBAC/FE,KAAKC,MAAMC,QAAQ4B,mBAAmB9B,KAAKC,MAAMG,QAAQnB,IAE/D0B,EAAUI,SAAS,CAACC,SAAS,EAAOV,QAAOE,cAAY,GACzD,IACLb,EAAA,kBAEkB,CAACe,EAAaC,KAC7B,IAAIoB,EAOJ,OALIA,EADArB,EAAKmB,aACGG,EAAAA,GAAsB,0CAA2C,kBAEjEA,EAAAA,GAAsB,2CAA4C,mBAI1EjD,IAAAA,cAAA,OACIkD,IAAKvB,EAAKzB,GACViD,UAAU,mBAEVnD,IAAAA,cAAA,OACImD,UAAU,oBACVC,IAAKC,EACLC,IAAI,gBACJC,MAAM,KACNC,OAAO,OAEXxD,IAAAA,cAAA,OAAKmD,UAAU,uBACXnD,IAAAA,cAAA,OAAKmD,UAAU,oBAAoBxB,EAAK8B,aAAa,IAAE,IAAK,IACxDzD,IAAAA,cAAA,QAAMmD,UAAU,0BACZnD,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,aACHyD,eAAe,4DACfC,OAAQ,CACJC,IAAKlC,EAAKmC,mBAM9B9D,IAAAA,cAAA,OAAKmD,UAAU,uBACXnD,IAAAA,cAAC+D,EAAAA,EAAW,KACR/D,IAAAA,cAAA,UACIE,GAAE,sBAAA8D,OAAwBrC,EAAK8B,cAC/BN,UAAU,gDACVc,KAAK,SACL,gBAAc,QAEdjE,IAAAA,cAAA,YAAOgD,EAAM,KACbhD,IAAAA,cAACkE,EAAAA,EAAY,OAEjBlE,IAAAA,cAACC,EAAAA,EAAI,CACDkE,UAAU,EACVhE,UAAW8C,EAAAA,GAAsB,yCAA0C,sCAE3EjD,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZmE,MAAOzC,EAAKmB,aACZuB,QAASA,IAAMpD,KAAKqD,uBAAuB3C,EAAMC,GAAW,GAC5D2C,KAAMtB,EAAAA,GAAsB,+CAAgD,yBAEhFjD,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZmE,KAAMI,QAAQ7C,EAAKmB,cACnBuB,QAASA,IAAMpD,KAAKqD,uBAAuB3C,EAAMC,GAAW,GAC5D2C,KAAMtB,EAAAA,GAAsB,gDAAiD,0BAEjFjD,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZoE,QAASA,IAAMpD,KAAKwD,mBAAmB9C,EAAMC,GAC7C2C,KAAMtB,EAAAA,GAAsB,qCAAsC,qBAKhF,GAEb,CAEDyB,MAAAA,GACI,MAAM,cAACC,GAAiB1D,KAAKC,MAAM0D,KACnC,OACI5E,IAAAA,cAAC6E,EAAAA,EAAS,CACNC,UAAWH,EAAc,CAACzE,GAAI,iBAAkByD,eAAgB,oBAAqB,CAACtC,QAASJ,KAAKC,MAAMG,QAAQoC,eAClHsB,sBAAuBJ,EAAc,CAACzE,GAAI,iDAAkDyD,eAAgB,kBAC5GqB,UAAW/D,KAAK+D,UAChB9C,UAAWjB,KAAKiB,UAChBK,OAAQtB,KAAKsB,OACb0C,mBAAoBN,EAAc,CAACzE,GAAI,kCAAmCyD,eAAgB,eAC1FuB,sBAAuBjE,KAAKkE,oBAGxC,EACHvE,EArHKH,EAAwB,aAV1BU,QAAOiE,IAAAA,MAAA,CACHhE,6BAA4BgE,IAAAA,KAAAA,WAC5BvD,oBAAmBuD,IAAAA,KAAAA,WACnBvC,mBAAkBuC,IAAAA,KAAAA,WAClBrC,mBAAkBqC,IAAAA,KAAAA,WAClB/C,WAAU+C,IAAAA,KAAAA,WACV5C,UAAS4C,IAAAA,KAAAA,aAAAC,aA2HjB,SAAeC,EAAAA,EAAAA,YAAW7E,GCzH1B,GAAe8E,EAAAA,EAAAA,UApBSC,CAACpD,EAAoBqD,KAClC,CACHpE,QAASe,EAAMsD,SAASC,SAASA,SAASF,EAASG,eAI/BC,IAAkB,CAC1C1E,SAAS2E,EAAAA,EAAAA,oBACL,CACI1E,6BAA4B,KAC5BiB,WAAU,IACVG,UAAS,IACTX,oBAAmB,KACnBgB,mBAAkB,KAClBE,mBAAkBA,EAAAA,IAEtB8C,MAIR,CAA4DpF,G,gHCI5D,MAAMsF,EAA2B7E,IAC7B,MAAM,cAACyD,IAAiBqB,EAAAA,EAAAA,WAElBH,GAAWI,EAAAA,EAAAA,eAEXC,GAAcC,EAAAA,EAAAA,aAAYC,EAAAA,IAC1BC,GAA0BF,EAAAA,EAAAA,cAAa/D,GAAuBA,EAAMkE,MAAMC,eAAeF,0BAEzFG,GAAcL,EAAAA,EAAAA,aAAYM,EAAAA,IAC1BC,GAAaP,EAAAA,EAAAA,cAAa/D,GACrBoE,GAAcG,EAAAA,EAAAA,IAA4BvE,QAASwE,IAExDC,GAAkBV,EAAAA,EAAAA,cAAa/D,GAC1BoE,GAAcM,EAAAA,EAAAA,IAA6B1E,GAAOoE,aAAW,EAAXA,EAAatG,KAAM,GAAIgB,EAAMG,QAAQnB,SAAM0G,IAUxG,SAASG,IACLlB,GAASrD,EAAAA,EAAAA,GAAU,CACfC,QAASH,EAAAA,GAAAA,cACTI,WAAYsE,EAAAA,QACZC,YAAa,CACTC,iBAAwE,IAAvDb,EAAwBc,QAAQjG,EAAMG,QAAQnB,IAAa,CAACgB,EAAMG,QAAQnB,IAAMmG,OAGzGe,EAAAA,EAAAA,IAAW,KAAM,yCACrB,CAEA,SAASC,EAAmCX,GAkCxC,MAAO,IAjCeA,EAAWY,KAAKC,IAClC,IAAIhD,EAAOgD,EAAS9D,aASpB,OAPI8D,EAAStD,OAASuD,EAAAA,EAAAA,YAClBjD,EAAOI,EAAc,CAACzE,GAAI,8CAA+CyD,eAAgB,eAEzF4D,EAAStD,OAASuD,EAAAA,EAAAA,WAClBjD,EAAOI,EAAc,CAACzE,GAAI,6CAA8CyD,eAAgB,cAGrF,CACHzD,GAAI,kBAAF8D,OAAoB9C,EAAMG,QAAQnB,GAAE,KAAA8D,OAAIuD,EAASrH,IACnDuH,KAAMF,EAAStD,OAASuD,EAAAA,EAAAA,UAA2BxH,IAAAA,cAAC0H,EAAAA,gBAAe,CAACC,KAAM,KAAU3H,IAAAA,cAAC4H,EAAAA,kBAAiB,CAACD,KAAM,KAC7GE,UAAW,QACXtD,OACAuD,OAAQA,KAAMC,OAlCIC,EAkCiBT,EAASrH,SAjChD2G,aAAe,EAAfA,EAAiB3G,MAAO8H,IACxBnC,GAASoC,EAAAA,EAAAA,IAAqBD,EAAY9G,EAAMG,QAAQnB,MACxDkH,EAAAA,EAAAA,IAAW,KAAM,oDAHzB,IAA8BY,CAmCtB,EAAC,IAID,CACI9H,GAAI,4BACJqE,KAAOvE,IAAAA,cAAA,QAAMmD,UAAU,4BAE3B,CACIjD,GAAI,qBAAF8D,OAAuB9C,EAAMG,QAAQnB,IACvCuH,KAAOzH,IAAAA,cAACkI,EAAAA,sBAAqB,CAACP,KAAM,KACpCE,UAAW,QACXtD,KAAMI,EAAc,CAACzE,GAAI,sDAAuDyD,eAAgB,iBAChGmE,OAAQf,GAKpB,CAEA,SAASoB,EAAmCzB,GACxC,OAD+E/F,UAAAyH,OAAA,QAAAxB,IAAAjG,UAAA,IAAAA,UAAA,GAEpE+F,EAAW2B,QAAQd,GAAaA,EAAStD,OAASuD,EAAAA,EAAAA,WAGtDd,EAAW2B,QAAQd,GAAaA,EAAStD,OAASuD,EAAAA,EAAAA,iBAC7D,CA6BA,OAAKd,EAKD1G,IAAAA,cAACC,EAAAA,EAAAA,MAAU,KACPD,IAAAA,cAACC,EAAAA,EAAAA,YAAgB,CACbC,GAAE,UAAA8D,OAAY9C,EAAMG,QAAQnB,IAC5BoI,QAnCZ,SAAuC5B,GACnC,MAAM6B,EAAiClC,EAAwBmC,SAAStH,EAAMG,QAAQnB,IAGtF,OAAIgB,EAAMuH,mBAAqBF,EAGpBlB,EADoBc,EAAmCzB,EAD7CxF,EAAMG,QAAQ4C,OAASyE,EAAAA,QAAAA,YAAwBxH,EAAMG,QAAQ4C,OAASyE,EAAAA,QAAAA,aAKtDrC,EAAwBsC,OAAOC,GAAc1C,EAAY0C,GAAW3E,OAASyE,EAAAA,QAAAA,YAAwBxC,EAAY0C,GAAW3E,OAASyE,EAAAA,QAAAA,aAG/JrB,EADoBc,EAAmCzB,GAAY,IAInCL,EAAwBsC,OAAOC,GAAc1C,EAAY0C,GAAW3E,OAASyE,EAAAA,QAAAA,YAAwBxC,EAAY0C,GAAW3E,OAASyE,EAAAA,QAAAA,aAGrKrB,EADoBc,EAAmCzB,GAAY,IAMvEW,EADoBX,EAAW2B,QAAQd,GAAaA,EAAStD,OAASuD,EAAAA,EAAAA,UAA0BD,EAAStD,OAASuD,EAAAA,EAAAA,kBAE7H,CAUqBqB,CAA8BnC,GACvCnC,KAAMI,EAAc,CAACzE,GAAI,2CAA4CyD,eAAgB,eACrFkE,UAAW,QACXJ,KAAMvG,EAAMuH,iBAAmB,KAAOzI,IAAAA,cAACkI,EAAAA,sBAAqB,CAACP,KAAM,KACnEmB,OAAQ5H,EAAM4H,OACdC,qBAAqB,EACrBC,kBAAmBnC,aAAe,EAAfA,EAAiBpD,aACpCwF,gBAAgB,KAdjB,IAgBM,EAEnBlD,EAAAmD,UAAA,CAjIEJ,OAAM1D,IAAAA,KAAAA,WACNqD,iBAAgBrD,IAAAA,MAkIpB,SAAe5E,EAAAA,EAAAA,MAAKuF,G,0cCtIL,MAAMoD,UAA4BnJ,IAAAA,cAC7CU,WAAAA,CAAYQ,GACRkI,MAAMlI,GAAON,EAAA,sBAKD,KACZ,MAAM,QAACO,EAAO,UAAEyH,GAAa3H,KAAKC,MAC9B0H,EAAUR,SAAWM,EAAAA,QAAAA,oBAIzBvH,EAAQkI,qBAAqBT,EAAWU,EAAAA,GAAAA,kBACxClC,EAAAA,EAAAA,IAAW,UAAW,6BAA8B,CAACmC,WAAYX,IACjE3H,KAAKsB,SAAQ,IAChB3B,EAAA,eAEQ,KACLK,KAAKe,SAAS,CAACoC,MAAM,GAAO,IAf5BnD,KAAKmB,MAAQ,CAACgC,MAAM,EACxB,CAiBAM,MAAAA,GACI,MAAM,mBACF8E,EAAkB,SAClBC,GACAxI,KAAKC,MAET,OACIlB,IAAAA,cAAC0J,EAAAA,MAAK,CACFC,gBAAgB,cAChBvF,KAAMnD,KAAKmB,MAAMgC,KACjB7B,OAAQtB,KAAKsB,OACbkH,SAAUA,EACVG,KAAK,SACL,kBAAgB,4BAEhB5J,IAAAA,cAAC0J,EAAAA,MAAAA,OAAY,CAACG,aAAa,GACvB7J,IAAAA,cAAC0J,EAAAA,MAAAA,MAAW,CACRI,eAAe,KACf5J,GAAG,4BAEHF,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,wBACHyD,eAAe,+CACfC,OAAQ,CACJH,aAAc+F,OAK9BxJ,IAAAA,cAAC0J,EAAAA,MAAAA,KAAU,KACP1J,IAAAA,cAAA,SACIA,IAAAA,cAAC+J,EAAAA,EAAwB,CACrB7J,GAAG,4BACHyD,eAAe,0NACfC,OAAQ,CACJH,aAAc+F,MAI1BxJ,IAAAA,cAAA,SACIA,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,4BACHyD,eAAe,mDAGvB3D,IAAAA,cAAA,SACIA,IAAAA,cAAC+J,EAAAA,EAAwB,CACrB7J,GAAG,4BACHyD,eAAe,4EACfC,OAAQ,CACJH,aAAc+F,OAK9BxJ,IAAAA,cAAC0J,EAAAA,MAAAA,OAAY,KACT1J,IAAAA,cAAA,UACIiE,KAAK,SACLd,UAAU,mBACVkB,QAASpD,KAAKsB,QAEdvC,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,yBACHyD,eAAe,gBAGvB3D,IAAAA,cAAA,UACIiE,KAAK,SACLd,UAAU,kBACV,eAAa,QACbkB,QAASpD,KAAK+I,cACdC,WAAW,EACX,cAAY,yBAEZjK,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,0BACHyD,eAAe,sCAMvC,EACH/C,EAzGoBuI,EAAmB,aAjBpCK,mBAAkBpE,IAAAA,OAAAA,WAClBwD,UAASxD,IAAAA,OAAAA,WAKTqE,SAAQrE,IAAAA,KAAAA,WAERjE,QAAOiE,IAAAA,MAAA,CACHiE,qBAAoBjE,IAAAA,KAAAA,aAAAC,aCN5B,SAAeE,EAAAA,EAAAA,SAAQ,MARvB,SAA4BM,GACxB,MAAO,CACH1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxBuD,qBAAoBA,EAAAA,IACrBxD,GAEX,GAEA,CAAiDsD,G,mHCXjD,MAiBA,GAjB2Be,KACvB,MAAMtF,GAAOoB,EAAAA,EAAAA,WACb,OACIhG,IAAAA,cAACmK,GAAAA,EAAa,CACVnH,MAAO4B,EAAKD,cAAc,CACtBzE,GAAI,mEACJyD,eAAgB,qFAEpBY,KAAMK,EAAKD,cAAc,CACrBzE,GAAI,gEACJyD,eAAgB,8LAEpBM,KAAM,UACR,E,oCCHV,MAAMmG,GAAgBlJ,IAClB,MAAOmJ,EAAOC,IAAYC,EAAAA,EAAAA,YACpB3F,GAAOoB,EAAAA,EAAAA,YACP,cAACrB,GAAiBC,EAElB4F,GAAmBC,EAAAA,EAAAA,cAAaC,IAClC,MAAMC,EAASD,EAAEL,MAEjBC,EAASpJ,EAAM0J,UAAUD,IACzBzJ,EAAM2J,SAASF,EAAO,GACvB,IAEGG,GAAgB3E,EAAAA,EAAAA,aAAY4E,GAAAA,GAE5BC,EAAaC,OAAOrH,OAAO1C,EAAM0J,WACnCtD,KAAK4D,IAAI,CAAOb,MAAOa,EAAKhL,GAAIiL,MAAOD,EAAKzH,iBAC5C2H,MAAK,CAACC,EAAOC,IAAUD,EAAMF,MAAMI,cAAcD,EAAMH,MAAOL,KAElE,OACI9K,IAAAA,cAACwL,GAAAA,EAAa,CACVrI,UAAU,gBACVsI,UAAU,EACVZ,SAAUL,EACVH,MAAOA,EAAQ,CAACc,MAAOd,EAAM5G,aAAc4G,MAAOA,EAAMnK,SAAM0G,EAC9D8E,QAASV,EACTW,OAAQhH,EAAc,CAACzE,GAAI,6DAA8DyD,eAAgB,gBACzGiI,YAAajH,EAAc,CAACzE,GAAI,6DAA8DyD,eAAgB,gBAC9GkI,KAAK,iBACP,EAERzB,GAAAlB,UAAA,CAjCE2B,SAAQzF,IAAAA,KAAAA,YAmCZ,YCvCM0G,GAAsB5K,IACxB,MAAM0D,GAAOoB,EAAAA,EAAAA,WAEb,IAAI+F,EAQJ,OALIA,EADA7K,EAAM8K,mBAAmB5D,OAAS,EACpBxD,EAAKqH,WAAW/K,EAAM8K,oBAEtBpH,EAAKD,cAAc,CAACzE,GAAI,2DAA4DyD,eAAgB,aAIlH3D,IAAAA,cAACmK,GAAAA,EAAa,CACVnH,MAAO4B,EAAKD,cAAc,CACtBzE,GAAI,oDACJyD,eAAgB,gEAEpBY,KAAMK,EAAKD,cAAc,CACrBzE,GAAI,kDACJyD,eAAgB,sGAEpB,CACIoI,iBAEN,EAERD,GAAA5C,UAAA,CA5BE8C,mBAAkB5G,IAAAA,QAAAA,IAAAA,QAAAC,YA6BtB,YCZ6E,IAIlE6G,GAAa,SAAbA,GAAa,OAAbA,EAAa,sEAAbA,CAAa,EAAbA,IAAa,IAaxB,MAAMC,GAA2BjL,IAC7B,MAAM0D,GAAOoB,EAAAA,EAAAA,YACP,cAACrB,GAAiBC,GAEjBwH,EAAaC,IAAkB9B,EAAAA,EAAAA,UAAiB,IACjD+B,GAAaC,EAAAA,EAAAA,QAAe,KAE3BC,EAAUC,IAAelC,EAAAA,EAAAA,UAAS,IACnCmC,GAAyBjC,EAAAA,EAAAA,cAAakC,IACxCL,EAAWM,QAAUD,EACrBF,EAAY,GAAG,GAChB,KAEIT,EAAoBa,IAAyBtC,EAAAA,EAAAA,UAAmB,KAEvEuC,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAyB7L,EAAM8L,kBACjC3E,QAAQ4E,GAASA,EAAK/M,KAAOgB,EAAMgM,eAAoC,IAAnBD,EAAKE,YACzD7F,KAAK2F,IAASG,EAAAA,EAAAA,IAAgBH,EAAM/L,EAAMmM,8BAE9CR,EAAsBE,EAAuB,GAC9C,CAAC7L,EAAM8L,oBAEV,MAAOM,EAAiBC,IAAsBhD,EAAAA,EAAAA,UAA+B,CAAC,IACvEiD,EAAoBC,IAAyBlD,EAAAA,EAAAA,WAAkB,IAC/DmD,EAAyBC,IAA8BpD,EAAAA,EAAAA,WAAkB,IACzEqD,EAAgBC,IAAqBtD,EAAAA,EAAAA,aACrCuD,EAAWC,IAAgBxD,EAAAA,EAAAA,WAAkB,IAC7CyD,EAAiBC,IAAsB1D,EAAAA,EAAAA,YAExC1E,GAAWI,EAAAA,EAAAA,eAEXiI,GAAU3B,EAAAA,EAAAA,SAAO,IACvBO,EAAAA,EAAAA,YAAU,KACNoB,EAAQtB,SAAU,EACV,KACJsB,EAAQtB,SAAU,CAAK,IAE5B,KAEHE,EAAAA,EAAAA,YAAU,KACOjM,WACT,MAAMsN,QAAiBtI,GAASuI,EAAAA,GAAAA,IAAkClN,EAAMG,QAAQnB,KAChF,IAAKgO,EAAQtB,QACT,OAGJ,GAAIuB,EAASE,QAAUF,EAASnN,KAC5B,OAEJ,MAAMsN,EAAQH,EAASnN,KAEjB4J,EAAkC,CAAC,EACzC0D,EAAMC,SAASrD,IACXN,EAAUM,EAAKhL,IAAMgL,CAAI,IAG7BqC,EAAmB3C,GACnB6C,GAAsB,GAGD,IAAjBa,EAAMlG,QACNyF,EAAkBS,EAAM,GAAGpO,GAC/B,EAGJsO,GACAC,YAAW,IAAMd,GAA2B,IAAO,KAAK,GACzD,IAEH,MAAMe,GAAgBjE,EAAAA,EAAAA,cAAY5J,UAC9B,IAAK+M,EACD,OAGJ,MAAM,MAACS,SAAenN,EAAMC,QAAQwN,oCAAoCzN,EAAMG,QAAQnB,GAAI0N,EAAgBxB,EAAYwC,OAAQtC,EAAWM,QAAQgC,QAE7IP,EACIA,EAAMQ,kBAAoB3C,GAAc4C,oBACxCrC,EACI9H,EAAc,CACVzE,GAAI,6BACJyD,eAAgB,4CAIxBsK,EAAmBI,EAAMU,UAMjCd,OAAmBrH,IACnBQ,EAAAA,EAAAA,IAAW,UAAW,2CAA4C,CAACmC,WAAYrI,EAAMG,QAAQnB,KAC7FgB,EAAMuI,WAAU,GACjB,CAACmE,EAAgB1M,EAAMG,QAAQnB,GAAIkM,EAAaE,EAAWM,QAAS1L,EAAMC,QAAQ6N,wBAE/EC,GAAczB,IAAuBE,EACrCwB,OAA+BtI,IAAnBgH,GAAgD,KAAhBxB,IAAuB0B,IAActB,EACjF2C,EAA2D,CAAC,EAClE,IAAIC,EAEJ,GAAKH,GAAsD,IAAxChE,OAAOoE,KAAK/B,GAAiBlF,OASzC,CAOH,IAAIkH,EANJH,EAAWI,aAAeN,OAAarI,EAAY1F,EAAMuI,SACzD0F,EAAWK,eAAgB,EAC3BL,EAAWM,iBAAmB9K,EAAc,CAACzE,GAAI,uBAAwByD,eAAgB,WACzFwL,EAAWO,kBAAoB/K,EAAc,CAACzE,GAAI,uDAAwDyD,eAAgB,+BAC1HwL,EAAWQ,mBAAqBT,EAI5BI,EADAL,EAEIjP,IAAAA,cAAA,OAAKmD,UAAU,oBACXnD,IAAAA,cAAC4P,GAAAA,EAAc,OAKnB5P,IAAAA,cAACA,IAAAA,SAAc,KACXA,IAAAA,cAAC8L,GAAkB,CAACE,mBAAoBA,IAGpCf,OAAOoE,KAAK/B,GAAiBlF,OAAS,GACtCpI,IAAAA,cAACoK,GAAY,CACTQ,UAAW0C,EACXzC,SAAUgD,IAIlB7N,IAAAA,cAAC6P,GAAAA,EAAoB,CACjBxF,MAAO+B,EACPP,KAAK,2CACLD,YAAajH,EAAc,CAACzE,GAAI,8DAA+DyD,eAAgB,iCAC/GsG,WAAW,EACX6F,oBAAqBzD,EACrB0D,YAAarD,EACbsD,mBAAoBjC,EACpB7C,KAAM0C,EAAiBN,EAAgBM,QAAkBhH,EACzD4F,SAAUA,IAIVwB,GACAhO,IAAAA,cAAA,OAAKmD,UAAU,oBACXnD,IAAAA,cAAA,KAAGmD,UAAU,4BACbnD,IAAAA,cAAA,YAAOgO,KAQ3BoB,EACIpP,IAAAA,cAAA,OACImD,UAAW8M,KAAW,CAClB,oCAAoC,EACpChO,QAASgN,EACT,cAAuD,IAAxChE,OAAOoE,KAAK/B,GAAiBlF,OAC5C,aAAc6C,OAAOoE,KAAK/B,GAAiBlF,OAAS,KAGvDkH,EAGb,MAvEIH,EAAWO,kBAAoB/K,EAAc,CAACzE,GAAI,eAAgByD,eAAgB,SAClFwL,EAAWT,cAAgBxN,EAAMuI,SAEjC2F,EACIpP,IAAAA,cAAA,OAAKmD,UAAU,0CACXnD,IAAAA,cAACkK,GAAkB,OAoE/B,OACIlK,IAAAA,cAACkQ,GAAAA,GAAYjF,OAAAkF,OAAA,CACTjQ,GAAG,8BACHiD,UAAU,8BACViN,gBAAiBzL,EAAc,CAACzE,GAAI,4CAA6CyD,eAAgB,+BACjG0M,eAAe,EACf3B,cAAeO,OAAarI,EAAY8H,EACxCjF,SAAUvI,EAAMuI,SAChB6G,0BAA0B,GACtBnB,GAEHC,EACU,EAErBjD,GAAAjD,UAAA,CAtMEO,SAAQrE,IAAAA,KAAAA,WAGR4H,kBAAiB5H,IAAAA,MAAAA,WACjBiI,2BAA0BjI,IAAAA,OAAAA,WAC1B8H,cAAa9H,IAAAA,OAAAA,YAmMjB,YCpLA,IAAeG,EAAAA,EAAAA,UAhCf,WACI,MAAMgL,GAAuBC,EAAAA,EAAAA,MAE7B,MAAO,CAACpO,EAAoBqD,KACxB,MAAMgL,EAAuBF,EAAqBnO,EAAOqD,EAASpE,QAAQnB,IACpEgN,GAAgBwD,EAAAA,EAAAA,IAAiBtO,GAGvC,MAAO,CACH4K,kBAAmByD,EACnBpD,4BAJ+BsD,EAAAA,EAAAA,IAA8BvO,GAK7D8K,gBACH,CAET,IAQA,SAA4BrH,GACxB,MAAO,CACH1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxBzD,WAAU,IACVsM,oCAAmC,KACnCK,sBAAqBA,EAAAA,IACtBnJ,GAEX,GAEA,CAAgEsG,I,6cC1BjD,MAAMyE,WAA2B5Q,IAAAA,cAC5CU,WAAAA,CAAYQ,GACRkI,MAAMlI,GAAON,GAAA,qBAIF,KACX,GAAIK,KAAKC,MAAMG,QAAQnB,GAAGkI,SAAWM,EAAAA,QAAAA,kBAArC,CAGA,IAAKzH,KAAKC,MAAM2P,wBAAyB,CACrC,MAAM,6BAACC,GAAgC7P,KAAKC,MACxCD,KAAKC,MAAM6P,qBACXC,EAAAA,GAAAA,KAAaC,KAAK,IAAMhQ,KAAKC,MAAM6P,mBAAmBlF,KAAO,aAAeiF,EAEpF,CACA7P,KAAKC,MAAMC,QAAQ+P,cAAcjQ,KAAKC,MAAMG,QAAQnB,IACpDe,KAAKsB,QARL,CAQa,IAChB3B,GAAA,eAEQ,KACLK,KAAKe,SAAS,CAACoC,MAAM,GAAO,IAlB5BnD,KAAKmB,MAAQ,CAACgC,MAAM,EACxB,CAoBAM,MAAAA,GACI,MAAM,wBAACmM,GAA2B5P,KAAKC,MACvC,OACIlB,IAAAA,cAAC0J,EAAAA,MAAK,CACFC,gBAAgB,cAChBvF,KAAMnD,KAAKmB,MAAMgC,KACjB7B,OAAQtB,KAAKsB,OACbkH,SAAUxI,KAAKC,MAAMuI,SACrBG,KAAK,SACL,kBAAgB,0BAChB1J,GAAG,sBAEHF,IAAAA,cAAC0J,EAAAA,MAAAA,OAAY,CAACG,aAAa,GACvB7J,IAAAA,cAAC0J,EAAAA,MAAAA,MAAW,CACRI,eAAe,KACf5J,GAAG,2BAEHF,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,yBACHyD,eAAe,8BAI3B3D,IAAAA,cAAC0J,EAAAA,MAAAA,KAAU,KACP1J,IAAAA,cAAA,OAAKmD,UAAU,uBACT0N,GACE7Q,IAAAA,cAAC+J,EAAAA,EAAwB,CACrB7J,GAAG,0BACHyD,eAAe,8MACfC,OAAQ,CACJH,aAAcxC,KAAKC,MAAMG,QAAQoC,gBAG5CoN,GACG7Q,IAAAA,cAAC+J,EAAAA,EAAwB,CACrB7J,GAAG,uCACHyD,eAAgB,kLAChBC,OAAQ,CACJH,aAAcxC,KAAKC,MAAMG,QAAQoC,kBAKrDzD,IAAAA,cAAC0J,EAAAA,MAAAA,OAAY,KACT1J,IAAAA,cAAA,UACIiE,KAAK,SACLd,UAAU,mBACVkB,QAASpD,KAAKsB,QAEdvC,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,wBACHyD,eAAe,YAGvB3D,IAAAA,cAAA,UACIiE,KAAK,SACLd,UAAU,iBACV,eAAa,QACbkB,QAASpD,KAAKkQ,aACdlH,WAAW,EACX/J,GAAG,kCAEHF,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,qBACHyD,eAAe,cAMvC,EACH/C,GA/FoBgQ,GAAkB,aAdnCnH,SAAQrE,IAAAA,KAAAA,WAER2L,mBAAkB3L,IAAAA,MAAA,CAAIyG,KAAIzG,IAAAA,OAAAA,aAC1ByL,wBAAuBzL,IAAAA,KACvB0L,6BAA4B1L,IAAAA,OAAAA,WAC5BjE,QAAOiE,IAAAA,MAAA,CACH8L,cAAa9L,IAAAA,KAAAA,aAAAC,aCerB,UAAeE,EAAAA,EAAAA,UApBf,SAAyBnD,GAGrB,MAAO,CACHyO,wBAAqE,UAH1DO,EAAAA,GAAAA,IAAUhP,GAGWiP,iCAChCN,oBAAoBtK,EAAAA,EAAAA,IAAerE,GAE3C,IAEA,SAA4ByD,GACxB,MAAO,CACH1E,SAAS2E,EAAAA,EAAAA,oBACL,CACIoL,cAAaA,GAAAA,IAEjBrL,GAGZ,GAEA,CAA4D+K,I,ykCCd5D,MAAMU,IAAUC,EAAAA,EAAAA,gBAAe,CAC3BC,UAAW,CACPtR,GAAI,2BACJyD,eAAgB,+DAEpB8N,IAAK,CACDvR,GAAI,qBACJyD,eAAgB,OAEpB+N,aAAc,CACVxR,GAAI,8BACJyD,eAAgB,kDAqDjB,MAAMgO,WAA2B3R,IAAAA,cAGpCU,WAAAA,CAAYQ,GACRkI,MAAMlI,GAAON,GAAA,iBAaLgR,IACR3Q,KAAKe,SAAS,CAAC6P,YAAaD,EAAI7C,SAAS,IAC5CnO,GAAA,mBAEY,KACTK,KAAKe,SAAS,CAAC6P,YAAa,IAAI,IACnCjR,GAAA,uBAEgB,KACTK,KAAK6Q,SACL7O,EAAAA,GAAsBhC,KAAK6Q,QAC/B,IACHlR,GAAA,mBAEa8J,IACNA,GACAA,EAAEqH,iBAGN9Q,KAAKe,SAAS,CACV6P,YAAa,GACbG,UAAW,GACXC,iBAAkB,GAClBC,SAAS,EACT9N,MAAM,GACR,IACLxD,GAAA,qBAEcC,UACP6J,GACAA,EAAEqH,iBAGN,MAAM1Q,EAAU4J,OAAOkF,OAAO,CAAC,EAAGlP,KAAKC,MAAMG,SACvC8Q,EAAU9Q,EAAQwK,KAClBuG,EAAiB/Q,EAAQoC,aACzBrB,EAAKiQ,GAAAA,GAAA,GAAOpR,KAAKmB,OAAK,IAAEyP,YAAa,MACrC,cAAClN,GAAiB1D,KAAKC,MAAM0D,MAC5BzD,SAAS,aAACmR,IAAiBrR,KAAKC,MAEvCG,EAAQoC,aAAexC,KAAKmB,MAAMmQ,YAAY3D,QACzCvN,EAAQoC,cAAgBpC,EAAQoC,aAAa2E,OAASM,EAAAA,QAAAA,wBACvDtG,EAAM6P,iBACFjS,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,2BACHyD,eAAe,kEACfC,OAAQ,CACJ4O,UAAW9J,EAAAA,QAAAA,0BAIvBtG,EAAM8P,SAAU,GACT7Q,EAAQoC,aAAa2E,OAASM,EAAAA,QAAAA,wBACrCtG,EAAM6P,iBAAmBtN,EAAc2M,GAAQE,UAAW,CAACA,UAAW9I,EAAAA,QAAAA,yBACtEtG,EAAM8P,SAAU,GAEhB9P,EAAM6P,iBAAmB,GAG7B5Q,EAAQwK,KAAO5K,KAAKmB,MAAMgK,YAAYwC,OACtC,MAAMoD,GAAYS,EAAAA,GAAAA,IAAmBpR,EAAQwK,MAQ7C,GAPImG,EAAU5J,OAAS,IACnBhG,EAAM8P,SAAU,GAEpB9P,EAAM4P,UAAYA,EAElB/Q,KAAKe,SAASI,GAEVA,EAAM8P,QACN,OAEJ,GAAIC,IAAY9Q,EAAQwK,MAAQuG,IAAmB/Q,EAAQoC,aAEvD,YADAxC,KAAKyR,gBAIT,MAAM,KAAC1R,EAAI,MAAEqN,SAAeiE,EAAajR,EAAQnB,GAAImB,GAEjDL,EACAC,KAAKyR,gBACErE,GACPpN,KAAK0R,SAAStE,EAClB,IACHzN,GAAA,sBAEe,KACZK,KAAK2R,aACL3R,KAAK4R,aACD5R,KAAKC,MAAMgK,OACX8F,EAAAA,GAAAA,KAAaC,KAAK,IAAMhQ,KAAKC,MAAMgK,KAAKW,KAAO,aAAe5K,KAAKmB,MAAMgK,YAC7E,IACHxL,GAAA,qBAEe8J,IACZzJ,KAAKe,SAAS,CACVuQ,YAAatR,KAAKC,MAAMG,QAAQoC,aAChC2I,YAAanL,KAAKC,MAAMG,QAAQwK,OAGpC5K,KAAK2R,WAAWlI,EAAE,IACrB9J,GAAA,qBAEe8J,IACZ,MAAMmB,EAAOnB,EAAEoI,OAAOzI,MAAMuE,OAAOmE,QAAQ,kBAAmB,IAAI1S,cAClEY,KAAKe,SAAS,CAACoK,YAAaP,GAAM,IACrCjL,GAAA,4BAEsB8J,IACnBzJ,KAAKe,SAAS,CAACuQ,YAAa7H,EAAEoI,OAAOzI,OAAO,IAC/CzJ,GAAA,mBAEaoS,IACV/R,KAAK6Q,QAAUkB,CAAI,IA3HnB/R,KAAKmB,MAAQ,CACTmQ,YAAarR,EAAMG,QAAQoC,aAC3B2I,YAAalL,EAAMG,QAAQwK,KAC3BgG,YAAa,GACbG,UAAW,GACXC,iBAAkB,GAClBC,SAAS,EACT9N,MAAM,EAEd,CAqHAM,MAAAA,GACI,IAAIuN,EAAmB,KACnBhR,KAAKmB,MAAM6P,mBACXA,EAAmBjS,IAAAA,cAAA,KAAGmD,UAAU,qBAAqBlC,KAAKmB,MAAM6P,mBAGpE,IAAID,EAAY,KACZiB,EAAc,KACdC,EAAgB,iCAChBjS,KAAKmB,MAAM4P,UAAU5J,OAAS,GAC9B4J,EAAYhS,IAAAA,cAAA,KAAGmD,UAAU,qBAAqBlC,KAAKmB,MAAM4P,WACzDkB,GAAiB,cAEjBD,EACIjT,IAAAA,cAAA,KAAGmD,UAAU,eACTnD,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,sBACHyD,eAAe,sEAM/B,IAAIkO,EAAc,KACd5Q,KAAKmB,MAAMyP,cACXA,EAAc7R,IAAAA,cAAA,OAAKmD,UAAU,wBAAuBnD,IAAAA,cAAA,SAAOmD,UAAU,iBAAiBlC,KAAKmB,MAAMyP,eAGrG,MAAM,cAAClN,GAAiB1D,KAAKC,MAAM0D,KAEnC,IAAIuO,EAAgBxO,EAAc2M,GAAQG,KACtC2B,GAAsB,EACtBnS,KAAKC,MAAMG,QAAQwK,OAASnD,EAAAA,QAAAA,kBAC5ByK,GAAiBxO,EAAc2M,GAAQI,cACvC0B,GAAsB,GAG1B,MAAMC,EAAUpS,KAAKC,MAAMoS,eAAiB,YACtCC,EAAW,GAAHvP,QAAMwP,EAAAA,GAAAA,IAAgBH,EAAS,IAAG,KAEhD,OACIrT,IAAAA,cAAC0J,EAAAA,MAAK,CACFC,gBAAgB,cAChBvF,KAAMnD,KAAKmB,MAAMgC,KACjB7B,OAAQtB,KAAKsO,aACbkE,WAAYxS,KAAKyS,eACjBjK,SAAUxI,KAAKC,MAAMuI,SACrBG,KAAK,SACL,kBAAgB,2BAEhB5J,IAAAA,cAAC0J,EAAAA,MAAAA,OAAY,CAACG,aAAa,GACvB7J,IAAAA,cAAC0J,EAAAA,MAAAA,MAAW,CACRI,eAAe,KACf5J,GAAG,2BAEHF,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,uBACHyD,eAAe,qBAI3B3D,IAAAA,cAAA,QAAM4J,KAAK,QACP5J,IAAAA,cAAC0J,EAAAA,MAAAA,KAAU,KACP1J,IAAAA,cAAA,OAAKmD,UAAU,cACXnD,IAAAA,cAAA,SAAOmD,UAAU,iBACbnD,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,6BACHyD,eAAe,kBAGvB3D,IAAAA,cAAA,SACI6K,SAAU5J,KAAK6O,oBACf7L,KAAK,OACL0P,IAAK1S,KAAK2S,WACV1T,GAAG,eACHiD,UAAU,eACVyI,YAAajH,EAAc,CACvBzE,GAAI,mCACJyD,eAAgB,uBAEpB0G,MAAOpJ,KAAKmB,MAAMmQ,YAClBf,UAAW9I,EAAAA,QAAAA,uBACX,aAAY/D,EAAc,CAACzE,GAAI,6BAA8ByD,eAAgB,iBAAiBtD,gBAEjG4R,GAELjS,IAAAA,cAAA,OAAKmD,UAAU,cACXnD,IAAAA,cAAA,SAAOmD,UAAU,iBAAiBgQ,GAElCnT,IAAAA,cAAA,OAAKmD,UAAW+P,GACZlT,IAAAA,cAAC6T,GAAAA,EAAW,CACR3T,GAAG,oCACH4T,UAAU,MACV9Q,MAAOqQ,GAEPrT,IAAAA,cAAA,QAAMmD,UAAU,qBAAqBoQ,IAEzCvT,IAAAA,cAAA,SACI6K,SAAU5J,KAAK8S,aACf9P,KAAK,OACLd,UAAU,eACVjD,GAAG,eACHmK,MAAOpJ,KAAKmB,MAAMgK,YAClBoF,UAAW9I,EAAAA,QAAAA,uBACXsL,SAAUZ,EACV,aAAYzO,EAAc,CAACzE,GAAI,uBAAwByD,eAAgB,mBAAmBtD,iBAGjG4S,EACAjB,GAEJH,GAEL7R,IAAAA,cAAC0J,EAAAA,MAAAA,OAAY,KACT1J,IAAAA,cAAA,UACIiE,KAAK,SACLd,UAAU,mBACVkB,QAASpD,KAAKsO,cAEdvP,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,wBACHyD,eAAe,YAGvB3D,IAAAA,cAAA,UACIqE,QAASpD,KAAKgT,aACdhQ,KAAK,SACL/D,GAAG,cACHiD,UAAU,mBAEVnD,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,sBACHyD,eAAe,YAO3C,EAGJ,UAAe2B,EAAAA,EAAAA,YAAWqM,I,soBCvV1B,MAAMuC,IAA+BC,EAAAA,EAAAA,IACjC,gCACC/R,IACG,MAAMgS,EAAgBhS,EAAMsD,SAAS4I,MAAM8F,cACrClJ,GAAOmJ,EAAAA,EAAAA,IAAQjS,EAAOgS,GAE5B,MAAO,CACHd,eAFmB,GAAHtP,QAAMsQ,EAAAA,GAAAA,MAAY,KAAAtQ,OAAIkH,EAAOA,EAAKW,KAAO,IAGzDX,OACH,IAEJqJ,G,kWAAQlC,CAAA,GAAUkC,KAWvB,IAAehP,EAAAA,EAAAA,SAAQ2O,IARvB,SAA4BrO,GACxB,MAAO,CACH1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxBwM,aAAYA,EAAAA,IACbzM,GAEX,GAEA,CAAyE8L,I,uaCV1D,MAAM6C,WAA8BxU,IAAAA,cAC/CU,WAAAA,CAAYQ,GACRkI,MAAMlI,GAAON,GAAA,wBAKC,KACVK,KAAKC,MAAMG,QAAQnB,GAAGkI,SAAWM,EAAAA,QAAAA,oBAGrCzH,KAAKC,MAAMC,QAAQsT,iBAAiBxT,KAAKC,MAAMG,QAAQnB,IACvDe,KAAKsB,SAAQ,IAChB3B,GAAA,eAEQ,KACLK,KAAKe,SAAS,CAACoC,MAAM,GAAO,IAZ5BnD,KAAKmB,MAAQ,CAACgC,MAAM,EACxB,CAcAM,MAAAA,GACI,OACI1E,IAAAA,cAAC0J,EAAAA,MAAK,CACFC,gBAAgB,cAChBvF,KAAMnD,KAAKmB,MAAMgC,KACjB7B,OAAQtB,KAAKsB,OACbkH,SAAUxI,KAAKC,MAAMuI,SACrBG,KAAK,SACL,kBAAgB,6BAChB1J,GAAG,yBAEHF,IAAAA,cAAC0J,EAAAA,MAAAA,OAAY,CAACG,aAAa,GACvB7J,IAAAA,cAAC0J,EAAAA,MAAAA,MAAW,CACRI,eAAe,KACf5J,GAAG,8BAEHF,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,4BACHyD,eAAe,gCAI3B3D,IAAAA,cAAC0J,EAAAA,MAAAA,KAAU,KACP1J,IAAAA,cAAA,OAAKmD,UAAU,sBACXnD,IAAAA,cAAC+J,EAAAA,EAAwB,CACrB7J,GAAG,0CACHyD,eAAgB,qEAChBC,OAAQ,CACJH,aAAcxC,KAAKC,MAAMG,QAAQoC,kBAKjDzD,IAAAA,cAAC0J,EAAAA,MAAAA,OAAY,KACT1J,IAAAA,cAAA,UACIiE,KAAK,SACLd,UAAU,mBACVkB,QAASpD,KAAKsB,QAEdvC,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,2BACHyD,eAAe,YAGvB3D,IAAAA,cAAA,UACIiE,KAAK,SACLd,UAAU,iBACV,eAAa,QACbkB,QAASpD,KAAKyT,gBACdzK,WAAW,EACX/J,GAAG,qCAEHF,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,wBACHyD,eAAe,gBAMvC,EACH/C,GAhFoB4T,GAAqB,aAbtC/K,SAAQrE,IAAAA,KAAAA,WAERjE,QAAOiE,IAAAA,MAAA,CAQPqP,iBAAgBrP,IAAAA,KAAAA,aAAAC,aCPpB,UAAeE,EAAAA,EAAAA,SAAQ,MARvB,SAA4BM,GACxB,MAAO,CACH1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxB2O,iBAAgBA,EAAAA,IACjB5O,GAEX,GAEA,CAAiD2O,I,gBCJjD,MAAMG,GAAeC,IAGK,IAHJ,WAClBC,EAAU,QACV1T,GACIyT,EACJ,MAAMhQ,GAAOoB,EAAAA,EAAAA,WAEb,OACIhG,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZmE,KAAMyQ,EACNxQ,QAASlD,EAAQ2T,sBACjBvQ,KAAMK,EAAKD,cAAc,CACrBzE,GAAI,qCACJyD,eAAgB,mBAEtB,EAERgR,GAAAzL,UAAA,CAtBE2L,WAAUzP,IAAAA,KAAAA,WACVjE,QAAOiE,IAAAA,MAAA,CACH0P,sBAAqB1P,IAAAA,KAAAA,aAAAC,YAsB7B,SAAerF,IAAAA,KAAW2U,IChB1B,IAAepP,EAAAA,EAAAA,SAAQ,MANKM,IAAkB,CAC1C1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxBgP,sBAAqBA,GAAAA,IACtBjP,MAGP,CAAiD8O,I,ubC2ClC,MAAMI,WAAqB/U,IAAAA,cAA2BU,WAAAA,GAAA,SAAAC,WAAAC,GAAA,oBAClD8J,IACXA,EAAEqH,iBAEF,MAAM,QACF1Q,EAAO,YACP2T,EAAW,YACXxO,EAAW,gBACXyO,EACA9T,SAAS,gBACL+T,EAAe,mBACfC,IAEJlU,KAAKC,MAET,IAAI2K,EACAtE,EACAlG,EAAQ4C,OAASyE,EAAAA,UAAAA,YACjBnB,EAAWmB,EAAAA,UAAAA,YAAAA,6BACXmD,EAAOxK,EAAQ+T,cAEf7N,EAAWmB,EAAAA,UAAAA,YAAAA,4BACXmD,EAAOxK,EAAQnB,IAGnBiV,EAAmB9T,EAAQwK,MAC3BqJ,EAAgBF,EAAY9U,GAAI,CAAC,CAACmV,QAASL,EAAY9U,GAAIqH,WAAUsE,OAAMxB,MAAO,WAE9E7D,IACAwK,EAAAA,GAAAA,KAAaC,KAAK,IAADjN,OAAKwC,EAAYqF,KAAI,cAAA7H,OAAaiR,GACvD,GACH,CAEDvQ,MAAAA,GACI,MAAM,GAACxE,EAAE,QAAEmB,GAAWJ,KAAKC,MAE3B,IAAIqD,EAOJ,OANIlD,EAAQ4C,OAASyE,EAAAA,UAAAA,WACjBnE,GAAOnE,EAAAA,EAAAA,IAAgB,yCAA0C,wBAC1DiB,EAAQ4C,OAASyE,EAAAA,UAAAA,aACxBnE,GAAOnE,EAAAA,EAAAA,IAAgB,wCAAyC,wBAIhEJ,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZC,GAAIA,EACJkE,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,WAChErE,QAASpD,KAAKqU,YACd/Q,KAAMA,GAGlB,EACH3D,GApDoBmU,GAAY,aA7B7BE,gBAAe7P,IAAAA,OAAAA,WAUflF,GAAEkF,IAAAA,OAKFjE,QAAOiE,IAAAA,MAAA,CAKH8P,gBAAe9P,IAAAA,KAAAA,WAKf+P,mBAAkB/P,IAAAA,KAAAA,aAAAC,aCvC1B,MAWA,IAAeE,EAAAA,EAAAA,UAXUnD,IACd,CACHoE,aAAaC,EAAAA,EAAAA,IAAerE,GAC5B6S,iBAAiBM,EAAAA,EAAAA,IAA8BnT,GAAOoT,EAAAA,EAAAA,IAAiBpT,QAInDyD,IAAkB,CAC1C1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CAACoP,gBAAe,MAAEC,mBAAkBA,GAAAA,IAAGtP,MAGvE,CAA4DkP,I,gBCU5D,MAAMU,GAAeb,IASR,IATS,UAClBc,GAAY,EAAI,YAChBC,GAAc,EAAK,QACnBtU,EACAF,SAAS,aACLyU,EAAY,UACZpT,GACH,GACDtC,GACI0U,EACJ,MAAMhQ,GAAOoB,EAAAA,EAAAA,WAEP6P,GAAcpL,EAAAA,EAAAA,cAAaC,IAC7BA,EAAEqH,iBAEE1Q,EAAQ4C,OAASyE,EAAAA,UAAAA,gBACjBlG,EAAU,CACNC,QAASH,EAAAA,GAAAA,4BACTI,WAAYoT,GAAAA,EACZ7O,YAAa,CACT5F,aAIRuU,EAAavU,EAAQnB,GACzB,GACD,CAACmB,EAASuU,EAAcpT,IAE3B,OACIxC,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZC,GAAIA,EACJkE,OAAQsR,GAAaC,IAAgBtU,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,WAC/FrE,QAASwR,EACTtR,KAAMK,EAAKD,cAAc,CAACzE,GAAI,uBAAwByD,eAAgB,kBACtEoS,aAAa,GACf,EAERN,GAAAvM,UAAA,CAlDEwM,UAAStQ,IAAAA,KAAAA,WAKTuQ,YAAWvQ,IAAAA,KAAAA,WAKXlF,GAAEkF,IAAAA,QA0CN,UAAe5E,EAAAA,EAAAA,MAAKiV,ICnDpB,IAJkBlQ,EAAAA,EAAAA,SAAQ,MAT1B,SAA4BM,GACxB,MAAO,CACH1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxB8P,aAAY,MACZpT,UAASA,EAAAA,GACVqD,GAEX,GAMA,CAAyB4P,I,4BCAzB,MAAMO,GAA0BpB,IAQnB,IARoB,KAC7BxQ,EAAI,GACJlE,EAAE,QACFmB,EAAO,QACP4U,EAAO,KACP1R,EAAI,YACJ2R,GAAc,EAAK,QACnB/U,GACIyT,EAQJ,OACI5U,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZmE,KAAMA,EACNlE,GAAIA,EACJmE,QAXiB8R,KACjBF,GAGJ9U,EAAQiV,mBAAmB/U,EAAQnB,GAAIgW,EAAY,EAQ/C3R,KAAMA,GACR,EAERyR,GAAA9M,UAAA,CA5BE+M,QAAO7Q,IAAAA,KAAAA,WACPjE,QAAOiE,IAAAA,MAAA,CAbPgR,mBAAkBhR,IAAAA,KAAAA,aAAAC,WAKlBjB,KAAIgB,IAAAA,KAAAA,WACJlF,GAAEkF,IAAAA,OAAAA,WACF8Q,YAAW9Q,IAAAA,KACXb,KAAIa,IAAAA,OAAAA,YAkCR,YC1BA,IAAeG,EAAAA,EAAAA,UAVUnD,IAAkB,CACvC6T,SAASI,EAAAA,GAAAA,IAAajU,KAAUkU,EAAAA,GAAAA,IAAYlU,KAAWmU,EAAAA,GAAAA,oBAG/B1Q,IAAkB,CAC1C1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxBsQ,mBAAkBA,GAAAA,IACnBvQ,MAGP,CAA4D2Q,ICHtDC,GAAwB7B,IAQjB,IARkB,KAC3BxQ,GAAO,EAAI,WACXsS,EACAvV,SAAS,gBACLwV,EAAe,kBACfC,GACH,QACDvV,GACIuT,EACJ,MAAMhQ,GAAOoB,EAAAA,EAAAA,WAEP6Q,GAAwBpM,EAAAA,EAAAA,cAAa7B,GAChC8N,EAAaE,EAAkBhO,GAAa+N,EAAgB/N,IACpE,CAAC8N,EAAYC,EAAiBC,IAE3BE,GAAcrM,EAAAA,EAAAA,cAAaC,IAC7BA,EAAEqH,iBACF8E,EAAsBxV,EAAQnB,GAAG,GAClC,CAACmB,EAAQnB,GAAI2W,IAEhB,IAAItS,EAMJ,OAJIA,EADAmS,EACO9R,EAAKD,cAAc,CAACzE,GAAI,oCAAqCyD,eAAgB,0BAE7EiB,EAAKD,cAAc,CAACzE,GAAI,+BAAgCyD,eAAgB,qBAG/E3D,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZmE,KAAMA,EACNC,QAASyS,EACTvS,KAAMA,GACR,EAIV,IAAe/D,EAAAA,EAAAA,MAAKiW,ICxCpB,IAAelR,EAAAA,EAAAA,SAAQ,MAPKM,IAAkB,CAC1C1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxB6Q,gBAAe,KACfC,kBAAiBA,EAAAA,IAClB/Q,MAGP,CAAiD4Q,ICK3CM,GAAanC,IAA8C,IAA7C,KAACxQ,EAAI,QAAE/C,EAAO,QAAE4U,EAAO,QAAE9U,GAAeyT,EACxD,MAQMrQ,EAAO0R,GAAU7V,EAAAA,EAAAA,IAAgB,yBAA0B,eAAgBA,EAAAA,EAAAA,IAAgB,yBAA0B,aAE3H,OACIJ,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZmE,KAAMA,EACNC,QAbU2S,KACVf,EACA9U,EAAQ8V,qBAGZ9V,EAAQ+V,gBAAgB7V,EAAQnB,GAAG,EAS/BqE,KAAMA,GACR,EAERwS,GAAA7N,UAAA,CAxBE9E,KAAIgB,IAAAA,KAAAA,WAEJ6Q,QAAO7Q,IAAAA,KAAAA,WACPjE,QAAOiE,IAAAA,MAAA,CARP6R,mBAAkB7R,IAAAA,KAAAA,WAClB8R,gBAAe9R,IAAAA,KAAAA,aAAAC,YA8BnB,YChBA,IAAeE,EAAAA,EAAAA,UAXUnD,IAAkB,CACvC6T,SAASI,EAAAA,GAAAA,IAAajU,KAAUkU,EAAAA,GAAAA,IAAYlU,KAAWmU,EAAAA,GAAAA,iBAG/B1Q,IAAkB,CAC1C1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxBmR,mBAAkB,MAClBC,gBAAeA,GAAAA,IAChBrR,MAGP,CAA4DkR,ICkB7C,SAASI,GAAyBvC,GAMvC,IANwC,GAC9C1U,EAAE,QACFkX,EAAO,QACP/V,EAAO,KACP4L,EAAI,QACJ9L,GACIyT,EACJ,MAAMhQ,GAAOoB,EAAAA,EAAAA,WAEP8Q,GAAcrM,EAAAA,EAAAA,cAAY,KAC5BtJ,EAAQkW,yBAAyBpK,EAAK/M,GAAImB,EAAQnB,GAAI,CAClDoX,YAAcF,EAAUG,EAAAA,GAAAA,IAAyBA,EAAAA,GAAAA,SACnD,GACH,CAACpW,EAASiW,EAASnK,EAAK/M,GAAImB,EAAQnB,KAEvC,IAAIqE,EAWJ,OATIA,EADAlD,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,WACnD0O,EACHxS,EAAKD,cAAc,CAACzE,GAAI,oCAAqCyD,eAAgB,wBAC7EiB,EAAKD,cAAc,CAACzE,GAAI,kCAAmCyD,eAAgB,sBAExEyT,EACHxS,EAAKD,cAAc,CAACzE,GAAI,wBAAyByD,eAAgB,mBACjEiB,EAAKD,cAAc,CAACzE,GAAI,sBAAuByD,eAAgB,iBAInE3D,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZC,GAAIA,EACJmE,QAASyS,EACTvS,KAAMA,GAGlB,CAAC4S,GAAAjO,UAAA,CA9CGkO,QAAOhS,IAAAA,KAAAA,WAKPlF,GAAEkF,IAAAA,OAKFjE,QAAOiE,IAAAA,MAAA,IAAAC,YC/BX,MAMA,IAAeE,EAAAA,EAAAA,SAAQ,MANKM,IAAkB,CAC1C1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxBuR,yBAAwBA,EAAAA,IACzBxR,MAGP,CAAiDsR,ICE3CK,GAAkB5C,IAQX,IARY,QACrBvT,EAAO,eACPoW,EACAtW,SAAS,mBACL8V,EAAkB,gBAClBS,GACH,KACDtT,GACIwQ,EACJ,MAAMhQ,GAAOoB,EAAAA,EAAAA,WACP8Q,GAAcrM,EAAAA,EAAAA,cAAaC,IAC7BA,EAAEqH,iBAEE0F,EACAR,IAEAS,EAAgBrW,EAAQnB,GAC5B,GACD,CAACmB,EAAQnB,GAAI+W,EAAoBS,EAAiBD,IAErD,OACIzX,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZmE,KAAMA,EACNC,QAASyS,EACTvS,KAAMK,EAAKD,cAAc,CAACzE,GAAI,yBAA0ByD,eAAgB,uBAC1E,EAIV,IAAenD,EAAAA,EAAAA,MAAKgX,ICrBpB,IAAejS,EAAAA,EAAAA,UAXUnD,IAAkB,CACvCqV,gBAAgBnB,EAAAA,GAAAA,IAAYlU,KAAWmU,EAAAA,GAAAA,QAGf1Q,IAAkB,CAC1C1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxBmR,mBAAkB,MAClBS,gBAAeA,GAAAA,IAChB7R,MAGP,CAA4D2R,IC6B7C,MAAMzX,WAA8BC,IAAAA,cAC/C0E,MAAAA,GACI,MAAM,KACFuI,EAAI,QACJ5L,EAAO,UACPqU,EAAS,WACTgB,EAAU,QACVU,EAAO,WACPO,EAAU,WACV9C,EAAU,SACVtU,EAAQ,6BACRuQ,EAA4B,wBAC5B8G,GACA3W,KAAKC,MAET,IAAKG,EACD,OAAO,KAGX,MAAMwW,EAAYxW,EAAQ4C,OAASyE,EAAAA,UAAAA,gBAC7BoP,GAAmD,IAA9BzW,EAAQ0W,kBAC7BC,EAA2BH,EAAYI,EAAAA,GAAAA,+BAA6CA,EAAAA,GAAAA,8BACpFC,EAA8BL,EAAYI,EAAAA,GAAAA,kCAAgDA,EAAAA,GAAAA,iCAC1FE,EAA0BN,EAAYI,EAAAA,GAAAA,uBAAqCA,EAAAA,GAAAA,sBAC3EG,EAA6BH,EAAAA,GAAAA,YAEnC,IAAII,EACA9X,IACA8X,EACIrY,IAAAA,cAAA,MAAImD,UAAU,iCACVnD,IAAAA,cAAA,aAKZ,MAAMsY,EAAcrX,KAAKC,MAAMqX,gBAAgBjR,KAAK3F,GAE5C3B,IAAAA,cAACC,EAAAA,EAAAA,WAAe,CACZC,GAAIyB,EAAKzB,GAAK,kBACdgD,IAAKvB,EAAKzB,GAAK,kBACfmE,QAASA,KACD1C,EAAKmG,QACLnG,EAAKmG,OAAOzG,EAAQnB,GACxB,EAEJqE,KAAM5C,EAAK4C,SAKvB,OACIvE,IAAAA,cAACA,IAAAA,SAAc,KACXA,IAAAA,cAACwY,GAAkB,CACfpU,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,WAChErH,QAASA,IAGbrB,IAAAA,cAAC+F,EAAuB,CACpB1E,QAASA,EACTyH,QAAQ,EACRL,kBAAkB,IAEtBzI,IAAAA,cAACC,EAAAA,EAAAA,MAAU,CAACoY,QAASA,GACjBrY,IAAAA,cAACyY,GAA6B,CAC1BrU,KAAM7D,EACNc,QAASA,EACTqV,WAAYA,IAEhB1W,IAAAA,cAAC0Y,GAAuB,CACpBtU,KAAM7D,EACNc,QAASA,IAEbrB,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,iCACHkE,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,EAChDpS,QAASH,EAAAA,GAAAA,sBACTI,WAAYiW,EAAAA,EACZ1R,YAAa,CACT5F,UACA2T,YAAa/H,GAEjB1I,MAAMnE,EAAAA,EAAAA,IAAgB,qBAAsB,8BAEhDJ,IAAAA,cAACmX,GAAyB,CACtBjX,GAAG,2BACH+M,KAAMA,EACN5L,QAASA,EACT+V,QAASA,KAIjBpX,IAAAA,cAACC,EAAAA,EAAAA,MAAU,CAACoY,QAASA,GACjBrY,IAAAA,cAAC4Y,GAAAA,EAAqB,CAClBhQ,UAAWvH,EAAQnB,GACnByK,OAAQtJ,EAAQwX,QAChBC,YAAa,CAACd,IAEdhY,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,oBACHkE,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,IAAea,IAAcoC,EACtHrV,QAASH,EAAAA,GAAAA,eACTI,WAAYqW,EAAAA,EACZ9R,YAAa,CAAC5F,WACdkD,MAAMnE,EAAAA,EAAAA,IAAgB,oBAAqB,iBAE/CJ,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,oBACHkE,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,IAAeiD,EAC/DrV,QAASH,EAAAA,GAAAA,kBACTI,WAAYsW,GAAAA,QACZ/R,YAAa,CAACgS,mBAAmB,GACjC1U,MAAMnE,EAAAA,EAAAA,IAAgB,oBAAqB,kBAGnDJ,IAAAA,cAACkZ,GAAsB,CACnBhZ,GAAG,qBACHmB,QAASA,EACT+C,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,GAAca,GACvGnR,MAAMnE,EAAAA,EAAAA,IAAgB,6BAA8B,kBAExDJ,IAAAA,cAAC4Y,GAAAA,EAAqB,CAClBhQ,UAAWvH,EAAQnB,GACnByK,OAAQtJ,EAAQwX,QAChBC,YAAa,CAACd,IAEdhY,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,mBACHkE,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,IAAea,GAAaoC,GAAsBF,EAC3InV,QAASH,EAAAA,GAAAA,sBACTI,WAAYC,EAAAA,EACZ4B,MAAMnE,EAAAA,EAAAA,IAAgB,mBAAoB,gBAE9CJ,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,sBACHkE,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,IAAea,GAAaoC,GAAsBF,EAC3InV,QAASH,EAAAA,GAAAA,sBACTI,WAAYjC,EACZwG,YAAa,CAACrB,UAAWvE,EAAQnB,IACjCqE,MAAMnE,EAAAA,EAAAA,IAAgB,+BAAgC,mBAE1DJ,IAAAA,cAACkZ,GAAsB,CACnBhZ,GAAG,uBACHmB,QAASA,EACT+C,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,IAAea,EACxGnR,MAAMnE,EAAAA,EAAAA,IAAgB,+BAAgC,kBACtD8V,aAAcrB,KAGtB7U,IAAAA,cAAC4Y,GAAAA,EAAqB,CAClBhQ,UAAWvH,EAAQnB,GACnByK,OAAQtJ,EAAQwX,QAChBC,YAAa,CAACd,GACdmB,QAAQ,GAERnZ,IAAAA,cAACkZ,GAAsB,CACnBhZ,GAAG,qBACHmB,QAASA,EACT+C,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,IAAea,EACxGnR,MAAMnE,EAAAA,EAAAA,IAAgB,6BAA8B,oBAKhEJ,IAAAA,cAACC,EAAAA,EAAAA,MAAU,CAACoY,QAASA,GACjBrY,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,oBACHkE,OAAO/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,YAA0BmM,GAAe8C,GAC1GlV,QAASH,EAAAA,GAAAA,oBACTI,WAAY0W,GAAAA,EACZnS,YAAa,CAAC5F,WACdkD,MAAMnE,EAAAA,EAAAA,IAAgB,uCAAwC,8BAGlEJ,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,0BACHkE,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,IAAe8C,KAAe0B,EAAAA,EAAAA,IAAQpM,EAAKqM,OAC3F7W,QAASH,EAAAA,GAAAA,sBACTI,WAAYyJ,GACZlF,YAAa,CAAC5F,WACdkD,MAAMnE,EAAAA,EAAAA,IAAgB,uDAAwD,iCAItFJ,IAAAA,cAACC,EAAAA,EAAAA,MAAU,CAACoY,QAASA,GACjBrY,IAAAA,cAAC4Y,GAAAA,EAAqB,CAClBhQ,UAAWvH,EAAQnB,GACnByK,OAAQtJ,EAAQwX,QAChBC,YAAa,CAACZ,IAEdlY,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,oBACHkE,KAAM/C,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,aAAyBmM,IAAe8C,EACxGlV,QAASH,EAAAA,GAAAA,oBACTI,WAAY0W,GAAAA,EACZnS,YAAa,CAAC5F,WACdkD,MAAMnE,EAAAA,EAAAA,IAAgB,2BAA4B,yBAEtDJ,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,qBACHkE,MAAOyQ,IAAe8C,GAActW,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,WAC9FjG,QAASH,EAAAA,GAAAA,qBACTI,WAAY6W,GAAAA,EACZtS,YAAa,CAAC5F,WACdkD,MAAMnE,EAAAA,EAAAA,IAAgB,4BAA6B,0BAEvDJ,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,gBACHkE,MAAOyQ,GAAcxT,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,WAC/EjG,QAASH,EAAAA,GAAAA,eACTI,WAAYiP,GACZ1K,YAAa,CAAC5F,WACdkD,MAAMnE,EAAAA,EAAAA,IAAgB,wBAAyB,qBAGvDJ,IAAAA,cAAC4Y,GAAAA,EAAqB,CAClBhQ,UAAWvH,EAAQnB,GACnByK,OAAQtJ,EAAQwX,QAChBC,YAAa,CAACb,EAAAA,GAAAA,oCAEdjY,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,0BACHkE,MAAOyQ,IAAea,GAAarU,EAAQ4C,OAASyE,EAAAA,UAAAA,aACpDjG,QAASH,EAAAA,GAAAA,gBACTI,WAAYyG,EACZlC,YAAa,CACT2B,UAAWvH,EAAQnB,GACnBsJ,mBAAoBnI,EAAQoC,cAEhCc,MAAMnE,EAAAA,EAAAA,IAAgB,yBAA0B,iCAGxDJ,IAAAA,cAACwZ,GAAoB,CACjBtZ,GAAG,sBACHmB,QAASA,EACTqU,UAAWA,EACXC,aAAa0D,EAAAA,EAAAA,IAAQpM,EAAKqM,SAE9BtZ,IAAAA,cAAC4Y,GAAAA,EAAqB,CAClBhQ,UAAWvH,EAAQnB,GACnByK,OAAQtJ,EAAQwX,QAChBC,YAAa,CAACX,IAEdnY,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,wBACHkE,MAAOyQ,IAAea,GAAarU,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,WAC7FjG,QAASH,EAAAA,GAAAA,eACTa,UAAU,sBACVT,WAAYkO,GACZ3J,YAAa,CACT5F,UACAyP,gCAEJvM,MAAMnE,EAAAA,EAAAA,IAAgB,wBAAyB,sBAGtDG,GACGP,IAAAA,cAACyZ,GAAAA,EAAuB,CACpBpY,QAASA,EACTqY,YAAY,IAEpB1Z,IAAAA,cAAC2Z,GAAoB,CACjBzZ,GAAG,sBACHmB,QAASA,EACT2T,YAAa/H,IAEjBjN,IAAAA,cAAC4Z,GAAoB,CACjB/E,WAAYA,KAGpB7U,IAAAA,cAACC,EAAAA,EAAAA,MAAU,KACNqY,GAELtY,IAAAA,cAACC,EAAAA,EAAAA,MAAU,CAACoY,QAASA,GACjBrY,IAAAA,cAAC4Y,GAAAA,EAAqB,CAClBhQ,UAAWvH,EAAQnB,GACnByK,OAAQtJ,EAAQwX,QAChBC,YAAa,CAACV,IAEdpY,IAAAA,cAACC,EAAAA,EAAAA,qBAAyB,CACtBC,GAAG,0BACHkE,KAAMyQ,IAAea,GAAarU,EAAQ4C,OAASyE,EAAAA,UAAAA,YAAwBrH,EAAQ4C,OAASyE,EAAAA,UAAAA,WAC5FjG,QAASH,EAAAA,GAAAA,kBACTI,WAAY8R,GACZvN,YAAa,CACT5F,WAEJkD,MAAMnE,EAAAA,EAAAA,IAAgB,2BAA4B,yBAM1E,E,gBApSiBL,G,GAAqB,Y,GAAA,CAXtC2V,UAAStQ,IAAAA,KAAAA,WACTsR,WAAUtR,IAAAA,KAAAA,WACVuS,WAAUvS,IAAAA,KAAAA,WACVgS,QAAOhS,IAAAA,KAAAA,WACPyP,WAAUzP,IAAAA,KAAAA,WACV7E,SAAQ6E,IAAAA,KAAAA,WACR0L,6BAA4B1L,IAAAA,OAAAA,WAC5BmT,gBAAenT,IAAAA,MAAAA,WACfwS,wBAAuBxS,IAAAA,KAAAA,a,+aC9C3B,MAOMyU,GAAU,CACZC,MARuB,IASvBC,KATuB,KAYrBC,GAAuCpF,IAA6B,IAA5B,KAACxQ,EAAI,SAAE6V,GAAgBrF,EACjE,OACI5U,IAAAA,cAACka,GAAAA,EAAa,CACVC,GAAI/V,EACJ6L,WAAW,iCACX6J,OAAO,EACPC,MAAM,EACNK,cAAc,EACdC,eAAe,EACfR,QAASA,IAERI,EACW,EAIxB,GAAeja,IAAAA,KAAWga,ICRpBM,GAA8B1F,IAOvB,IAPwB,KACjC3H,EAAI,QACJ5L,EAAO,WACPkZ,EAAU,YACVhI,EAAW,cACXiI,EAAa,eACbC,GACI7F,EACJ,MAAMhQ,GAAOoB,EAAAA,EAAAA,WAsBb,IAAI0U,EAQJ,OANKF,IACDE,EACI1a,IAAAA,cAAC2a,GAAAA,EAAU,CAACC,OAAQH,KAKxBza,IAAAA,cAAC+D,EAAAA,EAAW,CAAC8W,mBAAoBb,IAC7Bha,IAAAA,cAAA,SACIA,IAAAA,cAAA,QAAMmD,UAAU,WACXuX,EA/BRrZ,EAIDA,EAAQ4C,OAASyE,EAAAA,UAAAA,WACbuE,EAAK/M,KAAOqa,EAERva,IAAAA,cAAC0D,EAAAA,iBAAgB,CACbxD,GAAG,mCACHyD,eAAe,sBACfC,OAAQ,CAACkX,YAAavI,KAI3BA,EAEJlR,EAAQoC,aAfJ,IAiCHzD,IAAAA,cAAA,QACImD,UAAU,yCACVH,MAAO4B,EAAKD,cAAc,CAACzE,GAAI,yBAA0ByD,eAAgB,qBAIjF3D,IAAAA,cAACC,EAAAA,EAAI,CAACE,UAAWyE,EAAKD,cAAc,CAACzE,GAAI,+BAAgCyD,eAAgB,kBACrF3D,IAAAA,cAACM,GAA0B,CAACC,UAAU,IACtCP,IAAAA,cAAA,OAAKmD,UAAU,gCACV,MAGC,EAEpBmX,GAAApR,UAAA,CAjEEqR,WAAUnV,IAAAA,UAAA,CAAAA,IAAAA,OAAAA,IAAAA,MAAA,UACVoV,cAAapV,IAAAA,KACbqV,eAAcrV,IAAAA,OACdmN,YAAWnN,IAAAA,OAAAA,YAgEf,UAAe5E,EAAAA,EAAAA,MAAK8Z,ICtDdS,IAAgB5G,EAAAA,EAAAA,IAClB,gBACA6G,EAAAA,GACAtK,EAAAA,IACA,CAACrP,EAAS6L,KACF7L,aAAO,EAAPA,EAAS4C,QAASyE,EAAAA,UAAAA,WACX,KAGJzF,EAAAA,GAA6B5B,EAAQwK,KAAMqB,KAIpD+N,IAAoB9G,EAAAA,EAAAA,IACtB,oBACA+G,EAAAA,GACAH,IACA,CAACI,EAAcZ,KACX,GAAKA,EAIL,OAAOY,EAAaZ,EAAW,IAwC1Bxa,GAAwBqb,EACxB9a,IAA6BiF,EAAAA,EAAAA,UArCjBnD,IAAkB,CACvC6K,MAAMoO,EAAAA,EAAAA,IAAejZ,GACrBf,SAAS2Z,EAAAA,EAAAA,IAAkB5Y,GAC3BsT,WAAW4F,EAAAA,EAAAA,IAAwBlZ,GACnCsU,YAAY6E,EAAAA,EAAAA,IAAyBnZ,GACrCgV,SAASoE,EAAAA,EAAAA,IAAsBpZ,GAC/BuV,YAAY,EACZ9C,YAAY4G,EAAAA,EAAAA,IAAyBrZ,GACrC0O,8BAA8B4K,EAAAA,EAAAA,IAAgCtZ,KAAUmT,EAAAA,EAAAA,IAA8BnT,GAAOoT,EAAAA,EAAAA,IAAiBpT,IAC9HmW,iBAAiBoD,EAAAA,EAAAA,IAAqCvZ,GACtDwV,wBAAuE,SAA9CxV,EAAMsD,SAASkW,QAAQC,QAAQC,cA2BlBvW,CAAyBwW,IACtDzB,IAA8B/U,EAAAA,EAAAA,UAzBZnD,IAC3B,MAAM6K,GAAOoO,EAAAA,EAAAA,IAAejZ,GACtBf,GAAU2Z,EAAAA,EAAAA,IAAkB5Y,GAC5BmY,EAAaQ,GAAc3Y,GAEjC,IAAIoY,GAAgB,EAChBjI,EAAc,GAClB,GAAIgI,EAAY,CACZ,MAAMyB,GAAWC,EAAAA,EAAAA,IAAQ7Z,EAAOmY,GAChCC,EAAgBwB,GAAYA,EAASE,OACrC3J,EAActP,EAAAA,GAA2Bb,EAAO4Z,EACpD,CAEA,MAAO,CACH/O,OACA5L,UACAkZ,aACAC,gBACAC,eAAgBQ,GAAkB7Y,GAClCmQ,cACH,GAKsChN,CAA+B4W,G,yHCxE1E,MAAMC,EAAa,CACfC,KAAM,2BACNC,QAAS,aACTC,OAAQ,qBACRC,QAAS,qBACTC,aAAS7V,GAGPuD,EAAgByK,IAST,IATU,MACnB5R,EAAK,KACLuB,EAAI,cACJmY,EAAa,gBACbC,EAAe,WACfC,EAAU,KACV3Y,EAAO,OAAM,cACb4Y,EAAa,eACbC,GACIlI,EACJ,MAAMhQ,GAAOoB,EAAAA,EAAAA,WACPyB,EAAO2U,EAAWnY,GAClB8Y,EAAcvY,QAAQqY,GAAiBC,GACvCE,EAAc,iCACpB,OACIhd,IAAAA,cAAA,OAAKmD,UAAW8M,IAAW,yBAA0BhM,IACjDjE,IAAAA,cAAA,OAAKmD,UAAW,wBACXsE,GAAQzH,IAAAA,cAAA,KAAGmD,UAAW8M,IAAW,yBAA0BxI,EAAMxD,KAClEjE,IAAAA,cAAA,OAAKmD,UAAU,qBACXnD,IAAAA,cAAA,MAAImD,UAAW8M,IAAW,qBAAsB,CAACwM,QAAkB,YAATxY,KAAuBjB,GACjFhD,IAAAA,cAACid,EAAAA,EAAQ,CAAClO,QAASxK,IACnBvE,IAAAA,cAAA,OAAKmD,UAAU,wBACVuZ,GACD1c,IAAAA,cAAA,UACIqE,QAASqY,EAAcrY,QACvBlB,UAAW8M,IAAW+M,EAAa,gBAElCN,EAAcnY,MAGlBoY,GACD3c,IAAAA,cAAA,UACIqE,QAASsY,EAAgBtY,QACzBlB,UAAW8M,IAAW+M,EAAa,kBAElCL,EAAgBpY,MAGpBqY,GACD5c,IAAAA,cAAA,UACIqE,QAASuY,EAAWvY,QACpBlB,UAAW8M,IAAW+M,EAAa,aAElCJ,EAAWrY,SAO3BwY,GACG/c,IAAAA,cAAA,UACImD,UAAU,yCACVkB,QAASyY,EACT,aAAYlY,EAAKD,cAAc,CAC3BzE,GAAI,wBACJyD,eAAgB,oBAGpB3D,IAAAA,cAAA,KAAGmD,UAAU,qBAGnB,EAEZgH,EAAAjB,UAAA,CAlFElG,MAAKoC,IAAAA,OAAAA,WACLb,KAAIa,IAAAA,OAAAA,WACJsX,cAAatX,IAAAA,MAAA,CANbf,QAAOe,IAAAA,KAAAA,WACPb,KAAIa,IAAAA,OAAAA,aAMJuX,gBAAevX,IAAAA,MAAA,CAPff,QAAOe,IAAAA,KAAAA,WACPb,KAAIa,IAAAA,OAAAA,aAOJwX,WAAUxX,IAAAA,MAAA,CARVf,QAAOe,IAAAA,KAAAA,WACPb,KAAIa,IAAAA,OAAAA,aAQJnB,KAAImB,IAAAA,MAAA,CAAG,OAAS,UAAY,SAAW,UAAY,YACnDyX,cAAazX,IAAAA,KACb0X,eAAc1X,IAAAA,MA6ElB,S,onBCtDA,MAAMqU,UAAgCzZ,IAAAA,cAA2BU,WAAAA,GAAA,SAAAC,WAAAC,EAAA,wBAC1Csc,IACf,MAAM7Y,EAAUA,IAAMpD,KAAKkc,cAAcD,GAEzC,OAAIjc,KAAKC,MAAMwY,WAEP1Z,IAAAA,cAAA,MACIkD,IAAK,0BAA4Bga,EAAQE,OAASF,EAAQG,SAC1DzT,KAAK,eACLzG,UAAU,YAEVnD,IAAAA,cAAA,KACI4J,KAAK,WACL0T,KAAK,IACLjZ,QAASA,GAER6Y,EAAQ/R,QAOrBnL,IAAAA,cAAA,MAAImD,UAAU,uBACVnD,IAAAA,cAAA,UACIE,GAAE,GAAA8D,OAAKkZ,EAAQE,OAAM,KAAApZ,OAAIkZ,EAAQG,UACjCla,UAAU,mCACVkB,QAASA,GAETrE,IAAAA,cAAA,QAAMmD,UAAU,6BACZnD,IAAAA,cAAA,OACIoD,IAAK8Z,EAAQzV,KACblE,MAAM,KACNC,OAAO,SAIlB,IAEZ5C,EAAA,qBACe2c,IACZ,MAAMlZ,EAAUA,IAAMpD,KAAKuc,WAAWD,GAEtC,OAAItc,KAAKC,MAAMwY,WAEP1Z,IAAAA,cAAA,MACIkD,IAAK,0BAA4Bqa,EAAKrd,GACtC0J,KAAK,eACLzG,UAAU,YAEVnD,IAAAA,cAAA,KACI4J,KAAK,WACL0T,KAAK,IACLjZ,QAASA,GAERkZ,EAAKE,eAOlBzd,IAAAA,cAAA,MAAImD,UAAU,uBACVnD,IAAAA,cAAA,UACImD,UAAU,mCACVkB,QAASA,GAETrE,IAAAA,cAAA,QAAMmD,UAAU,6BACXoa,EAAK9V,OAGb,IAEZ7G,EAAA,sBAceC,UACZ,MAAM,QAACQ,EAAO,KAAEuD,GAAQ3D,KAAKC,MACvBwc,GAAUC,EAAAA,EAAAA,IACZT,EAAQE,OACRF,EAAQG,SACRhc,EAAQnB,GACRmB,EAAQwX,SAGN+E,QAAY3c,KAAKC,MAAMC,QAAQ0c,mBAAmBX,EAASQ,EAAS9Y,GAE1E,GAAIgZ,EAAIvP,MAAO,CACX,MAAMyP,EAAgBF,EAAIvP,MACpB0P,EAAeD,EAAcvZ,MAAQK,EAAKD,cAAc,CAC1DzE,GAAI,qBACJyD,eAAgB,4BAGpB,YADA1C,KAAKC,MAAMC,QAAQ6c,oCAAoCF,EAAeC,EAAc1c,EAAQnB,GAEhG,CAEA,MAAM+d,EAAWL,EAAI5c,KACrB,OAAQid,EAASha,MACjB,KAAKia,EAAAA,GAAAA,GACGD,EAAS1Z,MACTtD,KAAKC,MAAMC,QAAQ6c,oCAAoCC,EAAUA,EAAS1Z,KAAMlD,EAAQnB,IAE5F,MACJ,KAAKge,EAAAA,GAAAA,SACD,MACJ,KAAKA,EAAAA,GAAAA,KACGD,EAASE,MACTld,KAAKC,MAAMC,QAAQid,cAAcH,EAASE,KAAMT,GAEpD,MACJ,QAAS,CACL,MAAMK,EAAe9c,KAAKC,MAAM0D,KAAKD,cAAc,CAC/CzE,GAAI,oCACJyD,eAAgB,2DACjB,CACCM,KAAMga,EAASha,OAEnBhD,KAAKC,MAAMC,QAAQ6c,oCAAoCC,EAAUF,EAAc1c,EAAQnB,GAC3F,EACA,GACH,CAzDDme,UAAAA,CAAWC,GACP,OAAOA,EAAMhX,IAAIrG,KAAKsd,aAC1B,CAEAC,aAAAA,CAAcC,GACV,OAAOA,EAASnX,IAAIrG,KAAKyd,gBAC7B,CAEAlB,UAAAA,CAAWD,GAAuB,IAAAoB,EAC9B,OAAkB,QAAlBA,EAAOpB,EAAKzV,cAAM,IAAA6W,OAAA,EAAXA,EAAAC,KAAArB,EAActc,KAAKC,MAAMG,QAASJ,KAAKC,MAAM2d,cACxD,CAiDAna,MAAAA,GACI,MAAMoa,EAAa7d,KAAKC,MAAM4d,YAAc,GACtCL,EAAWxd,KAAKC,MAAM6d,aAAe,GAE3C,GAA0B,IAAtBD,EAAW1W,QAAoC,IAApBqW,EAASrW,OACpC,OAAO,KACJ,GAA0B,IAAtB0W,EAAW1W,QAAoC,IAApBqW,EAASrW,OAC3C,OAAOnH,KAAKsd,aAAaO,EAAW,IACjC,GAA0B,IAAtBA,EAAW1W,QAAoC,IAApBqW,EAASrW,OAC3C,OAAOnH,KAAKyd,gBAAgBD,EAAS,IAGzC,IAAKxd,KAAKC,MAAMwY,WACZ,OAAO,KAGX,MAAMsF,EAAY/d,KAAKod,WAAWS,GAC5BG,EAAWhe,KAAKud,cAAcC,GACpC,OAAQze,IAAAA,cAAAA,IAAAA,SAAA,KACHgf,EACAC,EAET,EAGJre,EA/JM6Y,EAAuB,aAvBzBqF,WAAU1Z,IAAAA,MAKVsU,WAAUtU,IAAAA,KAAAA,WAQV2Z,YAAW3Z,IAAAA,MAAAA,WACX8Z,YAAW9Z,IAAAA,KAAAA,WAEXjE,QAAOiE,IAAAA,MAAA,IAAAC,aAyKX,SAAeC,EAAAA,EAAAA,YAAWmU,GC9LpB0F,GAA2BC,EAAAA,EAAAA,IAAwBC,EAAAA,GAAAA,qBAuBzD,GAAe9Z,EAAAA,EAAAA,UArBf,SAAyBnD,GACrB,MAAMkd,GAAOJ,EAAAA,EAAAA,IAAY9c,GACzB,MAAO,CACH2c,YAAaI,EAAyB/c,GACtC8c,YAAaI,EACbT,eAAeU,EAAAA,EAAAA,IAA8Bnd,GAC7C0c,WAAY1c,EAAMod,QAAQV,WAAWW,0BACrCC,OAAOC,EAAAA,EAAAA,IAASvd,GAExB,IAEA,SAA4ByD,GACxB,MAAO,CACH1E,SAAS2E,EAAAA,EAAAA,oBAAmB,CACxB+X,mBAAkB,KAClBG,oCAAmC,KACnCI,cAAaA,EAAAA,IACdvY,GAEX,GAEA,CAA4D4T,E","sources":["webpack://mattermost-webapp/./src/components/channel_header_dropdown/channel_header_dropdown.tsx","webpack://mattermost-webapp/./src/components/channel_groups_manage_modal/channel_groups_manage_modal.tsx","webpack://mattermost-webapp/./src/components/channel_groups_manage_modal/index.ts","webpack://mattermost-webapp/./src/components/channel_move_to_sub_menu_old/index.tsx","webpack://mattermost-webapp/./src/components/convert_channel_modal/convert_channel_modal.tsx","webpack://mattermost-webapp/./src/components/convert_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/no_common_teams/no_common_teams.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/team_selector/team_selector.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/warning_text_section/warning_text_section.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/convert_gm_to_channel_modal.tsx","webpack://mattermost-webapp/./src/components/convert_gm_to_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/delete_channel_modal/delete_channel_modal.tsx","webpack://mattermost-webapp/./src/components/delete_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/rename_channel_modal/rename_channel_modal.tsx","webpack://mattermost-webapp/./src/components/rename_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/unarchive_channel_modal/unarchive_channel_modal.tsx","webpack://mattermost-webapp/./src/components/unarchive_channel_modal/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/close_channel/close_channel.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/close_channel/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/close_message/close_message.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/close_message/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/leave_channel/leave_channel.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/leave_channel/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/open_members_rhs/open_members_rhs.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/open_members_rhs/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/toggle_favorite_channel/toggle_favorite_channel.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/toggle_favorite_channel/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/toggle_info/toggle_info.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/toggle_info/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/toggle_mute_channel/toggle_mute_channel.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/toggle_mute_channel/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/view_pinned_posts/view_pinned_posts.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/menu_items/view_pinned_posts/index.ts","webpack://mattermost-webapp/./src/components/channel_header_dropdown/channel_header_dropdown_items.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/mobile_channel_header_dropdown_animation.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/mobile_channel_header_dropdown.tsx","webpack://mattermost-webapp/./src/components/channel_header_dropdown/index.ts","webpack://mattermost-webapp/./src/components/section_notice.tsx","webpack://mattermost-webapp/./src/plugins/mobile_channel_header_plug/mobile_channel_header_plug.tsx","webpack://mattermost-webapp/./src/plugins/mobile_channel_header_plug/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport {ChannelHeaderDropdownItems} from 'components/channel_header_dropdown';\nimport Menu from 'components/widgets/menu/menu';\n\nimport {localizeMessage} from 'utils/utils';\n\nconst ChannelHeaderDropdown = () => (\n    <Menu\n        id='channelHeaderDropdownMenu'\n        ariaLabel={localizeMessage('channel_header.menuAriaLabel', 'Channel Menu').toLowerCase()}\n    >\n        <ChannelHeaderDropdownItems isMobile={false}/>\n    </Menu>\n);\n\nexport default memo(ChannelHeaderDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport {SyncableType} from '@mattermost/types/groups';\nimport type {Group} from '@mattermost/types/groups';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport ListModal, {DEFAULT_NUM_PER_PAGE} from 'components/list_modal';\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport groupsAvatar from 'images/groups-avatar.png';\nimport {ModalIdentifiers} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\n\ntype Props = {\n    channel: Channel;\n    intl: IntlShape;\n    actions: {\n        getGroupsAssociatedToChannel: (channelId: string, searchTerm: string, pageNumber: number, perPage: number) => Promise<ActionResult>;\n        unlinkGroupSyncable: (itemId: string, channelId: string, groupsSyncableTypeChannel: SyncableType) => Promise<ActionResult>;\n        patchGroupSyncable: (itemId: string, channelId: string, groupsSyncableTypeChannel: SyncableType, params: {scheme_admin: boolean}) => Promise<ActionResult>;\n        getMyChannelMember: (channelId: string) => void;\n        closeModal: (modalId: string) => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n    };\n};\n\nclass ChannelGroupsManageModal extends React.PureComponent<Props> {\n    public loadItems = async (pageNumber: number, searchTerm: string) => {\n        const {data} = await this.props.actions.getGroupsAssociatedToChannel(this.props.channel.id, searchTerm, pageNumber, DEFAULT_NUM_PER_PAGE);\n        return {\n            items: data.groups,\n            totalCount: data.totalGroupCount,\n        };\n    };\n\n    public onClickRemoveGroup = (item: Group, listModal: any) => this.props.actions.unlinkGroupSyncable(item.id, this.props.channel.id, SyncableType.Channel).then(async () => {\n        listModal.setState({loading: true});\n        const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n        listModal.setState({loading: false, items, totalCount});\n    });\n\n    public onHide = () => {\n        this.props.actions.closeModal(ModalIdentifiers.MANAGE_CHANNEL_GROUPS);\n    };\n\n    public titleButtonOnClick = () => {\n        this.onHide();\n        this.props.actions.openModal({modalId: ModalIdentifiers.ADD_GROUPS_TO_TEAM, dialogType: AddGroupsToChannelModal});\n    };\n\n    public setChannelMemberStatus = async (item: Group, listModal: any, isChannelAdmin: boolean) => {\n        this.props.actions.patchGroupSyncable(item.id, this.props.channel.id, SyncableType.Channel, {scheme_admin: isChannelAdmin}).then(async () => {\n            listModal.setState({loading: true});\n            const {items, totalCount} = await listModal.props.loadItems(listModal.setState.page, listModal.state.searchTerm);\n            await this.props.actions.getMyChannelMember(this.props.channel.id);\n\n            listModal.setState({loading: false, items, totalCount});\n        });\n    };\n\n    public renderRow = (item: Group, listModal: any) => {\n        let title;\n        if (item.scheme_admin) {\n            title = Utils.localizeMessage('channel_members_dropdown.channel_admins', 'Channel Admins');\n        } else {\n            title = Utils.localizeMessage('channel_members_dropdown.channel_members', 'Channel Members');\n        }\n\n        return (\n            <div\n                key={item.id}\n                className='more-modal__row'\n            >\n                <img\n                    className='more-modal__image'\n                    src={groupsAvatar}\n                    alt='group picture'\n                    width='32'\n                    height='32'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>{item.display_name} {'-'}{' '}\n                        <span className='more-modal__name_count'>\n                            <FormattedMessage\n                                id='numMembers'\n                                defaultMessage='{num, number} {num, plural, one {member} other {members}}'\n                                values={{\n                                    num: item.member_count,\n                                }}\n                            />\n                        </span>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <MenuWrapper>\n                        <button\n                            id={`teamGroupsDropdown_${item.display_name}`}\n                            className='dropdown-toggle theme color--link style--none'\n                            type='button'\n                            aria-expanded='true'\n                        >\n                            <span>{title} </span>\n                            <DropdownIcon/>\n                        </button>\n                        <Menu\n                            openLeft={true}\n                            ariaLabel={Utils.localizeMessage('channel_members_dropdown.menuAriaLabel', 'Change the role of channel member')}\n                        >\n                            <Menu.ItemAction\n                                show={!item.scheme_admin}\n                                onClick={() => this.setChannelMemberStatus(item, listModal, true)}\n                                text={Utils.localizeMessage('channel_members_dropdown.make_channel_admins', 'Make Channel Admins')}\n                            />\n                            <Menu.ItemAction\n                                show={Boolean(item.scheme_admin)}\n                                onClick={() => this.setChannelMemberStatus(item, listModal, false)}\n                                text={Utils.localizeMessage('channel_members_dropdown.make_channel_members', 'Make Channel Members')}\n                            />\n                            <Menu.ItemAction\n                                onClick={() => this.onClickRemoveGroup(item, listModal)}\n                                text={Utils.localizeMessage('group_list_modal.removeGroupButton', 'Remove Group')}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            </div>\n        );\n    };\n\n    render() {\n        const {formatMessage} = this.props.intl;\n        return (\n            <ListModal\n                titleText={formatMessage({id: 'channel_groups', defaultMessage: '{channel} Groups'}, {channel: this.props.channel.display_name})}\n                searchPlaceholderText={formatMessage({id: 'manage_channel_groups_modal.search_placeholder', defaultMessage: 'Search groups'})}\n                renderRow={this.renderRow}\n                loadItems={this.loadItems}\n                onHide={this.onHide}\n                titleBarButtonText={formatMessage({id: 'group_list_modal.addGroupButton', defaultMessage: 'Add Groups'})}\n                titleBarButtonOnClick={this.titleButtonOnClick}\n            />\n        );\n    }\n}\n\nexport default injectIntl(ChannelGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getMyChannelMember} from 'mattermost-redux/actions/channels';\nimport {getGroupsAssociatedToChannel, unlinkGroupSyncable, patchGroupSyncable} from 'mattermost-redux/actions/groups';\n\nimport {closeModal, openModal} from 'actions/views/modals';\n\nimport ChannelGroupsManageModal from './channel_groups_manage_modal';\n\nconst mapStateToProps = (state: GlobalState, ownProps: any) => {\n    return {\n        channel: state.entities.channels.channels[ownProps.channelID],\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators(\n        {\n            getGroupsAssociatedToChannel,\n            closeModal,\n            openModal,\n            unlinkGroupSyncable,\n            patchGroupSyncable,\n            getMyChannelMember,\n        },\n        dispatch,\n    ),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelGroupsManageModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n// Purpose of this file to exists is only required until channel header dropdown is migrated to new menus\nimport React, {memo} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {\n    FolderOutlineIcon,\n    StarOutlineIcon,\n    FolderMoveOutlineIcon,\n} from '@mattermost/compass-icons/components';\nimport type {ChannelCategory} from '@mattermost/types/channel_categories';\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {CategoryTypes} from 'mattermost-redux/constants/channel_categories';\nimport {getCategoryInTeamWithChannel} from 'mattermost-redux/selectors/entities/channel_categories';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {addChannelsInSidebar} from 'actions/views/channel_sidebar';\nimport {openModal} from 'actions/views/modals';\nimport {getCategoriesForCurrentTeam} from 'selectors/views/channel_sidebar';\n\nimport EditCategoryModal from 'components/edit_category_modal';\nimport Menu from 'components/widgets/menu/menu';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\nimport type {Menu as MenuType} from 'types/store/plugins';\n\ntype Props = {\n    channel: Channel;\n    openUp: boolean;\n    inHeaderDropdown?: boolean;\n};\n\nconst ChannelMoveToSubMenuOld = (props: Props) => {\n    const {formatMessage} = useIntl();\n\n    const dispatch = useDispatch();\n\n    const allChannels = useSelector(getAllChannels);\n    const multiSelectedChannelIds = useSelector((state: GlobalState) => state.views.channelSidebar.multiSelectedChannelIds);\n\n    const currentTeam = useSelector(getCurrentTeam);\n    const categories = useSelector((state: GlobalState) => {\n        return currentTeam ? getCategoriesForCurrentTeam(state) : undefined;\n    });\n    const currentCategory = useSelector((state: GlobalState) => {\n        return currentTeam ? getCategoryInTeamWithChannel(state, currentTeam?.id || '', props.channel.id) : undefined;\n    });\n\n    function handleMoveToCategory(categoryId: string) {\n        if (currentCategory?.id !== categoryId) {\n            dispatch(addChannelsInSidebar(categoryId, props.channel.id));\n            trackEvent('ui', 'ui_sidebar_channel_menu_moveToExistingCategory');\n        }\n    }\n\n    function handleMoveToNewCategory() {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.EDIT_CATEGORY,\n            dialogType: EditCategoryModal,\n            dialogProps: {\n                channelIdsToAdd: multiSelectedChannelIds.indexOf(props.channel.id) === -1 ? [props.channel.id] : multiSelectedChannelIds,\n            },\n        }));\n        trackEvent('ui', 'ui_sidebar_channel_menu_createCategory');\n    }\n\n    function createSubmenuItemsForCategoryArray(categories: ChannelCategory[]): MenuType[] {\n        const allCategories = categories.map((category: ChannelCategory) => {\n            let text = category.display_name;\n\n            if (category.type === CategoryTypes.FAVORITES) {\n                text = formatMessage({id: 'sidebar_left.sidebar_channel_menu.favorites', defaultMessage: 'Favorites'});\n            }\n            if (category.type === CategoryTypes.CHANNELS) {\n                text = formatMessage({id: 'sidebar_left.sidebar_channel_menu.channels', defaultMessage: 'Channels'});\n            }\n\n            return {\n                id: `moveToCategory-${props.channel.id}-${category.id}`,\n                icon: category.type === CategoryTypes.FAVORITES ? (<StarOutlineIcon size={16}/>) : (<FolderOutlineIcon size={16}/>),\n                direction: 'right',\n                text,\n                action: () => handleMoveToCategory(category.id),\n            };\n        });\n\n        const dividerAndNewCategory = [\n            {\n                id: 'ChannelMenu-moveToDivider',\n                text: (<span className='MenuGroup menu-divider'/>),\n            },\n            {\n                id: `moveToNewCategory-${props.channel.id}`,\n                icon: (<FolderMoveOutlineIcon size={16}/>),\n                direction: 'right' as any,\n                text: formatMessage({id: 'sidebar_left.sidebar_channel_menu.moveToNewCategory', defaultMessage: 'New Category'}),\n                action: handleMoveToNewCategory,\n            },\n        ];\n\n        return [...allCategories, ...dividerAndNewCategory];\n    }\n\n    function filterCategoriesBasedOnChannelType(categories: ChannelCategory[], isDmOrGm = false) {\n        if (isDmOrGm) {\n            return categories.filter((category) => category.type !== CategoryTypes.CHANNELS);\n        }\n\n        return categories.filter((category) => category.type !== CategoryTypes.DIRECT_MESSAGES);\n    }\n\n    function getMoveToCategorySubmenuItems(categories: ChannelCategory[]) {\n        const isSubmenuOneOfSelectedChannels = multiSelectedChannelIds.includes(props.channel.id);\n\n        // If sub menu is in channel header dropdown OR If multiple channels are selected but the menu is open outside of those selected channels\n        if (props.inHeaderDropdown || !isSubmenuOneOfSelectedChannels) {\n            const isDmOrGm = props.channel.type === Constants.DM_CHANNEL || props.channel.type === Constants.GM_CHANNEL;\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, isDmOrGm);\n            return createSubmenuItemsForCategoryArray(filteredCategories);\n        }\n\n        const areAllSelectedChannelsDMorGM = multiSelectedChannelIds.every((channelId) => allChannels[channelId].type === Constants.DM_CHANNEL || allChannels[channelId].type === Constants.GM_CHANNEL);\n        if (areAllSelectedChannelsDMorGM) {\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, true);\n            return createSubmenuItemsForCategoryArray(filteredCategories);\n        }\n\n        const areAllSelectedChannelsAreNotDMorGM = multiSelectedChannelIds.every((channelId) => allChannels[channelId].type !== Constants.DM_CHANNEL && allChannels[channelId].type !== Constants.GM_CHANNEL);\n        if (areAllSelectedChannelsAreNotDMorGM) {\n            const filteredCategories = filterCategoriesBasedOnChannelType(categories, false);\n            return createSubmenuItemsForCategoryArray(filteredCategories);\n        }\n\n        // If we have a mix of channel types, we need to filter out both the DM and Channel categories\n        const filteredCategories = categories.filter((category) => category.type !== CategoryTypes.CHANNELS && category.type !== CategoryTypes.DIRECT_MESSAGES);\n        return createSubmenuItemsForCategoryArray(filteredCategories);\n    }\n\n    if (!categories) {\n        return null;\n    }\n\n    return (\n        <Menu.Group>\n            <Menu.ItemSubMenu\n                id={`moveTo-${props.channel.id}`}\n                subMenu={getMoveToCategorySubmenuItems(categories)}\n                text={formatMessage({id: 'sidebar_left.sidebar_channel_menu.moveTo', defaultMessage: 'Move to...'})}\n                direction={'right'}\n                icon={props.inHeaderDropdown ? null : <FolderMoveOutlineIcon size={16}/>}\n                openUp={props.openUp}\n                styleSelectableItem={true}\n                selectedValueText={currentCategory?.display_name}\n                renderSelected={false}\n            />\n        </Menu.Group>\n    );\n};\n\nexport default memo(ChannelMoveToSubMenuOld);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {General} from 'mattermost-redux/constants';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    channelDisplayName: string;\n    channelId: string;\n\n    /**\n     * Function injected by ModalController to be called when the modal can be unmounted\n     */\n    onExited: () => void;\n\n    actions: {\n        updateChannelPrivacy: (channelId: string, privacy: string) => void;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class ConvertChannelModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {show: true};\n    }\n\n    handleConvert = () => {\n        const {actions, channelId} = this.props;\n        if (channelId.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n\n        actions.updateChannelPrivacy(channelId, General.PRIVATE_CHANNEL);\n        trackEvent('actions', 'convert_to_private_channel', {channel_id: channelId});\n        this.onHide();\n    };\n\n    onHide = () => {\n        this.setState({show: false});\n    };\n\n    render() {\n        const {\n            channelDisplayName,\n            onExited,\n        } = this.props;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={onExited}\n                role='dialog'\n                aria-labelledby='convertChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='convertChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='convert_channel.title'\n                            defaultMessage='Convert {display_name} to a Private Channel?'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='convert_channel.question1'\n                            defaultMessage='When you convert **{display_name}** to a private channel, history and membership are preserved. Publicly shared files remain accessible to anyone with the link. Membership in a private channel is by invitation only.'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='convert_channel.question2'\n                            defaultMessage='The change is permanent and cannot be undone.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='convert_channel.question3'\n                            defaultMessage='Are you sure you want to convert **{display_name}** to a private channel?'\n                            values={{\n                                display_name: channelDisplayName,\n                            }}\n                        />\n                    </p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-tertiary'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='convert_channel.cancel'\n                            defaultMessage='No, cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        data-dismiss='modal'\n                        onClick={this.handleConvert}\n                        autoFocus={true}\n                        data-testid='convertChannelConfirm'\n                    >\n                        <FormattedMessage\n                            id='convert_channel.confirm'\n                            defaultMessage='Yes, convert to private channel'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {updateChannelPrivacy} from 'mattermost-redux/actions/channels';\n\nimport ConvertChannelModal from './convert_channel_modal';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateChannelPrivacy,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ConvertChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nconst NoCommonTeamsError = (): JSX.Element => {\n    const intl = useIntl();\n    return (\n        <SectionNotice\n            title={intl.formatMessage({\n                id: 'sidebar_left.sidebar_channel_modal.no_common_teams_error.heading',\n                defaultMessage: 'Unable to convert to a channel because group members are part of different teams',\n            })}\n            text={intl.formatMessage({\n                id: 'sidebar_left.sidebar_channel_modal.no_common_teams_error.body',\n                defaultMessage: 'Group Message cannot be converted to a channel because members are not a part of the same team. Add all members to a single team to convert this group message to a channel in that team.',\n            })}\n            type={'danger'}\n        />\n    );\n};\n\nexport default NoCommonTeamsError;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport type {Team} from '@mattermost/types/teams';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport DropdownInput from 'components/dropdown_input';\n\nexport type Props = {\n    teamsById: {[id: string]: Team};\n    onChange: (teamId: string) => void;\n}\n\nconst TeamSelector = (props: Props): JSX.Element => {\n    const [value, setValue] = useState<Team>();\n    const intl = useIntl();\n    const {formatMessage} = intl;\n\n    const handleTeamChange = useCallback((e) => {\n        const teamId = e.value as string;\n\n        setValue(props.teamsById[teamId]);\n        props.onChange(teamId);\n    }, []);\n\n    const currentLocale = useSelector(getCurrentLocale);\n\n    const teamValues = Object.values(props.teamsById).\n        map((team) => ({value: team.id, label: team.display_name})).\n        sort((teamA, teamB) => teamA.label.localeCompare(teamB.label, currentLocale));\n\n    return (\n        <DropdownInput\n            className='team_selector'\n            required={true}\n            onChange={handleTeamChange}\n            value={value ? {label: value.display_name, value: value.id} : undefined}\n            options={teamValues}\n            legend={formatMessage({id: 'sidebar_left.sidebar_channel_modal.select_team_placeholder', defaultMessage: 'Select Team'})}\n            placeholder={formatMessage({id: 'sidebar_left.sidebar_channel_modal.select_team_placeholder', defaultMessage: 'Select Team'})}\n            name='team_selector'\n        />\n    );\n};\n\nexport default TeamSelector;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport SectionNotice from 'components/section_notice';\n\nexport type Props = {\n    channelMemberNames: string[];\n}\nconst WarningTextSection = (props: Props): JSX.Element => {\n    const intl = useIntl();\n\n    let memberNames: string;\n\n    if (props.channelMemberNames.length > 0) {\n        memberNames = intl.formatList(props.channelMemberNames);\n    } else {\n        memberNames = intl.formatMessage({id: 'sidebar_left.sidebar_channel_modal.warning_body_yourself', defaultMessage: 'yourself'});\n    }\n\n    return (\n        <SectionNotice\n            title={intl.formatMessage({\n                id: 'sidebar_left.sidebar_channel_modal.warning_header',\n                defaultMessage: 'Conversation history will be visible to any channel members',\n            })}\n            text={intl.formatMessage({\n                id: 'sidebar_left.sidebar_channel_modal.warning_body',\n                defaultMessage: 'You are about to convert the Group Message with {memberNames} to a Channel. This cannot be undone.',\n            },\n            {\n                memberNames,\n            })}\n        />\n    );\n};\nexport default WarningTextSection;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport type {ComponentProps} from 'react';\nimport React, {useCallback, useEffect, useRef, useState} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport './convert_gm_to_channel_modal.scss';\n\nimport {GenericModal} from '@mattermost/components';\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {getGroupMessageMembersCommonTeams} from 'actions/team_actions';\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport ChannelNameFormField from 'components/channel_name_form_field/channel_name_form_field';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport NoCommonTeamsError from './no_common_teams/no_common_teams';\nimport TeamSelector from './team_selector/team_selector';\nimport WarningTextSection from './warning_text_section/warning_text_section';\n\nimport type {Actions} from './index';\n\nconst enum ServerErrorId {\n    CHANNEL_NAME_EXISTS = 'store.sql_channel.save_channel.exists.app_error',\n}\n\nexport type Props = {\n    onExited: () => void;\n    channel: Channel;\n    actions: Actions;\n    profilesInChannel: UserProfile[];\n    teammateNameDisplaySetting: string;\n    currentUserId: string;\n}\n\nconst ConvertGmToChannelModal = (props: Props) => {\n    const intl = useIntl();\n    const {formatMessage} = intl;\n\n    const [channelName, setChannelName] = useState<string>('');\n    const channelURL = useRef<string>('');\n\n    const [urlError, setURLError] = useState('');\n    const handleChannelURLChange = useCallback((newURL: string) => {\n        channelURL.current = newURL;\n        setURLError('');\n    }, []);\n\n    const [channelMemberNames, setChannelMemberNames] = useState<string[]>([]);\n\n    useEffect(() => {\n        const validProfilesInChannel = props.profilesInChannel.\n            filter((user) => user.id !== props.currentUserId && user.delete_at === 0).\n            map((user) => displayUsername(user, props.teammateNameDisplaySetting));\n\n        setChannelMemberNames(validProfilesInChannel);\n    }, [props.profilesInChannel]);\n\n    const [commonTeamsById, setCommonTeamsById] = useState<{[id: string]: Team}>({});\n    const [commonTeamsFetched, setCommonTeamsFetched] = useState<boolean>(false);\n    const [loadingAnimationTimeout, setLoadingAnimationTimeout] = useState<boolean>(false);\n    const [selectedTeamId, setSelectedTeamId] = useState<string>();\n    const [nameError, setNameError] = useState<boolean>(false);\n    const [conversionError, setConversionError] = useState<string>();\n\n    const dispatch = useDispatch();\n\n    const mounted = useRef(false);\n    useEffect(() => {\n        mounted.current = true;\n        return (() => {\n            mounted.current = false;\n        });\n    }, []);\n\n    useEffect(() => {\n        const work = async () => {\n            const response = await dispatch(getGroupMessageMembersCommonTeams(props.channel.id));\n            if (!mounted.current) {\n                return;\n            }\n\n            if (response.error || !response.data) {\n                return;\n            }\n            const teams = response.data;\n\n            const teamsById: {[id: string]: Team} = {};\n            teams.forEach((team) => {\n                teamsById[team.id] = team;\n            });\n\n            setCommonTeamsById(teamsById);\n            setCommonTeamsFetched(true);\n\n            // if there is only common team, selected it.\n            if (teams.length === 1) {\n                setSelectedTeamId(teams[0].id);\n            }\n        };\n\n        work();\n        setTimeout(() => setLoadingAnimationTimeout(true), 1200);\n    }, []);\n\n    const handleConfirm = useCallback(async () => {\n        if (!selectedTeamId) {\n            return;\n        }\n\n        const {error} = await props.actions.convertGroupMessageToPrivateChannel(props.channel.id, selectedTeamId, channelName.trim(), channelURL.current.trim());\n\n        if (error) {\n            if (error.server_error_id === ServerErrorId.CHANNEL_NAME_EXISTS) {\n                setURLError(\n                    formatMessage({\n                        id: 'channel_modal.alreadyExist',\n                        defaultMessage: 'A channel with that URL already exists',\n                    }),\n                );\n            } else {\n                setConversionError(error.message);\n            }\n\n            return;\n        }\n\n        setConversionError(undefined);\n        trackEvent('actions', 'convert_group_message_to_private_channel', {channel_id: props.channel.id});\n        props.onExited();\n    }, [selectedTeamId, props.channel.id, channelName, channelURL.current, props.actions.moveChannelsInSidebar]);\n\n    const showLoader = !commonTeamsFetched || !loadingAnimationTimeout;\n    const canCreate = selectedTeamId !== undefined && channelName !== '' && !nameError && !urlError;\n    const modalProps: Partial<ComponentProps<typeof GenericModal>> = {};\n    let modalBody;\n\n    if (!showLoader && Object.keys(commonTeamsById).length === 0) {\n        modalProps.confirmButtonText = formatMessage({id: 'generic.okay', defaultMessage: 'Okay'});\n        modalProps.handleConfirm = props.onExited;\n\n        modalBody = (\n            <div className='convert-gm-to-channel-modal-body error'>\n                <NoCommonTeamsError/>\n            </div>\n        );\n    } else {\n        modalProps.handleCancel = showLoader ? undefined : props.onExited;\n        modalProps.isDeleteModal = true;\n        modalProps.cancelButtonText = formatMessage({id: 'channel_modal.cancel', defaultMessage: 'Cancel'});\n        modalProps.confirmButtonText = formatMessage({id: 'sidebar_left.sidebar_channel_modal.confirmation_text', defaultMessage: 'Convert to private channel'});\n        modalProps.isConfirmDisabled = !canCreate;\n\n        let subBody;\n        if (showLoader) {\n            subBody = (\n                <div className='loadingIndicator'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        } else {\n            subBody = (\n                <React.Fragment>\n                    <WarningTextSection channelMemberNames={channelMemberNames}/>\n\n                    {\n                        Object.keys(commonTeamsById).length > 1 &&\n                        <TeamSelector\n                            teamsById={commonTeamsById}\n                            onChange={setSelectedTeamId}\n                        />\n                    }\n\n                    <ChannelNameFormField\n                        value={channelName}\n                        name='convert-gm-to-channel-modal-channel-name'\n                        placeholder={formatMessage({id: 'sidebar_left.sidebar_channel_modal.channel_name_placeholder', defaultMessage: 'Enter a name for the channel'})}\n                        autoFocus={false}\n                        onDisplayNameChange={setChannelName}\n                        onURLChange={handleChannelURLChange}\n                        onErrorStateChange={setNameError}\n                        team={selectedTeamId ? commonTeamsById[selectedTeamId] : undefined}\n                        urlError={urlError}\n                    />\n\n                    {\n                        conversionError &&\n                        <div className='conversion-error'>\n                            <i className='icon icon-alert-outline'/>\n                            <span>{conversionError}</span>\n                        </div>\n                    }\n\n                </React.Fragment>\n            );\n        }\n\n        modalBody = (\n            <div\n                className={classNames({\n                    'convert-gm-to-channel-modal-body': true,\n                    loading: showLoader,\n                    'single-team': Object.keys(commonTeamsById).length === 1,\n                    'multi-team': Object.keys(commonTeamsById).length > 1,\n                })}\n            >\n                {subBody}\n            </div>\n        );\n    }\n\n    return (\n        <GenericModal\n            id='convert-gm-to-channel-modal'\n            className='convert-gm-to-channel-modal'\n            modalHeaderText={formatMessage({id: 'sidebar_left.sidebar_channel_modal.header', defaultMessage: 'Convert to Private Channel'})}\n            compassDesign={true}\n            handleConfirm={showLoader ? undefined : handleConfirm}\n            onExited={props.onExited}\n            autoCloseOnConfirmButton={false}\n            {...modalProps}\n        >\n            {modalBody}\n        </GenericModal>\n    );\n};\n\nexport default ConvertGmToChannelModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {Dispatch} from 'redux';\nimport {bindActionCreators} from 'redux';\n\nimport {convertGroupMessageToPrivateChannel} from 'mattermost-redux/actions/channels';\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {\n    getCurrentUserId,\n    makeGetProfilesInChannel,\n} from 'mattermost-redux/selectors/entities/users';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {moveChannelsInSidebar} from 'actions/views/channel_sidebar';\nimport {closeModal} from 'actions/views/modals';\n\nimport type {Props} from 'components/convert_gm_to_channel_modal/convert_gm_to_channel_modal';\nimport ConvertGmToChannelModal from 'components/convert_gm_to_channel_modal/convert_gm_to_channel_modal';\n\nimport type {GlobalState} from 'types/store';\n\nfunction makeMapStateToProps() {\n    const getProfilesInChannel = makeGetProfilesInChannel();\n\n    return (state: GlobalState, ownProps: Props) => {\n        const allProfilesInChannel = getProfilesInChannel(state, ownProps.channel.id);\n        const currentUserId = getCurrentUserId(state);\n        const teammateNameDisplaySetting = getTeammateNameDisplaySetting(state);\n\n        return {\n            profilesInChannel: allProfilesInChannel,\n            teammateNameDisplaySetting,\n            currentUserId,\n        };\n    };\n}\n\nexport type Actions = {\n    closeModal: (modalID: string) => void;\n    convertGroupMessageToPrivateChannel: (channelID: string, teamID: string, displayName: string, name: string) => Promise<ActionResult>;\n    moveChannelsInSidebar: (categoryId: string, targetIndex: number, draggableChannelId: string, setManualSorting?: boolean) => void;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            closeModal,\n            convertGroupMessageToPrivateChannel,\n            moveChannelsInSidebar,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(ConvertGmToChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\n\nexport type Props = {\n    onExited: () => void;\n    channel: Channel;\n    currentTeamDetails?: {name: string};\n    canViewArchivedChannels?: boolean;\n    penultimateViewedChannelName: string;\n    actions: {\n        deleteChannel: (channelId: string) => void;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class DeleteChannelModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {show: true};\n    }\n\n    handleDelete = () => {\n        if (this.props.channel.id.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n        if (!this.props.canViewArchivedChannels) {\n            const {penultimateViewedChannelName} = this.props;\n            if (this.props.currentTeamDetails) {\n                getHistory().push('/' + this.props.currentTeamDetails.name + '/channels/' + penultimateViewedChannelName);\n            }\n        }\n        this.props.actions.deleteChannel(this.props.channel.id);\n        this.onHide();\n    };\n\n    onHide = () => {\n        this.setState({show: false});\n    };\n\n    render() {\n        const {canViewArchivedChannels} = this.props;\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onExited}\n                role='dialog'\n                aria-labelledby='deleteChannelModalLabel'\n                id='deleteChannelModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='deleteChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='delete_channel.confirm'\n                            defaultMessage='Confirm ARCHIVE Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='alert alert-danger'>\n                        {!canViewArchivedChannels &&\n                            <FormattedMarkdownMessage\n                                id='delete_channel.question'\n                                defaultMessage='This will archive the channel from the team and remove it from the user interface. Archived channels can be unarchived if needed again. \\n \\nAre you sure you wish to archive the {display_name} channel?'\n                                values={{\n                                    display_name: this.props.channel.display_name,\n                                }}\n                            />}\n                        {canViewArchivedChannels &&\n                            <FormattedMarkdownMessage\n                                id='delete_channel.viewArchived.question'\n                                defaultMessage={'This will archive the channel from the team. Channel contents will still be accessible by channel members.\\n \\nAre you sure you wish to archive the **{display_name}** channel?'}\n                                values={{\n                                    display_name: this.props.channel.display_name,\n                                }}\n                            />}\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-tertiary'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='delete_channel.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        data-dismiss='modal'\n                        onClick={this.handleDelete}\n                        autoFocus={true}\n                        id='deleteChannelModalDeleteButton'\n                    >\n                        <FormattedMessage\n                            id='delete_channel.del'\n                            defaultMessage='Archive'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {deleteChannel} from 'actions/views/channel';\n\nimport DeleteChannelModal from './delete_channel_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        canViewArchivedChannels: config.ExperimentalViewArchivedChannels === 'true',\n        currentTeamDetails: getCurrentTeam(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators(\n            {\n                deleteChannel,\n            },\n            dispatch,\n        ),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeleteChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent, MouseEvent} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {ServerError} from '@mattermost/types/errors';\nimport type {Team} from '@mattermost/types/teams';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport {getHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport {getShortenedURL, validateChannelUrl} from 'utils/url';\nimport * as Utils from 'utils/utils';\n\nconst holders = defineMessages({\n    maxLength: {\n        id: 'rename_channel.maxLength',\n        defaultMessage: 'This field must be less than {maxLength, number} characters',\n    },\n    url: {\n        id: 'rename_channel.url',\n        defaultMessage: 'URL',\n    },\n    defaultError: {\n        id: 'rename_channel.defaultError',\n        defaultMessage: ' - Cannot be changed for the default channel',\n    },\n});\n\ntype Props = {\n\n    /**\n     * react-intl helper object\n     */\n    intl: IntlShape;\n\n    /**\n     * Function that is called when modal is hidden\n     */\n    onExited: () => void;\n\n    /**\n     * Object with info about current channel\n     */\n    channel: Channel;\n\n    /**\n     * Object with info about current team\n     */\n    team?: Team;\n\n    /**\n     * String with the current team URL\n     */\n    currentTeamUrl: string;\n\n    /*\n    * Object with redux action creators\n    */\n    actions: {\n\n        /*\n        * Action creator to patch current channel\n        */\n        patchChannel: (channelId: string, patch: Channel) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    displayName: string;\n    channelName: string;\n    serverError?: string;\n    urlErrors: React.ReactNode[];\n    displayNameError: React.ReactNode;\n    invalid: boolean;\n    show: boolean;\n};\n\nexport class RenameChannelModal extends React.PureComponent<Props, State> {\n    private textbox?: HTMLInputElement;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            displayName: props.channel.display_name,\n            channelName: props.channel.name,\n            serverError: '',\n            urlErrors: [],\n            displayNameError: '',\n            invalid: false,\n            show: true,\n        };\n    }\n\n    setError = (err: ServerError) => {\n        this.setState({serverError: err.message});\n    };\n\n    unsetError = () => {\n        this.setState({serverError: ''});\n    };\n\n    handleEntering = () => {\n        if (this.textbox) {\n            Utils.placeCaretAtEnd(this.textbox);\n        }\n    };\n\n    handleHide = (e?: MouseEvent) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            serverError: '',\n            urlErrors: [],\n            displayNameError: '',\n            invalid: false,\n            show: false,\n        });\n    };\n\n    handleSubmit = async (e?: MouseEvent<HTMLButtonElement>): Promise<void> => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        const channel = Object.assign({}, this.props.channel);\n        const oldName = channel.name;\n        const oldDisplayName = channel.display_name;\n        const state = {...this.state, serverError: ''};\n        const {formatMessage} = this.props.intl;\n        const {actions: {patchChannel}} = this.props;\n\n        channel.display_name = this.state.displayName.trim();\n        if (!channel.display_name || channel.display_name.length < Constants.MIN_CHANNELNAME_LENGTH) {\n            state.displayNameError = (\n                <FormattedMessage\n                    id='rename_channel.minLength'\n                    defaultMessage='Display name must have at least {minLength, number} characters.'\n                    values={{\n                        minLength: Constants.MIN_CHANNELNAME_LENGTH,\n                    }}\n                />\n            );\n            state.invalid = true;\n        } else if (channel.display_name.length > Constants.MAX_CHANNELNAME_LENGTH) {\n            state.displayNameError = formatMessage(holders.maxLength, {maxLength: Constants.MAX_CHANNELNAME_LENGTH});\n            state.invalid = true;\n        } else {\n            state.displayNameError = '';\n        }\n\n        channel.name = this.state.channelName.trim();\n        const urlErrors = validateChannelUrl(channel.name);\n        if (urlErrors.length > 0) {\n            state.invalid = true;\n        }\n        state.urlErrors = urlErrors;\n\n        this.setState(state);\n\n        if (state.invalid) {\n            return;\n        }\n        if (oldName === channel.name && oldDisplayName === channel.display_name) {\n            this.onSaveSuccess();\n            return;\n        }\n\n        const {data, error} = await patchChannel(channel.id, channel);\n\n        if (data) {\n            this.onSaveSuccess();\n        } else if (error) {\n            this.setError(error);\n        }\n    };\n\n    onSaveSuccess = () => {\n        this.handleHide();\n        this.unsetError();\n        if (this.props.team) {\n            getHistory().push('/' + this.props.team.name + '/channels/' + this.state.channelName);\n        }\n    };\n\n    handleCancel = (e?: MouseEvent) => {\n        this.setState({\n            displayName: this.props.channel.display_name,\n            channelName: this.props.channel.name,\n        });\n\n        this.handleHide(e);\n    };\n\n    onNameChange = (e: ChangeEvent<HTMLInputElement> | {target: {value: string}}) => {\n        const name = e.target.value.trim().replace(/[^A-Za-z0-9-_]/g, '').toLowerCase();\n        this.setState({channelName: name});\n    };\n\n    onDisplayNameChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({displayName: e.target.value});\n    };\n\n    getTextbox = (node: HTMLInputElement) => {\n        this.textbox = node;\n    };\n\n    render(): JSX.Element {\n        let displayNameError = null;\n        if (this.state.displayNameError) {\n            displayNameError = <p className='input__help error'>{this.state.displayNameError}</p>;\n        }\n\n        let urlErrors = null;\n        let urlHelpText = null;\n        let urlInputClass = 'input-group input-group--limit';\n        if (this.state.urlErrors.length > 0) {\n            urlErrors = <p className='input__help error'>{this.state.urlErrors}</p>;\n            urlInputClass += ' has-error';\n        } else {\n            urlHelpText = (\n                <p className='input__help'>\n                    <FormattedMessage\n                        id='change_url.helpText'\n                        defaultMessage='You can use lowercase letters, numbers, dashes, and underscores.'\n                    />\n                </p>\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        const {formatMessage} = this.props.intl;\n\n        let urlInputLabel = formatMessage(holders.url);\n        let readOnlyHandleInput = false;\n        if (this.props.channel.name === Constants.DEFAULT_CHANNEL) {\n            urlInputLabel += formatMessage(holders.defaultError);\n            readOnlyHandleInput = true;\n        }\n\n        const fullUrl = this.props.currentTeamUrl + '/channels';\n        const shortUrl = `${getShortenedURL(fullUrl, 35)}/`;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.handleCancel}\n                onEntering={this.handleEntering}\n                onExited={this.props.onExited}\n                role='dialog'\n                aria-labelledby='renameChannelModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='renameChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='rename_channel.title'\n                            defaultMessage='Rename Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <form role='form'>\n                    <Modal.Body>\n                        <div className='form-group'>\n                            <label className='control-label'>\n                                <FormattedMessage\n                                    id='rename_channel.displayName'\n                                    defaultMessage='Display Name'\n                                />\n                            </label>\n                            <input\n                                onChange={this.onDisplayNameChange}\n                                type='text'\n                                ref={this.getTextbox}\n                                id='display_name'\n                                className='form-control'\n                                placeholder={formatMessage({\n                                    id: 'rename_channel.displayNameHolder',\n                                    defaultMessage: 'Enter display name',\n                                })}\n                                value={this.state.displayName}\n                                maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                                aria-label={formatMessage({id: 'rename_channel.displayName', defaultMessage: 'Display Name'}).toLowerCase()}\n                            />\n                            {displayNameError}\n                        </div>\n                        <div className='form-group'>\n                            <label className='control-label'>{urlInputLabel}</label>\n\n                            <div className={urlInputClass}>\n                                <WithTooltip\n                                    id='renameChannelModalShortUrlTooltip'\n                                    placement='top'\n                                    title={fullUrl}\n                                >\n                                    <span className='input-group-addon'>{shortUrl}</span>\n                                </WithTooltip>\n                                <input\n                                    onChange={this.onNameChange}\n                                    type='text'\n                                    className='form-control'\n                                    id='channel_name'\n                                    value={this.state.channelName}\n                                    maxLength={Constants.MAX_CHANNELNAME_LENGTH}\n                                    readOnly={readOnlyHandleInput}\n                                    aria-label={formatMessage({id: 'rename_channel.title', defaultMessage: 'Rename Channel'}).toLowerCase()}\n                                />\n                            </div>\n                            {urlHelpText}\n                            {urlErrors}\n                        </div>\n                        {serverError}\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-tertiary'\n                            onClick={this.handleCancel}\n                        >\n                            <FormattedMessage\n                                id='rename_channel.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.handleSubmit}\n                            type='submit'\n                            id='save-button'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='rename_channel.save'\n                                defaultMessage='Save'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(RenameChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {patchChannel} from 'mattermost-redux/actions/channels';\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {getTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getSiteURL} from 'utils/url';\n\nimport RenameChannelModal from './rename_channel_modal';\n\nconst mapStateToPropsRenameChannel = createSelector(\n    'mapStateToPropsRenameChannel',\n    (state: GlobalState) => {\n        const currentTeamId = state.entities.teams.currentTeamId;\n        const team = getTeam(state, currentTeamId);\n        const currentTeamUrl = `${getSiteURL()}/${team ? team.name : ''}`;\n        return {\n            currentTeamUrl,\n            team,\n        };\n    },\n    (teamInfo) => ({...teamInfo}),\n);\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            patchChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToPropsRenameChannel, mapDispatchToProps)(RenameChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport Constants from 'utils/constants';\n\ntype Props = {\n    onExited: () => void;\n    channel: Channel;\n    actions: ChannelDetailsActions;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport type ChannelDetailsActions = {\n    unarchiveChannel: (channelId: string) => Promise<ActionResult>;\n};\n\nexport default class UnarchiveChannelModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {show: true};\n    }\n\n    handleUnarchive = (): void => {\n        if (this.props.channel.id.length !== Constants.CHANNEL_ID_LENGTH) {\n            return;\n        }\n        this.props.actions.unarchiveChannel(this.props.channel.id);\n        this.onHide();\n    };\n\n    onHide = (): void => {\n        this.setState({show: false});\n    };\n\n    render(): JSX.Element {\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onExited}\n                role='dialog'\n                aria-labelledby='unarchiveChannelModalLabel'\n                id='unarchiveChannelModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='unarchiveChannelModalLabel'\n                    >\n                        <FormattedMessage\n                            id='unarchive_channel.confirm'\n                            defaultMessage='Confirm UNARCHIVE Channel'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='alert alert-danger'>\n                        <FormattedMarkdownMessage\n                            id='unarchive_channel.viewArchived.question'\n                            defaultMessage={'Are you sure you wish to unarchive the **{display_name}** channel?'}\n                            values={{\n                                display_name: this.props.channel.display_name,\n                            }}\n                        />\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-tertiary'\n                        onClick={this.onHide}\n                    >\n                        <FormattedMessage\n                            id='unarchive_channel.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        data-dismiss='modal'\n                        onClick={this.handleUnarchive}\n                        autoFocus={true}\n                        id='unarchiveChannelModalDeleteButton'\n                    >\n                        <FormattedMessage\n                            id='unarchive_channel.del'\n                            defaultMessage='Unarchive'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {unarchiveChannel} from 'mattermost-redux/actions/channels';\n\nimport UnarchiveChannelModal from './unarchive_channel_modal';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            unarchiveChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(UnarchiveChannelModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport Menu from 'components/widgets/menu/menu';\n\ntype Props = {\n    isArchived: boolean;\n    actions: {\n        goToLastViewedChannel: () => void;\n    };\n}\n\nconst CloseChannel = ({\n    isArchived,\n    actions,\n}: Props): JSX.Element => {\n    const intl = useIntl();\n\n    return (\n        <Menu.ItemAction\n            show={isArchived}\n            onClick={actions.goToLastViewedChannel}\n            text={intl.formatMessage({\n                id: 'center_panel.archived.closeChannel',\n                defaultMessage: 'Close Channel',\n            })}\n        />\n    );\n};\n\nexport default React.memo(CloseChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {goToLastViewedChannel} from 'actions/views/channel';\n\nimport CloseChannel from './close_channel';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        goToLastViewedChannel,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(CloseChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {PreferenceType} from '@mattermost/types/preferences';\nimport type {Team} from '@mattermost/types/teams';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport Menu from 'components/widgets/menu/menu';\n\nimport {getHistory} from 'utils/browser_history';\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\ntype Props = {\n\n    /**\n     * Object with info about currentUser\n     */\n    currentUser: UserProfile;\n\n    /**\n     * Object with info about currentTeam\n     */\n    currentTeam?: Team;\n\n    /**\n     * String with info about redirect\n     */\n    redirectChannel: string;\n\n    /**\n     * Object with info about channel\n     */\n    channel: Channel;\n\n    /**\n     * Use for test selector\n     */\n    id?: string;\n\n    /**\n     * Object with action creators\n     */\n    actions: {\n\n        /**\n         * Action creator to update user preferences\n         */\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n\n        /**\n         * Action creator to leave DM/GM\n         */\n        leaveDirectChannel: (channelName: string) => void;\n    };\n};\n\nexport default class CloseMessage extends React.PureComponent<Props> {\n    handleClose = (e: React.MouseEvent): void => {\n        e.preventDefault();\n\n        const {\n            channel,\n            currentUser,\n            currentTeam,\n            redirectChannel,\n            actions: {\n                savePreferences,\n                leaveDirectChannel,\n            },\n        } = this.props;\n\n        let name: string;\n        let category;\n        if (channel.type === Constants.DM_CHANNEL) {\n            category = Constants.Preferences.CATEGORY_DIRECT_CHANNEL_SHOW;\n            name = channel.teammate_id!;\n        } else {\n            category = Constants.Preferences.CATEGORY_GROUP_CHANNEL_SHOW;\n            name = channel.id;\n        }\n\n        leaveDirectChannel(channel.name);\n        savePreferences(currentUser.id, [{user_id: currentUser.id, category, name, value: 'false'}]);\n\n        if (currentTeam) {\n            getHistory().push(`/${currentTeam.name}/channels/${redirectChannel}`);\n        }\n    };\n\n    render(): React.ReactNode {\n        const {id, channel} = this.props;\n\n        let text;\n        if (channel.type === Constants.DM_CHANNEL) {\n            text = localizeMessage('center_panel.direct.closeDirectMessage', 'Close Direct Message');\n        } else if (channel.type === Constants.GM_CHANNEL) {\n            text = localizeMessage('center_panel.direct.closeGroupMessage', 'Close Group Message');\n        }\n\n        return (\n            <Menu.ItemAction\n                id={id}\n                show={channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL}\n                onClick={this.handleClose}\n                text={text}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getRedirectChannelNameForTeam} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeam, getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {leaveDirectChannel} from 'actions/views/channel';\n\nimport type {GlobalState} from 'types/store';\n\nimport CloseMessage from './close_message';\n\nconst mapStateToProps = (state: GlobalState) => {\n    return {\n        currentTeam: getCurrentTeam(state),\n        redirectChannel: getRedirectChannelNameForTeam(state, getCurrentTeamId(state)),\n    };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({savePreferences, leaveDirectChannel}, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CloseMessage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport LeaveChannelModal from 'components/leave_channel_modal';\nimport Menu from 'components/widgets/menu/menu';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\ninterface Props extends PropsFromRedux {\n\n    /**\n     * Object with info about user\n     */\n    channel: Channel;\n\n    /**\n     * Boolean whether the channel is default\n     */\n    isDefault: boolean;\n\n    /**\n     * Boolean whether the user is a guest or no\n     */\n    isGuestUser: boolean;\n\n    /**\n     * Use for test selector\n     */\n    id?: string;\n}\n\nconst LeaveChannel = ({\n    isDefault = true,\n    isGuestUser = false,\n    channel,\n    actions: {\n        leaveChannel,\n        openModal,\n    },\n    id,\n}: Props) => {\n    const intl = useIntl();\n\n    const handleLeave = useCallback((e: Event) => {\n        e.preventDefault();\n\n        if (channel.type === Constants.PRIVATE_CHANNEL) {\n            openModal({\n                modalId: ModalIdentifiers.LEAVE_PRIVATE_CHANNEL_MODAL,\n                dialogType: LeaveChannelModal,\n                dialogProps: {\n                    channel,\n                },\n            });\n        } else {\n            leaveChannel(channel.id);\n        }\n    }, [channel, leaveChannel, openModal]);\n\n    return (\n        <Menu.ItemAction\n            id={id}\n            show={(!isDefault || isGuestUser) && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n            onClick={handleLeave}\n            text={intl.formatMessage({id: 'channel_header.leave', defaultMessage: 'Leave Channel'})}\n            isDangerous={true}\n        />\n    );\n};\n\nexport default memo(LeaveChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {leaveChannel} from 'actions/views/channel';\nimport {openModal} from 'actions/views/modals';\n\nimport LeaveChannel from './leave_channel';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            leaveChannel,\n            openModal,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(LeaveChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport Menu from 'components/widgets/menu/menu';\n\ntype Action = {\n    showChannelMembers: (channelId: string, editMembers: boolean) => void;\n};\n\ntype OwnProps = {\n    channel: Channel;\n    show: boolean;\n    id: string;\n    editMembers?: boolean;\n    text: string;\n}\n\ntype Props = {\n    rhsOpen: boolean;\n    actions: Action;\n} & OwnProps;\n\nconst ToggleChannelMembersRHS = ({\n    show,\n    id,\n    channel,\n    rhsOpen,\n    text,\n    editMembers = false,\n    actions,\n}: Props) => {\n    const openRHSIfNotOpen = () => {\n        if (rhsOpen) {\n            return;\n        }\n        actions.showChannelMembers(channel.id, editMembers);\n    };\n\n    return (\n        <Menu.ItemAction\n            show={show}\n            id={id}\n            onClick={openRHSIfNotOpen}\n            text={text}\n        />\n    );\n};\n\nexport default ToggleChannelMembersRHS;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {showChannelMembers} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport OpenChannelMembersRHS from './open_members_rhs';\n\nconst mapStateToProps = (state: GlobalState) => ({\n    rhsOpen: getIsRhsOpen(state) && getRhsState(state) === RHSStates.CHANNEL_MEMBERS,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        showChannelMembers,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OpenChannelMembersRHS);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\nimport type {MouseEvent} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport Menu from 'components/widgets/menu/menu';\n\ntype Action = {\n    favoriteChannel: (channelId: string) => void;\n    unfavoriteChannel: (channelId: string) => void;\n};\n\ntype Props = {\n    show?: boolean;\n    channel: Channel;\n    isFavorite: boolean;\n    actions: Action;\n};\n\nconst ToggleFavoriteChannel = ({\n    show = true,\n    isFavorite,\n    actions: {\n        favoriteChannel,\n        unfavoriteChannel,\n    },\n    channel,\n}: Props) => {\n    const intl = useIntl();\n\n    const toggleFavoriteChannel = useCallback((channelId: string) => {\n        return isFavorite ? unfavoriteChannel(channelId) : favoriteChannel(channelId);\n    }, [isFavorite, favoriteChannel, unfavoriteChannel]);\n\n    const handleClick = useCallback((e: MouseEvent<HTMLButtonElement>): void => {\n        e.preventDefault();\n        toggleFavoriteChannel(channel.id);\n    }, [channel.id, toggleFavoriteChannel]);\n\n    let text;\n    if (isFavorite) {\n        text = intl.formatMessage({id: 'channelHeader.removeFromFavorites', defaultMessage: 'Remove from Favorites'});\n    } else {\n        text = intl.formatMessage({id: 'channelHeader.addToFavorites', defaultMessage: 'Add to Favorites'});\n    }\n    return (\n        <Menu.ItemAction\n            show={show}\n            onClick={handleClick}\n            text={text}\n        />\n    );\n};\n\nexport default memo(ToggleFavoriteChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {favoriteChannel, unfavoriteChannel} from 'mattermost-redux/actions/channels';\n\nimport ToggleFavoriteChannel from './toggle_favorite_channel';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        favoriteChannel,\n        unfavoriteChannel,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(ToggleFavoriteChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport Menu from 'components/widgets/menu/menu';\n\nimport {localizeMessage} from 'utils/utils';\n\ntype Action = {\n    closeRightHandSide: () => void;\n    showChannelInfo: (channelId: string) => void;\n};\n\ntype Props = {\n    show: boolean;\n    channel: Channel;\n    rhsOpen: boolean;\n    actions: Action;\n};\n\nconst ToggleInfo = ({show, channel, rhsOpen, actions}: Props) => {\n    const toggleRHS = () => {\n        if (rhsOpen) {\n            actions.closeRightHandSide();\n            return;\n        }\n        actions.showChannelInfo(channel.id);\n    };\n\n    const text = rhsOpen ? localizeMessage('channelHeader.hideInfo', 'Close Info') : localizeMessage('channelHeader.viewInfo', 'View Info');\n\n    return (\n        <Menu.ItemAction\n            show={show}\n            onClick={toggleRHS}\n            text={text}\n        />\n    );\n};\n\nexport default ToggleInfo;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {closeRightHandSide, showChannelInfo} from 'actions/views/rhs';\nimport {getIsRhsOpen, getRhsState} from 'selectors/rhs';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport ToggleInfo from './toggle_info';\n\nconst mapStateToProps = (state: GlobalState) => ({\n    rhsOpen: getIsRhsOpen(state) && getRhsState(state) === RHSStates.CHANNEL_INFO,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        closeRightHandSide,\n        showChannelInfo,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ToggleInfo);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {Channel, ChannelNotifyProps} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport Menu from 'components/widgets/menu/menu';\n\nimport {Constants, NotificationLevels} from 'utils/constants';\n\nexport type Actions = {\n    updateChannelNotifyProps(userId: string, channelId: string, props: Partial<ChannelNotifyProps>): void;\n};\n\ntype Props = {\n\n    /**\n     * Object with info about the current user\n     */\n    user: UserProfile;\n\n    /**\n     * Object with info about the current channel\n     */\n    channel: Channel;\n\n    /**\n     * Boolean whether the current channel is muted\n     */\n    isMuted: boolean;\n\n    /**\n     * Use for test selector\n     */\n    id?: string;\n\n    /**\n     * Object with action creators\n     */\n    actions: Actions;\n};\n\nexport default function MenuItemToggleMuteChannel({\n    id,\n    isMuted,\n    channel,\n    user,\n    actions,\n}: Props) {\n    const intl = useIntl();\n\n    const handleClick = useCallback(() => {\n        actions.updateChannelNotifyProps(user.id, channel.id, {\n            mark_unread: (isMuted ? NotificationLevels.ALL : NotificationLevels.MENTION) as 'all' | 'mention',\n        });\n    }, [actions, isMuted, user.id, channel.id]);\n\n    let text;\n    if (channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) {\n        text = isMuted ?\n            intl.formatMessage({id: 'channel_header.unmuteConversation', defaultMessage: 'Unmute Conversation'}) :\n            intl.formatMessage({id: 'channel_header.muteConversation', defaultMessage: 'Mute Conversation'});\n    } else {\n        text = isMuted ?\n            intl.formatMessage({id: 'channel_header.unmute', defaultMessage: 'Unmute Channel'}) :\n            intl.formatMessage({id: 'channel_header.mute', defaultMessage: 'Mute Channel'});\n    }\n\n    return (\n        <Menu.ItemAction\n            id={id}\n            onClick={handleClick}\n            text={text}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {updateChannelNotifyProps} from 'mattermost-redux/actions/channels';\n\nimport MenuItemToggleMuteChannel from './toggle_mute_channel';\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        updateChannelNotifyProps,\n    }, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(MenuItemToggleMuteChannel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, memo} from 'react';\nimport type {MouseEvent} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport Menu from 'components/widgets/menu/menu';\n\ntype Props = {\n    show?: boolean;\n    channel: any;\n    hasPinnedPosts: boolean;\n    actions: {\n        closeRightHandSide: () => void;\n        showPinnedPosts: (id: any) => void;\n    };\n}\n\nconst ViewPinnedPosts = ({\n    channel,\n    hasPinnedPosts,\n    actions: {\n        closeRightHandSide,\n        showPinnedPosts,\n    },\n    show,\n}: Props) => {\n    const intl = useIntl();\n    const handleClick = useCallback((e: MouseEvent) => {\n        e.preventDefault();\n\n        if (hasPinnedPosts) {\n            closeRightHandSide();\n        } else {\n            showPinnedPosts(channel.id);\n        }\n    }, [channel.id, closeRightHandSide, showPinnedPosts, hasPinnedPosts]);\n\n    return (\n        <Menu.ItemAction\n            show={show}\n            onClick={handleClick}\n            text={intl.formatMessage({id: 'navbar.viewPinnedPosts', defaultMessage: 'View Pinned Posts'})}\n        />\n    );\n};\n\nexport default memo(ViewPinnedPosts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {closeRightHandSide, showPinnedPosts} from 'actions/views/rhs';\nimport {getRhsState} from 'selectors/rhs';\n\nimport {RHSStates} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport ViewPinnedPosts from './view_pinned_posts';\n\nconst mapStateToProps = (state: GlobalState) => ({\n    hasPinnedPosts: getRhsState(state) === RHSStates.PIN,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    actions: bindActionCreators({\n        closeRightHandSide,\n        showPinnedPosts,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewPinnedPosts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {Permissions} from 'mattermost-redux/constants';\nimport {isGuest} from 'mattermost-redux/utils/user_utils';\n\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport ChannelGroupsManageModal from 'components/channel_groups_manage_modal';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ChannelMoveToSubMenuOld from 'components/channel_move_to_sub_menu_old';\nimport ChannelNotificationsModal from 'components/channel_notifications_modal';\nimport ConvertChannelModal from 'components/convert_channel_modal';\nimport ConvertGmToChannelModal from 'components/convert_gm_to_channel_modal';\nimport DeleteChannelModal from 'components/delete_channel_modal';\nimport EditChannelHeaderModal from 'components/edit_channel_header_modal';\nimport EditChannelPurposeModal from 'components/edit_channel_purpose_modal';\nimport MoreDirectChannels from 'components/more_direct_channels';\nimport ChannelPermissionGate from 'components/permissions_gates/channel_permission_gate';\nimport RenameChannelModal from 'components/rename_channel_modal';\nimport UnarchiveChannelModal from 'components/unarchive_channel_modal';\nimport Menu from 'components/widgets/menu/menu';\n\nimport MobileChannelHeaderPlug from 'plugins/mobile_channel_header_plug';\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\nimport type {PluginComponent} from 'types/store/plugins';\n\nimport MenuItemCloseChannel from './menu_items/close_channel';\nimport MenuItemCloseMessage from './menu_items/close_message';\nimport MenuItemLeaveChannel from './menu_items/leave_channel';\nimport MenuItemOpenMembersRHS from './menu_items/open_members_rhs';\nimport MenuItemToggleFavoriteChannel from './menu_items/toggle_favorite_channel';\nimport MenuItemToggleInfo from './menu_items/toggle_info';\nimport MenuItemToggleMuteChannel from './menu_items/toggle_mute_channel';\nimport MenuItemViewPinnedPosts from './menu_items/view_pinned_posts';\n\nexport type Props = {\n    user: UserProfile;\n    channel?: Channel;\n    isDefault: boolean;\n    isFavorite: boolean;\n    isReadonly: boolean;\n    isMuted: boolean;\n    isArchived: boolean;\n    isMobile: boolean;\n    penultimateViewedChannelName: string;\n    pluginMenuItems: PluginComponent[];\n    isLicensedForLDAPGroups: boolean;\n}\n\nexport default class ChannelHeaderDropdown extends React.PureComponent<Props> {\n    render() {\n        const {\n            user,\n            channel,\n            isDefault,\n            isFavorite,\n            isMuted,\n            isReadonly,\n            isArchived,\n            isMobile,\n            penultimateViewedChannelName,\n            isLicensedForLDAPGroups,\n        } = this.props;\n\n        if (!channel) {\n            return null;\n        }\n\n        const isPrivate = channel.type === Constants.PRIVATE_CHANNEL;\n        const isGroupConstrained = channel.group_constrained === true;\n        const channelMembersPermission = isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS : Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS;\n        const channelPropertiesPermission = isPrivate ? Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES : Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES;\n        const channelDeletePermission = isPrivate ? Permissions.DELETE_PRIVATE_CHANNEL : Permissions.DELETE_PUBLIC_CHANNEL;\n        const channelUnarchivePermission = Permissions.MANAGE_TEAM;\n\n        let divider;\n        if (isMobile) {\n            divider = (\n                <li className='MenuGroup mobile-menu-divider'>\n                    <hr/>\n                </li>\n            );\n        }\n\n        const pluginItems = this.props.pluginMenuItems.map((item) => {\n            return (\n                <Menu.ItemAction\n                    id={item.id + '_pluginmenuitem'}\n                    key={item.id + '_pluginmenuitem'}\n                    onClick={() => {\n                        if (item.action) {\n                            item.action(channel.id);\n                        }\n                    }}\n                    text={item.text}\n                />\n            );\n        });\n\n        return (\n            <React.Fragment>\n                <MenuItemToggleInfo\n                    show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                    channel={channel}\n                />\n                {/* Remove when this components is migrated to new menus */}\n                <ChannelMoveToSubMenuOld\n                    channel={channel}\n                    openUp={false}\n                    inHeaderDropdown={true}\n                />\n                <Menu.Group divider={divider}>\n                    <MenuItemToggleFavoriteChannel\n                        show={isMobile}\n                        channel={channel}\n                        isFavorite={isFavorite}\n                    />\n                    <MenuItemViewPinnedPosts\n                        show={isMobile}\n                        channel={channel}\n                    />\n                    <Menu.ItemToggleModalRedux\n                        id='channelNotificationPreferences'\n                        show={channel.type !== Constants.DM_CHANNEL && !isArchived}\n                        modalId={ModalIdentifiers.CHANNEL_NOTIFICATIONS}\n                        dialogType={ChannelNotificationsModal}\n                        dialogProps={{\n                            channel,\n                            currentUser: user,\n                        }}\n                        text={localizeMessage('navbar.preferences', 'Notification Preferences')}\n                    />\n                    <MenuItemToggleMuteChannel\n                        id='channelToggleMuteChannel'\n                        user={user}\n                        channel={channel}\n                        isMuted={isMuted}\n                    />\n                </Menu.Group>\n\n                <Menu.Group divider={divider}>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelAddMembers'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && !isGroupConstrained}\n                            modalId={ModalIdentifiers.CHANNEL_INVITE}\n                            dialogType={ChannelInviteModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('navbar.addMembers', 'Add Members')}\n                        />\n                        <Menu.ItemToggleModalRedux\n                            id='channelAddMembers'\n                            show={channel.type === Constants.GM_CHANNEL && !isArchived && !isGroupConstrained}\n                            modalId={ModalIdentifiers.CREATE_DM_CHANNEL}\n                            dialogType={MoreDirectChannels}\n                            dialogProps={{isExistingChannel: true}}\n                            text={localizeMessage('navbar.addMembers', 'Add Members')}\n                        />\n                    </ChannelPermissionGate>\n                    <MenuItemOpenMembersRHS\n                        id='channelViewMembers'\n                        channel={channel}\n                        show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && (isArchived || isDefault)}\n                        text={localizeMessage('channel_header.viewMembers', 'View Members')}\n                    />\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelAddGroups'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && isGroupConstrained && isLicensedForLDAPGroups}\n                            modalId={ModalIdentifiers.ADD_GROUPS_TO_CHANNEL}\n                            dialogType={AddGroupsToChannelModal}\n                            text={localizeMessage('navbar.addGroups', 'Add Groups')}\n                        />\n                        <Menu.ItemToggleModalRedux\n                            id='channelManageGroups'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault && isGroupConstrained && isLicensedForLDAPGroups}\n                            modalId={ModalIdentifiers.MANAGE_CHANNEL_GROUPS}\n                            dialogType={ChannelGroupsManageModal}\n                            dialogProps={{channelID: channel.id}}\n                            text={localizeMessage('navbar_dropdown.manageGroups', 'Manage Groups')}\n                        />\n                        <MenuItemOpenMembersRHS\n                            id='channelManageMembers'\n                            channel={channel}\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault}\n                            text={localizeMessage('channel_header.manageMembers', 'Manage Members')}\n                            editMembers={!isArchived}\n                        />\n                    </ChannelPermissionGate>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelMembersPermission]}\n                        invert={true}\n                    >\n                        <MenuItemOpenMembersRHS\n                            id='channelViewMembers'\n                            channel={channel}\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isDefault}\n                            text={localizeMessage('channel_header.viewMembers', 'View Members')}\n                        />\n                    </ChannelPermissionGate>\n                </Menu.Group>\n\n                <Menu.Group divider={divider}>\n                    <Menu.ItemToggleModalRedux\n                        id='channelEditHeader'\n                        show={(channel.type === Constants.DM_CHANNEL || channel.type === Constants.GM_CHANNEL) && !isArchived && !isReadonly}\n                        modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n                        dialogType={EditChannelHeaderModal}\n                        dialogProps={{channel}}\n                        text={localizeMessage('channel_header.setConversationHeader', 'Edit Conversation Header')}\n                    />\n\n                    <Menu.ItemToggleModalRedux\n                        id='convertGMPrivateChannel'\n                        show={channel.type === Constants.GM_CHANNEL && !isArchived && !isReadonly && !isGuest(user.roles)}\n                        modalId={ModalIdentifiers.CONVERT_GM_TO_CHANNEL}\n                        dialogType={ConvertGmToChannelModal}\n                        dialogProps={{channel}}\n                        text={localizeMessage('sidebar_left.sidebar_channel_menu_convert_to_channel', 'Convert to Private Channel')}\n                    />\n                </Menu.Group>\n\n                <Menu.Group divider={divider}>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelPropertiesPermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelEditHeader'\n                            show={channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL && !isArchived && !isReadonly}\n                            modalId={ModalIdentifiers.EDIT_CHANNEL_HEADER}\n                            dialogType={EditChannelHeaderModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.setHeader', 'Edit Channel Header')}\n                        />\n                        <Menu.ItemToggleModalRedux\n                            id='channelEditPurpose'\n                            show={!isArchived && !isReadonly && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.EDIT_CHANNEL_PURPOSE}\n                            dialogType={EditChannelPurposeModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.setPurpose', 'Edit Channel Purpose')}\n                        />\n                        <Menu.ItemToggleModalRedux\n                            id='channelRename'\n                            show={!isArchived && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.RENAME_CHANNEL}\n                            dialogType={RenameChannelModal}\n                            dialogProps={{channel}}\n                            text={localizeMessage('channel_header.rename', 'Rename Channel')}\n                        />\n                    </ChannelPermissionGate>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[Permissions.CONVERT_PUBLIC_CHANNEL_TO_PRIVATE]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelConvertToPrivate'\n                            show={!isArchived && !isDefault && channel.type === Constants.OPEN_CHANNEL}\n                            modalId={ModalIdentifiers.CONVERT_CHANNEL}\n                            dialogType={ConvertChannelModal}\n                            dialogProps={{\n                                channelId: channel.id,\n                                channelDisplayName: channel.display_name,\n                            }}\n                            text={localizeMessage('channel_header.convert', 'Convert to Private Channel')}\n                        />\n                    </ChannelPermissionGate>\n                    <MenuItemLeaveChannel\n                        id='channelLeaveChannel'\n                        channel={channel}\n                        isDefault={isDefault}\n                        isGuestUser={isGuest(user.roles)}\n                    />\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelDeletePermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelArchiveChannel'\n                            show={!isArchived && !isDefault && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.DELETE_CHANNEL}\n                            className='MenuItem__dangerous'\n                            dialogType={DeleteChannelModal}\n                            dialogProps={{\n                                channel,\n                                penultimateViewedChannelName,\n                            }}\n                            text={localizeMessage('channel_header.delete', 'Archive Channel')}\n                        />\n                    </ChannelPermissionGate>\n                    {isMobile &&\n                        <MobileChannelHeaderPlug\n                            channel={channel}\n                            isDropdown={true}\n                        />}\n                    <MenuItemCloseMessage\n                        id='channelCloseMessage'\n                        channel={channel}\n                        currentUser={user}\n                    />\n                    <MenuItemCloseChannel\n                        isArchived={isArchived}\n                    />\n                </Menu.Group>\n                <Menu.Group>\n                    {pluginItems}\n                </Menu.Group>\n                <Menu.Group divider={divider}>\n                    <ChannelPermissionGate\n                        channelId={channel.id}\n                        teamId={channel.team_id}\n                        permissions={[channelUnarchivePermission]}\n                    >\n                        <Menu.ItemToggleModalRedux\n                            id='channelUnarchiveChannel'\n                            show={isArchived && !isDefault && channel.type !== Constants.DM_CHANNEL && channel.type !== Constants.GM_CHANNEL}\n                            modalId={ModalIdentifiers.UNARCHIVE_CHANNEL}\n                            dialogType={UnarchiveChannelModal}\n                            dialogProps={{\n                                channel,\n                            }}\n                            text={localizeMessage('channel_header.unarchive', 'Unarchive Channel')}\n                        />\n                    </ChannelPermissionGate>\n                </Menu.Group>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {CSSTransition} from 'react-transition-group';\n\nconst ANIMATION_DURATION = 350;\n\ntype Props = {\n    children?: ReactNode;\n    show: boolean;\n};\n\nconst timeout = {\n    enter: ANIMATION_DURATION,\n    exit: ANIMATION_DURATION,\n};\n\nconst MobileChannelHeaderDropdownAnimation = ({show, children}: Props) => {\n    return (\n        <CSSTransition\n            in={show}\n            classNames='mobile-channel-header-dropdown'\n            enter={true}\n            exit={true}\n            mountOnEnter={true}\n            unmountOnExit={true}\n            timeout={timeout}\n        >\n            {children}\n        </CSSTransition>\n    );\n};\n\nexport default React.memo(MobileChannelHeaderDropdownAnimation);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {ChannelHeaderDropdownItems} from 'components/channel_header_dropdown';\nimport StatusIcon from 'components/status_icon';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport {Constants} from 'utils/constants';\n\nimport MobileChannelHeaderDropdownAnimation from './mobile_channel_header_dropdown_animation';\n\ntype Props = {\n    user: UserProfile;\n    channel?: Channel;\n    teammateId: string | null;\n    teammateIsBot?: boolean;\n    teammateStatus?: string;\n    displayName: string;\n}\n\nconst MobileChannelHeaderDropdown = ({\n    user,\n    channel,\n    teammateId,\n    displayName,\n    teammateIsBot,\n    teammateStatus,\n}: Props) => {\n    const intl = useIntl();\n\n    const getChannelTitle = () => {\n        if (!channel) {\n            return '';\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            if (user.id === teammateId) {\n                return (\n                    <FormattedMessage\n                        id='channel_header.directchannel.you'\n                        defaultMessage='{displayname} (you)'\n                        values={{displayname: displayName}}\n                    />\n                );\n            }\n            return displayName;\n        }\n        return channel.display_name;\n    };\n\n    let dmHeaderIconStatus;\n\n    if (!teammateIsBot) {\n        dmHeaderIconStatus = (\n            <StatusIcon status={teammateStatus}/>\n        );\n    }\n\n    return (\n        <MenuWrapper animationComponent={MobileChannelHeaderDropdownAnimation}>\n            <a>\n                <span className='heading'>\n                    {dmHeaderIconStatus}\n                    {getChannelTitle()}\n                </span>\n                <span\n                    className='fa fa-angle-down header-dropdown__icon'\n                    title={intl.formatMessage({id: 'generic_icons.dropdown', defaultMessage: 'Dropdown Icon'})}\n                />\n            </a>\n\n            <Menu ariaLabel={intl.formatMessage({id: 'channel_header.menuAriaLabel', defaultMessage: 'Channel Menu'})}>\n                <ChannelHeaderDropdownItems isMobile={true}/>\n                <div className='Menu__close visible-xs-block'>\n                    {'×'}\n                </div>\n            </Menu>\n        </MenuWrapper>\n    );\n};\n\nexport default memo(MobileChannelHeaderDropdown);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {createSelector} from 'mattermost-redux/selectors/create_selector';\nimport {\n    getCurrentChannel,\n    isCurrentChannelDefault,\n    isCurrentChannelFavorite,\n    isCurrentChannelMuted,\n    isCurrentChannelArchived,\n    getRedirectChannelNameForTeam,\n} from 'mattermost-redux/selectors/entities/channels';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\nimport {\n    getUser,\n    getCurrentUser,\n    getUserStatuses,\n    getCurrentUserId,\n} from 'mattermost-redux/selectors/entities/users';\n\nimport {getPenultimateViewedChannelName} from 'selectors/local_storage';\nimport {getChannelHeaderMenuPluginComponents} from 'selectors/plugins';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport Desktop from './channel_header_dropdown';\nimport Items from './channel_header_dropdown_items';\nimport Mobile from './mobile_channel_header_dropdown';\n\nconst getTeammateId = createSelector(\n    'getTeammateId',\n    getCurrentChannel,\n    getCurrentUserId,\n    (channel, currentUserId) => {\n        if (channel?.type !== Constants.DM_CHANNEL) {\n            return null;\n        }\n\n        return Utils.getUserIdFromChannelId(channel.name, currentUserId);\n    },\n);\n\nconst getTeammateStatus = createSelector(\n    'getTeammateStatus',\n    getUserStatuses,\n    getTeammateId,\n    (userStatuses, teammateId) => {\n        if (!teammateId) {\n            return undefined;\n        }\n\n        return userStatuses[teammateId];\n    },\n);\n\nconst mapStateToProps = (state: GlobalState) => ({\n    user: getCurrentUser(state),\n    channel: getCurrentChannel(state),\n    isDefault: isCurrentChannelDefault(state),\n    isFavorite: isCurrentChannelFavorite(state),\n    isMuted: isCurrentChannelMuted(state),\n    isReadonly: false,\n    isArchived: isCurrentChannelArchived(state),\n    penultimateViewedChannelName: getPenultimateViewedChannelName(state) || getRedirectChannelNameForTeam(state, getCurrentTeamId(state)),\n    pluginMenuItems: getChannelHeaderMenuPluginComponents(state),\n    isLicensedForLDAPGroups: state.entities.general.license.LDAPGroups === 'true',\n});\n\nconst mobileMapStateToProps = (state: GlobalState) => {\n    const user = getCurrentUser(state);\n    const channel = getCurrentChannel(state);\n    const teammateId = getTeammateId(state);\n\n    let teammateIsBot = false;\n    let displayName = '';\n    if (teammateId) {\n        const teammate = getUser(state, teammateId);\n        teammateIsBot = teammate && teammate.is_bot;\n        displayName = Utils.getDisplayNameByUser(state, teammate);\n    }\n\n    return {\n        user,\n        channel,\n        teammateId,\n        teammateIsBot,\n        teammateStatus: getTeammateStatus(state),\n        displayName,\n    };\n};\n\nexport const ChannelHeaderDropdown = Desktop;\nexport const ChannelHeaderDropdownItems = connect(mapStateToProps)(Items);\nexport const MobileChannelHeaderDropdown = connect(mobileMapStateToProps)(Mobile);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport Markdown from 'components/markdown';\n\nimport './section_notice.scss';\n\ntype Button = {\n    onClick: () => void;\n    text: string;\n}\ntype Props = {\n    title: string;\n    text: string;\n    primaryButton?: Button;\n    secondaryButton?: Button;\n    linkButton?: Button;\n    type?: 'info' | 'success' | 'danger' | 'welcome' | 'warning';\n    isDismissable?: boolean;\n    onDismissClick?: () => void;\n};\n\nconst iconByType = {\n    info: 'icon-information-outline',\n    success: 'icon-check',\n    danger: 'icon-alert-outline',\n    warning: 'icon-alert-outline',\n    welcome: undefined,\n};\n\nconst SectionNotice = ({\n    title,\n    text,\n    primaryButton,\n    secondaryButton,\n    linkButton,\n    type = 'info',\n    isDismissable,\n    onDismissClick,\n}: Props) => {\n    const intl = useIntl();\n    const icon = iconByType[type];\n    const showDismiss = Boolean(isDismissable && onDismissClick);\n    const buttonClass = 'btn btn-sm sectionNoticeButton';\n    return (\n        <div className={classNames('sectionNoticeContainer', type)}>\n            <div className={'sectionNoticeContent'}>\n                {icon && <i className={classNames('icon sectionNoticeIcon', icon, type)}/>}\n                <div className='sectionNoticeBody'>\n                    <h4 className={classNames('sectionNoticeTitle', {welcome: type === 'welcome'})}>{title}</h4>\n                    <Markdown message={text}/>\n                    <div className='sectionNoticeActions'>\n                        {primaryButton &&\n                        <button\n                            onClick={primaryButton.onClick}\n                            className={classNames(buttonClass, 'btn-primary')}\n                        >\n                            {primaryButton.text}\n                        </button>\n                        }\n                        {secondaryButton &&\n                        <button\n                            onClick={secondaryButton.onClick}\n                            className={classNames(buttonClass, 'btn-secondary')}\n                        >\n                            {secondaryButton.text}\n                        </button>\n                        }\n                        {linkButton &&\n                        <button\n                            onClick={linkButton.onClick}\n                            className={classNames(buttonClass, 'btn-link')}\n                        >\n                            {linkButton.text}\n                        </button>\n                        }\n                    </div>\n\n                </div>\n            </div>\n            {showDismiss &&\n                <button\n                    className='btn btn-icon btn-sm sectionNoticeClose'\n                    onClick={onDismissClick}\n                    aria-label={intl.formatMessage({\n                        id: 'sectionNotice.dismiss',\n                        defaultMessage: 'Dismiss notice',\n                    })}\n                >\n                    <i className='icon icon-close'/>\n                </button>\n            }\n        </div>\n    );\n};\n\nexport default SectionNotice;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {AppBinding} from '@mattermost/types/apps';\nimport type {Channel, ChannelMembership} from '@mattermost/types/channels';\n\nimport {AppCallResponseTypes} from 'mattermost-redux/constants/apps';\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {createCallContext} from 'utils/apps';\n\nimport type {HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForChannel} from 'types/apps';\nimport type {PluginComponent} from 'types/store/plugins';\n\ntype Props = {\n\n    /*\n     * Components or actions to add as channel header buttons\n     */\n    components?: PluginComponent[];\n\n    /*\n     * Set to true if the plug is in the dropdown\n     */\n    isDropdown: boolean;\n    channel: Channel;\n    channelMember?: ChannelMembership;\n\n    /*\n     * Logged in user's theme\n     */\n    theme: Theme;\n    appBindings: AppBinding[];\n    appsEnabled: boolean;\n    intl: IntlShape;\n    actions: {\n        handleBindingClick: HandleBindingClick;\n        postEphemeralCallResponseForChannel: PostEphemeralCallResponseForChannel;\n        openAppsModal: OpenAppsModal;\n    };\n}\n\nclass MobileChannelHeaderPlug extends React.PureComponent<Props> {\n    createAppButton = (binding: AppBinding) => {\n        const onClick = () => this.fireAppAction(binding);\n\n        if (this.props.isDropdown) {\n            return (\n                <li\n                    key={'mobileChannelHeaderItem' + binding.app_id + binding.location}\n                    role='presentation'\n                    className='MenuItem'\n                >\n                    <a\n                        role='menuitem'\n                        href='#'\n                        onClick={onClick}\n                    >\n                        {binding.label}\n                    </a>\n                </li>\n            );\n        }\n\n        return (\n            <li className='flex-parent--center'>\n                <button\n                    id={`${binding.app_id}_${binding.location}`}\n                    className='navbar-toggle navbar-right__icon'\n                    onClick={onClick}\n                >\n                    <span className='icon navbar-plugin-button'>\n                        <img\n                            src={binding.icon}\n                            width='16'\n                            height='16'\n                        />\n                    </span>\n                </button>\n            </li>\n        );\n    };\n    createButton = (plug: PluginComponent) => {\n        const onClick = () => this.fireAction(plug);\n\n        if (this.props.isDropdown) {\n            return (\n                <li\n                    key={'mobileChannelHeaderItem' + plug.id}\n                    role='presentation'\n                    className='MenuItem'\n                >\n                    <a\n                        role='menuitem'\n                        href='#'\n                        onClick={onClick}\n                    >\n                        {plug.dropdownText}\n                    </a>\n                </li>\n            );\n        }\n\n        return (\n            <li className='flex-parent--center'>\n                <button\n                    className='navbar-toggle navbar-right__icon'\n                    onClick={onClick}\n                >\n                    <span className='icon navbar-plugin-button'>\n                        {plug.icon}\n                    </span>\n                </button>\n            </li>\n        );\n    };\n\n    createList(plugs: PluginComponent[]) {\n        return plugs.map(this.createButton);\n    }\n\n    createAppList(bindings: AppBinding[]) {\n        return bindings.map(this.createAppButton);\n    }\n\n    fireAction(plug: PluginComponent) {\n        return plug.action?.(this.props.channel, this.props.channelMember);\n    }\n\n    fireAppAction = async (binding: AppBinding) => {\n        const {channel, intl} = this.props;\n        const context = createCallContext(\n            binding.app_id,\n            binding.location,\n            channel.id,\n            channel.team_id,\n        );\n\n        const res = await this.props.actions.handleBindingClick(binding, context, intl);\n\n        if (res.error) {\n            const errorResponse = res.error;\n            const errorMessage = errorResponse.text || intl.formatMessage({\n                id: 'apps.error.unknown',\n                defaultMessage: 'Unknown error occurred.',\n            });\n            this.props.actions.postEphemeralCallResponseForChannel(errorResponse, errorMessage, channel.id);\n            return;\n        }\n\n        const callResp = res.data!;\n        switch (callResp.type) {\n        case AppCallResponseTypes.OK:\n            if (callResp.text) {\n                this.props.actions.postEphemeralCallResponseForChannel(callResp, callResp.text, channel.id);\n            }\n            break;\n        case AppCallResponseTypes.NAVIGATE:\n            break;\n        case AppCallResponseTypes.FORM:\n            if (callResp.form) {\n                this.props.actions.openAppsModal(callResp.form, context);\n            }\n            break;\n        default: {\n            const errorMessage = this.props.intl.formatMessage({\n                id: 'apps.error.responses.unknown_type',\n                defaultMessage: 'App response type not supported. Response type: {type}.',\n            }, {\n                type: callResp.type,\n            });\n            this.props.actions.postEphemeralCallResponseForChannel(callResp, errorMessage, channel.id);\n        }\n        }\n    };\n\n    render() {\n        const components = this.props.components || [];\n        const bindings = this.props.appBindings || [];\n\n        if (components.length === 0 && bindings.length === 0) {\n            return null;\n        } else if (components.length === 1 && bindings.length === 0) {\n            return this.createButton(components[0]);\n        } else if (components.length === 0 && bindings.length === 1) {\n            return this.createAppButton(bindings[0]);\n        }\n\n        if (!this.props.isDropdown) {\n            return null;\n        }\n\n        const plugItems = this.createList(components);\n        const appItems = this.createAppList(bindings);\n        return (<>\n            {plugItems}\n            {appItems}\n        </>);\n    }\n}\n\n// Exported for tests\nexport {MobileChannelHeaderPlug as RawMobileChannelHeaderPlug};\n\nexport default injectIntl(MobileChannelHeaderPlug);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {AppBindingLocations} from 'mattermost-redux/constants/apps';\nimport {appsEnabled, makeAppBindingsSelector} from 'mattermost-redux/selectors/entities/apps';\nimport {getMyCurrentChannelMembership} from 'mattermost-redux/selectors/entities/channels';\nimport {getTheme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {handleBindingClick, openAppsModal, postEphemeralCallResponseForChannel} from 'actions/apps';\n\nimport type {GlobalState} from 'types/store';\n\nimport MobileChannelHeaderPlug from './mobile_channel_header_plug';\n\nconst getChannelHeaderBindings = makeAppBindingsSelector(AppBindingLocations.CHANNEL_HEADER_ICON);\n\nfunction mapStateToProps(state: GlobalState) {\n    const apps = appsEnabled(state);\n    return {\n        appBindings: getChannelHeaderBindings(state),\n        appsEnabled: apps,\n        channelMember: getMyCurrentChannelMembership(state),\n        components: state.plugins.components.MobileChannelHeaderButton,\n        theme: getTheme(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            handleBindingClick,\n            postEphemeralCallResponseForChannel,\n            openAppsModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MobileChannelHeaderPlug);\n"],"names":["ChannelHeaderDropdown","React","Menu","id","ariaLabel","localizeMessage","toLowerCase","ChannelHeaderDropdownItems","isMobile","memo","ChannelGroupsManageModal","constructor","arguments","_defineProperty","async","pageNumber","searchTerm","data","this","props","actions","getGroupsAssociatedToChannel","channel","DEFAULT_NUM_PER_PAGE","items","groups","totalCount","totalGroupCount","item","listModal","unlinkGroupSyncable","SyncableType","then","setState","loading","loadItems","page","state","closeModal","ModalIdentifiers","onHide","openModal","modalId","dialogType","AddGroupsToChannelModal","isChannelAdmin","patchGroupSyncable","scheme_admin","getMyChannelMember","title","Utils","key","className","src","groupsAvatar","alt","width","height","display_name","FormattedMessage","defaultMessage","values","num","member_count","MenuWrapper","concat","type","DropdownIcon","openLeft","show","onClick","setChannelMemberStatus","text","Boolean","onClickRemoveGroup","render","formatMessage","intl","ListModal","titleText","searchPlaceholderText","renderRow","titleBarButtonText","titleBarButtonOnClick","titleButtonOnClick","_pt","isRequired","injectIntl","connect","mapStateToProps","ownProps","entities","channels","channelID","dispatch","bindActionCreators","ChannelMoveToSubMenuOld","useIntl","useDispatch","allChannels","useSelector","getAllChannels","multiSelectedChannelIds","views","channelSidebar","currentTeam","getCurrentTeam","categories","getCategoriesForCurrentTeam","undefined","currentCategory","getCategoryInTeamWithChannel","handleMoveToNewCategory","EditCategoryModal","dialogProps","channelIdsToAdd","indexOf","trackEvent","createSubmenuItemsForCategoryArray","map","category","CategoryTypes","icon","StarOutlineIcon","size","FolderOutlineIcon","direction","action","handleMoveToCategory","categoryId","addChannelsInSidebar","FolderMoveOutlineIcon","filterCategoriesBasedOnChannelType","length","filter","subMenu","isSubmenuOneOfSelectedChannels","includes","inHeaderDropdown","Constants","every","channelId","getMoveToCategorySubmenuItems","openUp","styleSelectableItem","selectedValueText","renderSelected","propTypes","ConvertChannelModal","super","updateChannelPrivacy","General","channel_id","channelDisplayName","onExited","Modal","dialogClassName","role","closeButton","componentClass","FormattedMarkdownMessage","handleConvert","autoFocus","NoCommonTeamsError","SectionNotice","TeamSelector","value","setValue","useState","handleTeamChange","useCallback","e","teamId","teamsById","onChange","currentLocale","getCurrentLocale","teamValues","Object","team","label","sort","teamA","teamB","localeCompare","DropdownInput","required","options","legend","placeholder","name","WarningTextSection","memberNames","channelMemberNames","formatList","ServerErrorId","ConvertGmToChannelModal","channelName","setChannelName","channelURL","useRef","urlError","setURLError","handleChannelURLChange","newURL","current","setChannelMemberNames","useEffect","validProfilesInChannel","profilesInChannel","user","currentUserId","delete_at","displayUsername","teammateNameDisplaySetting","commonTeamsById","setCommonTeamsById","commonTeamsFetched","setCommonTeamsFetched","loadingAnimationTimeout","setLoadingAnimationTimeout","selectedTeamId","setSelectedTeamId","nameError","setNameError","conversionError","setConversionError","mounted","response","getGroupMessageMembersCommonTeams","error","teams","forEach","work","setTimeout","handleConfirm","convertGroupMessageToPrivateChannel","trim","server_error_id","CHANNEL_NAME_EXISTS","message","moveChannelsInSidebar","showLoader","canCreate","modalProps","modalBody","keys","subBody","handleCancel","isDeleteModal","cancelButtonText","confirmButtonText","isConfirmDisabled","LoadingSpinner","ChannelNameFormField","onDisplayNameChange","onURLChange","onErrorStateChange","classNames","GenericModal","assign","modalHeaderText","compassDesign","autoCloseOnConfirmButton","getProfilesInChannel","makeGetProfilesInChannel","allProfilesInChannel","getCurrentUserId","getTeammateNameDisplaySetting","DeleteChannelModal","canViewArchivedChannels","penultimateViewedChannelName","currentTeamDetails","getHistory","push","deleteChannel","handleDelete","getConfig","ExperimentalViewArchivedChannels","holders","defineMessages","maxLength","url","defaultError","RenameChannelModal","err","serverError","textbox","preventDefault","urlErrors","displayNameError","invalid","oldName","oldDisplayName","_objectSpread","patchChannel","displayName","minLength","validateChannelUrl","onSaveSuccess","setError","handleHide","unsetError","target","replace","node","urlHelpText","urlInputClass","urlInputLabel","readOnlyHandleInput","fullUrl","currentTeamUrl","shortUrl","getShortenedURL","onEntering","handleEntering","ref","getTextbox","WithTooltip","placement","onNameChange","readOnly","handleSubmit","mapStateToPropsRenameChannel","createSelector","currentTeamId","getTeam","getSiteURL","teamInfo","UnarchiveChannelModal","unarchiveChannel","handleUnarchive","CloseChannel","_ref","isArchived","goToLastViewedChannel","CloseMessage","currentUser","redirectChannel","savePreferences","leaveDirectChannel","teammate_id","user_id","handleClose","getRedirectChannelNameForTeam","getCurrentTeamId","LeaveChannel","isDefault","isGuestUser","leaveChannel","handleLeave","LeaveChannelModal","isDangerous","ToggleChannelMembersRHS","rhsOpen","editMembers","openRHSIfNotOpen","showChannelMembers","getIsRhsOpen","getRhsState","RHSStates","OpenChannelMembersRHS","ToggleFavoriteChannel","isFavorite","favoriteChannel","unfavoriteChannel","toggleFavoriteChannel","handleClick","ToggleInfo","toggleRHS","closeRightHandSide","showChannelInfo","MenuItemToggleMuteChannel","isMuted","updateChannelNotifyProps","mark_unread","NotificationLevels","ViewPinnedPosts","hasPinnedPosts","showPinnedPosts","isReadonly","isLicensedForLDAPGroups","isPrivate","isGroupConstrained","group_constrained","channelMembersPermission","Permissions","channelPropertiesPermission","channelDeletePermission","channelUnarchivePermission","divider","pluginItems","pluginMenuItems","MenuItemToggleInfo","MenuItemToggleFavoriteChannel","MenuItemViewPinnedPosts","ChannelNotificationsModal","ChannelPermissionGate","team_id","permissions","ChannelInviteModal","MoreDirectChannels","isExistingChannel","MenuItemOpenMembersRHS","invert","EditChannelHeaderModal","isGuest","roles","EditChannelPurposeModal","MenuItemLeaveChannel","MobileChannelHeaderPlug","isDropdown","MenuItemCloseMessage","MenuItemCloseChannel","timeout","enter","exit","MobileChannelHeaderDropdownAnimation","children","CSSTransition","in","mountOnEnter","unmountOnExit","MobileChannelHeaderDropdown","teammateId","teammateIsBot","teammateStatus","dmHeaderIconStatus","StatusIcon","status","animationComponent","displayname","getTeammateId","getCurrentChannel","getTeammateStatus","getUserStatuses","userStatuses","Desktop","getCurrentUser","isCurrentChannelDefault","isCurrentChannelFavorite","isCurrentChannelMuted","isCurrentChannelArchived","getPenultimateViewedChannelName","getChannelHeaderMenuPluginComponents","general","license","LDAPGroups","Items","teammate","getUser","is_bot","Mobile","iconByType","info","success","danger","warning","welcome","primaryButton","secondaryButton","linkButton","isDismissable","onDismissClick","showDismiss","buttonClass","Markdown","binding","fireAppAction","app_id","location","href","plug","fireAction","dropdownText","context","createCallContext","res","handleBindingClick","errorResponse","errorMessage","postEphemeralCallResponseForChannel","callResp","AppCallResponseTypes","form","openAppsModal","createList","plugs","createButton","createAppList","bindings","createAppButton","_plug$action","call","channelMember","components","appBindings","plugItems","appItems","appsEnabled","getChannelHeaderBindings","makeAppBindingsSelector","AppBindingLocations","apps","getMyCurrentChannelMembership","plugins","MobileChannelHeaderButton","theme","getTheme"],"sourceRoot":""}