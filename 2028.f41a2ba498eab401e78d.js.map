{"version":3,"file":"2028.f41a2ba498eab401e78d.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/actions/views/mfa.js","webpack://mattermost-webapp/./src/components/mfa/confirm.tsx","webpack://mattermost-webapp/./src/components/mfa/setup/setup.tsx","webpack://mattermost-webapp/./src/components/mfa/setup/index.ts","webpack://mattermost-webapp/./src/components/mfa/mfa_controller/mfa_controller.tsx","webpack://mattermost-webapp/./src/components/mfa/mfa_controller/index.ts","webpack://mattermost-webapp/./src/components/widgets/icons/fa_logout_icon.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {redirectUserToDefaultTeam} from 'actions/global_actions';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\nconst KeyCodes = Constants.KeyCodes;\n\nconst submit = (e: KeyboardEvent | React.FormEvent<HTMLFormElement>): void => {\n    e.preventDefault();\n    redirectUserToDefaultTeam();\n};\n\nconst onKeyPress = (e: React.KeyboardEvent<HTMLFormElement>| KeyboardEvent) => {\n    if (isKeyPressed(e as KeyboardEvent, KeyCodes.ENTER)) {\n        submit(e);\n    }\n};\n\nexport default function Confirm() {\n    useEffect(() => {\n        document.body.addEventListener('keydown', onKeyPress);\n\n        return () => {\n            document.body.removeEventListener('keydown', onKeyPress);\n        };\n    }, []);\n\n    return (\n        <div>\n            <form\n                onSubmit={submit}\n                onKeyPress={onKeyPress}\n                className='form-group'\n            >\n                <p>\n                    <FormattedMessage\n                        id='mfa.confirm.complete'\n                        defaultMessage='**Set up complete!**'\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='mfa.confirm.secure'\n                        defaultMessage='Your account is now secure. Next time you sign in, you will be asked to enter a code from the Google Authenticator app on your phone.'\n                    />\n                </p>\n                <button\n                    type='submit'\n                    className='btn btn-primary'\n                >\n                    <FormattedMessage\n                        id='mfa.confirm.okay'\n                        defaultMessage='Okay'\n                    />\n                </button>\n            </form>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, type IntlShape} from 'react-intl';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport ExternalLink from 'components/external_link';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport * as Utils from 'utils/utils';\n\ntype MFAControllerState = {\n    enforceMultifactorAuthentication: boolean;\n};\n\ntype Props = {\n\n    /*\n     * Object containing enforceMultifactorAuthentication\n     */\n    state: MFAControllerState;\n    intl: IntlShape;\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: MFAControllerState) => void;\n\n    currentUser: UserProfile;\n    siteName?: string;\n    enforceMultifactorAuthentication: boolean;\n    actions: {\n        activateMfa: (code: string) => Promise<{\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        generateMfaSecret: () => Promise<{\n            data: {\n                secret: string;\n                qr_code: string;\n            };\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    history: {\n        push(path: string): void;\n    };\n}\n\ntype State = {\n    secret: string;\n    qrCode: string;\n    error?: any | null;\n    serverError?: string;\n}\n\nclass Setup extends React.PureComponent<Props, State> {\n    private input: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {secret: '', qrCode: ''};\n\n        this.input = React.createRef();\n    }\n\n    public componentDidMount(): void {\n        const user = this.props.currentUser;\n        if (!user || user.mfa_active) {\n            this.props.history.push('/');\n            return;\n        }\n\n        this.props.actions.generateMfaSecret().then(({data, error}) => {\n            if (error) {\n                this.setState({\n                    serverError: error.message,\n                });\n                return;\n            }\n\n            this.setState({\n                secret: data.secret,\n                qrCode: data.qr_code,\n            });\n        });\n    }\n\n    submit = (e: React.FormEvent<HTMLFormElement>): void => {\n        e.preventDefault();\n        const code = this.input?.current?.value.replace(/\\s/g, '');\n        if (!code || code.length === 0) {\n            this.setState({error: Utils.localizeMessage('mfa.setup.codeError', 'Please enter the code from Google Authenticator.')});\n            return;\n        }\n\n        this.setState({error: null});\n\n        this.props.actions.activateMfa(code).then(({error}) => {\n            if (error) {\n                if (error.server_error_id === 'ent.mfa.activate.authenticate.app_error') {\n                    this.setState({\n                        error: Utils.localizeMessage('mfa.setup.badCode', 'Invalid code. If this issue persists, contact your System Administrator.'),\n                    });\n                } else {\n                    this.setState({\n                        error: error.message,\n                    });\n                }\n\n                return;\n            }\n\n            this.props.history.push('/mfa/confirm');\n        });\n    };\n\n    public render(): JSX.Element {\n        let formClass = 'form-group';\n        let errorContent;\n        if (this.state.error) {\n            errorContent = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let mfaRequired;\n        if (this.props.enforceMultifactorAuthentication) {\n            mfaRequired = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='mfa.setup.required'\n                        defaultMessage='**Multi-factor authentication is required on {siteName}.**'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div>\n                <form\n                    onSubmit={this.submit}\n                    className={formClass}\n                >\n                    {mfaRequired}\n                    <p>\n                        <FormattedMessage\n                            id='mfa.setup.step1'\n                            defaultMessage='<strong>Step 1: </strong>On your phone, download Google Authenticator from <linkiTunes>iTunes</linkiTunes> or <linkGooglePlay>Google Play</linkGooglePlay>'\n                            values={{\n                                strong: (msg: React.ReactNode) => <strong>{msg}</strong>,\n                                linkiTunes: (msg: React.ReactNode) => (\n                                    <ExternalLink\n                                        href='https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8'\n                                        location='mfa_setup'\n                                    >\n                                        {msg}\n                                    </ExternalLink>\n                                ),\n                                linkGooglePlay: (msg: React.ReactNode) => (\n                                    <ExternalLink\n                                        href='https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en'\n                                        location='mfa_setup'\n                                    >\n                                        {msg}\n                                    </ExternalLink>\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step2'\n                            defaultMessage='**Step 2: **Use Google Authenticator to scan this QR code, or manually type in the secret key'\n                        />\n                    </p>\n                    <div className='form-group'>\n                        <div className='col-sm-12'>\n                            <img\n                                alt={'qr code image'}\n                                style={style.qrCode}\n                                src={'data:image/png;base64,' + this.state.qrCode}\n                            />\n                        </div>\n                    </div>\n                    <br/>\n                    <div className='form-group'>\n                        <p className='col-sm-12'>\n                            <FormattedMessage\n                                id='mfa.setup.secret'\n                                defaultMessage='Secret: {secret}'\n                                values={{\n                                    secret: this.state.secret,\n                                }}\n                            />\n                        </p>\n                    </div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step3'\n                            defaultMessage='**Step 3: **Enter the code generated by Google Authenticator'\n                        />\n                    </p>\n                    <p>\n                        <input\n                            ref={this.input}\n                            className='form-control'\n                            placeholder={this.props.intl.formatMessage({id: 'mfa.setup.code', defaultMessage: 'MFA Code'})}\n                            autoFocus={true}\n                        />\n                    </p>\n                    {errorContent}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='mfa.setup.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    qrCode: {maxHeight: 170},\n};\n\nexport default injectIntl(Setup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {activateMfa, generateMfaSecret} from 'actions/views/mfa';\n\nimport Setup from './setup';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        currentUser: getCurrentUser(state),\n        siteName,\n        enforceMultifactorAuthentication,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            activateMfa,\n            generateMfaSecret,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Setup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from \"react\";\nimport { FormattedMessage } from \"react-intl\";\nimport { Route, Switch } from \"react-router-dom\";\nimport type { RouteComponentProps } from \"react-router-dom\";\n\nimport { emitUserLoggedOutEvent } from \"actions/global_actions\";\n\nimport BackButton from \"components/common/back_button\";\nimport LogoutIcon from \"components/widgets/icons/fa_logout_icon\";\n\nimport logoImage from \"images/logo.png\";\n\nimport Confirm from \"../confirm\";\nimport Setup from \"../setup\";\n\ntype Location = {\n    search: string;\n};\n\ntype Props = {\n    location: Location;\n    children?: React.ReactNode;\n    mfa: boolean;\n    enableMultifactorAuthentication: boolean;\n    enforceMultifactorAuthentication: boolean;\n\n    /*\n     * Object from react-router\n     */\n    match: {\n        url: string;\n    };\n};\n\ntype State = {\n    enforceMultifactorAuthentication: boolean;\n};\n\nexport default class MFAController extends React.PureComponent<\n    Props & RouteComponentProps,\n    State\n> {\n    public constructor(props: Props & RouteComponentProps) {\n        super(props);\n\n        this.state = {\n            enforceMultifactorAuthentication:\n                props.enableMultifactorAuthentication,\n        };\n    }\n\n    public componentDidMount(): void {\n        document.body.classList.add(\"sticky\");\n        document.getElementById(\"root\")!.classList.add(\"container-fluid\");\n\n        if (!this.props.enableMultifactorAuthentication) {\n            this.props.history.push(\"/\");\n        }\n    }\n\n    public componentWillUnmount(): void {\n        document.body.classList.remove(\"sticky\");\n        document.getElementById(\"root\")!.classList.remove(\"container-fluid\");\n    }\n\n    public handleOnClick = (\n        e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ): void => {\n        e.preventDefault();\n        emitUserLoggedOutEvent(\"/login\");\n    };\n\n    public updateParent = (state: State): void => {\n        this.setState(state);\n    };\n\n    public render(): JSX.Element {\n        let backButton;\n        if (this.props.mfa && this.props.enforceMultifactorAuthentication) {\n            backButton = (\n                <div className=\"signup-header\">\n                    <button\n                        className=\"style--none color--link\"\n                        onClick={this.handleOnClick}\n                    >\n                        <LogoutIcon />\n                        <FormattedMessage\n                            id=\"web.header.logout\"\n                            defaultMessage=\"Logout\"\n                        />\n                    </button>\n                </div>\n            );\n        } else {\n        }\n\n        return (\n            <div className=\"inner-wrap\">\n                <div className=\"row content\">\n                    <div>\n                        {backButton}\n                        <div className=\"col-sm-12\">\n                            <div className=\"signup-team__container\">\n                                <h3>\n                                    <FormattedMessage\n                                        id=\"mfa.setupTitle\"\n                                        defaultMessage=\"Multi-factor Authentication Setup\"\n                                    />\n                                </h3>\n                                <img\n                                    alt={\"signup team logo\"}\n                                    className=\"signup-team-logo\"\n                                    src={logoImage}\n                                />\n                                <div id=\"mfa\">\n                                    <Switch>\n                                        <Route\n                                            path={`${this.props.match.url}/setup`}\n                                            render={(props) => (\n                                                <Setup\n                                                    state={this.state}\n                                                    updateParent={\n                                                        this.updateParent\n                                                    }\n                                                    {...props}\n                                                />\n                                            )}\n                                        />\n                                        <Route\n                                            path={`${this.props.match.url}/confirm`}\n                                            render={() => <Confirm />}\n                                        />\n                                    </Switch>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport MFAController from './mfa_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfa = license.MFA === 'true';\n    const enableMultifactorAuthentication = config.EnableMultifactorAuthentication === 'true';\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        mfa,\n        enableMultifactorAuthentication,\n        enforceMultifactorAuthentication,\n    };\n}\n\nexport default connect(mapStateToProps)(MFAController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function LogoutIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-1x fa-angle-left'\n            title={formatMessage({id: 'generic_icons.logout', defaultMessage: 'Logout Icon'})}\n        />\n    );\n}\n"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","KeyCodes","Constants","submit","e","preventDefault","redirectUserToDefaultTeam","onKeyPress","isKeyPressed","ENTER","Confirm","useEffect","document","body","addEventListener","removeEventListener","React","onSubmit","className","FormattedMessage","id","defaultMessage","type","Setup","constructor","props","super","_defineProperty","_this$input","_this$input$current","this","input","current","value","replace","length","setState","error","actions","then","_ref","server_error_id","Utils","message","history","push","state","secret","qrCode","componentDidMount","user","currentUser","mfa_active","_ref2","data","serverError","qr_code","render","errorContent","mfaRequired","formClass","enforceMultifactorAuthentication","FormattedMarkdownMessage","values","siteName","strong","msg","linkiTunes","ExternalLink","href","location","linkGooglePlay","alt","style","src","ref","placeholder","intl","formatMessage","autoFocus","_pt","isRequired","updateParent","maxHeight","injectIntl","connect","config","getConfig","SiteName","EnforceMultifactorAuthentication","getCurrentUser","bindActionCreators","MFAController","emitUserLoggedOutEvent","enableMultifactorAuthentication","classList","add","getElementById","componentWillUnmount","remove","backButton","mfa","onClick","handleOnClick","LogoutIcon","logoImage","Switch","Route","path","concat","match","url","Object","assign","search","children","license","getLicense","MFA","EnableMultifactorAuthentication","useIntl","title"],"sourceRoot":""}