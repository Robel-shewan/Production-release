{"version":3,"file":"5215.48db9473baee83d3fed5.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/settings_sidebar/settings_sidebar.tsx","webpack://mattermost-webapp/./src/components/settings_sidebar/index.ts"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {a11yFocus} from 'utils/utils';\n\nexport type Tab = {\n    icon: string | {url: string};\n    iconTitle: string;\n    name: string;\n    uiName: string;\n}\n\nexport type Props = {\n    activeTab?: string;\n    tabs: Tab[];\n    pluginTabs?: Tab[];\n    updateTab: (name: string) => void;\n    isMobileView: boolean;\n};\n\nexport default class SettingsSidebar extends React.PureComponent<Props> {\n    buttonRefs: Array<RefObject<HTMLButtonElement>>;\n\n    constructor(props: Props) {\n        super(props);\n        this.buttonRefs = this.props.tabs.map(() => React.createRef());\n    }\n\n    public handleClick = (tab: Tab, e: React.MouseEvent) => {\n        e.preventDefault();\n        this.props.updateTab(tab.name);\n        (e.target as Element).closest('.settings-modal')?.classList.add('display--content');\n    };\n\n    public handleKeyUp = (index: number, e: React.KeyboardEvent) => {\n        if (isKeyPressed(e, Constants.KeyCodes.UP)) {\n            if (index > 0) {\n                this.props.updateTab(this.props.tabs[index - 1].name);\n                a11yFocus(this.buttonRefs[index - 1].current);\n            }\n        } else if (isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n            if (index < this.props.tabs.length - 1) {\n                this.props.updateTab(this.props.tabs[index + 1].name);\n                a11yFocus(this.buttonRefs[index + 1].current);\n            }\n        }\n    };\n\n    private renderTab(tab: Tab, index: number) {\n        const key = `${tab.name}_li`;\n        const isActive = this.props.activeTab === tab.name;\n        let className = '';\n        if (isActive) {\n            className = 'active';\n        }\n\n        let icon;\n        if (typeof tab.icon === 'string') {\n            icon = (\n                <i\n                    className={tab.icon}\n                    title={tab.iconTitle}\n                />\n            );\n        } else {\n            icon = (\n                <img\n                    src={tab.icon.url}\n                    alt={tab.iconTitle}\n                    className='icon'\n                />\n            );\n        }\n\n        return (\n            <li\n                id={`${tab.name}Li`}\n                key={key}\n                className={className}\n                role='presentation'\n            >\n                <button\n                    ref={this.buttonRefs[index]}\n                    id={`${tab.name}Button`}\n                    className='cursor--pointer style--none'\n                    onClick={this.handleClick.bind(null, tab)}\n                    onKeyUp={this.handleKeyUp.bind(null, index)}\n                    aria-label={tab.uiName.toLowerCase()}\n                    role='tab'\n                    aria-selected={isActive}\n                    tabIndex={!isActive && !this.props.isMobileView ? -1 : 0}\n                >\n                    {icon}\n                    {tab.uiName}\n                </button>\n            </li>\n        );\n    }\n\n    public render() {\n        const tabList = this.props.tabs.map((tab, index) => this.renderTab(tab, index));\n        let pluginTabList: React.ReactNode;\n        if (this.props.pluginTabs?.length) {\n            pluginTabList = (\n                <>\n                    <hr/>\n                    <li\n                        key={'plugin preferences heading'}\n                        role='heading'\n                        className={'header'}\n                    >\n                        <FormattedMessage\n                            id={'userSettingsModal.pluginPreferences.header'}\n                            defaultMessage={'PLUGIN PREFERENCES'}\n                        />\n                    </li>\n                    {this.props.pluginTabs.map((tab, index) => this.renderTab(tab, index))}\n                </>\n            );\n        }\n\n        return (\n            <div>\n                <ul\n                    id='tabList'\n                    className='nav nav-pills nav-stacked'\n                    role='tablist'\n                    aria-orientation='vertical'\n                >\n                    {tabList}\n                    {pluginTabList}\n                </ul>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport SettingsSidebar from './settings_sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(SettingsSidebar);\n"],"names":["SettingsSidebar","React","constructor","props","super","_defineProperty","tab","e","_closest","preventDefault","this","updateTab","name","target","closest","classList","add","index","isKeyPressed","Constants","tabs","a11yFocus","buttonRefs","current","length","map","renderTab","key","concat","isActive","activeTab","icon","className","title","iconTitle","src","url","alt","id","role","ref","onClick","handleClick","bind","onKeyUp","handleKeyUp","uiName","toLowerCase","tabIndex","isMobileView","render","_this$props$pluginTab","tabList","pluginTabList","pluginTabs","FormattedMessage","defaultMessage","connect","state","getIsMobileView"],"sourceRoot":""}