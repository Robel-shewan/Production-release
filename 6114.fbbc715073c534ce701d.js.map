{"version":3,"file":"6114.fbbc715073c534ce701d.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/drafts/draft_actions/action.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/delete_draft_modal.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/send_draft_modal.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/draft_actions.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_actions/index.ts","webpack://mattermost-webapp/./src/components/drafts/draft_title/draft_title.tsx","webpack://mattermost-webapp/./src/components/drafts/draft_title/index.ts","webpack://mattermost-webapp/./src/components/drafts/panel/panel.tsx","webpack://mattermost-webapp/./src/components/drafts/panel/panel_body.tsx","webpack://mattermost-webapp/./src/components/drafts/panel/panel_header.tsx","webpack://mattermost-webapp/./src/components/drafts/channel_draft/channel_draft.tsx","webpack://mattermost-webapp/./src/components/drafts/channel_draft/index.ts","webpack://mattermost-webapp/./src/components/drafts/thread_draft/thread_draft.tsx","webpack://mattermost-webapp/./src/components/drafts/thread_draft/index.ts","webpack://mattermost-webapp/./src/components/drafts/draft_row.tsx","webpack://mattermost-webapp/./src/components/drafts/drafts_illustration.tsx","webpack://mattermost-webapp/./src/components/drafts/drafts.tsx","webpack://mattermost-webapp/./src/components/drafts/index.ts","webpack://mattermost-webapp/./src/components/widgets/header/header.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nimport './action.scss';\nimport WithTooltip from 'components/with_tooltip';\n\ntype Props = {\n    icon: string;\n    id: string;\n    name: string;\n    onClick: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    tooltipText: React.ReactElement | string;\n};\n\nfunction Action({name, icon, onClick, id, tooltipText}: Props) {\n    return (\n        <div className='DraftAction'>\n            <WithTooltip\n                id={`drafts_action_tooltip_${id}`}\n                placement='top'\n                title={tooltipText}\n            >\n                <button\n                    className={classNames(\n                        'DraftAction__button',\n                        {'DraftAction__button--delete': name === 'delete'},\n                    )}\n                    id={`draft_{icon}_${id}`}\n                    onClick={onClick}\n                >\n                    <i className={`icon ${icon}`}/>\n                </button>\n            </WithTooltip>\n        </div>\n    );\n}\n\nexport default Action;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\ntype Props = {\n    displayName: string;\n    onConfirm: () => void;\n    onExited: () => void;\n}\n\nfunction DeleteDraftModal({\n    displayName,\n    onExited,\n    onConfirm,\n}: Props) {\n    const {formatMessage} = useIntl();\n\n    const title = formatMessage({\n        id: 'drafts.confirm.delete.title',\n        defaultMessage: 'Delete draft',\n    });\n\n    const confirmButtonText = formatMessage({\n        id: 'drafts.confirm.delete.button',\n        defaultMessage: 'Yes, delete',\n    });\n\n    const message = (\n        <FormattedMessage\n            id={'drafts.confirm.delete.text'}\n            defaultMessage={'Are you sure you want to delete this draft to <strong>{displayName}</strong>?'}\n            values={{\n                strong: (chunk: string) => <strong>{chunk}</strong>,\n                displayName,\n            }}\n        />\n    );\n\n    return (\n        <GenericModal\n            confirmButtonText={confirmButtonText}\n            handleCancel={() => {}}\n            handleConfirm={onConfirm}\n            modalHeaderText={title}\n            onExited={onExited}\n            compassDesign={true}\n            isDeleteModal={true}\n            autoFocusConfirmButton={true}\n        >\n            {message}\n        </GenericModal>\n    );\n}\n\nexport default DeleteDraftModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\n\nimport {GenericModal} from '@mattermost/components';\n\ntype Props = {\n    displayName: string;\n    onConfirm: () => void;\n    onExited: () => void;\n}\n\nfunction SendDraftModal({\n    displayName,\n    onConfirm,\n    onExited,\n}: Props) {\n    const {formatMessage} = useIntl();\n\n    const title = formatMessage({\n        id: 'drafts.confirm.send.title',\n        defaultMessage: 'Send message now',\n    });\n\n    const confirmButtonText = formatMessage({\n        id: 'drafts.confirm.send.button',\n        defaultMessage: 'Yes, send now',\n    });\n\n    const message = (\n        <FormattedMessage\n            id={'drafts.confirm.send.text'}\n            defaultMessage={'Are you sure you want to send this message to <strong>{displayName}</strong>?'}\n            values={{\n                strong: (chunk: string) => <strong>{chunk}</strong>,\n                displayName,\n            }}\n        />\n    );\n\n    return (\n        <GenericModal\n            confirmButtonText={confirmButtonText}\n            handleCancel={() => {}}\n            handleConfirm={onConfirm}\n            modalHeaderText={title}\n            onExited={onExited}\n            compassDesign={true}\n        >\n            {message}\n        </GenericModal>\n    );\n}\n\nexport default SendDraftModal;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {openModal} from 'actions/views/modals';\n\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport Action from './action';\nimport DeleteDraftModal from './delete_draft_modal';\nimport SendDraftModal from './send_draft_modal';\n\ntype Props = {\n    displayName: string;\n    draftId: string;\n    onDelete: (draftId: string) => void;\n    onEdit: () => void;\n    onSend: (draftId: string) => void;\n}\n\nfunction DraftActions({\n    displayName,\n    draftId,\n    onDelete,\n    onEdit,\n    onSend,\n}: Props) {\n    const dispatch = useDispatch();\n\n    const handleDelete = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.DELETE_DRAFT,\n            dialogType: DeleteDraftModal,\n            dialogProps: {\n                displayName,\n                onConfirm: () => onDelete(draftId),\n            },\n        }));\n    }, [displayName]);\n\n    const handleSend = useCallback(() => {\n        dispatch(openModal({\n            modalId: ModalIdentifiers.SEND_DRAFT,\n            dialogType: SendDraftModal,\n            dialogProps: {\n                displayName,\n                onConfirm: () => onSend(draftId),\n            },\n        }));\n    }, [displayName]);\n\n    return (\n        <>\n            <Action\n                icon='icon-trash-can-outline'\n                id='delete'\n                name='delete'\n                tooltipText={(\n                    <FormattedMessage\n                        id='drafts.actions.delete'\n                        defaultMessage='Delete draft'\n                    />\n                )}\n                onClick={handleDelete}\n            />\n            <Action\n                icon='icon-pencil-outline'\n                id='edit'\n                name='edit'\n                tooltipText={(\n                    <FormattedMessage\n                        id='drafts.actions.edit'\n                        defaultMessage='Edit draft'\n                    />\n                )}\n                onClick={onEdit}\n            />\n            <Action\n                icon='icon-send-outline'\n                id='send'\n                name='send'\n                tooltipText={(\n                    <FormattedMessage\n                        id='drafts.actions.send'\n                        defaultMessage='Send draft'\n                    />\n                )}\n                onClick={handleSend}\n            />\n        </>\n    );\n}\n\nexport default memo(DraftActions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserIdFromChannelName} from 'mattermost-redux/utils/channel_utils';\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {Constants} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport DraftActions from './draft_actions';\n\ntype OwnProps = {\n    channelDisplayName: Channel['display_name'];\n    channelType: Channel['type'];\n    channelName: Channel['name'];\n    userId: string;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const {channelDisplayName, userId, channelName, channelType} = ownProps;\n\n    let displayName = channelDisplayName;\n    let teammateId;\n    let teammate;\n\n    if (channelType === Constants.DM_CHANNEL) {\n        teammateId = getUserIdFromChannelName(userId, channelName);\n        teammate = getUser(state, teammateId);\n        displayName = displayUsername(teammate, getTeammateNameDisplaySetting(state));\n    }\n\n    return {\n        displayName,\n    };\n}\n\nexport default connect(mapStateToProps)(DraftActions);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\n\nimport Avatar from 'components/widgets/users/avatar';\n\nimport {Constants} from 'utils/constants';\nimport {imageURLForUser} from 'utils/utils';\n\nimport './draft_title.scss';\n\ntype Props = {\n    channelType: Channel['type'];\n    channelName: string;\n    membersCount?: number;\n    selfDraft: boolean;\n    teammate?: UserProfile;\n    teammateId?: string;\n    type: 'channel' | 'thread';\n}\n\nfunction DraftTitle({\n    channelType,\n    channelName,\n    membersCount,\n    selfDraft,\n    teammate,\n    teammateId,\n    type,\n}: Props) {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!teammate?.id && teammateId) {\n            dispatch(getMissingProfilesByIds([teammateId]));\n        }\n    }, [teammate?.id, teammateId]);\n\n    let you = null;\n    let title = null;\n\n    if (selfDraft) {\n        you = (\n            <>\n                &nbsp;\n                <FormattedMessage\n                    id='drafts.draft_title.you'\n                    defaultMessage={'(you)'}\n                />\n            </>\n        );\n    }\n\n    let icon = <i className='icon icon-globe'/>;\n\n    if (channelType === Constants.PRIVATE_CHANNEL) {\n        icon = <i className='icon icon-lock-outline'/>;\n    }\n\n    if (channelType === Constants.DM_CHANNEL && teammate) {\n        icon = (\n            <Avatar\n                size='xs'\n                username={teammate.username}\n                url={imageURLForUser(teammate.id, teammate.last_picture_update)}\n                className='DraftTitle__avatar'\n            />\n        );\n    }\n\n    if (channelType === Constants.GM_CHANNEL) {\n        icon = (\n            <div className='DraftTitle__group-icon'>\n                {membersCount}\n            </div>\n        );\n    }\n\n    if (type === 'thread') {\n        if (\n            channelType !== Constants.GM_CHANNEL &&\n            channelType !== Constants.DM_CHANNEL\n        ) {\n            title = (\n                <FormattedMessage\n                    id='drafts.draft_title.channel_thread'\n                    defaultMessage={'Thread in: {icon} <span>{channelName}</span>'}\n                    values={{\n                        icon,\n                        channelName,\n                        span: (chunks: React.ReactNode) => (<span>{chunks}</span>),\n                    }}\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='drafts.draft_title.direct_thread'\n                    defaultMessage={'Thread to: {icon} <span>{channelName}</span>'}\n                    values={{\n                        icon,\n                        channelName,\n                        span: (chunks: React.ReactNode) => (<span>{chunks}</span>),\n                    }}\n                />\n            );\n        }\n    } else if (\n        channelType !== Constants.GM_CHANNEL &&\n        channelType !== Constants.DM_CHANNEL\n    ) {\n        title = (\n            <FormattedMessage\n                id='drafts.draft_title.channel'\n                defaultMessage={'In: {icon} <span>{channelName}</span>'}\n                values={{\n                    icon,\n                    channelName,\n                    span: (chunks: React.ReactNode) => (<span>{chunks}</span>),\n                }}\n            />\n        );\n    } else {\n        title = (\n            <FormattedMessage\n                id='drafts.draft_title.direct_channel'\n                defaultMessage={'To: {icon} <span>{channelName}</span>'}\n                values={{\n                    icon,\n                    channelName,\n                    span: (chunks: React.ReactNode) => (<span>{chunks}</span>),\n                }}\n            />\n        );\n    }\n\n    return (\n        <>\n            {title}\n            {you}\n        </>\n    );\n}\n\nexport default memo(DraftTitle);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\n\nimport {makeGetGmChannelMemberCount} from 'mattermost-redux/selectors/entities/channels';\nimport {getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserIdFromChannelName} from 'mattermost-redux/utils/channel_utils';\n\nimport {Constants} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport DraftTitle from './draft_title';\n\ntype OwnProps = {\n    channel: Channel;\n    userId: string;\n};\n\nfunction makeMapStateToProps() {\n    const getMemberCount = makeGetGmChannelMemberCount();\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const {channel, userId} = ownProps;\n\n        const channelName = channel.display_name;\n        let teammateId;\n        let teammate;\n        let membersCount;\n\n        if (channel.type === Constants.GM_CHANNEL) {\n            membersCount = getMemberCount(state, channel);\n        }\n\n        if (channel.type === Constants.DM_CHANNEL) {\n            teammateId = getUserIdFromChannelName(userId, channel.name);\n            teammate = getUser(state, teammateId);\n        }\n\n        return {\n            channelName,\n            channelType: channel.type,\n            membersCount,\n            selfDraft: teammateId === userId,\n            teammate,\n            teammateId,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(DraftTitle);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useState} from 'react';\n\nimport {makeIsEligibleForClick} from 'utils/utils';\nimport './panel.scss';\n\ntype Props = {\n    children: ({hover}: {hover: boolean}) => React.ReactNode;\n    onClick: () => void;\n};\n\nconst isEligibleForClick = makeIsEligibleForClick('.hljs, code');\n\nfunction Panel({children, onClick}: Props) {\n    const [hover, setHover] = useState(false);\n\n    const handleMouseOver = () => {\n        setHover(true);\n    };\n\n    const handleMouseLeave = () => {\n        setHover(false);\n    };\n\n    const handleOnClick = (e: React.MouseEvent<HTMLElement>) => {\n        if (isEligibleForClick(e)) {\n            onClick();\n        }\n    };\n\n    return (\n        <article\n            className='Panel'\n            onMouseOver={handleMouseOver}\n            onClick={handleOnClick}\n            onMouseLeave={handleMouseLeave}\n            role='button'\n        >\n            {children({hover})}\n        </article>\n    );\n}\n\nexport default memo(Panel);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport type {PostPriorityMetadata} from '@mattermost/types/posts';\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {getCurrentRelativeTeamUrl} from 'mattermost-redux/selectors/entities/teams';\n\nimport PriorityLabels from 'components/advanced_text_editor/priority_labels';\nimport FilePreview from 'components/file_preview';\nimport Markdown from 'components/markdown';\nimport ProfilePicture from 'components/profile_picture';\n\nimport {imageURLForUser, handleFormattedTextClick} from 'utils/utils';\n\nimport type {PostDraft} from 'types/store/draft';\n\nimport './panel_body.scss';\n\ntype Props = {\n    channelId: string;\n    displayName: string;\n    fileInfos: PostDraft['fileInfos'];\n    message: string;\n    priority?: PostPriorityMetadata;\n    status: UserStatus['status'];\n    uploadsInProgress: PostDraft['uploadsInProgress'];\n    userId: UserProfile['id'];\n    username: UserProfile['username'];\n}\n\nconst OPTIONS = {\n    disableGroupHighlight: true,\n    mentionHighlight: false,\n};\n\nfunction PanelBody({\n    channelId,\n    displayName,\n    fileInfos,\n    message,\n    priority,\n    status,\n    uploadsInProgress,\n    userId,\n    username,\n}: Props) {\n    const currentRelativeTeamUrl = useSelector(getCurrentRelativeTeamUrl);\n\n    const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        handleFormattedTextClick(e, currentRelativeTeamUrl);\n    }, [currentRelativeTeamUrl]);\n\n    return (\n\n        <div className='DraftPanelBody post'>\n            <div className='DraftPanelBody__left post__img'>\n                <ProfilePicture\n                    status={status}\n                    channelId={channelId}\n                    username={username}\n                    userId={userId}\n                    size={'md'}\n                    src={imageURLForUser(userId)}\n                />\n            </div>\n            <div\n                onClick={handleClick}\n                className='post__content'\n            >\n                <div className='DraftPanelBody__right'>\n                    <div className='post__header'>\n                        <strong>{displayName}</strong>\n                        {priority && (\n                            <PriorityLabels\n                                canRemove={false}\n                                padding='0 0 0 8px'\n                                hasError={false}\n                                persistentNotifications={priority.persistent_notifications}\n                                priority={priority.priority}\n                                requestedAck={priority.requested_ack}\n                            />\n                        )}\n                    </div>\n                    <div className='post__body'>\n                        <Markdown\n                            options={OPTIONS}\n                            message={message}\n                        />\n                    </div>\n                    {(fileInfos.length > 0 || uploadsInProgress?.length > 0) && (\n                        <FilePreview\n                            fileInfos={fileInfos}\n                            uploadsInProgress={uploadsInProgress}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PanelBody;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport cn from 'classnames';\nimport React from 'react';\nimport type {ComponentProps} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {SyncIcon} from '@mattermost/compass-icons/components';\n\nimport Timestamp from 'components/timestamp';\nimport Tag from 'components/widgets/tag/tag';\nimport WithTooltip from 'components/with_tooltip';\n\nimport './panel_header.scss';\n\nconst TIMESTAMP_PROPS: Partial<ComponentProps<typeof Timestamp>> = {\n    day: 'numeric',\n    useSemanticOutput: false,\n    useTime: false,\n    units: ['now', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n};\n\ntype Props = {\n    actions: React.ReactNode;\n    hover: boolean;\n    timestamp: number;\n    remote: boolean;\n    title: React.ReactNode;\n};\n\nfunction PanelHeader({actions, hover, timestamp, remote, title}: Props) {\n    return (\n        <header className='PanelHeader'>\n            <div className='PanelHeader__left'>{title}</div>\n            <div className='PanelHeader__right'>\n                <div className={cn('PanelHeader__actions', {show: hover})}>\n                    {actions}\n                </div>\n                <div className={cn('PanelHeader__info', {hide: hover})}>\n                    {remote && (\n                        <div className='PanelHeader__sync-icon'>\n                            <WithTooltip\n                                id='drafts-sync-tooltip'\n                                placement='top'\n                                title={\n                                    <FormattedMessage\n                                        id='drafts.info.sync'\n                                        defaultMessage='Updated from another device'\n                                    />\n                                }\n                            >\n                                <SyncIcon size={18}/>\n                            </WithTooltip>\n                        </div>\n                    )}\n                    <div className='PanelHeader__timestamp'>\n                        {Boolean(timestamp) && (\n                            <Timestamp\n                                value={new Date(timestamp)}\n                                {...TIMESTAMP_PROPS}\n                            />\n                        )}\n                    </div>\n                    <Tag\n                        variant={'danger'}\n                        uppercase={true}\n                        text={'draft'}\n                    />\n                </div>\n            </div>\n        </header>\n    );\n}\n\nexport default PanelHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useHistory} from 'react-router-dom';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Post, PostMetadata} from '@mattermost/types/posts';\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {createPost} from 'actions/post_actions';\nimport {removeDraft} from 'actions/views/drafts';\nimport {openModal} from 'actions/views/modals';\n\nimport PersistNotificationConfirmModal from 'components/persist_notification_confirm_modal';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {hasRequestedPersistentNotifications, specialMentionsInText} from 'utils/post_utils';\n\nimport type {PostDraft} from 'types/store/draft';\n\nimport DraftActions from '../draft_actions';\nimport DraftTitle from '../draft_title';\nimport Panel from '../panel/panel';\nimport PanelBody from '../panel/panel_body';\nimport Header from '../panel/panel_header';\n\ntype Props = {\n    channel?: Channel;\n    channelUrl: string;\n    displayName: string;\n    draftId: string;\n    id: Channel['id'];\n    postPriorityEnabled: boolean;\n    status: UserStatus['status'];\n    type: 'channel' | 'thread';\n    user: UserProfile;\n    value: PostDraft;\n    isRemote?: boolean;\n}\n\nfunction ChannelDraft({\n    channel,\n    channelUrl,\n    displayName,\n    draftId,\n    postPriorityEnabled,\n    status,\n    type,\n    user,\n    value,\n    isRemote,\n    id: channelId,\n}: Props) {\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const handleOnEdit = useCallback(() => {\n        history.push(channelUrl);\n    }, [history, channelUrl]);\n\n    const handleOnDelete = useCallback((id: string) => {\n        dispatch(removeDraft(id, channelId));\n    }, [dispatch, channelId]);\n\n    const doSubmit = useCallback((id: string, post: Post) => {\n        dispatch(createPost(post, value.fileInfos));\n        dispatch(removeDraft(id, channelId));\n        history.push(channelUrl);\n    }, [dispatch, history, value.fileInfos, channelId, channelUrl]);\n\n    const showPersistNotificationModal = useCallback((id: string, post: Post) => {\n        if (!channel) {\n            return;\n        }\n\n        dispatch(openModal({\n            modalId: ModalIdentifiers.PERSIST_NOTIFICATION_CONFIRM_MODAL,\n            dialogType: PersistNotificationConfirmModal,\n            dialogProps: {\n                message: post.message,\n                channelType: channel.type,\n                specialMentions: specialMentionsInText(post.message),\n                onConfirm: () => doSubmit(id, post),\n            },\n        }));\n    }, [channel, dispatch, doSubmit]);\n\n    const handleOnSend = useCallback(async (id: string) => {\n        const post = {} as Post;\n        post.file_ids = [];\n        post.message = value.message;\n        post.props = value.props || {};\n        post.user_id = user.id;\n        post.channel_id = value.channelId;\n        post.metadata = (value.metadata || {}) as PostMetadata;\n\n        if (post.message.trim().length === 0 && value.fileInfos.length === 0) {\n            return;\n        }\n\n        if (postPriorityEnabled && hasRequestedPersistentNotifications(value?.metadata?.priority)) {\n            showPersistNotificationModal(id, post);\n            return;\n        }\n        doSubmit(id, post);\n    }, [doSubmit, postPriorityEnabled, value, user.id, showPersistNotificationModal]);\n\n    if (!channel) {\n        return null;\n    }\n\n    return (\n        <Panel onClick={handleOnEdit}>\n            {({hover}) => (\n                <>\n                    <Header\n                        hover={hover}\n                        actions={(\n                            <DraftActions\n                                channelDisplayName={channel.display_name}\n                                channelType={channel.type}\n                                channelName={channel.name}\n                                userId={user.id}\n                                draftId={draftId}\n                                onDelete={handleOnDelete}\n                                onEdit={handleOnEdit}\n                                onSend={handleOnSend}\n                            />\n                        )}\n                        title={(\n                            <DraftTitle\n                                channel={channel}\n                                type={type}\n                                userId={user.id}\n                            />\n                        )}\n                        timestamp={value.updateAt}\n                        remote={isRemote || false}\n                    />\n                    <PanelBody\n                        channelId={channelId}\n                        displayName={displayName}\n                        fileInfos={value.fileInfos}\n                        message={value.message}\n                        status={status}\n                        priority={value.metadata?.priority}\n                        uploadsInProgress={value.uploadsInProgress}\n                        userId={user.id}\n                        username={user.username}\n                    />\n                </>\n            )}\n        </Panel>\n    );\n}\n\nexport default memo(ChannelDraft);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {makeGetChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {isPostPriorityEnabled} from 'mattermost-redux/selectors/entities/posts';\nimport {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getChannelURL} from 'selectors/urls';\n\nimport type {GlobalState} from 'types/store';\n\nimport ChannelDraft from './channel_draft';\n\ntype OwnProps = {\n    id: string;\n}\n\nfunction makeMapStateToProps() {\n    const getChannel = makeGetChannel();\n\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const channel = getChannel(state, ownProps);\n\n        const teamId = getCurrentTeamId(state);\n        const channelUrl = channel ? getChannelURL(state, channel, teamId) : '';\n\n        return {\n            channel,\n            channelUrl,\n            postPriorityEnabled: isPostPriorityEnabled(state),\n        };\n    };\n}\nexport default connect(makeMapStateToProps)(ChannelDraft);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, useMemo, useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\n\nimport type {Channel} from '@mattermost/types/channels';\nimport type {Post} from '@mattermost/types/posts';\nimport type {UserThread, UserThreadSynthetic} from '@mattermost/types/threads';\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {getPost} from 'mattermost-redux/actions/posts';\n\nimport {makeOnSubmit} from 'actions/views/create_comment';\nimport {removeDraft} from 'actions/views/drafts';\nimport {selectPost} from 'actions/views/rhs';\n\nimport type {PostDraft} from 'types/store/draft';\n\nimport DraftActions from '../draft_actions';\nimport DraftTitle from '../draft_title';\nimport Panel from '../panel/panel';\nimport PanelBody from '../panel/panel_body';\nimport Header from '../panel/panel_header';\n\ntype Props = {\n    channel?: Channel;\n    displayName: string;\n    draftId: string;\n    rootId: UserThread['id'] | UserThreadSynthetic['id'];\n    status: UserStatus['status'];\n    thread?: UserThread | UserThreadSynthetic;\n    type: 'channel' | 'thread';\n    user: UserProfile;\n    value: PostDraft;\n    isRemote?: boolean;\n}\n\nfunction ThreadDraft({\n    channel,\n    displayName,\n    draftId,\n    rootId,\n    status,\n    thread,\n    type,\n    user,\n    value,\n    isRemote,\n}: Props) {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (!thread?.id) {\n            dispatch(getPost(rootId));\n        }\n    }, [thread?.id]);\n\n    const onSubmit = useMemo(() => {\n        if (thread?.id) {\n            return makeOnSubmit(value.channelId, thread.id, '');\n        }\n\n        return () => Promise.resolve({data: true});\n    }, [value.channelId, thread?.id]);\n\n    const handleOnDelete = useCallback((id: string) => {\n        dispatch(removeDraft(id, value.channelId, rootId));\n    }, [value.channelId, rootId, dispatch]);\n\n    const handleOnEdit = useCallback(() => {\n        dispatch(selectPost({id: rootId, channel_id: value.channelId} as Post));\n    }, [value.channelId, dispatch, rootId]);\n\n    const handleOnSend = useCallback(async (id: string) => {\n        await dispatch(onSubmit(value));\n\n        handleOnDelete(id);\n        handleOnEdit();\n    }, [value, onSubmit, dispatch, handleOnDelete, handleOnEdit]);\n\n    if (!thread || !channel) {\n        return null;\n    }\n\n    return (\n        <Panel onClick={handleOnEdit}>\n            {({hover}) => (\n                <>\n                    <Header\n                        hover={hover}\n                        actions={(\n                            <DraftActions\n                                channelDisplayName={channel.display_name}\n                                channelName={channel.name}\n                                channelType={channel.type}\n                                userId={user.id}\n                                draftId={draftId}\n                                onDelete={handleOnDelete}\n                                onEdit={handleOnEdit}\n                                onSend={handleOnSend}\n                            />\n                        )}\n                        title={(\n                            <DraftTitle\n                                type={type}\n                                channel={channel}\n                                userId={user.id}\n                            />\n                        )}\n                        timestamp={value.updateAt}\n                        remote={isRemote || false}\n                    />\n                    <PanelBody\n                        channelId={channel.id}\n                        displayName={displayName}\n                        fileInfos={value.fileInfos}\n                        message={value.message}\n                        status={status}\n                        uploadsInProgress={value.uploadsInProgress}\n                        userId={user.id}\n                        username={user.username}\n                    />\n                </>\n            )}\n        </Panel>\n    );\n}\n\nexport default memo(ThreadDraft);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {makeGetChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getPost} from 'mattermost-redux/selectors/entities/posts';\nimport {makeGetThreadOrSynthetic} from 'mattermost-redux/selectors/entities/threads';\n\nimport type {GlobalState} from 'types/store';\nimport type {PostDraft} from 'types/store/draft';\n\nimport ThreadDraft from './thread_draft';\n\ntype OwnProps = {\n    id: string;\n    value: PostDraft;\n}\n\nfunction makeMapStatetoProps() {\n    const getThreadOrSynthetic = makeGetThreadOrSynthetic();\n    const getChannel = makeGetChannel();\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const channel = getChannel(state, {id: ownProps.value.channelId});\n        const post = getPost(state, ownProps.id);\n\n        let thread;\n        if (post) {\n            thread = getThreadOrSynthetic(state, post);\n        }\n\n        return {\n            channel,\n            thread,\n        };\n    };\n}\n\nexport default connect(makeMapStatetoProps)(ThreadDraft);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo} from 'react';\n\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport type {Draft} from 'selectors/drafts';\n\nimport ChannelDraft from './channel_draft';\nimport ThreadDraft from './thread_draft';\n\ntype Props = {\n    user: UserProfile;\n    status: UserStatus['status'];\n    displayName: string;\n    draft: Draft;\n    isRemote?: boolean;\n}\n\nfunction DraftRow({draft, user, status, displayName, isRemote}: Props) {\n    switch (draft.type) {\n    case 'channel':\n        return (\n            <ChannelDraft\n                {...draft}\n                draftId={String(draft.key)}\n                user={user}\n                status={status}\n                displayName={displayName}\n                isRemote={isRemote}\n            />\n        );\n    case 'thread':\n        return (\n            <ThreadDraft\n                {...draft}\n                rootId={draft.id}\n                draftId={String(draft.key)}\n                user={user}\n                status={status}\n                displayName={displayName}\n                isRemote={isRemote}\n            />\n        );\n    default:\n        return null;\n    }\n}\n\nexport default memo(DraftRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default (\n    <svg\n        width='100%'\n        height='auto'\n        viewBox='0 224 724 290'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n        xmlnsXlink='http://www.w3.org/1999/xlink'\n    >\n        <path\n            d='M480.697 224.728H241.365C236.979 224.713 232.633 225.56 228.575 227.222C224.517 228.883 220.827 231.325 217.715 234.41C214.603 237.494 212.131 241.16 210.438 245.198C208.746 249.236 207.868 253.568 207.853 257.944V409.732C207.868 414.108 208.746 418.44 210.438 422.478C212.131 426.516 214.603 430.182 217.715 433.266C220.827 436.351 224.517 438.793 228.575 440.454C232.633 442.116 236.979 442.963 241.365 442.948H276.686V499.766L329.666 442.948H480.612C484.998 442.963 489.344 442.116 493.402 440.454C497.46 438.793 501.15 436.351 504.262 433.266C507.374 430.182 509.847 426.516 511.539 422.478C513.231 418.44 514.109 414.108 514.124 409.732V257.944C514.094 249.12 510.558 240.667 504.292 234.44C498.026 228.213 489.54 224.72 480.697 224.728Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='M329.667 442.948H480.613C484.999 442.963 489.345 442.116 493.403 440.454C497.46 438.793 501.151 436.35 504.262 433.266C507.374 430.182 509.847 426.516 511.539 422.478C513.231 418.44 514.11 414.108 514.125 409.732V317.582C514.125 317.582 503.585 402.795 501.692 410.295C499.799 417.796 496.041 429.019 478.239 430.88C460.438 432.741 329.667 442.948 329.667 442.948Z'\n            fill='#CC8F00'\n        />\n        <path\n            d='M279.284 312.14C283.548 312.14 287.717 313.401 291.262 315.766C294.808 318.13 297.571 321.49 299.203 325.421C300.835 329.352 301.262 333.678 300.43 337.852C299.598 342.025 297.544 345.859 294.529 348.868C291.514 351.876 287.673 353.926 283.49 354.756C279.308 355.586 274.973 355.16 271.034 353.531C267.094 351.903 263.727 349.145 261.358 345.607C258.989 342.069 257.725 337.91 257.725 333.654C257.721 330.828 258.276 328.029 259.358 325.417C260.44 322.805 262.028 320.431 264.031 318.433C266.034 316.434 268.412 314.85 271.029 313.77C273.647 312.69 276.452 312.136 279.284 312.14Z'\n            fill='white'\n        />\n        <path\n            d='M361.033 312.14C365.297 312.14 369.465 313.401 373.011 315.766C376.556 318.13 379.32 321.49 380.951 325.421C382.583 329.352 383.01 333.678 382.178 337.852C381.346 342.025 379.293 345.859 376.278 348.868C373.263 351.876 369.421 353.926 365.239 354.756C361.057 355.586 356.722 355.16 352.782 353.531C348.843 351.903 345.476 349.145 343.107 345.607C340.738 342.069 339.473 337.91 339.473 333.654C339.47 330.828 340.025 328.029 341.107 325.417C342.189 322.805 343.777 320.431 345.78 318.433C347.782 316.434 350.161 314.85 352.778 313.77C355.395 312.69 358.201 312.136 361.033 312.14Z'\n            fill='white'\n        />\n        <path\n            d='M442.691 312.14C446.956 312.134 451.127 313.391 454.677 315.752C458.226 318.113 460.994 321.471 462.63 325.401C464.266 329.332 464.697 333.659 463.868 337.834C463.039 342.01 460.988 345.846 457.974 348.858C454.96 351.869 451.119 353.921 446.936 354.754C442.753 355.586 438.416 355.162 434.475 353.534C430.534 351.906 427.165 349.149 424.795 345.61C422.425 342.072 421.16 337.911 421.16 333.654C421.156 330.83 421.71 328.033 422.791 325.423C423.871 322.813 425.456 320.441 427.456 318.443C429.456 316.445 431.831 314.859 434.445 313.778C437.059 312.696 439.861 312.14 442.691 312.14Z'\n            fill='white'\n        />\n        <path\n            d='M232.691 288.285C235.123 279.695 239.233 271.67 244.786 264.673C250.339 257.675 257.224 251.843 265.045 247.511C265.508 247.278 265.88 246.897 266.104 246.43C266.327 245.962 266.388 245.434 266.279 244.927C266.169 244.421 265.894 243.965 265.496 243.632C265.099 243.298 264.602 243.106 264.084 243.084C248.995 242.182 218.534 245.396 228.085 288.059C228.186 288.58 228.459 289.052 228.86 289.4C229.262 289.747 229.768 289.95 230.299 289.976C230.83 290.002 231.354 289.85 231.788 289.543C232.222 289.236 232.54 288.793 232.691 288.285Z'\n            fill='#FFD470'\n        />\n        <path\n            d='M513.716 385.932L442.894 456.745L476.241 490.111L547.064 419.298L513.716 385.932Z'\n            fill='#FFBC1F'\n        />\n        <path\n            d='M442.894 456.745L428.39 494.685L438.293 504.659L476.255 490.107L442.894 456.745Z'\n            fill='#FFE099'\n        />\n        <path\n            d='M425.845 501.271C423.868 506.43 426.516 509.147 431.742 507.152L449.702 500.32L432.681 483.299L425.845 501.271Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M504.846 394.78L442.894 456.745L453.792 467.646L515.745 405.681L504.846 394.78Z'\n            fill='#FFD470'\n        />\n        <path\n            d='M527.319 417.255L465.27 479.317L476.162 490.212L538.212 428.15L527.319 417.255Z'\n            fill='#CC8F00'\n        />\n        <path\n            d='M562.043 376.404L557.254 371.639C553.404 367.791 548.185 365.63 542.742 365.63C537.3 365.63 531.85 367.91 528 371.758L513.702 386.055L547.064 419.417L561.362 405.119C565.208 401.272 567.489 395.815 567.489 390.375C567.489 384.934 565.889 380.252 562.043 376.404Z'\n            fill='#C43133'\n        />\n        <path\n            d='M513.705 385.932L504.851 394.787L538.21 428.153L547.064 419.298L513.705 385.932Z'\n            fill='#A4A9B7'\n        />\n        <path\n            d='M517.106 389.339L508.255 398.191L534.807 424.748L543.657 415.896L517.106 389.339Z'\n            fill='#DDDFE4'\n        />\n    </svg>\n);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport type {UserProfile, UserStatus} from '@mattermost/types/users';\n\nimport {selectLhsItem} from 'actions/views/lhs';\nimport {suppressRHS, unsuppressRHS} from 'actions/views/rhs';\nimport type {Draft} from 'selectors/drafts';\n\nimport NoResultsIndicator from 'components/no_results_indicator';\nimport Header from 'components/widgets/header';\n\nimport {LhsItemType, LhsPage} from 'types/store/lhs';\n\nimport DraftRow from './draft_row';\nimport DraftsIllustration from './drafts_illustration';\n\nimport './drafts.scss';\n\ntype Props = {\n    drafts: Draft[];\n    user: UserProfile;\n    displayName: string;\n    status: UserStatus['status'];\n    draftRemotes: Record<string, boolean>;\n}\n\nfunction Drafts({\n    displayName,\n    drafts,\n    draftRemotes,\n    status,\n    user,\n}: Props) {\n    const dispatch = useDispatch();\n    const {formatMessage} = useIntl();\n\n    useEffect(() => {\n        dispatch(selectLhsItem(LhsItemType.Page, LhsPage.Drafts));\n        dispatch(suppressRHS);\n\n        return () => {\n            dispatch(unsuppressRHS);\n        };\n    }, []);\n\n    return (\n        <div\n            id='app-content'\n            className='Drafts app__content'\n        >\n            <Header\n                level={2}\n                className='Drafts__header'\n                heading={formatMessage({\n                    id: 'drafts.heading',\n                    defaultMessage: 'Drafts',\n                })}\n                subtitle={formatMessage({\n                    id: 'drafts.subtitle',\n                    defaultMessage: 'Any messages you\\'ve started will show here',\n                })}\n            />\n            <div className='Drafts__main'>\n                {drafts.map((d) => (\n                    <DraftRow\n                        key={d.key}\n                        displayName={displayName}\n                        draft={d}\n                        isRemote={draftRemotes?.[d.key]}\n                        user={user}\n                        status={status}\n                    />\n                ))}\n                {drafts.length === 0 && (\n                    <NoResultsIndicator\n                        expanded={true}\n                        iconGraphic={DraftsIllustration}\n                        title={formatMessage({\n                            id: 'drafts.empty.title',\n                            defaultMessage: 'No drafts at the moment',\n                        })}\n                        subtitle={formatMessage({\n                            id: 'drafts.empty.subtitle',\n                            defaultMessage: 'Any messages you’ve started will show here.',\n                        })}\n                    />\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default memo(Drafts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getTeammateNameDisplaySetting} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser, getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\nimport {displayUsername} from 'mattermost-redux/utils/user_utils';\n\nimport {makeGetDrafts} from 'selectors/drafts';\n\nimport type {GlobalState} from 'types/store';\n\nimport Drafts from './drafts';\n\nfunction makeMapStateToProps() {\n    const getDrafts = makeGetDrafts();\n    return (state: GlobalState) => {\n        const user = getCurrentUser(state);\n        const status = getStatusForUserId(state, user.id);\n\n        return {\n            displayName: displayUsername(user, getTeammateNameDisplaySetting(state)),\n            drafts: getDrafts(state),\n            draftRemotes: state.views.drafts.remotes,\n            status,\n            user,\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(Drafts);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {Fragment} from 'react';\nimport type {ReactNode, HTMLAttributes} from 'react';\n\nimport './header.scss';\n\ntype Props = {\n    heading: ReactNode;\n    level?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n    subtitle?: ReactNode;\n    right?: ReactNode;\n};\n\ntype HeadingTag = keyof Pick<JSX.IntrinsicElements, 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'>;\n\nconst Headings: Array<typeof Fragment | HeadingTag> = [Fragment, 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nconst Header = ({\n    level = 0,\n    heading,\n    subtitle,\n    right,\n    ...attrs\n}: Props & HTMLAttributes<HTMLElement>) => {\n    const H = Headings[level];\n    return (\n        <header\n            {...attrs}\n            className={classNames('Header', attrs.className)}\n        >\n            <div className='left'>\n                <H>{heading}</H>\n                {subtitle ? <p>{subtitle}</p> : null}\n            </div>\n            <div className='spacer'/>\n            {right}\n        </header>\n    );\n};\n\nexport default Header;\n"],"names":["Action","_ref","name","icon","onClick","id","tooltipText","React","className","WithTooltip","concat","placement","title","classNames","propTypes","_pt","isRequired","DeleteDraftModal","displayName","onExited","onConfirm","formatMessage","useIntl","defaultMessage","confirmButtonText","message","FormattedMessage","values","strong","chunk","GenericModal","handleCancel","handleConfirm","modalHeaderText","compassDesign","isDeleteModal","autoFocusConfirmButton","SendDraftModal","DraftActions","draftId","onDelete","onEdit","onSend","dispatch","useDispatch","handleDelete","useCallback","openModal","modalId","ModalIdentifiers","dialogType","dialogProps","handleSend","memo","connect","state","ownProps","channelDisplayName","userId","channelName","channelType","teammateId","teammate","Constants","getUserIdFromChannelName","getUser","displayUsername","getTeammateNameDisplaySetting","DraftTitle","membersCount","selfDraft","type","useEffect","getMissingProfilesByIds","you","Avatar","size","username","url","imageURLForUser","last_picture_update","span","chunks","getMemberCount","makeGetGmChannelMemberCount","channel","display_name","isEligibleForClick","makeIsEligibleForClick","Panel","children","hover","setHover","useState","onMouseOver","handleMouseOver","e","onMouseLeave","handleMouseLeave","role","OPTIONS","disableGroupHighlight","mentionHighlight","PanelBody","channelId","fileInfos","priority","status","uploadsInProgress","currentRelativeTeamUrl","useSelector","getCurrentRelativeTeamUrl","handleClick","handleFormattedTextClick","ProfilePicture","src","PriorityLabels","canRemove","padding","hasError","persistentNotifications","persistent_notifications","requestedAck","requested_ack","Markdown","options","length","FilePreview","TIMESTAMP_PROPS","day","useSemanticOutput","useTime","units","actions","timestamp","remote","cn","show","hide","SyncIcon","Boolean","Timestamp","Object","assign","value","Date","Tag","variant","uppercase","text","ChannelDraft","channelUrl","postPriorityEnabled","user","isRemote","history","useHistory","handleOnEdit","push","handleOnDelete","removeDraft","doSubmit","post","createPost","showPersistNotificationModal","PersistNotificationConfirmModal","specialMentions","specialMentionsInText","handleOnSend","async","_value$metadata","props","user_id","channel_id","metadata","trim","hasRequestedPersistentNotifications","_ref2","_value$metadata2","Header","updateAt","getChannel","makeGetChannel","teamId","getCurrentTeamId","getChannelURL","isPostPriorityEnabled","ThreadDraft","rootId","thread","getPost","onSubmit","useMemo","makeOnSubmit","Promise","resolve","data","selectPost","getThreadOrSynthetic","makeGetThreadOrSynthetic","DraftRow","draft","String","key","width","height","viewBox","fill","xmlns","xmlnsXlink","d","Drafts","drafts","draftRemotes","selectLhsItem","LhsItemType","LhsPage","suppressRHS","unsuppressRHS","level","heading","subtitle","map","NoResultsIndicator","expanded","iconGraphic","DraftsIllustration","getDrafts","makeGetDrafts","getCurrentUser","getStatusForUserId","views","remotes","Headings","Fragment","right","attrs","_objectWithoutProperties","_excluded","H"],"sourceRoot":""}