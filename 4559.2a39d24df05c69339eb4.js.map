{"version":3,"file":"4559.2a39d24df05c69339eb4.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/common/svg_images_components/laptop_alert_svg.tsx","webpack://mattermost-webapp/./src/components/widgets/inputs/check/index.tsx","webpack://mattermost-webapp/./src/components/signup/signup.tsx","webpack://mattermost-webapp/./src/utils/password.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n}\n\nconst Svg = (props: SvgProps) => (\n    <svg\n        width={props.width?.toString() || '246'}\n        height={props.height?.toString() || '182'}\n        viewBox='0 0 246 182'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            d='M22.7549 148.149H223.245C224.72 148.128 226.127 147.512 227.158 146.436C228.189 145.359 228.759 143.911 228.744 142.407V5.84874C228.759 4.34474 228.189 2.89609 227.158 1.81987C226.127 0.743655 224.72 0.127555 223.245 0.106445H22.7549C21.2803 0.12965 19.8745 0.746388 18.8443 1.82215C17.814 2.89791 17.243 4.34537 17.2556 5.84874V142.415C17.245 143.917 17.817 145.362 18.8471 146.436C19.8771 147.51 21.2817 148.126 22.7549 148.149Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M0.638184 167.787C0.638184 174.585 6.16258 181.383 12.8629 181.383H233.145C239.458 181.383 245.362 174.601 245.362 167.787H0.638184Z'\n            fill='#24262E'\n        />\n        <path\n            d='M224.969 148.149H21.0311L0.638184 167.787H245.362L224.969 148.149Z'\n            fill='#D1D4DB'\n        />\n        <path\n            d='M218.87 149.66H27.1217L20.2764 157.968H225.723L218.87 149.66Z'\n            fill='#AFB3C0'\n        />\n        <path\n            d='M144.023 160.989H101.985L98.8296 165.521H147.17L144.023 160.989Z'\n            fill='#24262E'\n        />\n        <rect\n            width='187.319'\n            height='120.851'\n            transform='translate(29.3403 12.9468)'\n            fill='#505667'\n        />\n        <path\n            d='M88.8224 110.383C84.491 110.383 82.5285 107.261 84.4612 103.445L119.469 34.6773C121.452 30.8712 124.574 30.8712 126.516 34.6773L161.515 103.445C163.497 107.251 161.515 110.383 157.154 110.383H88.8224Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M117.497 60.1105L121.095 84.2851C121.13 84.7648 121.345 85.2136 121.697 85.5412C122.049 85.8688 122.512 86.0509 122.993 86.0509C123.474 86.0509 123.937 85.8688 124.289 85.5412C124.642 85.2136 124.857 84.7648 124.891 84.2851L128.489 60.1105C129.143 50.6845 116.833 50.6845 117.497 60.1105Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M122.988 88.6563C124.078 88.6582 125.142 88.9831 126.047 89.5898C126.952 90.1966 127.657 91.0579 128.072 92.0651C128.488 93.0722 128.596 94.18 128.382 95.2483C128.168 96.3167 127.643 97.2977 126.871 98.0674C126.1 98.8372 125.118 99.361 124.05 99.5729C122.981 99.7847 121.873 99.675 120.867 99.2576C119.861 98.8402 119 98.1339 118.395 97.2278C117.79 96.3218 117.467 95.2567 117.467 94.1672C117.467 93.4426 117.61 92.7252 117.888 92.0559C118.165 91.3867 118.572 90.7787 119.085 90.2668C119.598 89.755 120.206 89.3493 120.876 89.0729C121.546 88.7965 122.264 88.655 122.988 88.6563Z'\n            fill='#2D3039'\n        />\n        <path\n            d='M123 3.88281C123.597 3.88281 124.181 4.06002 124.678 4.392C125.175 4.72398 125.562 5.19583 125.791 5.7479C126.02 6.29996 126.08 6.90744 125.963 7.49351C125.846 8.07958 125.559 8.61792 125.136 9.04045C124.714 9.46299 124.175 9.75075 123.589 9.86732C123.003 9.9839 122.396 9.92404 121.844 9.69537C121.292 9.46669 120.82 9.07947 120.488 8.58263C120.156 8.08578 119.979 7.50164 119.979 6.90409C119.979 6.1028 120.297 5.33432 120.863 4.76772C121.43 4.20112 122.199 3.88281 123 3.88281Z'\n            fill='#DDDFE4'\n        />\n        <path\n            d='M140.405 176.851H104.815C103.587 176.851 100.34 176.851 100.34 172.319H144.904C144.904 176.851 141.562 176.851 140.405 176.851Z'\n            fill='var(--center-channel-color)'\n        />\n    </svg>\n);\n\nexport default Svg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport './check.scss';\n\ntype Props = {\n    id: string;\n    ariaLabel: string;\n    name: string;\n    text: ReactNode;\n    onChange: () => void;\n    checked: boolean;\n}\n\nfunction CheckInput(props: Props) {\n    const {id, ariaLabel, text, ...rest} = props;\n\n    return (\n        <div className='check-input'>\n            <input\n                {...rest}\n                aria-label={ariaLabel}\n                data-testid={id}\n                type='checkbox'\n            />\n            <span className='text'>{text}</span>\n        </div>\n    );\n}\n\nexport default CheckInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport classNames from \"classnames\";\nimport throttle from \"lodash/throttle\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport type { FocusEvent } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useLocation, useHistory, Route } from \"react-router-dom\";\n\nimport type { ServerError } from \"@mattermost/types/errors\";\nimport type { UserProfile } from \"@mattermost/types/users\";\n\nimport { getTeamInviteInfo } from \"mattermost-redux/actions/teams\";\nimport { createUser, loadMe } from \"mattermost-redux/actions/users\";\nimport { Client4 } from \"mattermost-redux/client\";\nimport {\n    getConfig,\n    getLicense,\n    getPasswordConfig,\n} from \"mattermost-redux/selectors/entities/general\";\nimport { getIsOnboardingFlowEnabled } from \"mattermost-redux/selectors/entities/preferences\";\nimport { getCurrentUserId } from \"mattermost-redux/selectors/entities/users\";\nimport { isEmail } from \"mattermost-redux/utils/helpers\";\n\nimport { redirectUserToDefaultTeam } from \"actions/global_actions\";\nimport { removeGlobalItem, setGlobalItem } from \"actions/storage\";\nimport { addUserToTeamFromInvite } from \"actions/team_actions\";\nimport { trackEvent } from \"actions/telemetry_actions.jsx\";\nimport { loginById } from \"actions/views/login\";\nimport { getGlobalItem } from \"selectors/storage\";\n\nimport AlertBanner from \"components/alert_banner\";\nimport type { ModeType, AlertBannerProps } from \"components/alert_banner\";\nimport LaptopAlertSVG from \"components/common/svg_images_components/laptop_alert_svg\";\nimport DesktopAuthToken from \"components/desktop_auth_token\";\nimport ExternalLoginButton from \"components/external_login_button/external_login_button\";\nimport type { ExternalLoginButtonType } from \"components/external_login_button/external_login_button\";\nimport FormattedMarkdownMessage from \"components/formatted_markdown_message\";\nimport AlternateLinkLayout from \"components/header_footer_route/content_layouts/alternate_link\";\nimport ColumnLayout from \"components/header_footer_route/content_layouts/column\";\nimport type { CustomizeHeaderType } from \"components/header_footer_route/header_footer_route\";\nimport LoadingScreen from \"components/loading_screen\";\nimport TypingAnimation from \"components/login/typing_animation\";\nimport Markdown from \"components/markdown\";\nimport SaveButton from \"components/save_button\";\nimport LockIcon from \"components/widgets/icons/lock_icon\";\nimport LoginGitlabIcon from \"components/widgets/icons/login_gitlab_icon\";\nimport LoginGoogleIcon from \"components/widgets/icons/login_google_icon\";\nimport LoginOffice365Icon from \"components/widgets/icons/login_office_365_icon\";\nimport LoginOpenIDIcon from \"components/widgets/icons/login_openid_icon\";\nimport CheckInput from \"components/widgets/inputs/check\";\nimport Input, { SIZE } from \"components/widgets/inputs/input/input\";\nimport type { CustomMessageInputType } from \"components/widgets/inputs/input/input\";\nimport PasswordInput from \"components/widgets/inputs/password_input/password_input\";\n\nimport Github from \"images/icons/github.png\";\nimport Google from \"images/icons/google.png\";\nimport linkedin from \"images/icons/linkedin.png\";\nimport macImage from \"images/icons/mac.png\";\nimport { Constants, ItemStatus, ValidationErrors } from \"utils/constants\";\nimport { isValidPassword } from \"utils/password\";\nimport { isDesktopApp } from \"utils/user_agent\";\nimport {\n    isValidUsername,\n    getRoleFromTrackFlow,\n    getMediumFromTrackFlow,\n} from \"utils/utils\";\n\nimport type { GlobalState } from \"types/store\";\n\nimport \"./signup.scss\";\n\nconst MOBILE_SCREEN_WIDTH = 1200;\n\ntype SignupProps = {\n    onCustomizeHeader?: CustomizeHeaderType;\n};\n\nconst Signup = ({ onCustomizeHeader }: SignupProps) => {\n    const intl = useIntl();\n    const { formatMessage } = intl;\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { search } = useLocation();\n\n    const params = new URLSearchParams(search);\n    const token = params.get(\"t\") ?? \"\";\n    const inviteId = params.get(\"id\") ?? \"\";\n    const data = params.get(\"d\");\n    const parsedData: Record<string, string> = data ? JSON.parse(data) : {};\n    const {\n        email: parsedEmail,\n        name: parsedTeamName,\n        reminder_interval: reminderInterval,\n    } = parsedData;\n\n    const config = useSelector(getConfig);\n    const {\n        EnableOpenServer,\n        EnableUserCreation,\n        NoAccounts,\n        EnableSignUpWithEmail,\n        EnableSignUpWithGitLab,\n        EnableSignUpWithGoogle,\n        EnableSignUpWithOffice365,\n        EnableSignUpWithOpenId,\n        EnableLdap,\n        EnableSaml,\n        SamlLoginButtonText,\n        LdapLoginFieldName,\n        SiteName,\n        CustomDescriptionText,\n        GitLabButtonText,\n        GitLabButtonColor,\n        OpenIdButtonText,\n        OpenIdButtonColor,\n        EnableCustomBrand,\n        CustomBrandText,\n        TermsOfServiceLink,\n        PrivacyPolicyLink,\n    } = config;\n    const { IsLicensed } = useSelector(getLicense);\n    const loggedIn = Boolean(useSelector(getCurrentUserId));\n    const onboardingFlowEnabled = useSelector(getIsOnboardingFlowEnabled);\n    const usedBefore = useSelector((state: GlobalState) =>\n        !inviteId && !loggedIn && token\n            ? getGlobalItem(state, token, null)\n            : undefined\n    );\n\n    const emailInput = useRef<HTMLInputElement>(null);\n    const nameInput = useRef<HTMLInputElement>(null);\n    const passwordInput = useRef<HTMLInputElement>(null);\n\n    const isLicensed = IsLicensed === \"true\";\n    const enableOpenServer = EnableOpenServer === \"true\";\n    const enableUserCreation = EnableUserCreation === \"true\";\n    const noAccounts = NoAccounts === \"true\";\n    const enableSignUpWithEmail =\n        enableUserCreation && EnableSignUpWithEmail === \"true\";\n    const enableSignUpWithGitLab =\n        enableUserCreation && EnableSignUpWithGitLab === \"true\";\n    const enableSignUpWithGoogle =\n        enableUserCreation && EnableSignUpWithGoogle === \"true\";\n    const enableSignUpWithOffice365 =\n        enableUserCreation && EnableSignUpWithOffice365 === \"true\";\n    const enableSignUpWithOpenId =\n        enableUserCreation && EnableSignUpWithOpenId === \"true\";\n    const enableLDAP = EnableLdap === \"true\";\n    const enableSAML = EnableSaml === \"true\";\n    const enableCustomBrand = EnableCustomBrand === \"true\";\n\n    const noOpenServer =\n        !inviteId &&\n        !token &&\n        !enableOpenServer &&\n        !noAccounts &&\n        !enableUserCreation;\n\n    const [email, setEmail] = useState(parsedEmail ?? \"\");\n    const [name, setName] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [loading, setLoading] = useState(Boolean(inviteId));\n    const [isWaiting, setIsWaiting] = useState(false);\n    const [emailError, setEmailError] = useState(\"\");\n    const [nameError, setNameError] = useState(\"\");\n    const [passwordError, setPasswordError] = useState(\"\");\n    const [brandImageError, setBrandImageError] = useState(false);\n    const [serverError, setServerError] = useState(\"\");\n    const [teamName, setTeamName] = useState(parsedTeamName ?? \"\");\n    const [alertBanner, setAlertBanner] = useState<AlertBannerProps | null>(\n        null\n    );\n    const [isMobileView, setIsMobileView] = useState(false);\n    const [isChecked, setIsChecked] = useState(false);\n\n    const handleCheckboxChange = () => {\n        setIsChecked(!isChecked);\n    };\n\n    const enableExternalSignup =\n        enableSignUpWithGitLab ||\n        enableSignUpWithOffice365 ||\n        enableSignUpWithGoogle ||\n        enableSignUpWithOpenId ||\n        enableLDAP ||\n        enableSAML;\n    const hasError = Boolean(\n        emailError || nameError || passwordError || serverError || alertBanner\n    );\n    const canSubmit =\n        Boolean(email && name && password) && !hasError && !loading;\n    const passwordConfig = useSelector(getPasswordConfig);\n    const { error: passwordInfo } = isValidPassword(\"\", passwordConfig, intl);\n\n    const [desktopLoginLink, setDesktopLoginLink] = useState(\"\");\n\n    const wordsArray = [\n        \"solve.\",\n        \"change.\",\n        \"adapt.\",\n        \"wonder.\",\n        \"believe.\",\n        \"question.\",\n        \"evolve.\",\n        \"challenge.\",\n        \"create.\",\n        \"grow.\",\n        \"connect.\",\n        \"explore.\",\n        \"see.\",\n        \"choose.\",\n        \"defy.\",\n        \"rebel.\",\n        \"innovate.\",\n        \"imagine.\",\n        \"progress.\",\n        \"dream.\",\n        \"influence.\",\n        \"transform.\",\n        \"decide.\",\n        \"empower.\",\n        \"amplify.\",\n        \"know.\",\n        \"move.\",\n        \"build.\",\n        \"connect.\",\n        \"support.\",\n        \"collaborate.\",\n        \"accelerate.\",\n        \"discover.\",\n        \"lead.\",\n        \"inspire.\",\n        \"push.\",\n        \"optimize.\",\n        \"love.\",\n        \"advance.\",\n        \"feel.\",\n        \"forgive.\",\n        \"design.\",\n        \"reflect.\",\n        \"develop.\",\n        \"improve.\",\n        \"become.\",\n    ];\n    const getExternalSignupOptions = () => {\n        const externalLoginOptions: ExternalLoginButtonType[] = [];\n\n        if (!enableExternalSignup) {\n            return externalLoginOptions;\n        }\n\n        if (enableSignUpWithGitLab) {\n            const url = `${Client4.getOAuthRoute()}/gitlab/signup${search}`;\n            externalLoginOptions.push({\n                id: \"gitlab\",\n                url,\n                icon: <LoginGitlabIcon />,\n                label:\n                    GitLabButtonText ||\n                    formatMessage({\n                        id: \"login.gitlab\",\n                        defaultMessage: \"GitLab\",\n                    }),\n                style: {\n                    color: GitLabButtonColor,\n                    borderColor: GitLabButtonColor,\n                },\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithGoogle) {\n            const url = `${Client4.getOAuthRoute()}/google/signup${search}`;\n            externalLoginOptions.push({\n                id: \"google\",\n                url,\n                icon: <LoginGoogleIcon />,\n                label: formatMessage({\n                    id: \"login.google\",\n                    defaultMessage: \"Google\",\n                }),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithOffice365) {\n            const url = `${Client4.getOAuthRoute()}/office365/signup${search}`;\n            externalLoginOptions.push({\n                id: \"office365\",\n                url,\n                icon: <LoginOffice365Icon />,\n                label: formatMessage({\n                    id: \"login.office365\",\n                    defaultMessage: \"Entra ID\",\n                }),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableSignUpWithOpenId) {\n            const url = `${Client4.getOAuthRoute()}/openid/signup${search}`;\n            externalLoginOptions.push({\n                id: \"openid\",\n                url,\n                icon: <LoginOpenIDIcon />,\n                label:\n                    OpenIdButtonText ||\n                    formatMessage({\n                        id: \"login.openid\",\n                        defaultMessage: \"Open ID\",\n                    }),\n                style: {\n                    color: OpenIdButtonColor,\n                    borderColor: OpenIdButtonColor,\n                },\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (isLicensed && enableLDAP) {\n            const newSearchParam = new URLSearchParams(search);\n            newSearchParam.set(\"extra\", Constants.CREATE_LDAP);\n\n            externalLoginOptions.push({\n                id: \"ldap\",\n                url: `${Client4.getUrl()}/login?${newSearchParam.toString()}`,\n                icon: <LockIcon />,\n                label:\n                    LdapLoginFieldName ||\n                    formatMessage({\n                        id: \"signup.ldap\",\n                        defaultMessage: \"AD/LDAP Credentials\",\n                    }),\n                onClick: () => {},\n            });\n        }\n\n        if (isLicensed && enableSAML) {\n            const newSearchParam = new URLSearchParams(search);\n            newSearchParam.set(\"action\", \"signup\");\n\n            const url = `${Client4.getUrl()}/login/sso/saml?${newSearchParam.toString()}`;\n            externalLoginOptions.push({\n                id: \"saml\",\n                url,\n                icon: <LockIcon />,\n                label:\n                    SamlLoginButtonText ||\n                    formatMessage({ id: \"login.saml\", defaultMessage: \"SAML\" }),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        return externalLoginOptions;\n    };\n\n    const handleHeaderBackButtonOnClick = useCallback(() => {\n        if (!noAccounts) {\n            trackEvent(\"signup_email\", \"click_back\");\n        }\n\n        history.goBack();\n    }, [noAccounts, history]);\n\n    const handleInvalidInvite = ({\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        server_error_id,\n        message,\n    }: {\n        server_error_id: string;\n        message: string;\n    }) => {\n        let errorMessage;\n\n        if (\n            server_error_id === \"store.sql_user.save.max_accounts.app_error\" ||\n            server_error_id ===\n                \"api.team.add_user_to_team_from_invite.guest.app_error\"\n        ) {\n            errorMessage = message;\n        }\n\n        setServerError(\n            errorMessage ||\n                formatMessage({\n                    id: \"signup_user_completed.invalid_invite.title\",\n                    defaultMessage: \"This invite link is invalid\",\n                })\n        );\n        setLoading(false);\n    };\n\n    const handleAddUserToTeamFromInvite = async (\n        token: string,\n        inviteId: string\n    ) => {\n        const { data: team, error } = await dispatch(\n            addUserToTeamFromInvite(token, inviteId)\n        );\n\n        if (team) {\n            history.push(\n                \"/\" + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`\n            );\n        } else if (error) {\n            handleInvalidInvite(error);\n        }\n    };\n\n    const getInviteInfo = async (inviteId: string) => {\n        const { data, error } = await dispatch(getTeamInviteInfo(inviteId));\n\n        if (data) {\n            setServerError(\"\");\n            setTeamName(data.name);\n        } else if (error) {\n            handleInvalidInvite(error);\n        }\n\n        setLoading(false);\n    };\n\n    const getAlternateLink = useCallback(\n        () => (\n            <AlternateLinkLayout\n                className=\"signup-body-alternate-link\"\n                alternateMessage={formatMessage({\n                    id: \"signup_user_completed.haveAccount\",\n                    defaultMessage: \"Already have an account?\",\n                })}\n                alternateLinkPath=\"/login\"\n                alternateLinkLabel={formatMessage({\n                    id: \"signup_user_completed.signIn\",\n                    defaultMessage: \"Log in\",\n                })}\n            />\n        ),\n        []\n    );\n\n    const onWindowResize = throttle(() => {\n        setIsMobileView(window.innerWidth < MOBILE_SCREEN_WIDTH);\n    }, 100);\n\n    const desktopExternalAuth = (href: string) => {\n        return (event: React.MouseEvent) => {\n            if (isDesktopApp()) {\n                event.preventDefault();\n\n                setDesktopLoginLink(href);\n                history.push(`/signup_user_complete/desktop${search}`);\n            }\n        };\n    };\n\n    useEffect(() => {\n        dispatch(removeGlobalItem(\"team\"));\n        trackEvent(\"signup\", \"signup_user_01_welcome\", {\n            ...getRoleFromTrackFlow(),\n            ...getMediumFromTrackFlow(),\n        });\n\n        onWindowResize();\n\n        window.addEventListener(\"resize\", onWindowResize);\n\n        if (search) {\n            if ((inviteId || token) && loggedIn) {\n                handleAddUserToTeamFromInvite(token, inviteId);\n            } else if (inviteId) {\n                getInviteInfo(inviteId);\n            } else if (loggedIn) {\n                if (onboardingFlowEnabled) {\n                    // need info about whether admin or not,\n                    // and whether admin has already completed\n                    // first tiem onboarding. Instead of fetching and orchestrating that here,\n                    // let the default root component handle it.\n                    history.push(\"/\");\n                } else {\n                    redirectUserToDefaultTeam();\n                }\n            }\n        }\n\n        return () => {\n            window.removeEventListener(\"resize\", onWindowResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (SiteName) {\n            document.title = \"Infogito\";\n        }\n    }, [SiteName]);\n\n    useEffect(() => {\n        if (onCustomizeHeader) {\n            onCustomizeHeader({\n                alternateLink: isMobileView ? getAlternateLink() : undefined,\n            });\n        }\n    }, [\n        onCustomizeHeader,\n        handleHeaderBackButtonOnClick,\n        isMobileView,\n        getAlternateLink,\n        search,\n    ]);\n\n    if (loading) {\n        return <LoadingScreen />;\n    }\n\n    const handleBrandImageError = () => {\n        setBrandImageError(true);\n    };\n\n    const onEnterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === Constants.KeyCodes.ENTER[0] && canSubmit) {\n            handleSubmit(e);\n        }\n    };\n\n    const getCardTitle = () => {\n        if (CustomDescriptionText) {\n            return CustomDescriptionText;\n        }\n\n        if (!enableSignUpWithEmail && enableExternalSignup) {\n            return formatMessage({\n                id: \"signup_user_completed.cardtitle.external\",\n                defaultMessage:\n                    \"Create your account with one of the following:\",\n            });\n        }\n\n        return formatMessage({\n            id: \"signup_user_completed.cardtitle\",\n            defaultMessage: \"Create your account\",\n        });\n    };\n\n    const getMessageSubtitle = () => {\n        if (enableCustomBrand) {\n            return CustomBrandText ? (\n                <div className=\"signup-body-custom-branding-markdown\">\n                    <Markdown\n                        message={CustomBrandText}\n                        options={{ mentionHighlight: false }}\n                    />\n                </div>\n            ) : null;\n        }\n\n        return (\n            <p className=\"signup-body-message-subtitle\">\n                {\"Welcome to the Infogito Platform.\"}\n                <br />\n                {\"Home of the \"} <strong>{\"Discovery Engine\"}</strong>\n            </p>\n        );\n    };\n\n    const handleEmailOnChange = ({\n        target: { value: email },\n    }: React.ChangeEvent<HTMLInputElement>) => {\n        setEmail(email);\n        dismissAlert();\n\n        if (emailError) {\n            setEmailError(\"\");\n        }\n    };\n\n    const handleNameOnChange = ({\n        target: { value: name },\n    }: React.ChangeEvent<HTMLInputElement>) => {\n        setName(name);\n        dismissAlert();\n\n        if (nameError) {\n            setNameError(\"\");\n        }\n    };\n\n    const handlePasswordInputOnChange = ({\n        target: { value: password },\n    }: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(password);\n        dismissAlert();\n\n        if (passwordError) {\n            setPasswordError(\"\");\n        }\n    };\n\n    const handleSignupSuccess = async (\n        user: UserProfile,\n        data: UserProfile\n    ) => {\n        trackEvent(\"signup\", \"signup_user_02_complete\", getRoleFromTrackFlow());\n\n        if (reminderInterval) {\n            trackEvent(\"signup\", `signup_from_reminder_${reminderInterval}`, {\n                user: user.id,\n            });\n        }\n\n        const redirectTo = new URLSearchParams(search).get(\"redirect_to\");\n\n        const { error } = await dispatch(loginById(data.id, user.password));\n\n        if (error) {\n            if (\n                error.server_error_id ===\n                \"api.user.login.not_verified.app_error\"\n            ) {\n                let verifyUrl =\n                    \"/should_verify_email?email=\" +\n                    encodeURIComponent(user.email);\n\n                if (teamName) {\n                    verifyUrl += \"&teamname=\" + encodeURIComponent(teamName);\n                }\n\n                if (redirectTo) {\n                    verifyUrl += \"&redirect_to=\" + redirectTo;\n                }\n\n                history.push(verifyUrl);\n            } else {\n                setServerError(error.message);\n                setIsWaiting(false);\n            }\n\n            return;\n        }\n\n        await postSignupSuccess();\n    };\n\n    const postSignupSuccess = async () => {\n        const redirectTo = new URLSearchParams(search).get(\"redirect_to\");\n\n        await dispatch(loadMe());\n\n        if (token) {\n            setGlobalItem(token, JSON.stringify({ usedBefore: true }));\n        }\n\n        if (redirectTo) {\n            history.push(redirectTo);\n        } else if (onboardingFlowEnabled) {\n            // need info about whether admin or not,\n            // and whether admin has already completed\n            // first tiem onboarding. Instead of fetching and orchestrating that here,\n            // let the default root component handle it.\n            history.push(\"/\");\n        } else {\n            redirectUserToDefaultTeam();\n        }\n    };\n\n    function sendSignUpTelemetryEvents(telemetryId: string, props?: any) {\n        trackEvent(\"signup\", telemetryId, props);\n    }\n\n    type TelemetryErrorList = {\n        errors: Array<{ field: string; rule: string }>;\n        success: boolean;\n    };\n\n    const isUserValid = () => {\n        let isValid = true;\n\n        const providedEmail = emailInput.current?.value.trim();\n        const telemetryEvents: TelemetryErrorList = {\n            errors: [],\n            success: true,\n        };\n\n        if (!providedEmail) {\n            setEmailError(\n                formatMessage({\n                    id: \"signup_user_completed.required\",\n                    defaultMessage: \"This field is required\",\n                })\n            );\n            telemetryEvents.errors.push({\n                field: \"email\",\n                rule: \"not_provided\",\n            });\n            isValid = false;\n        } else if (!isEmail(providedEmail)) {\n            setEmailError(\n                formatMessage({\n                    id: \"signup_user_completed.validEmail\",\n                    defaultMessage: \"Please enter a valid email address\",\n                })\n            );\n            setAlertBanner({\n                mode: \"danger\",\n                title: formatMessage({\n                    id: \"ignup_user_completed.validEmail\",\n                    defaultMessage: \"Please enter a valid email address\",\n                }),\n            });\n            telemetryEvents.errors.push({\n                field: \"email\",\n                rule: \"invalid_email\",\n            });\n            isValid = false;\n        }\n\n        const providedUsername = nameInput.current?.value.trim().toLowerCase();\n\n        if (providedUsername) {\n            const usernameError = isValidUsername(providedUsername);\n\n            if (usernameError) {\n                let nameError = \"\";\n                if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                    nameError = formatMessage({\n                        id: \"signup_user_completed.reserved\",\n                        defaultMessage:\n                            \"This username is reserved, please choose a new one.\",\n                    });\n                } else {\n                    nameError = formatMessage(\n                        {\n                            id: \"signup_user_completed.usernameLength\",\n                            defaultMessage:\n                                \"Usernames have to begin with a lowercase letter and be {min}-{max} characters long. You can use lowercase letters, numbers, periods, dashes, and underscores.\",\n                        },\n                        {\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH,\n                        }\n                    );\n                }\n                telemetryEvents.errors.push({\n                    field: \"username\",\n                    rule: usernameError.id.toLowerCase(),\n                });\n                setNameError(nameError);\n                isValid = false;\n            }\n        } else {\n            setNameError(\n                formatMessage({\n                    id: \"signup_user_completed.required\",\n                    defaultMessage: \"This field is required\",\n                })\n            );\n            telemetryEvents.errors.push({\n                field: \"username\",\n                rule: \"not_provided\",\n            });\n            isValid = false;\n        }\n\n        const providedPassword = passwordInput.current?.value ?? \"\";\n        const { error, telemetryErrorIds } = isValidPassword(\n            providedPassword,\n            passwordConfig,\n            intl\n        );\n\n        if (error) {\n            setPasswordError(error as string);\n            setAlertBanner({\n                mode: \"danger\",\n                title: formatMessage({\n                    id: \"password\",\n                    defaultMessage: \"Password Must be 8-72 characters long.\",\n                }),\n            });\n            telemetryEvents.errors = [\n                ...telemetryEvents.errors,\n                ...telemetryErrorIds,\n            ];\n            isValid = false;\n        }\n\n        if (telemetryEvents.errors.length) {\n            telemetryEvents.success = false;\n        }\n\n        sendSignUpTelemetryEvents(\"validate_user\", telemetryEvents);\n\n        return isValid;\n    };\n\n    const dismissAlert = () => {\n        setAlertBanner(null);\n    };\n\n    const handleSubmit = async (e: React.MouseEvent | React.KeyboardEvent) => {\n        e.preventDefault();\n        sendSignUpTelemetryEvents(\n            \"click_create_account\",\n            getRoleFromTrackFlow()\n        );\n        setIsWaiting(true);\n\n        if (isUserValid()) {\n            setNameError(\"\");\n            setEmailError(\"\");\n            setPasswordError(\"\");\n            setServerError(\"\");\n            setIsWaiting(true);\n\n            const user = {\n                email: emailInput.current?.value.trim(),\n                username: nameInput.current?.value.trim().toLowerCase(),\n                password: passwordInput.current?.value,\n            } as UserProfile;\n\n            const redirectTo = new URLSearchParams(search).get(\n                \"redirect_to\"\n            ) as string;\n\n            const { data, error } = await dispatch(\n                createUser(user, token, inviteId, redirectTo)\n            );\n\n            if (error) {\n                setAlertBanner({\n                    mode: \"danger\" as ModeType,\n                    title: (error as ServerError).message,\n                    onDismiss: dismissAlert,\n                });\n                setIsWaiting(false);\n                return;\n            }\n\n            await handleSignupSuccess(user, data!);\n        } else {\n            setIsWaiting(false);\n        }\n    };\n\n    const handleReturnButtonOnClick = () => history.replace(\"/\");\n\n    const handleOnBlur = (\n        e: FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n        inputId: string\n    ) => {\n        const text = e.target.value;\n        if (!text) {\n            return;\n        }\n        sendSignUpTelemetryEvents(`typed_input_${inputId}`);\n    };\n\n    const getContent = () => {\n        if (!enableSignUpWithEmail && !enableExternalSignup) {\n            return (\n                <ColumnLayout\n                    title={formatMessage({\n                        id: \"login.noMethods.title\",\n                        defaultMessage:\n                            \"This server doesn’t have any sign-in methods enabled\",\n                    })}\n                    message={formatMessage({\n                        id: \"login.noMethods.subtitle\",\n                        defaultMessage:\n                            \"Please contact your System Administrator to resolve this.\",\n                    })}\n                />\n            );\n        }\n\n        if (!isWaiting && (noOpenServer || serverError || usedBefore)) {\n            const titleColumn = noOpenServer\n                ? formatMessage({\n                      id: \"signup_user_completed.no_open_server.title\",\n                      defaultMessage: \"This server doesn’t allow open signups\",\n                  })\n                : serverError ||\n                  formatMessage({\n                      id: \"signup_user_completed.invalid_invite.title\",\n                      defaultMessage: \"This invite link is invalid\",\n                  });\n\n            return (\n                <ColumnLayout\n                    title={titleColumn}\n                    message={formatMessage({\n                        id: \"signup_user_completed.invalid_invite.message\",\n                        defaultMessage:\n                            \"Please speak with your Administrator to receive an invitation.\",\n                    })}\n                    SVGElement={<LaptopAlertSVG />}\n                    extraContent={\n                        <div className=\"signup-body-content-button-container\">\n                            <button\n                                className=\"signup-body-content-button-return\"\n                                onClick={handleReturnButtonOnClick}\n                            >\n                                {formatMessage({\n                                    id: \"signup_user_completed.return\",\n                                    defaultMessage: \"Return to log in\",\n                                })}\n                            </button>\n                        </div>\n                    }\n                />\n            );\n        }\n\n        if (desktopLoginLink) {\n            return (\n                <Route\n                    path={\"/signup_user_complete/desktop\"}\n                    render={() => (\n                        <DesktopAuthToken\n                            href={desktopLoginLink}\n                            onLogin={postSignupSuccess}\n                        />\n                    )}\n                />\n            );\n        }\n\n        let emailCustomLabelForInput: CustomMessageInputType = parsedEmail\n            ? {\n                  type: ItemStatus.INFO,\n                  value: formatMessage(\n                      {\n                          id: \"signup_user_completed.emailIs\",\n                          defaultMessage:\n                              \"You'll use this address to sign in to {siteName}.\",\n                      },\n                      { siteName: SiteName }\n                  ),\n              }\n            : null;\n\n        // error will have preference over info message\n        if (emailError) {\n            emailCustomLabelForInput = {\n                type: ItemStatus.ERROR,\n                value: emailError,\n            };\n        }\n\n        return (\n            <>\n                {!isMobileView && (\n                    <div\n                        className={classNames(\"signup-body-message\", {\n                            \"custom-branding\": enableCustomBrand,\n                            \"with-brand-image\":\n                                enableCustomBrand && !brandImageError,\n                            \"with-alternate-link\": !isMobileView,\n                        })}\n                    >\n                        {enableCustomBrand && !brandImageError ? (\n                            <img\n                                className={classNames(\n                                    \"signup-body-custom-branding-image\"\n                                )}\n                                alt=\"brand image\"\n                                src={Client4.getBrandImageUrl(\"0\")}\n                                onError={handleBrandImageError}\n                            />\n                        ) : (\n                            <h1 className=\"signup-body-message-title\">\n                                {\"I think, \"}\n                                <span>\n                                    {\"therefore I \"}\n                                    <TypingAnimation words={wordsArray} />\n                                </span>\n                            </h1>\n                        )}\n                        {getMessageSubtitle()}\n                    </div>\n                )}\n                <div className=\"signup-body-action\">\n                    {!isMobileView && (\n                        <p className=\"dont_p_signup\">{getAlternateLink()}</p>\n                    )}\n                    <div\n                        className={classNames(\"signup-body-card\", {\n                            \"custom-branding\": enableCustomBrand,\n                            \"with-error\": hasError,\n                        })}\n                    >\n                        <div\n                            className=\"signup-body-card-content\"\n                            onKeyDown={onEnterKeyDown}\n                            tabIndex={0}\n                        >\n                            {enableCustomBrand && getMessageSubtitle()}\n                            {alertBanner && (\n                                <AlertBanner\n                                    className=\"signup-body-card-banner\"\n                                    mode={alertBanner.mode}\n                                    title={alertBanner.title}\n                                    onDismiss={alertBanner.onDismiss}\n                                />\n                            )}\n                            <p className=\"signup-body-card-title\">\n                                {getCardTitle()}\n                            </p>\n\n                            {enableSignUpWithEmail && (\n                                <div className=\"signup-body-card-form\">\n                                    <Input\n                                        name=\"firstname\"\n                                        className=\"signup-body-card-form-email-input\"\n                                        type=\"text\"\n                                        inputSize={SIZE.LARGE}\n                                        autoFocus={true}\n                                        placeholder={formatMessage({\n                                            id: \"First Name\",\n                                            defaultMessage: \"First Name\",\n                                        })}\n                                    />\n                                    <Input\n                                        name=\"lastname\"\n                                        className=\"signup-body-card-form-email-input\"\n                                        type=\"text\"\n                                        inputSize={SIZE.LARGE}\n                                        placeholder={formatMessage({\n                                            id: \"Last name\",\n                                            defaultMessage: \"Last name\",\n                                        })}\n                                    />\n                                    <Input\n                                        ref={emailInput}\n                                        name=\"email\"\n                                        className=\"signup-body-card-form-email-input\"\n                                        type=\"text\"\n                                        inputSize={SIZE.LARGE}\n                                        value={email}\n                                        onChange={handleEmailOnChange}\n                                        placeholder={formatMessage({\n                                            id: \"signup_user_completed.emailLabel\",\n                                            defaultMessage: \"Email address\",\n                                        })}\n                                        disabled={\n                                            isWaiting || Boolean(parsedEmail)\n                                        }\n                                        customMessage={emailCustomLabelForInput}\n                                        onBlur={(e) => handleOnBlur(e, \"email\")}\n                                    />\n                                    <Input\n                                        ref={nameInput}\n                                        name=\"name\"\n                                        className=\"signup-body-card-form-name-input\"\n                                        type=\"text\"\n                                        inputSize={SIZE.LARGE}\n                                        value={name}\n                                        onChange={handleNameOnChange}\n                                        placeholder={formatMessage({\n                                            id: \"signup_user_completed.chooseUser\",\n                                            defaultMessage: \"Choose a Username\",\n                                        })}\n                                        disabled={isWaiting}\n                                        autoFocus={Boolean(parsedEmail)}\n                                        customMessage={\n                                            nameError\n                                                ? {\n                                                      type: ItemStatus.ERROR,\n                                                      value: nameError,\n                                                  }\n                                                : {\n                                                      type: ItemStatus.INFO,\n                                                      value: formatMessage({\n                                                          id: \"signup_user_completed.userHelp\",\n                                                          defaultMessage:\n                                                              \"You can use lowercase letters, numbers, periods, dashes, and underscores.\",\n                                                      }),\n                                                  }\n                                        }\n                                        onBlur={(e) =>\n                                            handleOnBlur(e, \"username\")\n                                        }\n                                    />\n                                    <PasswordInput\n                                        ref={passwordInput}\n                                        className=\"signup-body-card-form-password-input\"\n                                        value={password}\n                                        inputSize={SIZE.LARGE}\n                                        onChange={handlePasswordInputOnChange}\n                                        disabled={isWaiting}\n                                        createMode={true}\n                                        info={passwordInfo as string}\n                                        error={passwordError}\n                                        onBlur={(e) =>\n                                            handleOnBlur(e, \"password\")\n                                        }\n                                    />\n                                    <CheckInput\n                                        id=\"signup-body-card-form-check-terms\"\n                                        ariaLabel=\"terms and conditions checkbox\"\n                                        name=\"terms\"\n                                        onChange={handleCheckboxChange}\n                                        text={\n                                            \"By creating an account, you agree to Infogito's Terms of Use, and Privacy Policy. You consent to the collection, use, and storage of your data as outlined in our Privacy Policy, including for account management, service improvements, and personalized experiences. You can manage your data preferences at any time in your account settings.\"\n                                        }\n                                        checked={isChecked}\n                                    />\n                                    <SaveButton\n                                        extraClasses=\"signup-body-card-form-button-submit large\"\n                                        saving={isWaiting}\n                                        disabled={!isChecked || !canSubmit}\n                                        onClick={handleSubmit}\n                                        defaultMessage={formatMessage({\n                                            id: \"signup_user_completed.create\",\n                                            defaultMessage: \"Create account\",\n                                        })}\n                                        savingMessage={formatMessage({\n                                            id: \"signup_user_completed.saving\",\n                                            defaultMessage: \"Creating account…\",\n                                        })}\n                                    />\n\n                                    <div className=\"text-with-lines1\">\n                                        {\"or\"}\n                                    </div>\n\n                                    {/* <div className=\"icons_div1\">\n                                        <img\n                                            src={Google}\n                                            className=\"signIn_icons\"\n                                        />\n                                        <img\n                                            src={macImage}\n                                            className=\"signIn_icons\"\n                                        />\n\n                                        <img\n                                            src={Github}\n                                            className=\"signIn_icons\"\n                                        />\n                                        <img\n                                            src={linkedin}\n                                            className=\"signIn_icons\"\n                                        />\n                                    </div> */}\n                                </div>\n                            )}\n                            {enableSignUpWithEmail && enableExternalSignup && (\n                                <div className=\"signup-body-card-form-divider\">\n                                    <span className=\"signup-body-card-form-divider-label\">\n                                        {formatMessage({\n                                            id: \"signup_user_completed.or\",\n                                            defaultMessage:\n                                                \"or create an account with\",\n                                        })}\n                                    </span>\n                                </div>\n                            )}\n                            {enableExternalSignup && (\n                                <div\n                                    className={classNames(\n                                        \"signup-body-card-form-login-options\",\n                                        { column: !enableSignUpWithEmail }\n                                    )}\n                                >\n                                    {getExternalSignupOptions().map(\n                                        (option) => (\n                                            <ExternalLoginButton\n                                                key={option.id}\n                                                direction={\n                                                    enableSignUpWithEmail\n                                                        ? undefined\n                                                        : \"column\"\n                                                }\n                                                {...option}\n                                            />\n                                        )\n                                    )}\n                                </div>\n                            )}\n                            {enableSignUpWithEmail && !serverError && (\n                                <p className=\"signup-body-card-agreement\">\n                                    <FormattedMarkdownMessage\n                                        id=\"create_team.agreement\"\n                                        defaultMessage=\"By proceeding to create your account and use Infogito, you agree to our [Terms of Use]({TermsOfServiceLink}) and [Privacy Policy]({PrivacyPolicyLink}). If you do not agree, you cannot use {siteName}.\"\n                                        values={{\n                                            siteName: SiteName,\n                                            TermsOfServiceLink: `!${TermsOfServiceLink}`,\n                                            PrivacyPolicyLink: `!${PrivacyPolicyLink}`,\n                                        }}\n                                    />\n                                </p>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    };\n\n    return (\n        <div className=\"signup-body\">\n            <div className=\"signup-body-content\">{getContent()}</div>\n        </div>\n    );\n};\n\nexport default Signup;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {IntlShape} from 'react-intl';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport Constants from 'utils/constants';\n\nexport function isValidPassword(password: string, passwordConfig: PasswordConfig, intl?: IntlShape) {\n    let errorId = passwordErrors.passwordError.id;\n    const telemetryErrorIds = [];\n    let valid = true;\n    const minimumLength = passwordConfig.minimumLength || Constants.MIN_PASSWORD_LENGTH;\n\n    if (password.length < minimumLength || password.length > Constants.MAX_PASSWORD_LENGTH) {\n        valid = false;\n        telemetryErrorIds.push({field: 'password', rule: 'error_length'});\n    }\n\n    if (passwordConfig.requireLowercase) {\n        if (!password.match(/[a-z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Lowercase';\n        telemetryErrorIds.push({field: 'password', rule: 'lowercase'});\n    }\n\n    if (passwordConfig.requireUppercase) {\n        if (!password.match(/[A-Z]/)) {\n            valid = false;\n        }\n\n        errorId += 'Uppercase';\n        telemetryErrorIds.push({field: 'password', rule: 'uppercase'});\n    }\n\n    if (passwordConfig.requireNumber) {\n        if (!password.match(/[0-9]/)) {\n            valid = false;\n        }\n\n        errorId += 'Number';\n        telemetryErrorIds.push({field: 'password', rule: 'number'});\n    }\n\n    if (passwordConfig.requireSymbol) {\n        if (!password.match(/[ !\"\\\\#$%&'()*+,-./:;<=>?@[\\]^_`|~]/)) {\n            valid = false;\n        }\n\n        errorId += 'Symbol';\n        telemetryErrorIds.push({field: 'password', rule: 'symbol'});\n    }\n\n    let error;\n    if (!valid) {\n        error = intl ? (\n            intl.formatMessage(\n                {\n                    id: errorId,\n                    defaultMessage: 'Must be {min}-{max} characters long.',\n                },\n                {\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                },\n            )\n        ) : (\n            <FormattedMessage\n                id={errorId}\n                defaultMessage='Must be {min}-{max} characters long.'\n                values={{\n                    min: minimumLength,\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    return {valid, error, telemetryErrorIds};\n}\n\nexport const passwordErrors = defineMessages({\n    passwordError: {id: 'user.settings.security.passwordError', defaultMessage: 'Must be {min}-{max} characters long.'},\n    passwordErrorLowercase: {id: 'user.settings.security.passwordErrorLowercase', defaultMessage: 'Must be {min}-{max} characters long and include lowercase letters.'},\n    passwordErrorLowercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseNumber', defaultMessage: 'Must be {min}-{max} characters long and include lowercase letters and numbers.'},\n    passwordErrorLowercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseNumberSymbol', defaultMessage: 'Must be {min}-{max} characters long and include lowercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseSymbol', defaultMessage: 'Must be {min}-{max} characters long and include lowercase letters and special characters.'},\n    passwordErrorLowercaseUppercase: {id: 'user.settings.security.passwordErrorLowercaseUppercase', defaultMessage: 'Must be {min}-{max} characters long and include both lowercase and uppercase letters.'},\n    passwordErrorLowercaseUppercaseNumber: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumber', defaultMessage: 'Must be {min}-{max} characters long and include both lowercase and uppercase letters, and numbers.'},\n    passwordErrorLowercaseUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol', defaultMessage: 'Must be {min}-{max} characters long and include both lowercase and uppercase letters, numbers, and special characters.'},\n    passwordErrorLowercaseUppercaseSymbol: {id: 'user.settings.security.passwordErrorLowercaseUppercaseSymbol', defaultMessage: 'Must be {min}-{max} characters long and include both lowercase and uppercase letters, and special characters.'},\n    passwordErrorNumber: {id: 'user.settings.security.passwordErrorNumber', defaultMessage: 'Must be {min}-{max} characters long and include numbers.'},\n    passwordErrorNumberSymbol: {id: 'user.settings.security.passwordErrorNumberSymbol', defaultMessage: 'Must be {min}-{max} characters long and include numbers and special characters.'},\n    passwordErrorSymbol: {id: 'user.settings.security.passwordErrorSymbol', defaultMessage: 'Must be {min}-{max} characters long and include special characters.'},\n    passwordErrorUppercase: {id: 'user.settings.security.passwordErrorUppercase', defaultMessage: 'Must be {min}-{max} characters long and include uppercase letters.'},\n    passwordErrorUppercaseNumber: {id: 'user.settings.security.passwordErrorUppercaseNumber', defaultMessage: 'Must be {min}-{max} characters long and include uppercase letters, and numbers.'},\n    passwordErrorUppercaseNumberSymbol: {id: 'user.settings.security.passwordErrorUppercaseNumberSymbol', defaultMessage: 'Must be {min}-{max} characters long and include uppercase letters, numbers, and special characters.'},\n    passwordErrorUppercaseSymbol: {id: 'user.settings.security.passwordErrorUppercaseSymbol', defaultMessage: 'Must be {min}-{max} characters long and include uppercase letters, and special characters.'},\n});\n"],"names":["Svg","props","_props$width","_props$height","React","width","toString","height","viewBox","fill","xmlns","d","transform","propTypes","_pt","id","ariaLabel","text","rest","_objectWithoutProperties","_excluded","className","Object","assign","type","_ref","_params$get","_params$get2","onCustomizeHeader","intl","useIntl","formatMessage","dispatch","useDispatch","history","useHistory","search","useLocation","params","URLSearchParams","token","get","inviteId","data","parsedData","JSON","parse","email","parsedEmail","name","parsedTeamName","reminder_interval","reminderInterval","config","useSelector","getConfig","EnableOpenServer","EnableUserCreation","NoAccounts","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableSignUpWithOpenId","EnableLdap","EnableSaml","SamlLoginButtonText","LdapLoginFieldName","SiteName","CustomDescriptionText","GitLabButtonText","GitLabButtonColor","OpenIdButtonText","OpenIdButtonColor","EnableCustomBrand","CustomBrandText","TermsOfServiceLink","PrivacyPolicyLink","IsLicensed","getLicense","loggedIn","Boolean","getCurrentUserId","onboardingFlowEnabled","getIsOnboardingFlowEnabled","usedBefore","state","undefined","getGlobalItem","emailInput","useRef","nameInput","passwordInput","isLicensed","enableUserCreation","noAccounts","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLDAP","enableSAML","enableCustomBrand","noOpenServer","setEmail","useState","setName","password","setPassword","loading","setLoading","isWaiting","setIsWaiting","emailError","setEmailError","nameError","setNameError","passwordError","setPasswordError","brandImageError","setBrandImageError","serverError","setServerError","teamName","setTeamName","alertBanner","setAlertBanner","isMobileView","setIsMobileView","isChecked","setIsChecked","handleCheckboxChange","enableExternalSignup","hasError","canSubmit","passwordConfig","getPasswordConfig","error","passwordInfo","isValidPassword","desktopLoginLink","setDesktopLoginLink","wordsArray","handleHeaderBackButtonOnClick","useCallback","trackEvent","goBack","handleInvalidInvite","_ref2","errorMessage","server_error_id","message","defaultMessage","getAlternateLink","AlternateLinkLayout","alternateMessage","alternateLinkPath","alternateLinkLabel","onWindowResize","throttle","window","innerWidth","desktopExternalAuth","href","event","isDesktopApp","preventDefault","push","concat","useEffect","removeGlobalItem","_objectSpread","getRoleFromTrackFlow","getMediumFromTrackFlow","addEventListener","async","team","addUserToTeamFromInvite","Constants","handleAddUserToTeamFromInvite","getTeamInviteInfo","getInviteInfo","redirectUserToDefaultTeam","removeEventListener","document","title","alternateLink","LoadingScreen","handleBrandImageError","onEnterKeyDown","e","key","handleSubmit","getMessageSubtitle","Markdown","options","mentionHighlight","handleEmailOnChange","_ref3","target","value","dismissAlert","handleNameOnChange","_ref4","handlePasswordInputOnChange","_ref5","postSignupSuccess","redirectTo","loadMe","setGlobalItem","stringify","sendSignUpTelemetryEvents","telemetryId","isUserValid","_emailInput$current","_nameInput$current","_passwordInput$curren","_passwordInput$curren2","isValid","providedEmail","current","trim","telemetryEvents","errors","success","isEmail","mode","field","rule","providedUsername","toLowerCase","usernameError","isValidUsername","ValidationErrors","min","max","providedPassword","telemetryErrorIds","length","_emailInput$current2","_nameInput$current2","_passwordInput$curren3","user","username","createUser","onDismiss","loginById","verifyUrl","encodeURIComponent","handleSignupSuccess","handleReturnButtonOnClick","replace","handleOnBlur","inputId","getContent","ColumnLayout","titleColumn","SVGElement","LaptopAlertSVG","extraContent","onClick","Route","path","render","DesktopAuthToken","onLogin","emailCustomLabelForInput","ItemStatus","siteName","classNames","alt","src","Client4","onError","TypingAnimation","words","onKeyDown","tabIndex","AlertBanner","Input","inputSize","SIZE","autoFocus","placeholder","ref","onChange","disabled","customMessage","onBlur","PasswordInput","createMode","info","CheckInput","checked","SaveButton","extraClasses","saving","savingMessage","column","getExternalSignupOptions","externalLoginOptions","url","icon","LoginGitlabIcon","label","style","color","borderColor","LoginGoogleIcon","LoginOffice365Icon","LoginOpenIDIcon","newSearchParam","set","LockIcon","map","option","ExternalLoginButton","direction","FormattedMarkdownMessage","values","errorId","passwordErrors","valid","minimumLength","requireLowercase","match","requireUppercase","requireNumber","requireSymbol","FormattedMessage","defineMessages","passwordErrorLowercase","passwordErrorLowercaseNumber","passwordErrorLowercaseNumberSymbol","passwordErrorLowercaseSymbol","passwordErrorLowercaseUppercase","passwordErrorLowercaseUppercaseNumber","passwordErrorLowercaseUppercaseNumberSymbol","passwordErrorLowercaseUppercaseSymbol","passwordErrorNumber","passwordErrorNumberSymbol","passwordErrorSymbol","passwordErrorUppercase","passwordErrorUppercaseNumber","passwordErrorUppercaseNumberSymbol","passwordErrorUppercaseSymbol"],"sourceRoot":""}