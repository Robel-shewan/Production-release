{"version":3,"file":"3102.9e45666dc497151ae30a.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/components/login/login.tsx","webpack://mattermost-webapp/./src/components/common/svg_images_components/shield_with_checkmark.tsx","webpack://mattermost-webapp/./src/components/login/login_mfa.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport classNames from \"classnames\";\nimport throttle from \"lodash/throttle\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport type { FormEvent } from \"react\";\nimport { useIntl } from \"react-intl\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Link, useLocation, useHistory, Route } from \"react-router-dom\";\n\nimport type { Team } from \"@mattermost/types/teams\";\n\nimport { loadMe } from \"mattermost-redux/actions/users\";\nimport { Client4 } from \"mattermost-redux/client\";\nimport { RequestStatus } from \"mattermost-redux/constants\";\nimport {\n    getConfig,\n    getLicense,\n} from \"mattermost-redux/selectors/entities/general\";\nimport { getIsOnboardingFlowEnabled } from \"mattermost-redux/selectors/entities/preferences\";\nimport {\n    getTeamByName,\n    getMyTeamMember,\n} from \"mattermost-redux/selectors/entities/teams\";\nimport { getCurrentUser } from \"mattermost-redux/selectors/entities/users\";\n\nimport { redirectUserToDefaultTeam } from \"actions/global_actions\";\nimport { addUserToTeamFromInvite } from \"actions/team_actions\";\nimport { trackEvent } from \"actions/telemetry_actions\";\nimport { login } from \"actions/views/login\";\nimport LocalStorageStore from \"stores/local_storage_store\";\n\nimport AlertBanner from \"components/alert_banner\";\nimport type { ModeType, AlertBannerProps } from \"components/alert_banner\";\nimport type { SubmitOptions } from \"components/claim/components/email_to_ldap\";\nimport DesktopAuthToken from \"components/desktop_auth_token\";\nimport ExternalLink from \"components/external_link\";\nimport ExternalLoginButton from \"components/external_login_button/external_login_button\";\nimport type { ExternalLoginButtonType } from \"components/external_login_button/external_login_button\";\nimport AlternateLinkLayout from \"components/header_footer_route/content_layouts/alternate_link\";\nimport ColumnLayout from \"components/header_footer_route/content_layouts/column\";\nimport type { CustomizeHeaderType } from \"components/header_footer_route/header_footer_route\";\nimport LoadingScreen from \"components/loading_screen\";\nimport Markdown from \"components/markdown\";\nimport SaveButton from \"components/save_button\";\nimport LockIcon from \"components/widgets/icons/lock_icon\";\nimport LoginGitlabIcon from \"components/widgets/icons/login_gitlab_icon\";\nimport LoginGoogleIcon from \"components/widgets/icons/login_google_icon\";\nimport LoginOffice365Icon from \"components/widgets/icons/login_office_365_icon\";\nimport LoginOpenIDIcon from \"components/widgets/icons/login_openid_icon\";\nimport Input, { SIZE } from \"components/widgets/inputs/input/input\";\nimport PasswordInput from \"components/widgets/inputs/password_input/password_input\";\n\nimport Github from \"images/icons/github.png\";\nimport Google from \"images/icons/google.png\";\nimport linkedin from \"images/icons/linkedin.png\";\nimport macImage from \"images/icons/mac.png\";\nimport Constants from \"utils/constants\";\nimport DesktopApp from \"utils/desktop_api\";\nimport { t } from \"utils/i18n\";\nimport { showNotification } from \"utils/notifications\";\nimport { isDesktopApp } from \"utils/user_agent\";\nimport { setCSRFFromCookie } from \"utils/utils\";\n\nimport type { GlobalState } from \"types/store\";\n\nimport LoginMfa from \"./login_mfa\";\nimport TypingAnimation from \"./typing_animation\";\n\nimport \"./login.scss\";\n\nconst MOBILE_SCREEN_WIDTH = 1200;\n\ntype LoginProps = {\n    onCustomizeHeader?: CustomizeHeaderType;\n};\n\nconst Login = ({ onCustomizeHeader }: LoginProps) => {\n    const { formatMessage } = useIntl();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const { pathname, search, hash } = useLocation();\n\n    const searchParam = new URLSearchParams(search);\n    const extraParam = searchParam.get(\"extra\");\n    const emailParam = searchParam.get(\"email\");\n\n    const {\n        EnableLdap,\n        EnableSaml,\n        EnableSignInWithEmail,\n        EnableSignInWithUsername,\n        EnableSignUpWithEmail,\n        EnableSignUpWithGitLab,\n        EnableSignUpWithOffice365,\n        EnableSignUpWithGoogle,\n        EnableSignUpWithOpenId,\n        EnableOpenServer,\n        EnableUserCreation,\n        LdapLoginFieldName,\n        GitLabButtonText,\n        GitLabButtonColor,\n        OpenIdButtonText,\n        OpenIdButtonColor,\n        SamlLoginButtonText,\n        EnableCustomBrand,\n        CustomBrandText,\n        CustomDescriptionText,\n        SiteName,\n        ExperimentalPrimaryTeam,\n        ForgotPasswordLink,\n        PasswordEnableForgotLink,\n    } = useSelector(getConfig);\n    const { IsLicensed } = useSelector(getLicense);\n    const initializing = useSelector(\n        (state: GlobalState) =>\n            state.requests.users.logout.status === RequestStatus.SUCCESS ||\n            !state.storage.initialized\n    );\n    const currentUser = useSelector(getCurrentUser);\n    const experimentalPrimaryTeam = useSelector((state: GlobalState) =>\n        ExperimentalPrimaryTeam\n            ? getTeamByName(state, ExperimentalPrimaryTeam)\n            : undefined\n    );\n    const experimentalPrimaryTeamMember = useSelector((state: GlobalState) =>\n        experimentalPrimaryTeam\n            ? getMyTeamMember(state, experimentalPrimaryTeam.id)\n            : undefined\n    );\n    const onboardingFlowEnabled = useSelector(getIsOnboardingFlowEnabled);\n\n    const loginIdInput = useRef<HTMLInputElement>(null);\n    const passwordInput = useRef<HTMLInputElement>(null);\n    const closeSessionExpiredNotification = useRef<() => void>();\n\n    const [loginId, setLoginId] = useState(\n        extraParam === Constants.SIGNIN_VERIFIED && emailParam ? emailParam : \"\"\n    );\n    const [password, setPassword] = useState(\"\");\n    const [showMfa, setShowMfa] = useState(false);\n    const [isWaiting, setIsWaiting] = useState(false);\n    const [sessionExpired, setSessionExpired] = useState(false);\n    const [brandImageError, setBrandImageError] = useState(false);\n    const [alertBanner, setAlertBanner] = useState<AlertBannerProps | null>(\n        null\n    );\n    const [hasError, setHasError] = useState(false);\n    const [isMobileView, setIsMobileView] = useState(false);\n\n    const enableCustomBrand = EnableCustomBrand === \"true\";\n    const enableLdap = EnableLdap === \"true\";\n    const enableOpenServer = EnableOpenServer === \"true\";\n    const enableUserCreation = EnableUserCreation === \"true\";\n    const enableSaml = EnableSaml === \"true\";\n    const enableSignInWithEmail = EnableSignInWithEmail === \"true\";\n    const enableSignInWithUsername = EnableSignInWithUsername === \"true\";\n    const enableSignUpWithEmail =\n        enableUserCreation && EnableSignUpWithEmail === \"true\";\n    const enableSignUpWithGitLab = EnableSignUpWithGitLab === \"true\";\n    const enableSignUpWithGoogle = EnableSignUpWithGoogle === \"true\";\n    const enableSignUpWithOffice365 = EnableSignUpWithOffice365 === \"true\";\n    const enableSignUpWithOpenId = EnableSignUpWithOpenId === \"true\";\n    const isLicensed = IsLicensed === \"true\";\n    const ldapEnabled = isLicensed && enableLdap;\n    const enableSignUpWithSaml = isLicensed && enableSaml;\n    const siteName = \"Infogito\";\n\n    const enableBaseLogin =\n        enableSignInWithEmail || enableSignInWithUsername || ldapEnabled;\n    const enableExternalSignup =\n        enableSignUpWithGitLab ||\n        enableSignUpWithOffice365 ||\n        enableSignUpWithGoogle ||\n        enableSignUpWithOpenId ||\n        enableSignUpWithSaml;\n    const showSignup =\n        enableOpenServer &&\n        (enableExternalSignup || enableSignUpWithEmail || enableLdap);\n    const onlyLdapEnabled =\n        enableLdap &&\n        !(\n            enableSaml ||\n            enableSignInWithEmail ||\n            enableSignInWithUsername ||\n            enableSignUpWithEmail ||\n            enableSignUpWithGitLab ||\n            enableSignUpWithGoogle ||\n            enableSignUpWithOffice365 ||\n            enableSignUpWithOpenId\n        );\n\n    const query = new URLSearchParams(search);\n    const redirectTo = query.get(\"redirect_to\");\n\n    const [desktopLoginLink, setDesktopLoginLink] = useState(\"\");\n    const wordsArray = [\n        \"solve.\",\n        \"change.\",\n        \"adapt.\",\n        \"wonder.\",\n        \"believe.\",\n        \"question.\",\n        \"evolve.\",\n        \"challenge.\",\n        \"create.\",\n        \"grow.\",\n        \"connect.\",\n        \"explore.\",\n        \"see.\",\n        \"choose.\",\n\n        // 'change the game.', // NOTE: This will overflow\n\n        \"defy.\",\n        \"rebel.\",\n        \"innovate.\",\n        \"imagine.\",\n        \"progress.\",\n        \"dream.\",\n        \"influence.\",\n        \"transform.\",\n        \"decide.\",\n        \"empower.\",\n        \"amplify.\",\n        \"know.\",\n        \"move.\",\n        \"build.\",\n        \"connect.\",\n        \"support.\",\n        \"collaborate.\",\n        \"accelerate.\",\n        \"discover.\",\n        \"lead.\",\n        \"inspire.\",\n        \"push.\",\n        \"optimize.\",\n        \"love.\",\n        \"advance.\",\n        \"feel.\",\n        \"forgive.\",\n        \"design.\",\n        \"reflect.\",\n        \"develop.\",\n        \"improve.\",\n        \"become.\",\n    ];\n    const getExternalLoginOptions = () => {\n        const externalLoginOptions: ExternalLoginButtonType[] = [];\n\n        if (!enableExternalSignup) {\n            return externalLoginOptions;\n        }\n\n        if (enableSignUpWithGitLab) {\n            const url = `${Client4.getOAuthRoute()}/gitlab/login${search}`;\n            externalLoginOptions.push({\n                id: \"gitlab\",\n                url,\n                icon: <LoginGitlabIcon />,\n                label:\n                    GitLabButtonText ||\n                    formatMessage({\n                        id: \"login.gitlab\",\n                        defaultMessage: \"GitLab\",\n                    }),\n                style: {\n                    color: GitLabButtonColor,\n                    borderColor: GitLabButtonColor,\n                },\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (enableSignUpWithGoogle) {\n            const url = `${Client4.getOAuthRoute()}/google/login${search}`;\n            externalLoginOptions.push({\n                id: \"google\",\n                url,\n                icon: <LoginGoogleIcon />,\n                label: formatMessage({\n                    id: \"login.google\",\n                    defaultMessage: \"Google\",\n                }),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (enableSignUpWithOffice365) {\n            const url = `${Client4.getOAuthRoute()}/office365/login${search}`;\n            externalLoginOptions.push({\n                id: \"office365\",\n                url,\n                icon: <LoginOffice365Icon />,\n                label: formatMessage({\n                    id: \"login.office365\",\n                    defaultMessage: \"Entra ID\",\n                }),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (enableSignUpWithOpenId) {\n            const url = `${Client4.getOAuthRoute()}/openid/login${search}`;\n            externalLoginOptions.push({\n                id: \"openid\",\n                url,\n                icon: <LoginOpenIDIcon />,\n                label:\n                    OpenIdButtonText ||\n                    formatMessage({\n                        id: \"login.openid\",\n                        defaultMessage: \"Open ID\",\n                    }),\n                style: {\n                    color: OpenIdButtonColor,\n                    borderColor: OpenIdButtonColor,\n                },\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        if (enableSignUpWithSaml) {\n            const url = `${Client4.getUrl()}/login/sso/saml${search}`;\n            externalLoginOptions.push({\n                id: \"saml\",\n                url,\n                icon: <LockIcon />,\n                label:\n                    SamlLoginButtonText ||\n                    formatMessage({ id: \"login.saml\", defaultMessage: \"SAML\" }),\n                onClick: desktopExternalAuth(url),\n            });\n        }\n\n        return externalLoginOptions;\n    };\n\n    const desktopExternalAuth = (href: string) => {\n        return (event: React.MouseEvent) => {\n            if (isDesktopApp()) {\n                event.preventDefault();\n\n                setDesktopLoginLink(href);\n                history.push(`/login/desktop${search}`);\n            }\n        };\n    };\n\n    const dismissAlert = () => {\n        setAlertBanner(null);\n        setHasError(false);\n    };\n\n    const onDismissSessionExpired = useCallback(() => {\n        LocalStorageStore.setWasLoggedIn(false);\n        setSessionExpired(false);\n        DesktopApp.setSessionExpired(false);\n        dismissAlert();\n    }, []);\n\n    const configureTitle = useCallback(() => {\n        document.title = \"Infogito\";\n    }, [sessionExpired, siteName]);\n\n    const showSessionExpiredNotificationIfNeeded = useCallback(() => {\n        if (sessionExpired && !closeSessionExpiredNotification!.current) {\n            dispatch(\n                showNotification({\n                    title: siteName,\n                    body: formatMessage({\n                        id: \"login.session_expired.notification\",\n                        defaultMessage:\n                            \"Session Expired: Please sign in to continue receiving notifications.\",\n                    }),\n                    requireInteraction: true,\n                    silent: false,\n                    onClick: () => {\n                        window.focus();\n                        if (closeSessionExpiredNotification.current) {\n                            closeSessionExpiredNotification.current();\n                            closeSessionExpiredNotification.current = undefined;\n                        }\n                    },\n                })\n            )\n                .then(({ callback: closeNotification }) => {\n                    closeSessionExpiredNotification.current = closeNotification;\n                })\n                .catch(() => {\n                    // Ignore the failure to display the notification.\n                });\n        } else if (\n            !sessionExpired &&\n            closeSessionExpiredNotification!.current\n        ) {\n            closeSessionExpiredNotification.current();\n            closeSessionExpiredNotification.current = undefined;\n        }\n    }, [sessionExpired, siteName]);\n\n    const getAlertData = useCallback(() => {\n        let mode;\n        let title;\n        let onDismiss;\n\n        if (sessionExpired) {\n            mode = \"warning\";\n            title = formatMessage({\n                id: \"login.session_expired\",\n                defaultMessage:\n                    \"Your session has expired. Please log in again.\",\n            });\n            onDismiss = onDismissSessionExpired;\n        } else {\n            switch (extraParam) {\n                case Constants.GET_TERMS_ERROR:\n                    mode = \"danger\";\n                    title = formatMessage({\n                        id: \"login.get_terms_error\",\n                        defaultMessage:\n                            \"Unable to load terms of service. If this issue persists, contact your System Administrator.\",\n                    });\n                    break;\n\n                case Constants.TERMS_REJECTED:\n                    mode = \"warning\";\n                    title = formatMessage(\n                        {\n                            id: \"login.terms_rejected\",\n                            defaultMessage:\n                                \"You must agree to the terms of use before accessing {siteName}. Please contact your System Administrator for more details.\",\n                        },\n                        { siteName }\n                    );\n                    break;\n\n                case Constants.SIGNIN_CHANGE:\n                    mode = \"success\";\n                    title = formatMessage({\n                        id: \"login.changed\",\n                        defaultMessage: \"Sign-in method changed successfully\",\n                    });\n                    break;\n\n                case Constants.SIGNIN_VERIFIED:\n                    mode = \"success\";\n                    title = formatMessage({\n                        id: \"login.verified\",\n                        defaultMessage: \"Email Verified\",\n                    });\n                    break;\n\n                case Constants.PASSWORD_CHANGE:\n                    mode = \"success\";\n                    title = formatMessage({\n                        id: \"login.passwordChanged\",\n                        defaultMessage: \"Password updated successfully\",\n                    });\n                    break;\n\n                case Constants.CREATE_LDAP:\n                    mode = \"success\";\n                    title = formatMessage({\n                        id: \"login.ldapCreate\",\n                        defaultMessage:\n                            \"Enter your AD/LDAP username and password to create an account.\",\n                    });\n                    break;\n\n                default:\n                    break;\n            }\n        }\n\n        return setAlertBanner(\n            mode ? { mode: mode as ModeType, title, onDismiss } : null\n        );\n    }, [extraParam, sessionExpired, siteName, onDismissSessionExpired]);\n\n    const getAlternateLink = useCallback(() => {\n        const linkLabel = formatMessage({\n            id: \"login.signup\",\n            defaultMessage: \"Sign Up\",\n        });\n        const handleClick = () => {\n            trackEvent(\"signup\", \"click_login_no_account\");\n        };\n        if (showSignup) {\n            return (\n                <AlternateLinkLayout\n                    className=\"login-body-alternate-link\"\n                    alternateLinkPath={\"/signup_user_complete\"}\n                    alternateLinkLabel={linkLabel}\n                />\n            );\n        }\n        return (\n            <AlternateLinkLayout\n                className=\"login-body-alternate-link\"\n                alternateLinkPath={\"/signup_user_complete\"}\n                alternateLinkLabel={linkLabel}\n                onClick={handleClick}\n            />\n        );\n    }, [showSignup]);\n\n    const onWindowResize = throttle(() => {\n        setIsMobileView(window.innerWidth < MOBILE_SCREEN_WIDTH);\n    }, 100);\n\n    const onWindowFocus = useCallback(() => {\n        if (extraParam === Constants.SIGNIN_VERIFIED && emailParam) {\n            passwordInput.current?.focus();\n        }\n    }, [emailParam, extraParam]);\n\n    useEffect(() => {\n        if (onCustomizeHeader) {\n            onCustomizeHeader({\n                alternateLink: isMobileView ? getAlternateLink() : undefined,\n            });\n        }\n    }, [onCustomizeHeader, search, showMfa, isMobileView, getAlternateLink]);\n\n    useEffect(() => {\n        // We don't want to redirect outside of this route if we're doing Desktop App auth\n        if (query.get(\"server_token\")) {\n            return;\n        }\n\n        if (currentUser) {\n            if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n                history.push(redirectTo);\n                return;\n            }\n            redirectUserToDefaultTeam();\n            return;\n        }\n\n        onWindowResize();\n        onWindowFocus();\n\n        window.addEventListener(\"resize\", onWindowResize);\n        window.addEventListener(\"focus\", onWindowFocus);\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extraParam === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                setSessionExpired(true);\n                DesktopApp.setSessionExpired(true);\n\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app.\n                // This is legacy support for older Desktop Apps and can be removed eventually\n                const newSearchParam = new URLSearchParams(search);\n                newSearchParam.set(\"extra\", Constants.SESSION_EXPIRED);\n                history.replace(`${pathname}?${newSearchParam}`);\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        configureTitle();\n        showSessionExpiredNotificationIfNeeded();\n        getAlertData();\n    }, [configureTitle, showSessionExpiredNotificationIfNeeded, getAlertData]);\n\n    useEffect(() => {\n        return () => {\n            if (closeSessionExpiredNotification!.current) {\n                closeSessionExpiredNotification.current();\n                closeSessionExpiredNotification.current = undefined;\n            }\n\n            window.removeEventListener(\"resize\", onWindowResize);\n            window.removeEventListener(\"focus\", onWindowFocus);\n\n            DesktopApp.setSessionExpired(false);\n        };\n    }, []);\n\n    if (initializing) {\n        return <LoadingScreen />;\n    }\n\n    const getInputPlaceholder = () => {\n        const loginPlaceholders = [];\n\n        if (enableSignInWithEmail) {\n            loginPlaceholders.push(\n                formatMessage({ id: \"login.email\", defaultMessage: \"Email\" })\n            );\n        }\n\n        if (enableSignInWithUsername) {\n            loginPlaceholders.push(\n                formatMessage({\n                    id: \"login.username\",\n                    defaultMessage: \"Username\",\n                })\n            );\n        }\n\n        if (ldapEnabled) {\n            loginPlaceholders.push(\n                LdapLoginFieldName ||\n                    formatMessage({\n                        id: \"login.ldapUsername\",\n                        defaultMessage: \"AD/LDAP Username\",\n                    })\n            );\n        }\n\n        if (loginPlaceholders.length > 1) {\n            const lastIndex = loginPlaceholders.length - 1;\n            return `${loginPlaceholders\n                .slice(0, lastIndex)\n                .join(\", \")}${formatMessage({\n                id: \"login.placeholderOr\",\n                defaultMessage: \" or \",\n            })}${loginPlaceholders[lastIndex]}`;\n        }\n\n        return loginPlaceholders[0] ?? \"\";\n    };\n\n    const preSubmit = (e: React.MouseEvent | React.KeyboardEvent) => {\n        e.preventDefault();\n        setIsWaiting(true);\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        onDismissSessionExpired();\n\n        const newQuery = search.replace(/(extra=password_change)&?/i, \"\");\n        if (newQuery !== search) {\n            history.replace(`${pathname}${newQuery}${hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let currentLoginId = loginId;\n        if (loginIdInput.current) {\n            currentLoginId = loginIdInput.current.value;\n\n            if (currentLoginId !== loginId) {\n                setLoginId(currentLoginId);\n            }\n        }\n\n        let currentPassword = password;\n        if (passwordInput.current) {\n            currentPassword = passwordInput.current.value;\n\n            if (currentPassword !== password) {\n                setPassword(currentPassword);\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        currentLoginId = currentLoginId.trim().toLowerCase();\n\n        if (!currentLoginId) {\n            t(\"login.noEmail\");\n            t(\"login.noEmailLdapUsername\");\n            t(\"login.noEmailUsername\");\n            t(\"login.noEmailUsernameLdapUsername\");\n            t(\"login.noLdapUsername\");\n            t(\"login.noUsername\");\n            t(\"login.noUsernameLdapUsername\");\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = \"login.no\";\n            if (enableSignInWithEmail) {\n                msgId += \"Email\";\n            }\n            if (enableSignInWithUsername) {\n                msgId += \"Username\";\n            }\n            if (ldapEnabled) {\n                msgId += \"LdapUsername\";\n            }\n\n            setAlertBanner({\n                mode: \"danger\",\n                title: formatMessage(\n                    { id: msgId },\n                    {\n                        ldapUsername:\n                            LdapLoginFieldName ||\n                            formatMessage({\n                                id: \"login.ldapUsernameLower\",\n                                defaultMessage: \"AD/LDAP username\",\n                            }),\n                    }\n                ),\n            });\n            setHasError(true);\n            setIsWaiting(false);\n\n            return;\n        }\n\n        if (!password) {\n            setAlertBanner({\n                mode: \"danger\",\n                title: formatMessage({\n                    id: \"login.noPassword\",\n                    defaultMessage: \"Please enter your password\",\n                }),\n            });\n            setHasError(true);\n            setIsWaiting(false);\n\n            return;\n        }\n\n        submit({ loginId, password });\n    };\n\n    const submit = async ({ loginId, password, token }: SubmitOptions) => {\n        setIsWaiting(true);\n\n        const { error: loginError } = await dispatch(\n            login(loginId, password, token)\n        );\n\n        if (\n            loginError &&\n            loginError.server_error_id &&\n            loginError.server_error_id.length !== 0\n        ) {\n            if (\n                loginError.server_error_id ===\n                \"api.user.login.not_verified.app_error\"\n            ) {\n                history.push(\n                    \"/should_verify_email?&email=\" + encodeURIComponent(loginId)\n                );\n            } else if (\n                loginError.server_error_id ===\n                    \"store.sql_user.get_for_login.app_error\" ||\n                loginError.server_error_id ===\n                    \"ent.ldap.do_login.user_not_registered.app_error\"\n            ) {\n                setShowMfa(false);\n                setIsWaiting(false);\n                setAlertBanner({\n                    mode: \"danger\",\n                    title: formatMessage({\n                        id: \"login.userNotFound\",\n                        defaultMessage:\n                            \"We couldn't find an account matching your login credentials.\",\n                    }),\n                });\n                setHasError(true);\n            } else if (\n                loginError.server_error_id ===\n                    \"api.user.check_user_password.invalid.app_error\" ||\n                loginError.server_error_id ===\n                    \"ent.ldap.do_login.invalid_password.app_error\"\n            ) {\n                setShowMfa(false);\n                setIsWaiting(false);\n                setAlertBanner({\n                    mode: \"danger\",\n                    title: formatMessage({\n                        id: \"login.invalidPassword\",\n                        defaultMessage: \"Your password is incorrect.\",\n                    }),\n                });\n                setHasError(true);\n            } else if (\n                !showMfa &&\n                loginError.server_error_id ===\n                    \"mfa.validate_token.authenticate.app_error\"\n            ) {\n                setShowMfa(true);\n            } else if (\n                loginError.server_error_id ===\n                \"api.user.login.invalid_credentials_email_username\"\n            ) {\n                setShowMfa(false);\n                setIsWaiting(false);\n                setAlertBanner({\n                    mode: \"danger\",\n                    title: formatMessage({\n                        id: \"login.invalidCredentials\",\n                        defaultMessage:\n                            \"The email/username or password is invalid.\",\n                    }),\n                });\n                setHasError(true);\n            } else {\n                setShowMfa(false);\n                setIsWaiting(false);\n                setAlertBanner({\n                    mode: \"danger\",\n                    title: loginError.message,\n                });\n                setHasError(true);\n            }\n            return;\n        }\n\n        await postSubmit();\n    };\n\n    const postSubmit = async () => {\n        await dispatch(loadMe());\n\n        // check for query params brought over from signup_user_complete\n        const params = new URLSearchParams(search);\n        const inviteToken = params.get(\"t\") || \"\";\n        const inviteId = params.get(\"id\") || \"\";\n\n        if (inviteId || inviteToken) {\n            const { data: team } = await dispatch(\n                addUserToTeamFromInvite(inviteToken, inviteId)\n            );\n\n            if (team) {\n                finishSignin(team);\n            } else {\n                // there's not really a good way to deal with this, so just let the user log in like normal\n                finishSignin();\n            }\n        } else {\n            finishSignin();\n        }\n    };\n\n    const finishSignin = (team?: Team) => {\n        setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n\n        // After a user has just logged in, we set the following flag to \"false\" so that after\n        // a user is notified of successful login, we can set it back to \"true\"\n        LocalStorageStore.setWasNotifiedOfLogIn(false);\n\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            history.push(redirectTo);\n        } else if (team) {\n            history.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeamMember?.team_id) {\n            // Only set experimental team if user is on that team\n            history.push(`/${ExperimentalPrimaryTeam}`);\n        } else if (onboardingFlowEnabled) {\n            // need info about whether admin or not,\n            // and whether admin has already completed\n            // first time onboarding. Instead of fetching and orchestrating that here,\n            // let the default root component handle it.\n            history.push(\"/\");\n        } else {\n            redirectUserToDefaultTeam();\n        }\n    };\n\n    const handleHeaderBackButtonOnClick = () => {\n        setShowMfa(false);\n    };\n\n    const handleInputOnChange = ({\n        target: { value: loginId },\n    }: React.ChangeEvent<HTMLInputElement>) => {\n        setLoginId(loginId);\n\n        if (hasError) {\n            setHasError(false);\n            dismissAlert();\n        }\n    };\n\n    const handlePasswordInputOnChange = ({\n        target: { value: password },\n    }: React.ChangeEvent<HTMLInputElement>) => {\n        setPassword(password);\n\n        if (hasError) {\n            setHasError(false);\n            dismissAlert();\n        }\n    };\n\n    const handleBrandImageError = () => {\n        setBrandImageError(true);\n    };\n\n    const getCardTitle = () => {\n        if (CustomDescriptionText) {\n            return CustomDescriptionText;\n        }\n\n        if (!enableBaseLogin && enableExternalSignup) {\n            return formatMessage({\n                id: \"login.cardtitle.external\",\n                defaultMessage: \"Log in with one of the following:\",\n            });\n        }\n\n        return formatMessage({\n            id: \"login.cardtitle\",\n            defaultMessage: \"Log in\",\n        });\n    };\n\n    const getMessageSubtitle = () => {\n        if (enableCustomBrand) {\n            return CustomBrandText ? (\n                <div className=\"login-body-custom-branding-markdown\">\n                    <Markdown\n                        message={CustomBrandText}\n                        options={{ mentionHighlight: false }}\n                    />\n                </div>\n            ) : null;\n        }\n\n        return (\n            <p className=\"login-body-message-subtitle\">\n                {\"Welcome to the Infogito Platform.\"}\n                <br />\n                {\"Home of the \"} <strong>{\"Discovery Engine\"}</strong>\n            </p>\n        );\n    };\n\n    const getResetPasswordLink = () => {\n        if (\n            !PasswordEnableForgotLink ||\n            PasswordEnableForgotLink === \"false\" ||\n            onlyLdapEnabled\n        ) {\n            return null;\n        }\n\n        if (ForgotPasswordLink) {\n            return (\n                <div className=\"login-body-card-form-link\">\n                    <ExternalLink\n                        location=\"login_page\"\n                        href={ForgotPasswordLink}\n                    >\n                        {formatMessage({\n                            id: \"login.forgot\",\n                            defaultMessage: \"Forgot your password?\",\n                        })}\n                    </ExternalLink>\n                </div>\n            );\n        }\n\n        if (enableSignInWithUsername || enableSignInWithEmail) {\n            return (\n                <div className=\"login-body-card-form-link\">\n                    <Link to=\"/reset_password\">\n                        {formatMessage({\n                            id: \"login.forgot\",\n                            defaultMessage: \"Forgot your password?\",\n                        })}\n                    </Link>\n                </div>\n            );\n        }\n\n        return null;\n    };\n\n    const getContent = () => {\n        if (showMfa) {\n            return (\n                <LoginMfa\n                    loginId={loginId}\n                    password={password}\n                    onSubmit={submit}\n                />\n            );\n        }\n\n        if (!enableBaseLogin && !enableExternalSignup) {\n            return (\n                <ColumnLayout\n                    title={formatMessage({\n                        id: \"login.noMethods.title\",\n                        defaultMessage:\n                            \"This server doesn’t have any sign-in methods enabled\",\n                    })}\n                    message={formatMessage({\n                        id: \"login.noMethods.subtitle\",\n                        defaultMessage:\n                            \"Please contact your System Administrator to resolve this.\",\n                    })}\n                />\n            );\n        }\n\n        if (desktopLoginLink || query.get(\"server_token\")) {\n            return (\n                <Route\n                    path={\"/login/desktop\"}\n                    render={() => (\n                        <DesktopAuthToken\n                            href={desktopLoginLink}\n                            onLogin={postSubmit}\n                        />\n                    )}\n                />\n            );\n        }\n\n        return (\n            <>\n                {!isMobileView && (\n                    <div\n                        className={classNames(\"login-body-message\", {\n                            \"custom-branding\": enableCustomBrand,\n                            \"with-brand-image\":\n                                enableCustomBrand && !brandImageError,\n                            \"with-alternate-link\": showSignup && !isMobileView,\n                        })}\n                    >\n                        {enableCustomBrand && !brandImageError ? (\n                            <img\n                                className={classNames(\n                                    \"login-body-custom-branding-image\"\n                                )}\n                                alt=\"brand image\"\n                                src={Client4.getBrandImageUrl(\"0\")}\n                                onError={handleBrandImageError}\n                            />\n                        ) : (\n                            <h1 className=\"login-body-message-title\">\n                                {\"I think, \"}\n                                <span>\n                                    {\"therefore I \"}\n                                    <TypingAnimation words={wordsArray} />\n                                </span>\n                            </h1>\n                        )}\n                        {getMessageSubtitle()}\n                    </div>\n                )}\n                <div className=\"login-body-action\">\n                    {!isMobileView && (\n                        <p className=\"dont_p\">\n                            {\"Don't have an account?\"} {getAlternateLink()}\n                        </p>\n                    )}\n                    <div\n                        className={classNames(\"login-body-card\", {\n                            \"custom-branding\": enableCustomBrand,\n                            \"with-error\": hasError,\n                        })}\n                    >\n                        <div className=\"login-body-card-content\" tabIndex={0}>\n                            {enableCustomBrand && getMessageSubtitle()}\n                            {alertBanner && (\n                                <AlertBanner\n                                    className=\"login-body-card-banner\"\n                                    mode={alertBanner.mode}\n                                    title={alertBanner.title}\n                                    onDismiss={\n                                        alertBanner.onDismiss ?? dismissAlert\n                                    }\n                                />\n                            )}\n                            <p className=\"login-body-card-title\">\n                                {getCardTitle()}\n                            </p>\n\n                            {enableBaseLogin && (\n                                <form\n                                    onSubmit={(\n                                        event: FormEvent<HTMLFormElement>\n                                    ) => {\n                                        preSubmit(\n                                            event as unknown as React.MouseEvent\n                                        );\n                                    }}\n                                >\n                                    <div className=\"login-body-card-form\">\n                                        <Input\n                                            ref={loginIdInput}\n                                            name=\"loginId\"\n                                            containerClassName=\"login-body-card-form-input\"\n                                            type=\"text\"\n                                            inputSize={SIZE.LARGE}\n                                            value={loginId}\n                                            onChange={handleInputOnChange}\n                                            hasError={hasError}\n                                            placeholder={getInputPlaceholder()}\n                                            disabled={isWaiting}\n                                            autoFocus={true}\n                                        />\n                                        <PasswordInput\n                                            ref={passwordInput}\n                                            className=\"login-body-card-form-password-input\"\n                                            value={password}\n                                            inputSize={SIZE.LARGE}\n                                            onChange={\n                                                handlePasswordInputOnChange\n                                            }\n                                            hasError={hasError}\n                                            disabled={isWaiting}\n                                        />\n                                        {getResetPasswordLink()}\n\n                                        {/* <div className='icons_div'>\n                                            <img\n                                                src={Google}\n                                                className='signIn_icons'\n                                            />\n                                            <img\n                                                src={macImage}\n                                                className='signIn_icons'\n                                            />\n\n                                            <img\n                                                src={Github}\n                                                className='signIn_icons'\n                                            />\n                                            <img\n                                                src={linkedin}\n                                                className='signIn_icons'\n                                            />\n\n                                        </div> */}\n\n                                        <SaveButton\n                                            extraClasses=\"login-body-card-form-button-submit large\"\n                                            saving={isWaiting}\n                                            onClick={preSubmit}\n                                            defaultMessage={formatMessage({\n                                                id: \"login.logIn\",\n                                                defaultMessage: \"Log in\",\n                                            })}\n                                            savingMessage={formatMessage({\n                                                id: \"login.logingIn\",\n                                                defaultMessage: \"Logging in…\",\n                                            })}\n                                        />\n                                    </div>\n                                </form>\n                            )}\n                            {enableBaseLogin && enableExternalSignup && (\n                                <div className=\"login-body-card-form-divider\">\n                                    <span className=\"login-body-card-form-divider-label\">\n                                        {formatMessage({\n                                            id: \"login.or\",\n                                            defaultMessage: \"or log in with\",\n                                        })}\n                                    </span>\n                                </div>\n                            )}\n                            {enableExternalSignup && (\n                                <div\n                                    className={classNames(\n                                        \"login-body-card-form-login-options\",\n                                        { column: !enableBaseLogin }\n                                    )}\n                                >\n                                    {getExternalLoginOptions().map((option) => (\n                                        <ExternalLoginButton\n                                            key={option.id}\n                                            direction={\n                                                enableBaseLogin\n                                                    ? undefined\n                                                    : \"column\"\n                                            }\n                                            {...option}\n                                        />\n                                    ))}\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    };\n\n    return (\n        <div className=\"login-body\">\n            <div className=\"login-body-content\">{getContent()}</div>\n        </div>\n    );\n};\n\nexport default Login;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype SvgProps = {\n    width?: number;\n    height?: number;\n}\n\nconst Svg = (props: SvgProps) => (\n    <svg\n        width={props.width?.toString() || '102'}\n        height={props.height?.toString() || '123'}\n        viewBox='0 0 102 123'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            d='M101.675 27.9958L99.2946 16.0841C98.9367 14.3239 97.8957 12.7705 96.3927 11.7537C85.2266 4.1723 70.423 0.223633 51.0193 0.223633C31.6156 0.223633 16.7987 4.17233 5.67264 11.7801C4.17376 12.8008 3.13398 14.3524 2.7708 16.1104L0.336967 27.9958C0.184635 28.743 0.245121 29.5171 0.511798 30.2325C0.778474 30.948 1.24096 31.5769 1.84808 32.0498C5.05752 34.5111 6.51514 37.7622 7.19714 41.8688C7.96339 46.1871 7.78096 50.6168 6.6622 54.8599C-3.27367 93.2541 13.4555 110.72 50.9524 122.777C88.3958 110.72 105.165 93.2541 95.2293 54.8599C94.1175 50.6158 93.9351 46.1876 94.6944 41.8688C95.4299 37.7622 96.8875 34.5111 100.043 32.0498C100.675 31.593 101.162 30.9705 101.451 30.2536C101.74 29.5366 101.817 28.7542 101.675 27.9958Z'\n            fill='#CC8F00'\n        />\n        <path\n            d='M51.019 113.063C16.9455 101.507 8.05264 87.1071 15.8088 57.1236C17.2606 51.6118 17.4932 45.8575 16.4908 40.2496C15.7615 35.2997 13.534 30.681 10.0986 26.9954L11.7568 18.8348C21.4921 12.4906 34.3433 9.41064 51.019 9.41064C67.6947 9.41064 80.5324 12.4906 90.2677 18.8348L91.9259 26.9954C88.4947 30.6822 86.2718 35.301 85.5471 40.2496C84.5448 45.8575 84.7773 51.6118 86.2291 57.1236C93.9451 87.0939 85.0925 101.572 51.019 113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.019 113.063C16.9455 101.507 8.05264 87.1071 15.8088 57.1236C17.2606 51.6118 17.4932 45.8575 16.4908 40.2496C15.7615 35.2997 13.534 30.681 10.0986 26.9954L11.7568 18.8348C21.4921 12.4906 34.3433 9.41064 51.019 9.41064C67.6947 9.41064 80.5324 12.4906 90.2677 18.8348L91.9259 26.9954C88.4947 30.6822 86.2718 35.301 85.5471 40.2496C84.5448 45.8575 84.7773 51.6118 86.2291 57.1236C93.9451 87.0939 85.0925 101.572 51.019 113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.019 52.4511V9.43701C34.3433 9.43701 21.4921 12.5169 11.7568 18.8611L10.0986 27.0217C13.534 30.7073 15.7615 35.3261 16.4908 40.276C17.2085 44.307 17.2852 48.4233 16.7181 52.4774L51.019 52.4511Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M51.0195 113.063C85.093 101.573 93.9457 87.0941 86.2297 57.1237C85.8321 55.5847 85.5241 54.0247 85.3069 52.4512H51.0195V113.063Z'\n            fill='var(--away-indicator)'\n        />\n        <path\n            d='M15.809 57.1237C8.05289 87.1072 16.9457 101.507 51.0192 113.063V52.4512H16.7184C16.5058 54.0245 16.2022 55.5845 15.809 57.1237Z'\n            fill='#FFD470'\n        />\n        <path\n            d='M51.0195 9.43701V52.4774H85.3069C84.7377 48.423 84.8189 44.3057 85.5476 40.276C86.2723 35.3274 88.4952 30.7085 91.9264 27.0217L90.2682 18.8611C80.5731 12.4906 67.6819 9.43701 51.0195 9.43701Z'\n            fill='#FFD470'\n        />\n        <path\n            d='M71.0644 38.9336L43.4633 68.8118L35.4531 62.8361H31L43.4633 82.7505L75.5175 38.9336H71.0644Z'\n            fill='#6F370B'\n        />\n    </svg>\n);\n\nexport default Svg;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type ReactNode, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nimport type {SubmitOptions} from 'components/claim/components/email_to_ldap';\nimport ShieldWithCheckmarkSVG from 'components/common/svg_images_components/shield_with_checkmark';\nimport ColumnLayout from 'components/header_footer_route/content_layouts/column';\nimport SaveButton from 'components/save_button';\nimport Input, {SIZE} from 'components/widgets/inputs/input/input';\n\nimport './login_mfa.scss';\n\ntype LoginMfaProps = {\n    loginId: string | null;\n    password: string;\n    title?: ReactNode;\n    subtitle?: ReactNode;\n    onSubmit: ({loginId, password, token}: SubmitOptions) => void;\n}\n\nconst LoginMfa = ({loginId, password, title, subtitle, onSubmit}: LoginMfaProps) => {\n    const {formatMessage} = useIntl();\n\n    const [token, setToken] = useState('');\n    const [saving, setSaving] = useState(false);\n\n    const handleInputOnChange = ({target: {value: token}}: React.ChangeEvent<HTMLInputElement>) => {\n        setToken(token.trim().replace(/\\s/g, ''));\n    };\n\n    const handleSaveButtonOnClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n        e.preventDefault();\n\n        if (!saving) {\n            setSaving(true);\n\n            onSubmit({loginId: loginId || '', password, token});\n        }\n    };\n\n    const onEnterKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        if (token) {\n            handleSaveButtonOnClick(e);\n        }\n    };\n\n    return (\n        <ColumnLayout\n            title={title || formatMessage({id: 'login_mfa.title', defaultMessage: 'Enter MFA Token'})}\n            message={subtitle || formatMessage({id: 'login_mfa.subtitle', defaultMessage: 'To complete the sign in process, please enter a token from your smartphone\\'s authenticator'})}\n            SVGElement={<ShieldWithCheckmarkSVG/>}\n            extraContent={(\n                <div className='login-mfa-form'>\n                    <Input\n                        name='token'\n                        containerClassName='login-mfa-form-input'\n                        type='text'\n                        inputSize={SIZE.LARGE}\n                        value={token}\n                        onChange={handleInputOnChange}\n                        placeholder={formatMessage({id: 'login_mfa.token', defaultMessage: 'Enter MFA Token'})}\n                        autoFocus={true}\n                        disabled={saving}\n                    />\n                    <div className='login-mfa-form-button-container'>\n                        <SaveButton\n                            extraClasses='login-mfa-form-button-submit large'\n                            saving={saving}\n                            disabled={!token}\n                            onClick={handleSaveButtonOnClick}\n                            defaultMessage={formatMessage({id: 'login_mfa.submit', defaultMessage: 'Submit'})}\n                            savingMessage={formatMessage({id: 'login_mfa.saving', defaultMessage: 'Logging in…'})}\n                        />\n                    </div>\n                </div>\n            )}\n            onEnterKeyDown={onEnterKeyDown}\n        />\n    );\n};\n\nexport default LoginMfa;\n"],"names":["_ref","onCustomizeHeader","formatMessage","useIntl","dispatch","useDispatch","history","useHistory","pathname","search","hash","useLocation","searchParam","URLSearchParams","extraParam","get","emailParam","EnableLdap","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithOffice365","EnableSignUpWithGoogle","EnableSignUpWithOpenId","EnableOpenServer","EnableUserCreation","LdapLoginFieldName","GitLabButtonText","GitLabButtonColor","OpenIdButtonText","OpenIdButtonColor","SamlLoginButtonText","EnableCustomBrand","CustomBrandText","CustomDescriptionText","SiteName","ExperimentalPrimaryTeam","ForgotPasswordLink","PasswordEnableForgotLink","useSelector","getConfig","IsLicensed","getLicense","initializing","state","requests","users","logout","status","RequestStatus","storage","initialized","currentUser","getCurrentUser","experimentalPrimaryTeam","getTeamByName","undefined","experimentalPrimaryTeamMember","getMyTeamMember","id","onboardingFlowEnabled","getIsOnboardingFlowEnabled","loginIdInput","useRef","passwordInput","closeSessionExpiredNotification","loginId","setLoginId","useState","Constants","password","setPassword","showMfa","setShowMfa","isWaiting","setIsWaiting","sessionExpired","setSessionExpired","brandImageError","setBrandImageError","alertBanner","setAlertBanner","hasError","setHasError","isMobileView","setIsMobileView","enableCustomBrand","enableLdap","enableSaml","enableSignInWithEmail","enableSignInWithUsername","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","isLicensed","ldapEnabled","enableSignUpWithSaml","siteName","enableBaseLogin","enableExternalSignup","showSignup","onlyLdapEnabled","query","redirectTo","desktopLoginLink","setDesktopLoginLink","desktopExternalAuth","href","event","isDesktopApp","preventDefault","push","concat","dismissAlert","onDismissSessionExpired","useCallback","LocalStorageStore","DesktopApp","configureTitle","document","title","showSessionExpiredNotificationIfNeeded","current","showNotification","body","defaultMessage","requireInteraction","silent","onClick","window","focus","then","_ref2","callback","closeNotification","catch","getAlertData","mode","onDismiss","getAlternateLink","linkLabel","React","AlternateLinkLayout","className","alternateLinkPath","alternateLinkLabel","handleClick","trackEvent","onWindowResize","throttle","innerWidth","onWindowFocus","_passwordInput$curren","useEffect","alternateLink","match","redirectUserToDefaultTeam","addEventListener","newSearchParam","set","replace","removeEventListener","LoadingScreen","preSubmit","e","newQuery","currentLoginId","value","currentPassword","trim","toLowerCase","t","msgId","ldapUsername","submit","async","token","_ref3","error","loginError","login","server_error_id","length","encodeURIComponent","message","postSubmit","loadMe","params","inviteToken","inviteId","data","team","addUserToTeamFromInvite","finishSignin","setCSRFFromCookie","name","team_id","getMessageSubtitle","Markdown","options","mentionHighlight","LoginMfa","onSubmit","Route","path","render","DesktopAuthToken","onLogin","classNames","alt","src","Client4","onError","handleBrandImageError","TypingAnimation","words","tabIndex","AlertBanner","_alertBanner$onDismis","Input","ref","containerClassName","type","inputSize","SIZE","onChange","_ref4","target","placeholder","getInputPlaceholder","_loginPlaceholders$","loginPlaceholders","lastIndex","slice","join","disabled","autoFocus","PasswordInput","_ref5","ExternalLink","location","Link","to","SaveButton","extraClasses","saving","savingMessage","column","getExternalLoginOptions","externalLoginOptions","url","icon","LoginGitlabIcon","label","style","color","borderColor","LoginGoogleIcon","LoginOffice365Icon","LoginOpenIDIcon","LockIcon","map","option","ExternalLoginButton","Object","assign","key","direction","ColumnLayout","getContent","Svg","props","_props$width","_props$height","width","toString","height","viewBox","fill","xmlns","d","propTypes","_pt","subtitle","setToken","setSaving","handleSaveButtonOnClick","SVGElement","ShieldWithCheckmarkSVG","extraContent","onEnterKeyDown"],"sourceRoot":""}