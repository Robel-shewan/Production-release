{"version":3,"file":"7424.76ae01998dab1d75ce71.js","mappings":"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","sources":["webpack://mattermost-webapp/./src/actions/views/mfa.js","webpack://mattermost-webapp/./src/components/section_notice.tsx","webpack://mattermost-webapp/./src/components/settings_sidebar/settings_sidebar.tsx","webpack://mattermost-webapp/./src/components/settings_sidebar/index.ts","webpack://mattermost-webapp/./src/components/setting_item_min.tsx","webpack://mattermost-webapp/./src/components/setting_item.tsx","webpack://mattermost-webapp/./src/components/setting_item_max.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/join_leave_section/join_leave_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/join_leave_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/advanced/performance_debugging_section/performance_debugging_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/performance_debugging_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/headers/setting_desktop_header.tsx","webpack://mattermost-webapp/./src/components/user_settings/headers/setting_mobile_header.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/user_settings_advanced.tsx","webpack://mattermost-webapp/./src/components/user_settings/advanced/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/import_theme_modal/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/color_chooser/color_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/custom_theme_chooser/custom_theme_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/theme_thumbnail.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/premade_theme_chooser/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/user_settings_theme.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_theme/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/manage_languages/manage_languages.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/manage_languages/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/manage_timezones/manage_timezones.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/manage_timezones/index.ts","webpack://mattermost-webapp/./src/components/user_settings/display/user_settings_display.tsx","webpack://mattermost-webapp/./src/components/user_settings/display/index.ts","webpack://mattermost-webapp/./src/components/setting_picture.tsx","webpack://mattermost-webapp/./src/components/user_settings/general/user_settings_general.tsx","webpack://mattermost-webapp/./src/components/user_settings/general/index.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_and_mobile_notification_setting/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/desktop_notification_sounds_setting/index.tsx","webpack://mattermost-webapp/./src/packages/mattermost-redux/src/utils/notify_props.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/email_notification_setting/email_notification_setting.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/email_notification_setting/index.ts","webpack://mattermost-webapp/./src/components/user_settings/notifications/manage_auto_responder/manage_auto_responder.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/user_settings_notifications.tsx","webpack://mattermost-webapp/./src/components/user_settings/notifications/index.ts","webpack://mattermost-webapp/./src/components/user_settings/plugin/plugin_action.tsx","webpack://mattermost-webapp/./src/utils/plugins/preferences.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/radio_option.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/radio.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/plugin_setting.tsx","webpack://mattermost-webapp/./src/components/user_settings/plugin/index.tsx","webpack://mattermost-webapp/./src/components/access_history_modal/access_history_modal.tsx","webpack://mattermost-webapp/./src/components/access_history_modal/index.ts","webpack://mattermost-webapp/./src/components/activity_log_modal/components/device_icon.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/components/more_info.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/components/activity_log.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/activity_log_modal.tsx","webpack://mattermost-webapp/./src/components/activity_log_modal/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/mfa_section/mfa_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/mfa_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/user_access_token_section/user_access_token_section.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/user_access_token_section/index.ts","webpack://mattermost-webapp/./src/components/user_settings/security/user_settings_security.tsx","webpack://mattermost-webapp/./src/components/user_settings/security/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/limit_visible_gms_dms/limit_visible_gms_dms.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/limit_visible_gms_dms/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/show_unreads_category/show_unreads_category.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/show_unreads_category/index.ts","webpack://mattermost-webapp/./src/components/user_settings/sidebar/user_settings_sidebar.tsx","webpack://mattermost-webapp/./src/components/user_settings/sidebar/index.ts","webpack://mattermost-webapp/./src/components/user_settings/index.tsx","webpack://mattermost-webapp/./src/components/widgets/smart_loader/index.tsx","webpack://mattermost-webapp/./src/components/user_settings/modal/user_settings_modal.tsx"],"sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport Markdown from 'components/markdown';\n\nimport './section_notice.scss';\n\ntype Button = {\n    onClick: () => void;\n    text: string;\n}\ntype Props = {\n    title: string;\n    text: string;\n    primaryButton?: Button;\n    secondaryButton?: Button;\n    linkButton?: Button;\n    type?: 'info' | 'success' | 'danger' | 'welcome' | 'warning';\n    isDismissable?: boolean;\n    onDismissClick?: () => void;\n};\n\nconst iconByType = {\n    info: 'icon-information-outline',\n    success: 'icon-check',\n    danger: 'icon-alert-outline',\n    warning: 'icon-alert-outline',\n    welcome: undefined,\n};\n\nconst SectionNotice = ({\n    title,\n    text,\n    primaryButton,\n    secondaryButton,\n    linkButton,\n    type = 'info',\n    isDismissable,\n    onDismissClick,\n}: Props) => {\n    const intl = useIntl();\n    const icon = iconByType[type];\n    const showDismiss = Boolean(isDismissable && onDismissClick);\n    const buttonClass = 'btn btn-sm sectionNoticeButton';\n    return (\n        <div className={classNames('sectionNoticeContainer', type)}>\n            <div className={'sectionNoticeContent'}>\n                {icon && <i className={classNames('icon sectionNoticeIcon', icon, type)}/>}\n                <div className='sectionNoticeBody'>\n                    <h4 className={classNames('sectionNoticeTitle', {welcome: type === 'welcome'})}>{title}</h4>\n                    <Markdown message={text}/>\n                    <div className='sectionNoticeActions'>\n                        {primaryButton &&\n                        <button\n                            onClick={primaryButton.onClick}\n                            className={classNames(buttonClass, 'btn-primary')}\n                        >\n                            {primaryButton.text}\n                        </button>\n                        }\n                        {secondaryButton &&\n                        <button\n                            onClick={secondaryButton.onClick}\n                            className={classNames(buttonClass, 'btn-secondary')}\n                        >\n                            {secondaryButton.text}\n                        </button>\n                        }\n                        {linkButton &&\n                        <button\n                            onClick={linkButton.onClick}\n                            className={classNames(buttonClass, 'btn-link')}\n                        >\n                            {linkButton.text}\n                        </button>\n                        }\n                    </div>\n\n                </div>\n            </div>\n            {showDismiss &&\n                <button\n                    className='btn btn-icon btn-sm sectionNoticeClose'\n                    onClick={onDismissClick}\n                    aria-label={intl.formatMessage({\n                        id: 'sectionNotice.dismiss',\n                        defaultMessage: 'Dismiss notice',\n                    })}\n                >\n                    <i className='icon icon-close'/>\n                </button>\n            }\n        </div>\n    );\n};\n\nexport default SectionNotice;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {a11yFocus} from 'utils/utils';\n\nexport type Tab = {\n    icon: string | {url: string};\n    iconTitle: string;\n    name: string;\n    uiName: string;\n}\n\nexport type Props = {\n    activeTab?: string;\n    tabs: Tab[];\n    pluginTabs?: Tab[];\n    updateTab: (name: string) => void;\n    isMobileView: boolean;\n};\n\nexport default class SettingsSidebar extends React.PureComponent<Props> {\n    buttonRefs: Array<RefObject<HTMLButtonElement>>;\n\n    constructor(props: Props) {\n        super(props);\n        this.buttonRefs = this.props.tabs.map(() => React.createRef());\n    }\n\n    public handleClick = (tab: Tab, e: React.MouseEvent) => {\n        e.preventDefault();\n        this.props.updateTab(tab.name);\n        (e.target as Element).closest('.settings-modal')?.classList.add('display--content');\n    };\n\n    public handleKeyUp = (index: number, e: React.KeyboardEvent) => {\n        if (isKeyPressed(e, Constants.KeyCodes.UP)) {\n            if (index > 0) {\n                this.props.updateTab(this.props.tabs[index - 1].name);\n                a11yFocus(this.buttonRefs[index - 1].current);\n            }\n        } else if (isKeyPressed(e, Constants.KeyCodes.DOWN)) {\n            if (index < this.props.tabs.length - 1) {\n                this.props.updateTab(this.props.tabs[index + 1].name);\n                a11yFocus(this.buttonRefs[index + 1].current);\n            }\n        }\n    };\n\n    private renderTab(tab: Tab, index: number) {\n        const key = `${tab.name}_li`;\n        const isActive = this.props.activeTab === tab.name;\n        let className = '';\n        if (isActive) {\n            className = 'active';\n        }\n\n        let icon;\n        if (typeof tab.icon === 'string') {\n            icon = (\n                <i\n                    className={tab.icon}\n                    title={tab.iconTitle}\n                />\n            );\n        } else {\n            icon = (\n                <img\n                    src={tab.icon.url}\n                    alt={tab.iconTitle}\n                    className='icon'\n                />\n            );\n        }\n\n        return (\n            <li\n                id={`${tab.name}Li`}\n                key={key}\n                className={className}\n                role='presentation'\n            >\n                <button\n                    ref={this.buttonRefs[index]}\n                    id={`${tab.name}Button`}\n                    className='cursor--pointer style--none'\n                    onClick={this.handleClick.bind(null, tab)}\n                    onKeyUp={this.handleKeyUp.bind(null, index)}\n                    aria-label={tab.uiName.toLowerCase()}\n                    role='tab'\n                    aria-selected={isActive}\n                    tabIndex={!isActive && !this.props.isMobileView ? -1 : 0}\n                >\n                    {icon}\n                    {tab.uiName}\n                </button>\n            </li>\n        );\n    }\n\n    public render() {\n        const tabList = this.props.tabs.map((tab, index) => this.renderTab(tab, index));\n        let pluginTabList: React.ReactNode;\n        if (this.props.pluginTabs?.length) {\n            pluginTabList = (\n                <>\n                    <hr/>\n                    <li\n                        key={'plugin preferences heading'}\n                        role='heading'\n                        className={'header'}\n                    >\n                        <FormattedMessage\n                            id={'userSettingsModal.pluginPreferences.header'}\n                            defaultMessage={'PLUGIN PREFERENCES'}\n                        />\n                    </li>\n                    {this.props.pluginTabs.map((tab, index) => this.renderTab(tab, index))}\n                </>\n            );\n        }\n\n        return (\n            <div>\n                <ul\n                    id='tabList'\n                    className='nav nav-pills nav-stacked'\n                    role='tablist'\n                    aria-orientation='vertical'\n                >\n                    {tabList}\n                    {pluginTabList}\n                </ul>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport SettingsSidebar from './settings_sidebar';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        isMobileView: getIsMobileView(state),\n    };\n}\n\nexport default connect(mapStateToProps)(SettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React, {type ReactNode, type MouseEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport EditIcon from 'components/widgets/icons/fa_edit_icon';\n\nimport {a11yFocus} from 'utils/utils';\n\ninterface Props {\n\n    /**\n     * Settings title\n     */\n    title: ReactNode;\n\n    /**\n     * Option to disable opening the setting\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Settings or tab section\n     */\n    section: string;\n\n    /**\n     * Function to update section\n     */\n    updateSection: (section: string) => void;\n\n    /**\n     * Settings description\n     */\n    describe?: ReactNode;\n\n    /**\n     * Replacement in place of edit button when the setting (in collapsed mode) is disabled\n     */\n    collapsedEditButtonWhenDisabled?: ReactNode;\n}\n\nexport default class SettingItemMin extends React.PureComponent<Props> {\n    private edit: HTMLButtonElement | null = null;\n\n    focus() {\n        a11yFocus(this.edit);\n    }\n\n    private getEdit = (node: HTMLButtonElement) => {\n        this.edit = node;\n    };\n\n    handleClick = (e: MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n        if (this.props.isDisabled) {\n            return;\n        }\n\n        e.preventDefault();\n        this.props.updateSection(this.props.section);\n    };\n\n    render() {\n        let editButtonComponent: ReactNode;\n\n        if (this.props.isDisabled) {\n            if (this.props.collapsedEditButtonWhenDisabled) {\n                editButtonComponent = this.props.collapsedEditButtonWhenDisabled;\n            } else {\n                editButtonComponent = null;\n            }\n        } else {\n            editButtonComponent = (\n                <button\n                    ref={this.getEdit}\n                    id={this.props.section + 'Edit'}\n                    className='color--link style--none section-min__edit'\n                    onClick={this.handleClick}\n                    aria-labelledby={this.props.section + 'Title ' + this.props.section + 'Edit'}\n                    aria-expanded={false}\n                >\n                    <EditIcon/>\n                    <FormattedMessage\n                        id='setting_item_min.edit'\n                        defaultMessage='Edit'\n                    />\n                </button>\n            );\n        }\n\n        return (\n            <div\n                className={classNames('section-min', {isDisabled: this.props.isDisabled})}\n                onClick={this.handleClick}\n            >\n                <div\n                    className='secion-min__header'\n                >\n                    <h4\n                        id={this.props.section + 'Title'}\n                        className={classNames('section-min__title', {isDisabled: this.props.isDisabled})}\n                    >\n                        {this.props.title}\n                    </h4>\n                    {editButtonComponent}\n                </div>\n                <div\n                    id={this.props.section + 'Desc'}\n                    className={classNames('section-min__describe', {isDisabled: this.props.isDisabled})}\n                >\n                    {this.props.describe}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React, {useRef} from 'react';\n\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport useDidUpdate from './common/hooks/useDidUpdate';\n\ntype Props = {\n\n    /**\n     * Whether this setting item is currently open\n     */\n    active: boolean;\n\n    /**\n     * Whether all sections in the panel are currently closed\n     */\n    areAllSectionsInactive: boolean;\n\n    /**\n     * The identifier of this section\n     */\n    section: string;\n\n    /**\n     * The setting UI when it is maximized (open)\n     */\n    max?: ReactNode;\n\n    // Props to pass through for SettingItemMin\n    updateSection: (section: string) => void;\n    title?: ReactNode;\n    isDisabled?: boolean;\n    describe?: ReactNode;\n\n    /**\n     * Replacement in place of edit button when the setting (in collapsed mode) is disabled\n     */\n    collapsedEditButtonWhenDisabled?: ReactNode;\n}\n\nconst SettingItem = ({\n    active,\n    areAllSectionsInactive,\n    section,\n    max,\n    updateSection,\n    title,\n    isDisabled,\n    describe,\n    collapsedEditButtonWhenDisabled,\n}: Props) => {\n    const minRef = useRef<SettingItemMinComponent>(null);\n\n    useDidUpdate(() => {\n        // We want to bring back focus to the edit button when the section is opened and then closed along with all sections are closed\n\n        if (!active && areAllSectionsInactive) {\n            minRef.current?.focus();\n        }\n    }, [active]);\n\n    if (active) {\n        return <>{max}</>;\n    }\n\n    return (\n        <SettingItemMin\n            ref={minRef}\n            title={title}\n            updateSection={updateSection}\n            describe={describe}\n            section={section}\n            isDisabled={isDisabled}\n            collapsedEditButtonWhenDisabled={collapsedEditButtonWhenDisabled}\n        />\n    );\n};\n\nexport default React.memo(SettingItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SaveButton from 'components/save_button';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\nimport {a11yFocus} from 'utils/utils';\n\ntype Props = {\n\n    // Array of inputs selection\n    inputs?: ReactNode;\n    containerStyle?: string;\n    serverError?: ReactNode;\n\n    /**\n     * Client error\n     */\n    clientError?: ReactNode;\n\n    /**\n     * Settings extra information\n     */\n    extraInfo?: ReactNode;\n\n    /**\n     * Info position\n     */\n    infoPosition?: string;\n\n    /**\n     * Settings or tab section\n     */\n    section: string;\n    updateSection?: (section: string) => void;\n    setting?: string;\n    submit?: ((setting?: string) => void) | null;\n    disableEnterSubmit?: boolean;\n    submitExtra?: ReactNode;\n    saving?: boolean;\n    title?: ReactNode;\n    isFullWidth?: boolean;\n    cancelButtonText?: ReactNode;\n    shiftEnter?: boolean;\n    saveButtonText?: string;\n    saveButtonClassName?: string;\n}\nexport default class SettingItemMax extends React.PureComponent<Props> {\n    settingList: React.RefObject<HTMLDivElement>;\n\n    static defaultProps = {\n        infoPosition: 'bottom',\n        saving: false,\n        section: '',\n        containerStyle: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.settingList = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.settingList.current) {\n            const focusableElements: NodeListOf<HTMLElement> = this.settingList.current.querySelectorAll('.btn:not(.save-button):not(.btn-tertiary), input.form-control, input[type=\"radio\"][checked], input[type=\"checkbox\"], select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n            if (focusableElements.length > 0) {\n                a11yFocus(focusableElements[0]);\n            } else {\n                a11yFocus(this.settingList.current);\n            }\n        }\n\n        document.addEventListener('keydown', this.onKeyDown);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.onKeyDown);\n    }\n\n    onKeyDown = (e: KeyboardEvent) => {\n        const target = e.target as HTMLElement;\n        if (this.props.shiftEnter && isKeyPressed(e, Constants.KeyCodes.ENTER) && e.shiftKey) {\n            return;\n        }\n        if (this.props.disableEnterSubmit !== true &&\n            isKeyPressed(e, Constants.KeyCodes.ENTER) &&\n            this.props.submit &&\n            target.tagName !== 'SELECT' &&\n            target.parentElement &&\n            target.parentElement.className !== 'react-select__input' &&\n            !target.classList.contains('btn-tertiary') &&\n            this.settingList.current &&\n            this.settingList.current.contains(target)) {\n            this.handleSubmit(e);\n        }\n    };\n\n    handleSubmit = (e: React.MouseEvent | KeyboardEvent) => {\n        e.preventDefault();\n\n        if (this.props.setting && this.props.submit) {\n            this.props.submit(this.props.setting);\n        } else if (this.props.submit) {\n            this.props.submit();\n        }\n    };\n\n    handleUpdateSection = (e: React.MouseEvent) => {\n        if (this.props.updateSection) {\n            this.props.updateSection(this.props.section);\n        }\n        e.preventDefault();\n    };\n\n    render() {\n        let clientError = null;\n        if (this.props.clientError) {\n            clientError = (\n                <div className='form-group'>\n                    <label\n                        id='clientError'\n                        className='col-sm-12 has-error'\n                    >\n                        {this.props.clientError}\n                    </label>\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.props.serverError) {\n            serverError = (\n                <div className='form-group'>\n                    <label\n                        id='serverError'\n                        className='col-sm-12 has-error'\n                    >\n                        {this.props.serverError}\n                    </label>\n                </div>\n            );\n        }\n\n        let extraInfo = null;\n        let hintClass = 'setting-list__hint';\n        if (this.props.infoPosition === 'top') {\n            hintClass = 'pb-3';\n        }\n\n        if (this.props.extraInfo) {\n            extraInfo = (\n                <div\n                    id='extraInfo'\n                    className={hintClass}\n                >\n                    {this.props.extraInfo}\n                </div>\n            );\n        }\n\n        let submit: JSX.Element | null = null;\n        if (this.props.submit) {\n            submit = (\n                <SaveButton\n                    defaultMessage={this.props.saveButtonText}\n                    saving={this.props.saving}\n                    disabled={this.props.saving}\n                    onClick={this.handleSubmit}\n                    btnClass={this.props.saveButtonClassName}\n                />\n            );\n        }\n\n        const inputs = this.props.inputs;\n\n        let title;\n        if (this.props.title) {\n            title = (\n                <h4\n                    id='settingTitle'\n                    className='col-sm-12 section-title'\n                >\n                    {this.props.title}\n                </h4>\n            );\n        }\n\n        let listContent = (\n            <div className='setting-list-item'>\n                {inputs}\n                {extraInfo}\n            </div>\n        );\n\n        if (this.props.infoPosition === 'top') {\n            listContent = (\n                <div>\n                    {extraInfo}\n                    {inputs}\n                </div>\n            );\n        }\n\n        let cancelButtonText;\n        if (this.props.cancelButtonText) {\n            cancelButtonText = this.props.cancelButtonText;\n        } else {\n            cancelButtonText = (\n                <FormattedMessage\n                    id='setting_item_max.cancel'\n                    defaultMessage='Cancel'\n                />\n            );\n        }\n\n        return (\n            <section\n                className={`section-max form-horizontal ${this.props.containerStyle}`}\n            >\n                {title}\n                <div\n                    className={classNames('sectionContent', {\n                        'col-sm-12': this.props.isFullWidth,\n                        'col-sm-10 col-sm-offset-2': !this.props.isFullWidth,\n                    })}\n                >\n                    <div\n                        tabIndex={-1}\n                        ref={this.settingList}\n                        className='setting-list'\n                    >\n                        {listContent}\n                        <div className='setting-list-item'>\n                            <hr/>\n                            {this.props.submitExtra}\n                            {serverError}\n                            {clientError}\n                            {submit}\n                            <button\n                                id={'cancelSetting'}\n                                className='btn btn-tertiary'\n                                onClick={this.handleUpdateSection}\n                            >\n                                {cancelButtonText}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ReactNode, RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\nimport {a11yFocus} from 'utils/utils';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    joinLeave: string;\n    onUpdateSection: (section?: string) => void;\n    renderOnOffLabel: (label: string) => ReactNode;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n    };\n}\n\ntype State = {\n    joinLeaveState: string;\n    isSaving?: boolean;\n    serverError?: string;\n}\n\nexport default class JoinLeaveSection extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    public handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n        a11yFocus(e.currentTarget);\n    };\n\n    public handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    };\n\n    public handleSubmit = (): void => {\n        const {actions, userId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: userId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(userId, [joinLeavePreference]);\n\n        onUpdateSection();\n    };\n\n    public render(): React.ReactNode {\n        const {joinLeaveState} = this.state;\n        if (this.props.active) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState!)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n                ref={this.minRef}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './join_leave_section';\nimport JoinLeaveSection from './join_leave_section';\n\nexport function mapStateToProps(state: GlobalState, props: OwnProps) {\n    const config = getConfig(state);\n    const enableJoinLeaveMessage = config.EnableJoinLeaveMessageByDefault === 'true';\n    const userPreference = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, Preferences.ADVANCED_FILTER_JOIN_LEAVE, enableJoinLeaveMessage.toString(), userPreference),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState, useRef, useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nimport type {PropsFromRedux} from './index';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n}\n\ntype Props = PropsFromRedux & OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    onUpdateSection: (section?: string) => void;\n};\n\nexport default function PerformanceDebuggingSection(props: Props) {\n    const minRef = useRef<SettingItemMinComponent>(null);\n    const prevActiveRef = useRef(false);\n\n    useEffect(() => {\n        if (prevActiveRef.current && !props.active && props.areAllSectionsInactive) {\n            minRef.current?.focus();\n        }\n    });\n\n    useEffect(() => {\n        prevActiveRef.current = props.active;\n    }, [props.active]);\n\n    if (!props.performanceDebuggingEnabled) {\n        return null;\n    }\n\n    let settings;\n    if (props.active) {\n        settings = <PerformanceDebuggingSectionExpanded {...props}/>;\n    } else {\n        settings = (\n            <PerformanceDebuggingSectionCollapsed\n                {...props}\n                ref={minRef}\n            />\n        );\n    }\n\n    return (\n        <>\n            {settings}\n            <div className='divider-light'/>\n        </>\n    );\n}\n\nconst PerformanceDebuggingSectionCollapsed = React.forwardRef<SettingItemMinComponent, Props>((props, ref) => {\n    let settingsEnabled = 0;\n\n    if (props.disableClientPlugins) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTelemetry) {\n        settingsEnabled += 1;\n    }\n    if (props.disableTypingMessages) {\n        settingsEnabled += 1;\n    }\n\n    let description;\n    if (settingsEnabled === 0) {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.noneEnabled'\n                defaultMessage='No settings enabled'\n            />\n        );\n    } else {\n        description = (\n            <FormattedMessage\n                id='user.settings.advance.performance.settingsEnabled'\n                defaultMessage='{count, number} {count, plural, one {setting} other {settings}} enabled'\n                values={{count: settingsEnabled}}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            describe={description}\n            section={AdvancedSections.PERFORMANCE_DEBUGGING}\n            updateSection={props.onUpdateSection}\n            ref={ref}\n        />\n    );\n});\n\nfunction PerformanceDebuggingSectionExpanded(props: Props) {\n    const [disableClientPlugins, setDisableClientPlugins] = useState(props.disableClientPlugins);\n    const [disableTelemetry, setDisableTelemetry] = useState(props.disableTelemetry);\n    const [disableTypingMessages, setDisableTypingMessages] = useState(props.disableTypingMessages);\n\n    const handleSubmit = useCallback(() => {\n        if (!props.userId) {\n            return;\n        }\n\n        const preferences = [];\n\n        if (disableClientPlugins !== props.disableClientPlugins) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_CLIENT_PLUGINS,\n                value: disableClientPlugins.toString(),\n            });\n        }\n        if (disableTelemetry !== props.disableTelemetry) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TELEMETRY,\n                value: disableTelemetry.toString(),\n            });\n        }\n        if (disableTypingMessages !== props.disableTypingMessages) {\n            preferences.push({\n                user_id: props.userId,\n                category: Preferences.CATEGORY_PERFORMANCE_DEBUGGING,\n                name: Preferences.NAME_DISABLE_TYPING_MESSAGES,\n                value: disableTypingMessages.toString(),\n            });\n        }\n\n        if (preferences.length !== 0 && props.userId) {\n            props.savePreferences(props.userId, preferences);\n        }\n\n        props.onUpdateSection('');\n    }, [\n        props.userId,\n        props.onUpdateSection,\n        props.savePreferences,\n        disableClientPlugins,\n        disableTelemetry,\n        disableTypingMessages,\n    ]);\n\n    return (\n        <SettingItemMax\n            title={\n                <FormattedMessage\n                    id='user.settings.advance.performance.title'\n                    defaultMessage='Performance Debugging'\n                />\n            }\n            inputs={[\n                <fieldset key='settings'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableClientPlugins}\n                                onChange={(e) => {\n                                    setDisableClientPlugins(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableClientPlugins'\n                                defaultMessage='Disable Client-side Plugins'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTelemetry}\n                                onChange={(e) => {\n                                    setDisableTelemetry(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTelemetry'\n                                defaultMessage='Disable telemetry events sent from the client'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={disableTypingMessages}\n                                onChange={(e) => {\n                                    setDisableTypingMessages(e.target.checked);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.performance.disableTypingMessages'\n                                defaultMessage='Disable \"User is typing...\" messages'\n                            />\n                        </label>\n                    </div>\n                    <div className='mt-5'>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info1'\n                            defaultMessage=\"You may enable these settings temporarily to help isolate performance issues while debugging. We don't recommend leaving these settings enabled for an extended period of time as they can negatively impact your user experience.\"\n                        />\n                        <br/>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.performance.info2'\n                            defaultMessage='You may need to refresh the page before these settings take effect.'\n                        />\n                    </div>\n                </fieldset>,\n            ]}\n            submit={handleSubmit}\n            updateSection={props.onUpdateSection}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport type {ConnectedProps} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {isPerformanceDebuggingEnabled} from 'mattermost-redux/selectors/entities/general';\nimport {getBool, getUserPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './performance_debugging_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nfunction mapStateToProps(state: GlobalState, props: OwnProps) {\n    const userPreferences = props.adminMode && props.userId ? getUserPreferences(state, props.userId) : undefined;\n\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        disableClientPlugins: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_CLIENT_PLUGINS, undefined, userPreferences),\n        disableTelemetry: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TELEMETRY, undefined, userPreferences),\n        disableTypingMessages: getBool(state, Preferences.CATEGORY_PERFORMANCE_DEBUGGING, Preferences.NAME_DISABLE_TYPING_MESSAGES, undefined, userPreferences),\n        performanceDebuggingEnabled: isPerformanceDebuggingEnabled(state),\n\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(PerformanceDebuggingSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\n\nimport './setting_desktop_header.scss';\n\ninterface Props {\n    id?: string;\n    text: ReactNode;\n    info?: ReactNode;\n}\n\nexport default function SettingDesktopHeader(props: Props) {\n    return (\n        <div className='userSettingDesktopHeader'>\n            <h3\n                id={props.id}\n                className='tab-header'\n            >\n                {props.text}\n            </h3>\n            {props.info && <div className='userSettingDesktopHeaderInfo'>{props.info}</div>}\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ReactNode} from 'react';\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\ntype Props = {\n    text: ReactNode;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\nconst SettingMobileHeader = ({\n    text,\n    closeModal,\n    collapseModal,\n}: Props) => {\n    const intl = useIntl();\n\n    return (\n        <div className='modal-header'>\n            <button\n                id='closeButton'\n                type='button'\n                className='close'\n                data-dismiss='modal'\n                onClick={closeModal}\n            >\n                <span aria-hidden='true'>{'×'}</span>\n            </button>\n            <h4 className='modal-title'>\n                <div className='modal-back'>\n                    <i\n                        className='fa fa-angle-left'\n                        aria-label={\n                            intl.formatMessage({\n                                id: 'generic_icons.collapse',\n                                defaultMessage: 'Collapse Icon',\n                            })\n                        }\n                        onClick={collapseModal}\n                    />\n                </div>\n                {text}\n            </h4>\n        </div>\n    );\n};\n\nexport default SettingMobileHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {ReactNode} from 'react';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\n\nimport Constants, {AdvancedSections, Preferences} from 'utils/constants';\nimport {isMac} from 'utils/user_agent';\nimport {a11yFocus} from 'utils/utils';\n\nimport JoinLeaveSection from './join_leave_section';\nimport PerformanceDebuggingSection from './performance_debugging_section';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nimport type {PropsFromRedux} from './index';\n\ntype Settings = {\n    [key: string]: string | undefined;\n    send_on_ctrl_enter: Props['sendOnCtrlEnter'];\n    code_block_ctrl_enter: Props['codeBlockOnCtrlEnter'];\n    formatting: Props['formatting'];\n    join_leave: Props['joinLeave'];\n    sync_drafts: Props['syncDrafts'];\n};\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    user: UserProfile;\n    userPreferences?: PreferencesType;\n    updateSection: (section?: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n}\n\nexport type Props = OwnProps & PropsFromRedux;\n\ntype State = {\n    settings: Settings;\n    isSaving: boolean;\n    showDeactivateAccountModal: boolean;\n    serverError: string;\n}\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = (): State => {\n        const settings: Settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n            sync_drafts: this.props.syncDrafts,\n            [Preferences.UNREAD_SCROLL_POSITION]: this.props.unreadScrollPosition,\n        };\n\n        const isSaving = false;\n\n        const showDeactivateAccountModal = false;\n\n        return {\n            settings,\n            isSaving,\n            showDeactivateAccountModal,\n            serverError: '',\n        };\n    };\n\n    updateSetting = (setting: string, value: string, e?: React.ChangeEvent): void => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState((prevState) => ({...prevState, ...settings}));\n        a11yFocus(e?.currentTarget as HTMLElement);\n    };\n\n    handleSubmit = async (settings: string[]): Promise<void> => {\n        if (!this.props.user) {\n            return;\n        }\n\n        const preferences: PreferenceType[] = [];\n        const {actions, user} = this.props;\n        const userId = user.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting]!,\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    };\n\n    handleDeactivateAccountSubmit = async (): Promise<void> => {\n        const userId = this.props.user.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleShowDeactivateAccountModal = (): void => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    };\n\n    handleHideDeactivateAccountModal = (): void => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    };\n\n    handleUpdateSection = (section?: string): void => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = defineMessages({\n            default: {\n                id: 'user.settings.advance.sendDesc',\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: 'user.settings.advance.sendDesc.mac',\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        });\n        const title = defineMessages({\n            default: {\n                id: 'user.settings.advance.sendTitle',\n                defaultMessage: 'Send Messages on CTRL+ENTER',\n            },\n            mac: {\n                id: 'user.settings.advance.sendTitle.mac',\n                defaultMessage: 'Send Messages on ⌘+ENTER',\n            },\n        });\n        if (isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    };\n\n    renderOnOffLabel(enabled: string): JSX.Element {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderUnreadScrollPositionLabel(option?: string): JSX.Element {\n        if (option === Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT) {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.startFromLeftOff'\n                    defaultMessage='Start me where I left off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.startFromNewest'\n                defaultMessage='Start me at the newest message'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel(): JSX.Element {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        const active = this.props.activeSection === 'formatting';\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    submit={this.handleSubmit.bind(this, ['formatting'])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderUnreadScrollPositionSection = () => {\n        const active = this.props.activeSection === Preferences.UNREAD_SCROLL_POSITION;\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.unreadScrollPositionTitle'\n                            defaultMessage='Scroll position when viewing an unread channel'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='unreadScrollPositionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.unreadScrollPositionTitle'\n                                    defaultMessage='Scroll position when viewing an unread channel'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadPositionStartFromLeftOff'\n                                        type='radio'\n                                        name='unreadScrollPosition'\n                                        checked={this.state.settings.unread_scroll_position === Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT}\n                                        onChange={this.updateSetting.bind(this, Preferences.UNREAD_SCROLL_POSITION, Preferences.UNREAD_SCROLL_POSITION_START_FROM_LEFT)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.startFromLeftOff'\n                                        defaultMessage='Start me where I left off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='unreadPositionStartFromNewest'\n                                        type='radio'\n                                        name='unreadScrollPosition'\n                                        checked={this.state.settings.unread_scroll_position === Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST}\n                                        onChange={this.updateSetting.bind(this, Preferences.UNREAD_SCROLL_POSITION, Preferences.UNREAD_SCROLL_POSITION_START_FROM_NEWEST)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.startFromNewest'\n                                        defaultMessage='Start me at the newest message'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.unreadScrollPositionDesc'\n                                    defaultMessage='Choose your scroll position when you view an unread channel. Channels will always be marked as read when viewed.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    submit={this.handleSubmit.bind(this, [Preferences.UNREAD_SCROLL_POSITION])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.unreadScrollPositionTitle'\n                        defaultMessage='Scroll position when viewing an unread channel'\n                    />\n                }\n                describe={this.renderUnreadScrollPositionLabel(this.state.settings[Preferences.UNREAD_SCROLL_POSITION])}\n                section={Preferences.UNREAD_SCROLL_POSITION}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderSyncDraftsSection = () => {\n        const active = this.props.activeSection === AdvancedSections.SYNC_DRAFTS;\n        let max = null;\n        if (active) {\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.syncDrafts.Title'\n                            defaultMessage='Allow message drafts to sync with the server'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='syncDraftsSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.syncDrafts.Title'\n                                    defaultMessage='Allow message drafts to sync with the server'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='syncDraftsOn'\n                                        type='radio'\n                                        name='syncDrafts'\n                                        checked={this.state.settings.sync_drafts !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'sync_drafts', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='syncDraftsOff'\n                                        type='radio'\n                                        name='syncDrafts'\n                                        checked={this.state.settings.sync_drafts === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'sync_drafts', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='mt-5'>\n                                <FormattedMessage\n                                    id='user.settings.advance.syncDrafts.Desc'\n                                    defaultMessage='When enabled, message drafts are synced with the server so they can be accessed from any device. When disabled, message drafts are only saved locally on the device where they are composed.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.SYNC_DRAFTS}\n                    submit={this.handleSubmit.bind(this, ['sync_drafts'])}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.syncDrafts.Title'\n                        defaultMessage='Allow message drafts to sync with the server'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.sync_drafts)}\n                section={AdvancedSections.SYNC_DRAFTS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    renderCtrlSendSection = () => {\n        const active = this.props.activeSection === 'advancedCtrlSend';\n        const serverError = this.state.serverError || null;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n        let max = null;\n        if (active) {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={(e) => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                    a11yFocus(e.currentTarget);\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage {...ctrlSendTitle}/>\n                }\n                describe={this.renderCtrlEnterLabel()}\n                section={'advancedCtrlSend'}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const ctrlSendSection = this.renderCtrlSendSection();\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let deactivateAccountSection: ReactNode = '';\n        let makeConfirmationModal: ReactNode = '';\n\n        if (this.props.user.auth_service === '' && this.props.enableUserDeactivation && !this.props.adminMode) {\n            const active = this.props.activeSection === 'deactivateAccount';\n            let max = null;\n            if (active) {\n                max = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        saveButtonClassName={'btn-danger'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n            deactivateAccountSection = (\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.deactivateAccountTitle'\n                            defaultMessage='Deactivate Account'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.advance.deactivateDescShort'\n                            defaultMessage=\"Click 'Edit' to deactivate your account\"\n                        />\n                    }\n                    section={'deactivateAccount'}\n                    updateSection={this.handleUpdateSection}\n                    max={max}\n                />\n            );\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        const unreadScrollPositionSection = this.renderUnreadScrollPositionSection();\n        let unreadScrollPositionSectionDivider = null;\n        if (unreadScrollPositionSection) {\n            unreadScrollPositionSectionDivider = <div className='divider-light'/>;\n        }\n\n        let syncDraftsSection = null;\n        let syncDraftsSectionDivider = null;\n        if (this.props.syncedDraftsAreAllowed) {\n            syncDraftsSection = this.renderSyncDraftsSection();\n            if (syncDraftsSection) {\n                syncDraftsSectionDivider = <div className='divider-light'/>;\n            }\n        }\n\n        return (\n            <div>\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        text={\n                            <FormattedMessage\n                                id='user.settings.advance.title'\n                                defaultMessage='Advanced Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        active={this.props.activeSection === AdvancedSections.JOIN_LEAVE}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                        adminMode={this.props.adminMode}\n                        userPreferences={this.props.userPreferences}\n                        userId={this.props.user.id}\n                    />\n                    <PerformanceDebuggingSection\n                        active={this.props.activeSection === AdvancedSections.PERFORMANCE_DEBUGGING}\n                        onUpdateSection={this.handleUpdateSection}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        adminMode={this.props.adminMode}\n                        userId={this.props.user.id}\n                    />\n                    {unreadScrollPositionSectionDivider}\n                    {unreadScrollPositionSection}\n                    {syncDraftsSectionDivider}\n                    {syncDraftsSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ConnectedProps} from 'react-redux';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {\n    get,\n    getUnreadScrollPositionPreference,\n    makeGetCategory, makeGetUserCategory,\n    syncedDraftsAreAllowed,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced';\nimport type {OwnProps} from './user_settings_advanced';\n\nconst getAdvancedSettingsCategory = makeGetCategory('getAdvancedSettingsCategory', Preferences.CATEGORY_ADVANCED_SETTINGS);\n\nfunction makeMapStateToProps() {\n    const getUserAdvancedSettingsCategory = makeGetUserCategory('getAdvancedSettingsCategory', Preferences.CATEGORY_ADVANCED_SETTINGS);\n\n    return (state: GlobalState, props: OwnProps) => {\n        const config = getConfig(state);\n\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n        const enableJoinLeaveMessage = config.EnableJoinLeaveMessageByDefault === 'true';\n\n        const userPreferences = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n        const advancedSettingsCategory = userPreferences ? getUserAdvancedSettingsCategory(state, props.user.id) : getAdvancedSettingsCategory(state);\n\n        return {\n            advancedSettingsCategory,\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false', userPreferences),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true', userPreferences),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true', userPreferences),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', enableJoinLeaveMessage.toString(), userPreferences),\n            syncDrafts: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'sync_drafts', 'true', userPreferences),\n            user: props.adminMode && props.user ? props.user : getCurrentUser(state),\n            unreadScrollPosition: getUnreadScrollPositionPreference(state, userPreferences),\n            enableUserDeactivation,\n            syncedDraftsAreAllowed: syncedDraftsAreAllowed(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nconst connector = connect(makeMapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {WrappedComponentProps} from 'react-intl';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\ninterface Props extends WrappedComponentProps {\n    callback: ((args: Theme) => void) | null;\n    onExited: () => void;\n}\n\ntype State = {\n    value: string;\n    inputError: React.ReactNode | null;\n    show: boolean;\n}\n\nclass ImportThemeModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            inputError: null,\n            show: true,\n        };\n    }\n\n    private handleOnHide = () => {\n        this.setState({show: false});\n    };\n\n    private handleSubmit = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const text = this.state.value;\n\n        if (!ImportThemeModal.isInputValid(text)) {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n            return;\n        }\n\n        /*\n         * index mapping of slack theme format (index => slack-property name)\n         *\n         * |-------|-------------------------|-------------------------|\n         * | index | Slack theme-property    | MM theme-property       |\n         * |-------|-------------------------|-------------------------|\n         * |   0   | Column BG               | sidebarBg               |\n         * |   1   | ???                     | sidebarHeaderBg         |\n         * |   2   | Active Item BG          | sidebarTextActiveBorder |\n         * |   3   | Active Item Text        | sidebarTextActiveColor  |\n         * |   4   | Hover Item BG           | sidebarTextHoverBg      |\n         * |   5   | Text Color              | sidebarText             |\n         * |   6   | Active Presence         | onlineIndicator         |\n         * |   7   | Mention Badge           | mentionBg               |\n         * |   8   | TOP-NAV BG              | --- (desktop only)      |\n         * |   9   | TOP-NAV Text            | --- (desktop only)      |\n         * |-------|-------------------------|-------------------------|\n         *\n         * values at index 8 + 9 are only for the desktop app\n         */\n\n        const [\n            sidebarBg, // 0\n            sidebarHeaderBg, // 1\n            sidebarTextActiveBorder, // 2\n            sidebarTextActiveColor, // 3\n            sidebarTextHoverBg, // 4\n            sidebarText, // 5\n            onlineIndicator, // 6\n            mentionBg, // 7\n        ] = text.split(',');\n\n        const theme = setThemeDefaults({\n            type: 'custom',\n            sidebarBg,\n            sidebarText,\n            sidebarUnreadText: sidebarText,\n            sidebarTextHoverBg,\n            sidebarTextActiveBorder,\n            sidebarTextActiveColor,\n            sidebarHeaderBg,\n            sidebarHeaderTextColor: sidebarText,\n            onlineIndicator,\n            mentionBg,\n        });\n\n        this.props.callback?.(theme as Theme);\n\n        this.handleOnHide();\n    };\n\n    private static isInputValid(text: string) {\n        if (text.length === 0) {\n            return false;\n        }\n\n        if (text.indexOf(' ') !== -1) {\n            return false;\n        }\n\n        if (text.length > 0 && text.indexOf(',') === -1) {\n            return false;\n        }\n\n        if (text.length > 0) {\n            const colors = text.split(',');\n\n            if (colors.length !== 10) {\n                return false;\n            }\n\n            for (let i = 0; i < colors.length; i++) {\n                if (colors[i].length !== 7 && colors[i].length !== 4) {\n                    return false;\n                }\n\n                if (colors[i].charAt(0) !== '#') {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value;\n        this.setState({value});\n\n        if (ImportThemeModal.isInputValid(value)) {\n            this.setState({inputError: null});\n        } else {\n            this.setState({\n                inputError: (\n                    <FormattedMessage\n                        id='user.settings.import_theme.submitError'\n                        defaultMessage='Invalid format, please try copying and pasting in again.'\n                    />\n                ),\n            });\n        }\n    };\n\n    render() {\n        return (\n            <span>\n                <Modal\n                    dialogClassName='a11y__modal'\n                    show={this.state.show}\n                    onHide={this.handleOnHide}\n                    onExited={this.props.onExited}\n                    role='dialog'\n                    aria-labelledby='importThemeModalLabel'\n                >\n                    <Modal.Header closeButton={true}>\n                        <Modal.Title\n                            componentClass='h1'\n                            id='importThemeModalLabel'\n                        >\n                            <FormattedMessage\n                                id='user.settings.import_theme.importHeader'\n                                defaultMessage='Import Slack Theme'\n                            />\n                        </Modal.Title>\n                    </Modal.Header>\n                    <form\n                        role='form'\n                        className='form-horizontal'\n                    >\n                        <Modal.Body>\n                            <p>\n                                <FormattedMessage\n                                    id='user.settings.import_theme.importBody'\n                                    defaultMessage='To import a theme, go to a Slack team and look for \"Preferences -> Themes\". Open the custom theme option, copy the theme color values and paste them here:'\n                                />\n                            </p>\n                            <div className='form-group less'>\n                                <div className='col-sm-12'>\n                                    <input\n                                        id='themeVector'\n                                        type='text'\n                                        className='form-control'\n                                        value={this.state.value}\n                                        onChange={this.handleChange}\n                                    />\n                                    <div className='input__help'>\n                                        {this.state.inputError}\n                                    </div>\n                                </div>\n                            </div>\n                        </Modal.Body>\n                        <Modal.Footer>\n                            <button\n                                id='cancelButton'\n                                type='button'\n                                className='btn btn-tertiary'\n                                onClick={this.handleOnHide}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                            <button\n                                id='submitButton'\n                                onClick={this.handleSubmit}\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='user.settings.import_theme.submit'\n                                    defaultMessage='Submit'\n                                />\n                            </button>\n                        </Modal.Footer>\n                    </form>\n                </Modal>\n            </span>\n        );\n    }\n}\n\nexport default injectIntl(ImportThemeModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: string;\n    onChange?: (id: string, newColor: string) => void;\n}\n\nexport default function ColorChooser(props: Props) {\n    const handleChange = (newColor: string) => {\n        props.onChange?.(props.id, newColor);\n    };\n\n    return (\n        <React.Fragment>\n            <label className='custom-label'>{props.label}</label>\n            <ColorInput\n                id={props.id}\n                value={props.value}\n                onChange={handleChange}\n            />\n        </React.Fragment>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {createRef} from 'react';\nimport type {ChangeEvent, ClipboardEvent, MouseEvent, RefObject} from 'react';\nimport {defineMessages, FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape, MessageDescriptor} from 'react-intl';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\nimport {setThemeDefaults} from 'mattermost-redux/utils/theme_utils';\n\nimport WithTooltip from 'components/with_tooltip';\n\nimport Constants from 'utils/constants';\n\nimport ColorChooser from '../color_chooser/color_chooser';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages: Record<string, MessageDescriptor> = defineMessages({\n    sidebarBg: {\n        id: 'user.settings.custom_theme.sidebarBg',\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: 'user.settings.custom_theme.sidebarText',\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: 'user.settings.custom_theme.sidebarHeaderBg',\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarTeamBarBg: {\n        id: 'user.settings.custom_theme.sidebarTeamBarBg',\n        defaultMessage: 'Team Sidebar BG',\n    },\n    sidebarHeaderTextColor: {\n        id: 'user.settings.custom_theme.sidebarHeaderTextColor',\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: 'user.settings.custom_theme.sidebarUnreadText',\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: 'user.settings.custom_theme.sidebarTextHoverBg',\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: 'user.settings.custom_theme.sidebarTextActiveBorder',\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: 'user.settings.custom_theme.sidebarTextActiveColor',\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: 'user.settings.custom_theme.onlineIndicator',\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: 'user.settings.custom_theme.awayIndicator',\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: 'user.settings.custom_theme.dndIndicator',\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: 'user.settings.custom_theme.mentionBg',\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: 'user.settings.custom_theme.mentionColor',\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: 'user.settings.custom_theme.centerChannelBg',\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: 'user.settings.custom_theme.centerChannelColor',\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: 'user.settings.custom_theme.newMessageSeparator',\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: 'user.settings.custom_theme.linkColor',\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: 'user.settings.custom_theme.buttonBg',\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: 'user.settings.custom_theme.buttonColor',\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: 'user.settings.custom_theme.errorTextColor',\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: 'user.settings.custom_theme.mentionHighlightBg',\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: 'user.settings.custom_theme.mentionHighlightLink',\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: 'user.settings.custom_theme.codeTheme',\n        defaultMessage: 'Code Theme',\n    },\n});\n\ntype Props = {\n    theme: Theme;\n    updateTheme: (theme: Theme) => void;\n    intl: IntlShape;\n};\n\ntype State = {\n    copyTheme: string;\n};\n\nexport class CustomThemeChooser extends React.PureComponent<Props, State> {\n    textareaRef: RefObject<HTMLTextAreaElement>;\n    sidebarStylesHeaderRef: RefObject<HTMLDivElement>;\n    centerChannelStylesHeaderRef: RefObject<HTMLDivElement>;\n    linkAndButtonStylesHeaderRef: RefObject<HTMLDivElement>;\n    sidebarStylesRef: RefObject<HTMLDivElement>;\n    centerChannelStylesRef: RefObject<HTMLDivElement>;\n    linkAndButtonStylesRef: RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n        this.textareaRef = createRef();\n        this.sidebarStylesHeaderRef = createRef();\n        this.centerChannelStylesHeaderRef = createRef();\n        this.linkAndButtonStylesHeaderRef = createRef();\n        this.sidebarStylesRef = createRef();\n        this.centerChannelStylesRef = createRef();\n        this.linkAndButtonStylesRef = createRef();\n\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n    handleColorChange = (settingId: string, color: string) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme: Theme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    };\n\n    setCopyTheme(theme: Theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e: ClipboardEvent<HTMLTextAreaElement>) => {\n        let text = '';\n\n        if ((window as any).clipboardData && (window as any).clipboardData.getData) { // IE\n            text = (window as any).clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        theme = setThemeDefaults(theme);\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    };\n\n    onChangeHandle = (e: ChangeEvent<HTMLTextAreaElement>) => e.stopPropagation();\n\n    selectTheme = () => {\n        this.textareaRef.current?.focus();\n        this.textareaRef.current?.setSelectionRange(0, this.state.copyTheme.length);\n    };\n\n    toggleSidebarStyles = (e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n\n        this.sidebarStylesHeaderRef.current?.classList.toggle('open');\n        this.toggleSection(this.sidebarStylesRef.current);\n    };\n\n    toggleCenterChannelStyles = (e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n\n        this.centerChannelStylesHeaderRef.current?.classList.toggle('open');\n        this.toggleSection(this.centerChannelStylesRef.current);\n    };\n\n    toggleLinkAndButtonStyles = (e: MouseEvent<HTMLDivElement>) => {\n        e.preventDefault();\n\n        this.linkAndButtonStylesHeaderRef.current?.classList.toggle('open');\n        this.toggleSection(this.linkAndButtonStylesRef.current);\n    };\n\n    toggleSection(node: HTMLElement | null) {\n        if (!node) {\n            return;\n        }\n        node.classList.toggle('open');\n\n        // set overflow after animation, so the colorchooser is fully shown\n        node.ontransitionend = () => {\n            if (node.classList.contains('open')) {\n                node.style.overflowY = 'inherit';\n            } else {\n                node.style.overflowY = 'hidden';\n            }\n        };\n    }\n\n    onCodeThemeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const theme: Theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    };\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    };\n\n    showCopySuccess = () => {\n        const copySuccess: HTMLElement | null = document.querySelector('.copy-theme-success');\n        if (copySuccess) {\n            copySuccess.style.display = 'inline-block';\n            setTimeout(() => {\n                copySuccess.style.display = 'none';\n            }, COPY_SUCCESS_INTERVAL);\n        }\n    };\n\n    render() {\n        const {intl, theme} = this.props;\n        const sidebarElements: JSX.Element[] = [];\n        const centerChannelElements: JSX.Element[] = [];\n        const linkAndButtonElements: JSX.Element[] = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions: JSX.Element[] = [];\n                let codeThemeURL = '';\n\n                element.themes?.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                defaultValue={theme[element.id]}\n                                onChange={this.onCodeThemeChange}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <WithTooltip\n                                placement='top'\n                                id='code-popover'\n                                title={\n                                    <div className='code-popover'>\n                                        <img\n                                            width='200'\n                                            alt={'code theme image'}\n                                            src={codeThemeURL}\n                                        />\n                                    </div>\n                                }\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </WithTooltip>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id] || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={color || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            value={theme[element.id] || ''}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref={this.textareaRef}\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='mt-3'>\n                    <button\n                        className='btn btn-tertiary'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section pt-2'>\n                <div className='theme-elements row'>\n                    <div\n                        ref={this.sidebarStylesHeaderRef}\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref={this.sidebarStylesRef}\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref={this.centerChannelStylesHeaderRef}\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref={this.centerChannelStylesRef}\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref={this.linkAndButtonStylesHeaderRef}\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={intl.formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={intl.formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref={this.linkAndButtonStylesRef}\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row mt-3'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(CustomThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable react/jsx-max-props-per-line */\n\nimport React from 'react';\n\ntype ThemeThumbnailProps = {\n    themeName?: string;\n    themeKey: string;\n    sidebarBg: string;\n    sidebarText: string;\n    sidebarUnreadText: string;\n    onlineIndicator: string;\n    awayIndicator: string;\n    dndIndicator: string;\n    centerChannelColor: string;\n    centerChannelBg: string;\n    newMessageSeparator: string;\n    buttonBg: string;\n}\n\nfunction ThemeThumbnail({\n    themeName,\n    themeKey,\n    sidebarBg = '#174AB5',\n    sidebarText = '#86A1D9',\n    sidebarUnreadText = 'white',\n    onlineIndicator = '#3DB887',\n    awayIndicator = '#FFBC1F',\n    dndIndicator = '#D24B4E',\n    centerChannelColor = '#E0E1E3',\n    centerChannelBg = 'white',\n    newMessageSeparator = '#1C58D9',\n    buttonBg = '#15B7B7',\n}: ThemeThumbnailProps): JSX.Element {\n    return (\n        <svg width='112' height='86' viewBox='0 0 112 86' fill='none' xmlns='http://www.w3.org/2000/svg' aria-labelledby={`${themeKey}-theme-icon`} role='img'>\n            <title id={`${themeKey}-theme-icon`}>{`${themeName} theme icon`}</title>\n            <rect style={{fill: centerChannelBg}} x='0' y='0' width='112' height='86'/>\n            <g>\n                <rect style={{fill: centerChannelBg}} x='50' y='-1' width='63' height='88'/>\n                <g>\n                    <rect style={{fill: centerChannelColor}} x='55' y='75' width='52' height='6' rx='3'/>\n                    <rect style={{fill: centerChannelBg}} x='56' y='76' width='50' height='4' rx='2'/>\n                </g>\n                <rect style={{fill: buttonBg}} x='71' y='65' width='22' height='5' rx='2.5'/>\n                <rect style={{fill: newMessageSeparator}} x='50' y='32' width='62' height='1'/>\n                <g style={{fill: centerChannelColor}}>\n                    <rect x='55' y='5' width='52' height='4' rx='2'/>\n                    <rect x='55' y='14' width='52' height='4' rx='2'/>\n                    <rect x='55' y='23' width='52' height='4' rx='2'/>\n                    <rect x='55' y='38' width='52' height='4' rx='2'/>\n                    <rect x='55' y='47' width='52' height='4' rx='2'/>\n                    <rect x='55' y='56' width='52' height='4' rx='2'/>\n                </g>\n            </g>\n            <g>\n                <rect style={{fill: sidebarBg}} x='-1' y='-1' width='51' height='88'/>\n                <g style={{fill: sidebarText}}>\n                    <circle cx='7' cy='61' r='2'/>\n                    <circle cx='7' cy='70' r='2'/>\n                    <circle cx='7' cy='43' r='2'/>\n                    <circle cx='7' cy='34' r='2'/>\n                    <circle cx='7' cy='16' r='2'/>\n                    <circle cx='7' cy='7' r='2'/>\n                    <rect x='11' y='5' width='28' height='4' rx='2'/>\n                    <rect x='11' y='14' width='28' height='4' rx='2'/>\n                    <rect x='11' y='32' width='28' height='4' rx='2'/>\n                    <rect x='11' y='41' width='28' height='4' rx='2'/>\n                    <rect x='11' y='50' width='28' height='4' rx='2'/>\n                    <rect x='11' y='59' width='28' height='4' rx='2'/>\n                    <rect x='11' y='68' width='28' height='4' rx='2'/>\n                    <rect x='11' y='77' width='28' height='4' rx='2'/>\n                </g>\n                <circle style={{fill: dndIndicator}} cx='7' cy='79' r='2'/>\n                <circle style={{fill: awayIndicator}} cx='7' cy='52' r='2'/>\n                <circle style={{fill: onlineIndicator}} cx='7' cy='25' r='2'/>\n                <g style={{fill: sidebarUnreadText}}>\n                    <circle cx='43' cy='25' r='2'/>\n                    <rect x='11' y='23' width='28' height='4' rx='2'/>\n                </g>\n            </g>\n        </svg>\n    );\n}\n\nexport default ThemeThumbnail;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {Theme, ThemeKey} from 'mattermost-redux/selectors/entities/preferences';\nimport {changeOpacity} from 'mattermost-redux/utils/theme_utils';\n\nimport {toTitleCase} from 'utils/utils';\n\nimport ThemeThumbnail from '../theme_thumbnail';\n\ntype Props = {\n    theme: Theme;\n    updateTheme: (theme: Theme) => void;\n    allowedThemes: string[];\n}\n\nconst PremadeThemeChooser = ({theme, updateTheme, allowedThemes = []}: Props) => {\n    const premadeThemes = [];\n    const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n    for (const k in Preferences.THEMES) {\n        if (Preferences.THEMES.hasOwnProperty(k)) {\n            if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                continue;\n            }\n\n            const premadeTheme: Theme = Object.assign({}, Preferences.THEMES[k as ThemeKey]);\n\n            let activeClass = '';\n            if (premadeTheme.type === theme.type) {\n                activeClass = 'active';\n            }\n\n            premadeThemes.push(\n                <div\n                    className='col-xs-6 col-sm-3 premade-themes'\n                    key={'premade-theme-key' + k}\n                >\n                    <div\n                        id={`premadeTheme${premadeTheme.type?.replace(' ', '')}`}\n                        className={activeClass}\n                        onClick={() => updateTheme(premadeTheme)}\n                    >\n                        <label>\n                            <ThemeThumbnail\n                                themeKey={k}\n                                themeName={premadeTheme.type}\n                                sidebarBg={premadeTheme.sidebarBg}\n                                sidebarText={changeOpacity(premadeTheme.sidebarText, 0.48)}\n                                sidebarUnreadText={premadeTheme.sidebarUnreadText}\n                                onlineIndicator={premadeTheme.onlineIndicator}\n                                awayIndicator={premadeTheme.awayIndicator}\n                                dndIndicator={premadeTheme.dndIndicator}\n                                centerChannelColor={changeOpacity(premadeTheme.centerChannelColor, 0.16)}\n                                centerChannelBg={premadeTheme.centerChannelBg}\n                                newMessageSeparator={premadeTheme.newMessageSeparator}\n                                buttonBg={premadeTheme.buttonBg}\n                            />\n                            <div className='theme-label'>{toTitleCase(premadeTheme.type || '')}</div>\n                        </label>\n                    </div>\n                </div>,\n            );\n        }\n    }\n\n    return (\n        <div className='row appearance-section'>\n            <div className='clearfix'>\n                {premadeThemes}\n            </div>\n        </div>\n    );\n};\n\nexport default PremadeThemeChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport type {GlobalState} from 'types/store';\n\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Theme} from 'mattermost-redux/selectors/entities/preferences';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport ImportThemeModal from 'components/user_settings/display/user_settings_theme/import_theme_modal';\n\nimport {Constants, ModalIdentifiers} from 'utils/constants';\nimport {applyTheme} from 'utils/utils';\n\nimport type {ModalData} from 'types/actions';\n\nimport CustomThemeChooser from './custom_theme_chooser/custom_theme_chooser';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\ntype Props = {\n    currentTeamId: string;\n    theme: Theme;\n    selected: boolean;\n    areAllSectionsInactive: boolean;\n    updateSection: (section: string) => void;\n    setRequireConfirm?: (requireConfirm: boolean) => void;\n    setEnforceFocus?: (enforceFocus: boolean) => void;\n    allowCustomThemes: boolean;\n    showAllTeamsCheckbox: boolean;\n    applyToAllTeams: boolean;\n    actions: {\n        saveTheme: (teamId: string, theme: Theme) => void;\n        deleteTeamSpecificThemes: () => void;\n        openModal: <P>(modalData: ModalData<P>) => void;\n    };\n};\n\ntype State = {\n    isSaving: boolean;\n    type: string;\n    showAllTeamsCheckbox: boolean;\n    applyToAllTeams: boolean;\n    serverError: string;\n    theme: Theme;\n};\n\nexport default class ThemeSetting extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n    originalTheme: Theme;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n            serverError: '',\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.minRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.selected && !this.props.selected) {\n            this.resetFields();\n        }\n        if (prevProps.selected && !this.props.selected && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props): State {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n            serverError: '',\n            isSaving: false,\n        };\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    submitTheme = async (): Promise<void> => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm?.(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme: Theme): void => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm?.(themeChanged);\n\n        this.setState({theme});\n        applyTheme(theme);\n    };\n\n    updateType = (type: string): void => this.setState({type});\n\n    resetFields = (): void => {\n        const state = this.getStateFromProps();\n        state.serverError = '';\n        this.setState(state);\n\n        applyTheme(state.theme);\n\n        this.props.setRequireConfirm?.(false);\n    };\n\n    handleImportModal = (): void => {\n        this.props.actions.openModal({\n            modalId: ModalIdentifiers.IMPORT_THEME_MODAL,\n            dialogType: ImportThemeModal,\n            dialogProps: {\n                callback: this.updateTheme,\n            },\n        });\n\n        this.props.setEnforceFocus?.(false);\n    };\n\n    handleUpdateSection = (section: string): void => this.props.updateSection(section);\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>,\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>,\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <ExternalLink\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            location='user_settings_theme'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </ExternalLink>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='pt-2'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>,\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    isFullWidth={true}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\nimport {getTheme, getThemePreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {openModal} from 'actions/views/modals';\n\nimport type {GlobalState} from 'types/store';\n\nimport UserSettingsTheme from './user_settings_theme';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentTeamId: getCurrentTeamId(state),\n        theme: getTheme(state),\n        applyToAllTeams: getThemePreferences(state).length <= 1,\n        showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n            openModal,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {ValueType} from 'react-select';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItemMax from 'components/setting_item_max';\n\nimport type {Language} from 'i18n/i18n';\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/keyboard';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n    patchUser: (user: UserProfile) => Promise<ActionResult>;\n};\n\ntype Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    locale: string;\n    locales: Record<string, Language>;\n    updateSection: (section: string) => void;\n    actions: Actions;\n    adminMode?: boolean;\n};\n\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    isSaving: boolean;\n    openMenu: boolean;\n    locale: string;\n    serverError?: string;\n    selectedOption: SelectedOption;\n};\n\nexport class ManageLanguage extends React.PureComponent<Props, State> {\n    reactSelectContainer: React.RefObject<HTMLDivElement>;\n    constructor(props: Props) {\n        super(props);\n        const userLocale = props.locale;\n        const selectedOption = {\n            value: props.locales[userLocale].value,\n            label: props.locales[userLocale].name,\n        };\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        const reactSelectContainer = this.reactSelectContainer.current;\n        if (reactSelectContainer) {\n            reactSelectContainer.addEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener(\n                'keydown',\n                this.handleContainerKeyDown,\n            );\n        }\n    }\n\n    handleContainerKeyDown = (e: KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            modalBody?.classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    };\n\n    handleKeyDown = (e: React.KeyboardEvent) => {\n        const modalBody = document.querySelector('.modal-body');\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            modalBody?.classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    };\n\n    setLanguage = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                locale: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    };\n\n    submitUser = (user: UserProfile) => {\n        this.setState({isSaving: true});\n\n        const action = this.props.adminMode ? this.props.actions.patchUser : this.props.actions.updateMe;\n        action(user).then((res) => {\n            if ('data' in res) {\n                this.setState({isSaving: false});\n            } else if ('error' in res) {\n                let serverError;\n                const {error} = res;\n                if (error instanceof Error) {\n                    serverError = error.message;\n                } else {\n                    serverError = error;\n                }\n                this.setState({serverError, isSaving: false});\n            }\n        });\n    };\n\n    handleMenuClose = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.remove('no-scroll');\n        }\n        this.setState({openMenu: false});\n    };\n\n    handleMenuOpen = () => {\n        const modalBody = document.querySelector('.modal-body');\n        if (modalBody) {\n            modalBody.classList.add('no-scroll');\n        }\n        this.setState({openMenu: true});\n    };\n\n    render() {\n        const {intl, locales} = this.props;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = (\n                <label className='has-error'>{this.state.serverError}</label>\n            );\n        }\n\n        const options: SelectedOption[] = [];\n\n        const languages = Object.keys(locales).\n            map((l) => {\n                return {\n                    value: locales[l].value as string,\n                    name: locales[l].name,\n                    order: locales[l].order,\n                };\n            }).\n            sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push({value: lang.value, label: lang.name});\n        });\n\n        const reactStyles = {\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n        const interfaceLanguageLabelAria = intl.formatMessage({id: 'user.settings.languages.dropdown.arialabel', defaultMessage: 'Dropdown selector to change the interface language'});\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    aria-label={interfaceLanguageLabelAria}\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='pt-2'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMessage\n                        id='user.settings.languages.promote1'\n                        defaultMessage='Select which language Mattermost displays in the user interface.'\n                    />\n                    <p/>\n                    <FormattedMessage\n                        id='user.settings.languages.promote2'\n                        defaultMessage='Would you like to help with translations? Join the <link>Mattermost Translation Server</link> to contribute.'\n                        values={{\n                            link: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='http://translate.mattermost.com'\n                                    location='manage_languages'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\nexport default injectIntl(ManageLanguage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\n\nimport {getLanguages} from 'i18n/i18n';\n\nimport type {GlobalState} from 'types/store';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        locales: getLanguages(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {ValueType} from 'react-select';\nimport type {Timezone} from 'timezones.json';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {getTimezoneLabel} from 'mattermost-redux/utils/timezone_utils';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {getBrowserTimezone} from 'utils/timezone';\n\ntype Actions = {\n    updateMe: (user: UserProfile) => Promise<ActionResult>;\n    patchUser: (user: UserProfile) => Promise<ActionResult>;\n}\n\ntype Props = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    timezones: Timezone[];\n    timezoneLabel: string;\n    actions: Actions;\n    adminMode?: boolean;\n}\ntype SelectedOption = {\n    value: string;\n    label: string;\n}\n\ntype State = {\n    useAutomaticTimezone: boolean;\n    automaticTimezone: string;\n    manualTimezone: string;\n    isSaving: boolean;\n    serverError?: string;\n    openMenu: boolean;\n    selectedOption: SelectedOption;\n}\n\nexport default class ManageTimezones extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            isSaving: false,\n            openMenu: false,\n            selectedOption: {label: props.timezoneLabel, value: props.useAutomaticTimezone ? props.automaticTimezone : props.manualTimezone},\n        };\n    }\n\n    onChange = (selectedOption: ValueType<SelectedOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            this.setState({\n                manualTimezone: selectedOption.value,\n                selectedOption,\n            });\n        }\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user} = this.props;\n        const {useAutomaticTimezone, automaticTimezone, manualTimezone} = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        const action = this.props.adminMode ? this.props.actions.patchUser : this.props.actions.updateMe;\n        action(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n        let timezoneLabel: string;\n        let selectedOptionValue: string;\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n            timezoneLabel = getTimezoneLabel(this.props.timezones, automaticTimezone);\n            selectedOptionValue = automaticTimezone;\n        } else {\n            timezoneLabel = getTimezoneLabel(this.props.timezones, getBrowserTimezone());\n            selectedOptionValue = getBrowserTimezone();\n            this.setState({\n                manualTimezone: getBrowserTimezone(),\n            });\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n            selectedOption: {label: timezoneLabel, value: selectedOptionValue},\n        });\n    };\n\n    handleManualTimezone = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n    render() {\n        const {timezones} = this.props;\n        const {useAutomaticTimezone} = this.state;\n\n        const timeOptions = this.props.timezones.map((timeObject) => {\n            return {\n                value: timeObject.utc[0],\n                label: timeObject.text,\n            };\n        });\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n        const reactStyles = {\n\n            menuPortal: (provided: React.CSSProperties) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n\n        };\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Automatic'\n                    />\n\n                </label>\n            </div>\n        );\n\n        const manualTimezoneInput = (\n            <div\n                className='pt-2'\n            >\n                <ReactSelect\n                    className='react-select react-select-top'\n                    classNamePrefix='react-select'\n                    id='displayTimezone'\n                    menuPortalTarget={document.body}\n                    styles={reactStyles}\n                    options={timeOptions}\n                    clearable={false}\n                    onChange={this.onChange}\n                    value={this.state.selectedOption}\n                    aria-labelledby='changeInterfaceTimezoneLabel'\n                    isDisabled={useAutomaticTimezone}\n                />\n                {serverError}\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        inputs.push(manualTimezoneInput);\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>,\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\nimport timezones from 'timezones.json';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getCurrentTimezoneLabel} from 'mattermost-redux/selectors/entities/timezone';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\nfunction mapStateToProps(state: GlobalState) {\n    const timezoneLabel = getCurrentTimezoneLabel(state);\n    return {\n        timezones,\n        timezoneLabel,\n    };\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTimezones);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport deepEqual from 'fast-deep-equal';\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {FormattedMessage, defineMessage} from 'react-intl';\nimport type {Timezone} from 'timezones.json';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\nimport type {UserProfile, UserTimezone} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\n\nimport {getLanguageInfo} from 'i18n/i18n';\nimport type {Language} from 'i18n/i18n';\nimport Constants from 'utils/constants';\nimport {getBrowserTimezone} from 'utils/timezone';\nimport {a11yFocus} from 'utils/utils';\n\nimport ManageLanguages from './manage_languages';\nimport ManageTimezones from './manage_timezones';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props: Props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        availabilityStatusOnPosts: props.availabilityStatusOnPosts,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        colorizeUsernames: props.colorizeUsernames,\n        collapseDisplay: props.collapseDisplay,\n        collapsedReplyThreads: props.collapsedReplyThreads,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n        lastActiveDisplay: props.lastActiveDisplay.toString(),\n        oneClickReactionsOnPosts: props.oneClickReactionsOnPosts,\n        clickToReply: props.clickToReply,\n    };\n}\n\ntype ChildOption = {\n    label: MessageDescriptor;\n    value: string;\n    display: string;\n    more: MessageDescriptor;\n};\n\ntype Option = {\n    value: string;\n    radionButtonText: {\n        label: MessageDescriptor;\n        more?: MessageDescriptor;\n    };\n    childOption?: ChildOption;\n}\n\ntype SectionProps ={\n    section: string;\n    display: string;\n    defaultDisplay: string;\n    value: string;\n    title: MessageDescriptor;\n    firstOption: Option;\n    secondOption: Option;\n    thirdOption?: Option;\n    description: MessageDescriptor;\n    disabled?: boolean;\n    onSubmit?: () => void;\n}\n\nexport type OwnProps = {\n    user: UserProfile;\n    adminMode?: boolean;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm?: () => void;\n    setEnforceFocus?: () => void;\n    timezones: Timezone[];\n    userTimezone: UserTimezone;\n    allowCustomThemes: boolean;\n    enableLinkPreviews: boolean;\n    locales: Record<string, Language>;\n    userLocale: string;\n    enableThemeSelection: boolean;\n    configTeammateNameDisplay: string;\n    shouldAutoUpdateTimezone: boolean | string;\n    lockTeammateNameDisplay: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    colorizeUsernames: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    collapsedReplyThreadsAllowUserPreference: boolean;\n    clickToReply: string;\n    linkPreviewDisplay: string;\n    oneClickReactionsOnPosts: string;\n    emojiPickerEnabled: boolean;\n    timezoneLabel: string;\n    lastActiveDisplay: boolean;\n    lastActiveTimeEnabled: boolean;\n    actions: {\n        savePreferences: (userId: string, preferences: PreferenceType[]) => void;\n        autoUpdateTimezone: (deviceTimezone: string) => void;\n        updateMe: (user: UserProfile) => Promise<ActionResult>;\n        patchUser: (user: UserProfile) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    [key: string]: any;\n    isSaving: boolean;\n    militaryTime: string;\n    teammateNameDisplay: string;\n    availabilityStatusOnPosts: string;\n    channelDisplayMode: string;\n    messageDisplay: string;\n    colorizeUsernames: string;\n    collapseDisplay: string;\n    collapsedReplyThreads: string;\n    linkPreviewDisplay: string;\n    lastActiveDisplay: string;\n    oneClickReactionsOnPosts: string;\n    clickToReply: string;\n    handleSubmit?: () => void;\n    serverError?: string;\n}\n\nexport default class UserSettingsDisplay extends React.PureComponent<Props, State> {\n    public prevSections: {\n        theme: string;\n\n        clock: string;\n        linkpreview: string;\n        message_display: string;\n        channel_display_mode: string;\n        languages: string;\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, shouldAutoUpdateTimezone} = this.props;\n\n        if (shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    trackChangeIfNecessary(preference: PreferenceType, oldValue: any): void {\n        const props = {\n            field: 'display.' + preference.name,\n            value: preference.value,\n        };\n\n        if (preference.value !== oldValue) {\n            trackEvent('settings', 'user_settings_update', props);\n        }\n    }\n\n    submitLastActive = () => {\n        const {user, actions} = this.props;\n        const {lastActiveDisplay} = this.state;\n\n        const updatedUser = {\n            ...user,\n            props: {\n                ...user.props,\n                show_last_active: lastActiveDisplay,\n            },\n        };\n\n        const action = this.props.adminMode ? actions.patchUser : actions.updateMe;\n        action(updatedUser).\n            then((res) => {\n                if ('data' in res) {\n                    this.props.updateSection('');\n                } else if ('error' in res) {\n                    const {error} = res;\n                    let serverError;\n                    if (error instanceof Error) {\n                        serverError = error.message;\n                    } else {\n                        serverError = error as string;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const availabilityStatusOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.AVAILABILITY_STATUS_ON_POSTS,\n            value: this.state.availabilityStatusOnPosts,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const colorizeUsernamesPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLORIZE_USERNAMES,\n            value: this.state.colorizeUsernames,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const collapsedReplyThreadsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSED_REPLY_THREADS,\n            value: this.state.collapsedReplyThreads,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n        const oneClickReactionsOnPostsPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n            value: this.state.oneClickReactionsOnPosts,\n        };\n        const clickToReplyPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CLICK_TO_REPLY,\n            value: this.state.clickToReply,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapsedReplyThreadsPreference,\n            clickToReplyPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n            availabilityStatusOnPostsPreference,\n            oneClickReactionsOnPostsPreference,\n            colorizeUsernamesPreference,\n        ];\n\n        this.trackChangeIfNecessary(collapsedReplyThreadsPreference, this.props.collapsedReplyThreads);\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    };\n\n    handleClockRadio = (militaryTime: string) => {\n        this.setState({militaryTime});\n    };\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay: string) => {\n        this.setState({teammateNameDisplay});\n    };\n\n    handleAvailabilityStatusRadio = (availabilityStatusOnPosts: string) => {\n        this.setState({availabilityStatusOnPosts});\n    };\n\n    handleChannelDisplayModeRadio(channelDisplayMode: string) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay: string) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay: string) {\n        this.setState({collapseDisplay});\n    }\n\n    handleCollapseReplyThreadsRadio(collapsedReplyThreads: string) {\n        this.setState({collapsedReplyThreads});\n    }\n\n    handleLastActiveRadio(lastActiveDisplay: string) {\n        this.setState({lastActiveDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay: string) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOneClickReactionsRadio = (oneClickReactionsOnPosts: string) => {\n        this.setState({oneClickReactionsOnPosts});\n    };\n\n    handleClickToReplyRadio = (clickToReply: string) => {\n        this.setState({clickToReply});\n    };\n\n    handleOnChange(e: React.ChangeEvent, display: {[key: string]: any}) {\n        this.setState({...display});\n        a11yFocus(e.currentTarget as HTMLElement);\n    }\n\n    updateSection = (section: string) => {\n        this.updateState();\n        this.props.updateSection(section);\n    };\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!deepEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    };\n\n    createSection(props: SectionProps) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n            onSubmit,\n        } = props;\n        let extraInfo = null;\n        let submit: (() => Promise<void>) | (() => void) | null = onSubmit || this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.label.id}\n                defaultMessage={firstOption.radionButtonText.label.defaultMessage}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.more?.id) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.more.id}\n                        defaultMessage={firstOption.radionButtonText.more.defaultMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.label.id}\n                defaultMessage={secondOption.radionButtonText.label.defaultMessage}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.more?.id) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.more.id}\n                        defaultMessage={secondOption.radionButtonText.more.defaultMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.label.id}\n                    defaultMessage={thirdOption.radionButtonText.label.defaultMessage}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.defaultMessage}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.defaultMessage}\n            />\n        );\n\n        const active = this.props.activeSection === section;\n        let max = null;\n        if (active) {\n            const format = [false, false, false];\n            let childOptionToShow: ChildOption | undefined;\n            if (value === firstOption.value) {\n                format[0] = true;\n                childOptionToShow = firstOption.childOption;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n                childOptionToShow = secondOption.childOption;\n            } else {\n                format[2] = true;\n                if (thirdOption) {\n                    childOptionToShow = thirdOption.childOption;\n                }\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {\n                [display]: firstOption.value,\n            };\n\n            const secondDisplay = {\n                [display]: secondOption.value,\n            };\n\n            let thirdSection;\n            if (thirdOption && thirdMessage) {\n                const thirdDisplay = {\n                    [display]: thirdOption.value,\n                };\n\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={(e) => this.handleOnChange(e, thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let childOptionSection;\n            if (childOptionToShow) {\n                const childDisplay = childOptionToShow.display;\n                childOptionSection = (\n                    <div className='checkbox'>\n                        <hr/>\n                        <label>\n                            <input\n                                id={name + 'childOption'}\n                                type='checkbox'\n                                name={childOptionToShow.label.id}\n                                checked={childOptionToShow.value === 'true'}\n                                onChange={(e) => {\n                                    this.handleOnChange(e, {[childDisplay]: e.target.checked ? 'true' : 'false'});\n                                }}\n                            />\n                            <FormattedMessage\n                                id={childOptionToShow.label.id}\n                                defaultMessage={childOptionToShow.label.defaultMessage}\n                            />\n                            {moreColon}\n                            <span className='font-weight--normal'>\n                                <FormattedMessage\n                                    id={childOptionToShow.more.id}\n                                    defaultMessage={childOptionToShow.more.defaultMessage}\n                                />\n                            </span>\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={(e) => this.handleOnChange(e, firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={(e) => this.handleOnChange(e, secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                    {childOptionSection}\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            max = (\n                <SettingItemMax\n                    title={messageTitle}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.updateSection}\n                />);\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItem\n                    active={active}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                    max={max}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: defineMessage({\n                id: 'user.settings.display.collapseDisplay',\n                defaultMessage: 'Default Appearance of Image Previews',\n            }),\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.collapseOn',\n                        defaultMessage: 'Expanded',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.collapseOff',\n                        defaultMessage: 'Collapsed',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.collapseDesc',\n                defaultMessage: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            }),\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.linkPreviewDisplay',\n                    defaultMessage: 'Website Link Previews',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.linkPreviewOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.linkPreviewOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.linkPreviewDesc',\n                    defaultMessage: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                }),\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        let lastActiveSection = null;\n\n        if (this.props.lastActiveTimeEnabled) {\n            lastActiveSection = this.createSection({\n                section: 'lastactive',\n                display: 'lastActiveDisplay',\n                value: this.state.lastActiveDisplay,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.lastActiveDisplay',\n                    defaultMessage: 'Share last active time',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.lastActiveOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.lastActiveOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.lastActiveDesc',\n                    defaultMessage: 'When enabled, other users will see when you were last active.',\n                }),\n                onSubmit: this.submitLastActive,\n            });\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: defineMessage({\n                id: 'user.settings.display.clockDisplay',\n                defaultMessage: 'Clock Display',\n            }),\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.normalClock',\n                        defaultMessage: '12-hour clock (example: 4:00 PM)',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.militaryClock',\n                        defaultMessage: '24-hour clock (example: 16:00)',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.preferTime',\n                defaultMessage: 'Select how you prefer time displayed.',\n            }),\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: defineMessage({\n                id: 'user.settings.display.teammateNameDisplayTitle',\n                defaultMessage: 'Teammate Name Display',\n            }),\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayUsername',\n                        defaultMessage: 'Show username',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayNicknameFullname',\n                        defaultMessage: 'Show nickname if one exists, otherwise show first and last name',\n                    }),\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.teammateNameDisplayFullname',\n                        defaultMessage: 'Show first and last name',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.teammateNameDisplayDescription',\n                defaultMessage: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            }),\n            disabled: this.props.lockTeammateNameDisplay,\n        });\n\n        const availabilityStatusOnPostsSection = this.createSection({\n            section: 'availabilityStatus',\n            display: 'availabilityStatusOnPosts',\n            value: this.state.availabilityStatusOnPosts,\n            defaultDisplay: 'true',\n            title: defineMessage({\n                id: 'user.settings.display.availabilityStatusOnPostsTitle',\n                defaultMessage: 'Show user availability on posts',\n            }),\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.on',\n                        defaultMessage: 'On',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.off',\n                        defaultMessage: 'Off',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.availabilityStatusOnPostsDescription',\n                defaultMessage: 'When enabled, online availability is displayed on profile images in the message list.',\n            }),\n        });\n\n        let timezoneSelection;\n        if (!this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            const active = this.props.activeSection === 'timezone';\n            let max = null;\n            if (active) {\n                max = (\n                    <ManageTimezones\n                        user={this.props.user}\n                        useAutomaticTimezone={Boolean(userTimezone.useAutomaticTimezone)}\n                        automaticTimezone={userTimezone.automaticTimezone}\n                        manualTimezone={userTimezone.manualTimezone}\n                        updateSection={this.updateSection}\n                        adminMode={this.props.adminMode}\n                    />\n                );\n            }\n            timezoneSelection = (\n                <div>\n                    <SettingItem\n                        active={active}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.timezone'\n                                defaultMessage='Timezone'\n                            />\n                        }\n                        describe={this.props.timezoneLabel}\n                        section={'timezone'}\n                        updateSection={this.updateSection}\n                        max={max}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: defineMessage({\n                id: 'user.settings.display.messageDisplayTitle',\n                defaultMessage: 'Message Display',\n            }),\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.messageDisplayClean',\n                        defaultMessage: 'Standard',\n                    }),\n                    more: defineMessage({\n                        id: 'user.settings.display.messageDisplayCleanDes',\n                        defaultMessage: 'Easy to scan and read.',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.messageDisplayCompact',\n                        defaultMessage: 'Compact',\n                    }),\n                    more: defineMessage({\n                        id: 'user.settings.display.messageDisplayCompactDes',\n                        defaultMessage: 'Fit as many messages on the screen as we can.',\n                    }),\n                },\n                childOption: {\n                    label: defineMessage({\n                        id: 'user.settings.display.colorize',\n                        defaultMessage: 'Colorize usernames',\n                    }),\n                    value: this.state.colorizeUsernames,\n                    display: 'colorizeUsernames',\n                    more: defineMessage({\n                        id: 'user.settings.display.colorizeDes',\n                        defaultMessage: 'Use colors to distinguish users in compact mode',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.messageDisplayDescription',\n                defaultMessage: 'Select how messages in a channel should be displayed.',\n            }),\n        });\n\n        let collapsedReplyThreads;\n\n        if (this.props.collapsedReplyThreadsAllowUserPreference) {\n            collapsedReplyThreads = this.createSection({\n                section: Preferences.COLLAPSED_REPLY_THREADS,\n                display: 'collapsedReplyThreads',\n                value: this.state.collapsedReplyThreads,\n                defaultDisplay: Preferences.COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT,\n                title: defineMessage({\n                    id: 'user.settings.display.collapsedReplyThreadsTitle',\n                    defaultMessage: 'Threaded Discussions',\n                }),\n                firstOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_ON,\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.collapsedReplyThreadsOn',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: Preferences.COLLAPSED_REPLY_THREADS_OFF,\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.display.collapsedReplyThreadsOff',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.collapsedReplyThreadsDescription',\n                    defaultMessage: 'When enabled, reply messages are not shown in the channel and you\\'ll be notified about threads you\\'re following in the \"Threads\" view.',\n                }),\n            });\n        }\n\n        const clickToReply = this.createSection({\n            section: Preferences.CLICK_TO_REPLY,\n            display: 'clickToReply',\n            value: this.state.clickToReply,\n            defaultDisplay: 'true',\n            title: defineMessage({\n                id: 'user.settings.display.clickToReply',\n                defaultMessage: 'Click to open threads',\n            }),\n            firstOption: {\n                value: 'true',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.on',\n                        defaultMessage: 'On',\n                    }),\n                },\n            },\n            secondOption: {\n                value: 'false',\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.sidebar.off',\n                        defaultMessage: 'Off',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.clickToReplyDescription',\n                defaultMessage: 'When enabled, click anywhere on a message to open the reply thread.',\n            }),\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: defineMessage({\n                id: 'user.settings.display.channelDisplayTitle',\n                defaultMessage: 'Channel Display',\n            }),\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.fullScreen',\n                        defaultMessage: 'Full width',\n                    }),\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    label: defineMessage({\n                        id: 'user.settings.display.fixedWidthCentered',\n                        defaultMessage: 'Fixed width, centered',\n                    }),\n                },\n            },\n            description: defineMessage({\n                id: 'user.settings.display.channeldisplaymode',\n                defaultMessage: 'Select the width of the center channel.',\n            }),\n        });\n\n        let languagesSection;\n        const userLocale = this.props.userLocale;\n        const localeName = getLanguageInfo(userLocale).name;\n\n        languagesSection = (\n            <div>\n                <SettingItem\n                    active={this.props.activeSection === 'languages'}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.language'\n                            defaultMessage='Language'\n                        />\n                    }\n                    describe={localeName}\n                    section={'languages'}\n                    updateSection={this.updateSection}\n                    max={(\n                        <ManageLanguages\n                            user={this.props.user}\n                            locale={userLocale}\n                            updateSection={this.updateSection}\n                            adminMode={this.props.adminMode}\n                        />\n                    )}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n\n        if (Object.keys(this.props.locales).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection && !this.props.adminMode) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let oneClickReactionsOnPostsSection;\n        if (this.props.emojiPickerEnabled) {\n            oneClickReactionsOnPostsSection = this.createSection({\n                section: Preferences.ONE_CLICK_REACTIONS_ENABLED,\n                display: 'oneClickReactionsOnPosts',\n                value: this.state.oneClickReactionsOnPosts,\n                defaultDisplay: 'true',\n                title: defineMessage({\n                    id: 'user.settings.display.oneClickReactionsOnPostsTitle',\n                    defaultMessage: 'Quick reactions on messages',\n                }),\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.sidebar.on',\n                            defaultMessage: 'On',\n                        }),\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        label: defineMessage({\n                            id: 'user.settings.sidebar.off',\n                            defaultMessage: 'Off',\n                        }),\n                    },\n                },\n                description: defineMessage({\n                    id: 'user.settings.display.oneClickReactionsOnPostsDescription',\n                    defaultMessage: 'When enabled, you can react in one-click with recently used reactions when hovering over a message.',\n                }),\n            });\n        }\n\n        return (\n            <div id='displaySettings'>\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        id='displaySettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.display.title'\n                                defaultMessage='Display Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {collapsedReplyThreads}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {availabilityStatusOnPostsSection}\n                    {lastActiveSection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {clickToReply}\n                    {channelDisplayModeSection}\n                    {oneClickReactionsOnPostsSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\nimport timezones from 'timezones.json';\n\nimport {CollapsedThreads} from '@mattermost/types/config';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {\n    get,\n    isCollapsedThreadsAllowed,\n    getCollapsedThreadsPreference,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {\n    generateCurrentTimezoneLabel,\n    getCurrentTimezoneFull,\n    getCurrentTimezoneLabel,\n    getTimezoneForUserProfile,\n} from 'mattermost-redux/selectors/entities/timezone';\nimport {getCurrentUserId, getUser} from 'mattermost-redux/selectors/entities/users';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getLanguages, isLanguageAvailable} from 'i18n/i18n';\nimport {Preferences} from 'utils/constants';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './user_settings_display';\nimport UserSettingsDisplay from './user_settings_display';\n\nexport function makeMapStateToProps() {\n    return (state: GlobalState, props: OwnProps) => {\n        const config = getConfig(state);\n        const currentUserId = getCurrentUserId(state);\n        const userTimezone = props.adminMode ? getTimezoneForUserProfile(props.user) : getCurrentTimezoneFull(state);\n        const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n        const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n        const timezoneLabel = props.adminMode ? generateCurrentTimezoneLabel(getUserCurrentTimezone(userTimezone)) : getCurrentTimezoneLabel(state);\n        const allowCustomThemes = config.AllowCustomThemes === 'true';\n        const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n        const enableThemeSelection = config.EnableThemeSelection === 'true';\n        const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n        const configTeammateNameDisplay = config.TeammateNameDisplay as string;\n        const emojiPickerEnabled = config.EnableEmojiPicker === 'true';\n        const lastActiveTimeEnabled = config.EnableLastActiveTime === 'true';\n        const userPreference = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n\n        let lastActiveDisplay = true;\n        const user = props.adminMode ? props.user : getUser(state, currentUserId);\n        if (user.props?.show_last_active === 'false') {\n            lastActiveDisplay = false;\n        }\n\n        let userLocale = props.user.locale;\n        if (!isLanguageAvailable(state, userLocale)) {\n            userLocale = config.DefaultClientLocale as string;\n        }\n\n        return {\n            lockTeammateNameDisplay,\n            allowCustomThemes,\n            configTeammateNameDisplay,\n            enableLinkPreviews,\n            locales: getLanguages(state),\n            userLocale,\n            enableThemeSelection,\n            timezones,\n            timezoneLabel,\n            userTimezone,\n            shouldAutoUpdateTimezone,\n            availabilityStatusOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.AVAILABILITY_STATUS_ON_POSTS, Preferences.AVAILABILITY_STATUS_ON_POSTS_DEFAULT, userPreference),\n            militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT, userPreference),\n            teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay, userPreference),\n            channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT, userPreference),\n            messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT, userPreference),\n            colorizeUsernames: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLORIZE_USERNAMES, Preferences.COLORIZE_USERNAMES_DEFAULT, userPreference),\n            collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT, userPreference),\n            collapsedReplyThreadsAllowUserPreference: isCollapsedThreadsAllowed(state) && getConfig(state).CollapsedThreads !== CollapsedThreads.ALWAYS_ON,\n            collapsedReplyThreads: getCollapsedThreadsPreference(state),\n            clickToReply: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CLICK_TO_REPLY, Preferences.CLICK_TO_REPLY_DEFAULT, userPreference),\n            linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT, userPreference),\n            oneClickReactionsOnPosts: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.ONE_CLICK_REACTIONS_ENABLED, Preferences.ONE_CLICK_REACTIONS_ENABLED_DEFAULT, userPreference),\n            emojiPickerEnabled,\n            lastActiveDisplay,\n            lastActiveTimeEnabled,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            autoUpdateTimezone,\n            savePreferences,\n            updateMe,\n            patchUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {Component, createRef} from 'react';\nimport type {ChangeEvent, CSSProperties, MouseEvent, ReactNode, RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormError from 'components/form_error';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {Constants} from 'utils/constants';\nimport * as FileUtils from 'utils/file_utils';\nimport {localizeMessage} from 'utils/utils';\n\nimport WithTooltip from './with_tooltip';\n\ntype Props = {\n    clientError?: ReactNode;\n    serverError?: ReactNode;\n    src?: string | null;\n    defaultImageSrc?: string;\n    file?: File | null;\n    loadingPicture?: boolean;\n    submitActive?: boolean;\n    onRemove?: () => void;\n    onSetDefault?: (() => Promise<void>) | null;\n    onSubmit?: (() => void) | null;\n    title?: string;\n    onFileChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n    updateSection?: (e: MouseEvent<HTMLButtonElement>) => void;\n    imageContext?: string;\n    maxFileSize?: number;\n    helpText?: ReactNode;\n}\n\ntype State = {\n    image: string | null;\n    removeSrc: boolean;\n    setDefaultSrc: boolean;\n    orientationStyles?: CSSProperties;\n}\n\nexport default class SettingPicture extends Component<Props, State> {\n    static defaultProps = {\n        imageContext: 'profile',\n    };\n    private readonly settingList: RefObject<HTMLDivElement>;\n    private readonly selectInput: RefObject<HTMLInputElement>;\n    private readonly confirmButton: RefObject<HTMLButtonElement>;\n    private previewBlob: string | null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.settingList = createRef();\n        this.selectInput = createRef();\n        this.confirmButton = createRef();\n        this.previewBlob = null;\n\n        this.state = {\n            image: null,\n            removeSrc: false,\n            setDefaultSrc: false,\n        };\n    }\n\n    focusFirstElement() {\n        this.settingList.current?.focus();\n    }\n\n    componentDidMount() {\n        this.focusFirstElement();\n\n        if (this.selectInput.current) {\n            this.selectInput.current.addEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.file && prevProps.file !== this.props.file) {\n            this.setPicture(this.props.file);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.previewBlob) {\n            URL.revokeObjectURL(this.previewBlob);\n        }\n\n        if (this.selectInput.current) {\n            this.selectInput.current.removeEventListener('input', this.handleFileSelected);\n        }\n    }\n\n    handleCancel = (e: MouseEvent<HTMLButtonElement>) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.updateSection?.(e);\n    };\n\n    handleFileSelected = () => {\n        if (this.confirmButton.current) {\n            this.confirmButton.current.focus();\n        }\n    };\n\n    handleSave = (e: MouseEvent) => {\n        e.preventDefault();\n        if (this.props.loadingPicture) {\n            return;\n        }\n        if (this.state.removeSrc) {\n            this.props.onRemove?.();\n        } else if (this.state.setDefaultSrc) {\n            this.props.onSetDefault?.();\n        } else {\n            this.props.onSubmit?.();\n        }\n    };\n\n    handleRemoveSrc = (e: MouseEvent) => {\n        e.preventDefault();\n        this.setState({removeSrc: true});\n        this.focusFirstElement();\n    };\n\n    handleSetDefaultSrc = (e: MouseEvent) => {\n        e.preventDefault();\n        this.setState({setDefaultSrc: true});\n        this.focusFirstElement();\n    };\n\n    handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({removeSrc: false, setDefaultSrc: false});\n        this.props.onFileChange?.(e);\n    };\n\n    handleInputFile = () => {\n        if (this.selectInput.current) {\n            this.selectInput.current.value = '';\n            this.selectInput.current.click();\n        }\n    };\n\n    setPicture = (file: File) => {\n        if (file) {\n            this.previewBlob = URL.createObjectURL(file);\n\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                const orientation = FileUtils.getExifOrientation(e.target!.result! as ArrayBuffer);\n                const orientationStyles = FileUtils.getOrientationStyles(orientation);\n\n                this.setState({\n                    image: this.previewBlob,\n                    orientationStyles,\n                });\n            };\n            reader.readAsArrayBuffer(file);\n        }\n    };\n\n    renderImg = () => {\n        const imageContext = this.props.imageContext;\n\n        if (this.props.file) {\n            const imageStyles = {\n                backgroundImage: 'url(' + this.state.image + ')',\n                ...this.state.orientationStyles,\n            };\n\n            return (\n                <div className={`${imageContext}-img-preview`}>\n                    <div className='img-preview__image'>\n                        <div\n                            alt={`${imageContext} image preview`}\n                            style={imageStyles}\n                            className={`${imageContext}-img-preview`}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        if (this.state.setDefaultSrc) {\n            return (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.defaultImageSrc}\n                />\n            );\n        }\n\n        if (this.props.src && !this.state.removeSrc) {\n            const imageElement = (\n                <img\n                    className={`${imageContext}-img`}\n                    alt={`${imageContext} image`}\n                    src={this.props.src}\n                />\n            );\n            if (!this.props.onRemove && !this.props.onSetDefault) {\n                return imageElement;\n            }\n\n            let title;\n            let handler;\n            if (this.props.onRemove) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove'\n                        defaultMessage='Remove This Icon'\n                    />\n                );\n                handler = this.handleRemoveSrc;\n            } else if (this.props.onSetDefault) {\n                title = (\n                    <FormattedMessage\n                        id='setting_picture.remove_profile_picture'\n                        defaultMessage='Remove Profile Picture'\n                    />\n                );\n                handler = this.handleSetDefaultSrc;\n            }\n\n            return (\n                <div className={`${imageContext}-img__container`}>\n                    <div\n                        className='img-preview__image'\n                        aria-hidden={true}\n                    >\n                        {imageElement}\n                    </div>\n                    <WithTooltip\n                        id='removeIcon'\n                        title={title ?? ''}\n                        placement='right'\n                        disabled={!title}\n                    >\n                        <button\n                            data-testid='removeSettingPicture'\n                            className={`${imageContext}-img__remove`}\n                            onClick={handler}\n                        >\n                            <span aria-hidden={true}>{'×'}</span>\n                            <span className='sr-only'>{title}</span>\n                        </button>\n                    </WithTooltip>\n                </div>\n            );\n        }\n        return null;\n    };\n\n    render() {\n        const img = this.renderImg();\n\n        let confirmButtonClass = 'btn';\n        let disableSaveButtonFocus = false;\n        if (this.props.submitActive || this.state.removeSrc || this.state.setDefaultSrc) {\n            confirmButtonClass += ' btn-primary';\n        } else {\n            confirmButtonClass += ' btn-inactive disabled';\n            disableSaveButtonFocus = true;\n        }\n\n        let imgRender;\n        if (img) {\n            imgRender = (\n                <li\n                    className='setting-list-item'\n                    role='presentation'\n                >\n                    {img}\n                </li>\n            );\n        }\n\n        let buttonRender;\n        if (this.props.onSubmit) {\n            buttonRender = (\n                <span>\n                    <input\n                        data-testid='uploadPicture'\n                        ref={this.selectInput}\n                        className='hidden'\n                        accept={Constants.ACCEPT_STATIC_IMAGE}\n                        type='file'\n                        onChange={this.handleFileChange}\n                        disabled={this.props.loadingPicture}\n                        aria-hidden={true}\n                        tabIndex={-1}\n                    />\n                    <button\n                        data-testid='inputSettingPictureButton'\n                        className='btn btn-primary btn-file'\n                        disabled={this.props.loadingPicture}\n                        onClick={this.handleInputFile}\n                        aria-label={localizeMessage('setting_picture.select', 'Select')}\n                    >\n                        <FormattedMessage\n                            id='setting_picture.select'\n                            defaultMessage='Select'\n                        />\n                    </button>\n                    <button\n                        tabIndex={disableSaveButtonFocus ? -1 : 0}\n                        data-testid='saveSettingPicture'\n                        disabled={disableSaveButtonFocus}\n                        ref={this.confirmButton}\n                        className={confirmButtonClass}\n                        onClick={this.handleSave}\n                        aria-label={this.props.loadingPicture ? localizeMessage('setting_picture.uploading', 'Uploading...') : localizeMessage('setting_picture.save', 'Save')}\n                    >\n                        <LoadingWrapper\n                            loading={this.props.loadingPicture}\n                            text={localizeMessage('setting_picture.uploading', 'Uploading...')}\n                        >\n                            <FormattedMessage\n                                id='setting_picture.save'\n                                defaultMessage='Save'\n                            />\n                        </LoadingWrapper>\n                    </button>\n                </span>\n            );\n        }\n        return (\n            <section className='section-max form-horizontal'>\n                <h4 className='col-xs-12 section-title'>\n                    {this.props.title}\n                </h4>\n                <div className='col-sm-10 col-sm-offset-2'>\n                    <div\n                        className='setting-list'\n                        ref={this.settingList}\n                        tabIndex={-1}\n                        aria-label={this.props.title}\n                        aria-describedby='setting-picture__helptext'\n                    >\n                        {imgRender}\n                        <div\n                            id='setting-picture__helptext'\n                            className='setting-list-item pt-3'\n                        >\n                            {this.props.helpText}\n                        </div>\n                        <div\n                            className='setting-list-item'\n                        >\n                            <hr/>\n                            <FormError\n                                errors={[this.props.clientError, this.props.serverError]}\n                                type={'modal'}\n                            />\n                            {buttonRender}\n                            <button\n                                data-testid='cancelSettingPicture'\n                                className='btn btn-tertiary theme ml-2'\n                                onClick={this.handleCancel}\n                                aria-label={localizeMessage('setting_picture.cancel', 'Cancel')}\n                            >\n                                <FormattedMessage\n                                    id='setting_picture.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React, {PureComponent} from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingPicture from 'components/setting_picture';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants, ValidationErrors} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: 'user.settings.general.usernameReserved',\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameGroupNameUniqueness: {\n        id: 'user.settings.general.usernameGroupNameUniqueness',\n        defaultMessage: 'This username conflicts with an existing group name.',\n    },\n    usernameRestrictions: {\n        id: 'user.settings.general.usernameRestrictions',\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: 'user.settings.general.validEmail',\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: 'user.settings.general.emailMatch',\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: 'user.settings.general.incorrectPassword',\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: 'user.settings.general.emptyPassword',\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: 'user.settings.general.validImage',\n        defaultMessage: 'Only BMP, JPG, JPEG, or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: 'user.settings.general.imageTooLarge',\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: 'user.settings.general.uploadImage',\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: 'user.settings.general.mobile.uploadImage',\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: 'user.settings.general.fullName',\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: 'user.settings.general.nickname',\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: 'user.settings.general.username',\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: 'user.settings.general.profilePicture',\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: 'user.settings.general.close',\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: 'user.settings.general.position',\n        defaultMessage: 'Position',\n    },\n});\n\nexport type Props = {\n    intl: IntlShape;\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    updateTab: (notifications: string) => void;\n    activeSection?: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    isMobileView: boolean;\n    maxFileSize: number;\n    actions: {\n        logError: ({message, type}: {message: any; type: string}, status: boolean) => void;\n        clearErrors: () => void;\n        updateMe: (user: UserProfile) => Promise<ActionResult>;\n        sendVerificationEmail: (email: string) => Promise<ActionResult>;\n        setDefaultProfileImage: (id: string) => void;\n        uploadProfileImage: (id: string, file: File) => Promise<ActionResult>;\n    };\n    requireEmailVerification?: boolean;\n    ldapFirstNameAttributeSet?: boolean;\n    ldapLastNameAttributeSet?: boolean;\n    samlFirstNameAttributeSet?: boolean;\n    samlLastNameAttributeSet?: boolean;\n    ldapNicknameAttributeSet?: boolean;\n    samlNicknameAttributeSet?: boolean;\n    ldapPositionAttributeSet?: boolean;\n    samlPositionAttributeSet?: boolean;\n    ldapPictureAttributeSet?: boolean;\n}\n\ntype State = {\n    username: string;\n    firstName: string;\n    lastName: string;\n    nickname: string;\n    position: string;\n    originalEmail: string;\n    email: string;\n    confirmEmail: string;\n    currentPassword: string;\n    pictureFile: File | null;\n    loadingPicture: boolean;\n    sectionIsSaving: boolean;\n    showSpinner: boolean;\n    resendStatus?: string;\n    clientError?: string | null;\n    serverError?: string | {server_error_id: string; message: string};\n    emailError?: string;\n}\n\nexport class UserSettingsGeneralTab extends PureComponent<Props, State> {\n    public submitActive = false;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email: string) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    };\n\n    createEmailResendLink = (email: string) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    };\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError) {\n            let errObj;\n            if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                errObj = {clientError: formatMessage(holders.usernameReserved), serverError: ''};\n            } else {\n                errObj = {clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''};\n            }\n            this.setState(errObj);\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    };\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    };\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    };\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    };\n\n    submitUser = (user: UserProfile, emailUpdated: boolean) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.server_error_id === 'app.user.group_name_conflict') {\n                        serverError = formatMessage(holders.usernameGroupNameUniqueness);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    };\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    };\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    const state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    };\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    };\n\n    updateUsername = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({username: e.target.value});\n    };\n\n    updateFirstName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({firstName: e.target.value});\n    };\n\n    updateLastName = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({lastName: e.target.value});\n    };\n\n    updateNickname = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({nickname: e.target.value});\n    };\n\n    updatePosition = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({position: e.target.value});\n    };\n\n    updateEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({email: e.target.value});\n    };\n\n    updateConfirmEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmEmail: e.target.value});\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updatePicture = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    };\n\n    updateSection = (section: string) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    };\n\n    setupInitialState(props: Props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n            serverError: '',\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'email';\n        let max = null;\n        if (active) {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Entra ID. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.OPENID_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOpenIdCantUpdate'\n                                defaultMessage='Login occurs through OpenID Connect. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='pb-2'\n                    >\n                        <div className='setting-list__hint pb-3'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>,\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (this.props.user.auth_service === '') {\n            describe = this.props.user.email;\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginGitlab'\n                    defaultMessage='Login done through GitLab ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginGoogle'\n                    defaultMessage='Login done through Google Apps ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginOffice365'\n                    defaultMessage='Login done through Entra ID ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginLdap'\n                    defaultMessage='Login done through AD/LDAP ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.loginSaml'\n                    defaultMessage='Login done through SAML ({email})'\n                    values={{\n                        email: this.state.originalEmail,\n                    }}\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.general.email'\n                        defaultMessage='Email'\n                    />\n                }\n                describe={describe}\n                section={'email'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    }\n\n    createNameSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'name';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === Constants.LDAP_SERVICE &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet)) ||\n                (Constants.OAUTH_SERVICES.includes(this.props.user.auth_service))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                const notifClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                };\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n\n        if (user.first_name && user.last_name) {\n            describe = user.first_name + ' ' + user.last_name;\n        } else if (user.first_name) {\n            describe = user.first_name;\n        } else if (user.last_name) {\n            describe = user.last_name;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyName'\n                    defaultMessage=\"Click 'Edit' to add your full name\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyName'\n                        defaultMessage='Click to add your full name'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.fullName)}\n                describe={describe}\n                section={'name'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createNicknameSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'nickname';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel: JSX.Element|string = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (user.nickname) {\n            describe = user.nickname;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyNickname'\n                    defaultMessage=\"Click 'Edit' to add a nickname\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyNickname'\n                        defaultMessage='Click to add a nickname'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.nickname)}\n                describe={describe}\n                section={'nickname'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createUsernameSection = () => {\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'username';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.username)}\n                describe={this.props.user.username}\n                section={'username'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createPositionSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'position';\n        let max = null;\n        if (active) {\n            const inputs = [];\n\n            let extraInfo: JSX.Element|string;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel: JSX.Element | string = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (this.props.isMobileView) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>,\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            max = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        }\n\n        let describe: JSX.Element|string = '';\n        if (user.position) {\n            describe = user.position;\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.general.emptyPosition'\n                    defaultMessage=\"Click 'Edit' to add your job title / position\"\n                />\n            );\n            if (this.props.isMobileView) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.mobile.emptyPosition'\n                        defaultMessage='Click to add your job title / position'\n                    />\n                );\n            }\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.position)}\n                describe={describe}\n                section={'position'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    createPictureSection = () => {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        const active = this.props.activeSection === 'picture';\n        let max = null;\n\n        if (active) {\n            let submit = null;\n            let setDefault = null;\n            let helpText = null;\n            let imgSrc = null;\n\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE || this.props.user.auth_service === Constants.SAML_SERVICE) && this.props.ldapPictureAttributeSet) {\n                helpText = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                submit = this.submitPicture;\n                setDefault = user.last_picture_update > 0 ? this.setDefaultProfilePicture : null;\n                imgSrc = Utils.imageURLForUser(user.id, user.last_picture_update);\n                helpText = (\n                    <FormattedMessage\n                        id='setting_picture.help.profile'\n                        defaultMessage='Upload a picture in BMP, JPG, JPEG, or PNG format. Maximum file size: {max}'\n                        values={{max: Utils.fileSizeToString(this.props.maxFileSize)}}\n                    />\n                );\n            }\n\n            max = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={submit}\n                    onSetDefault={setDefault}\n                    src={imgSrc}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={this.state.serverError}\n                    clientError={this.state.clientError}\n                    updateSection={(e: React.MouseEvent) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                    helpText={helpText}\n                />\n            );\n        }\n\n        let minMessage: JSX.Element|string = formatMessage(holders.uploadImage);\n        if (this.props.isMobileView) {\n            minMessage = formatMessage(holders.uploadImageMobile);\n        }\n        if (user.last_picture_update > 0) {\n            minMessage = (\n                <FormattedMessage\n                    id='user.settings.general.imageUpdated'\n                    defaultMessage='Image last updated {date}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={new Date(user.last_picture_update)}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                    }}\n                />\n            );\n        }\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={formatMessage(holders.profilePicture)}\n                describe={minMessage}\n                section={'picture'}\n                updateSection={this.updateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const nameSection = this.createNameSection();\n        const nicknameSection = this.createNicknameSection();\n        const usernameSection = this.createUsernameSection();\n        const positionSection = this.createPositionSection();\n        const emailSection = this.createEmailSection();\n        const pictureSection = this.createPictureSection();\n\n        return (\n            <div id='generalSettings'>\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.modal.profile'\n                            defaultMessage='Profile'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        id='generalSettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.modal.profile'\n                                defaultMessage='Profile'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getIsMobileView} from 'selectors/views/browser';\n\nimport type {GlobalState} from 'types/store';\n\nimport UserSettingsGeneralTab from './user_settings_general';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize!, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n    const ldapPictureAttributeSet = config.LdapPictureAttributeSet === 'true';\n\n    return {\n        isMobileView: getIsMobileView(state),\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n        ldapPictureAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {Fragment, useCallback, useEffect, useMemo, useRef, memo} from 'react';\nimport type {ChangeEvent, ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {ValueType, OptionsType} from 'react-select';\n\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport Constants, {NotificationLevels, UserSettingsNotificationSections} from 'utils/constants';\n\nimport type {Props as UserSettingsNotificationsProps} from '../user_settings_notifications';\n\nexport type SelectOption = {\n    label: ReactNode;\n    value: string;\n};\n\nexport type Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving: boolean;\n    error: string;\n    setParentState: (key: string, value: string | boolean) => void;\n    areAllSectionsInactive: boolean;\n    isCollapsedThreadsEnabled: boolean;\n    desktopActivity: UserNotifyProps['desktop'];\n    sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'];\n    pushActivity: UserNotifyProps['push'];\n    pushStatus: UserNotifyProps['push_status'];\n    desktopThreads: UserNotifyProps['desktop_threads'];\n    pushThreads: UserNotifyProps['push_threads'];\n    desktopAndMobileSettingsDifferent: boolean;\n};\n\nfunction DesktopAndMobileNotificationSettings({\n    active,\n    updateSection,\n    onSubmit,\n    onCancel,\n    saving,\n    error,\n    setParentState,\n    areAllSectionsInactive,\n    isCollapsedThreadsEnabled,\n    desktopActivity,\n    sendPushNotifications,\n    pushActivity,\n    pushStatus,\n    desktopThreads,\n    pushThreads,\n    desktopAndMobileSettingsDifferent,\n}: Props) {\n    const editButtonRef = useRef<SettingItemMinComponent>(null);\n    const previousActiveRef = useRef(active);\n\n    // Focus back on the edit button, after this section was closed after it was opened\n    useEffect(() => {\n        if (previousActiveRef.current && !active && areAllSectionsInactive) {\n            editButtonRef.current?.focus();\n        }\n\n        previousActiveRef.current = active;\n    }, [active, areAllSectionsInactive]);\n\n    const handleChangeForSendDesktopNotificationsRadio = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.value;\n        setParentState('desktopActivity', value);\n    }, [setParentState]);\n\n    const handleChangeForDesktopThreadsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        setParentState('desktopThreads', value);\n    }, [setParentState]);\n\n    const handleChangeForDifferentMobileNotificationsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked;\n        setParentState('desktopAndMobileSettingsDifferent', value);\n    }, [setParentState]);\n\n    const handleChangeForSendMobileNotificationsSelect = useCallback((selectedOption: ValueType<SelectOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('pushActivity', selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const handleChangeForMobileThreadsCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        setParentState('pushThreads', value);\n    }, [setParentState]);\n\n    const handleChangeForTriggerMobileNotificationsSelect = useCallback((selectedOption: ValueType<SelectOption>) => {\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('pushStatus', selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const maximizedSettingsInputs = useMemo(() => {\n        const maximizedSettingInputs = [];\n\n        const sendDesktopNotificationsSection = (\n            <fieldset\n                id='sendDesktopNotificationsSection'\n                key='sendDesktopNotificationsSection'\n            >\n                <legend className='form-legend'>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopAndMobile.sendDesktopNotificationFor'\n                        defaultMessage='Send notifications for:'\n                    />\n                </legend>\n                {optionsOfSendNotifications.map((optionOfSendNotifications) => (\n                    <div\n                        key={optionOfSendNotifications.value}\n                        className='radio'\n                    >\n                        <label>\n                            <input\n                                type='radio'\n                                checked={desktopActivity === optionOfSendNotifications.value}\n                                value={optionOfSendNotifications.value}\n                                onChange={handleChangeForSendDesktopNotificationsRadio}\n                            />\n                            {optionOfSendNotifications.label}\n                        </label>\n                    </div>\n                ))}\n            </fieldset>\n        );\n        maximizedSettingInputs.push(sendDesktopNotificationsSection);\n\n        if (shouldShowDesktopThreadsSection(isCollapsedThreadsEnabled, desktopActivity)) {\n            const desktopThreadNotificationSection = (\n                <Fragment key='desktopThreadNotificationSection'>\n                    <br/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={desktopThreads === NotificationLevels.ALL}\n                                onChange={handleChangeForDesktopThreadsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.notifyForDesktopthreads'\n                                defaultMessage={'Notify me about replies to threads I\\'m following'}\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(desktopThreadNotificationSection);\n        }\n\n        if (sendPushNotifications) {\n            const differentMobileNotificationsSection = (\n                <Fragment key='differentMobileNotificationsSection'>\n                    <hr/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={desktopAndMobileSettingsDifferent}\n                                onChange={handleChangeForDifferentMobileNotificationsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.differentMobileNotificationsTitle'\n                                defaultMessage='Use different settings for my mobile devices'\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(differentMobileNotificationsSection);\n        }\n\n        if (shouldShowSendMobileNotificationsSection(sendPushNotifications, desktopAndMobileSettingsDifferent)) {\n            const sendMobileNotificationsSection = (\n                <React.Fragment key='sendMobileNotificationsSection'>\n                    <br/>\n                    <label\n                        id='sendMobileNotificationsLabel'\n                        htmlFor='sendMobileNotificationsSelectInput'\n                        className='singleSelectLabel'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.desktopAndMobile.sendMobileNotificationsFor'\n                            defaultMessage='Send mobile notifications for:'\n                        />\n                    </label>\n                    <ReactSelect\n                        inputId='sendMobileNotificationsSelectInput'\n                        aria-labelledby='sendMobileNotificationsLabel'\n                        className='react-select singleSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfSendNotifications}\n                        clearable={false}\n                        isClearable={false}\n                        isSearchable={false}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfSendMobileNotificationForSelect(pushActivity)}\n                        onChange={handleChangeForSendMobileNotificationsSelect}\n                    />\n                </React.Fragment>\n            );\n            maximizedSettingInputs.push(sendMobileNotificationsSection);\n        }\n\n        if (shouldShowMobileThreadsSection(sendPushNotifications, isCollapsedThreadsEnabled, desktopAndMobileSettingsDifferent, pushActivity)) {\n            const threadNotificationSection = (\n                <Fragment key='threadNotificationSection'>\n                    <br/>\n                    <div className='checkbox single-checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={pushThreads === NotificationLevels.ALL}\n                                onChange={handleChangeForMobileThreadsCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopAndMobile.notifyForMobilethreads'\n                                defaultMessage={'Notify me on mobile about replies to threads I\\'m following'}\n                            />\n                        </label>\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(threadNotificationSection);\n        }\n\n        if (shouldShowTriggerMobileNotificationsSection(sendPushNotifications, desktopActivity, pushActivity, desktopAndMobileSettingsDifferent)) {\n            const triggerMobileNotificationsSection = (\n                <React.Fragment key='triggerMobileNotificationsSection'>\n                    <br/>\n                    <label\n                        id='pushMobileNotificationsLabel'\n                        htmlFor='pushMobileNotificationSelectInput'\n                        className='singleSelectLabel'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.desktopAndMobile.pushNotification'\n                            defaultMessage='Trigger mobile notifications when I am:'\n                        />\n                    </label>\n                    <ReactSelect\n                        inputId='pushMobileNotificationSelectInput'\n                        aria-labelledby='pushMobileNotificationsLabel'\n                        className='react-select singleSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfSendMobileNotificationsWhenSelect}\n                        clearable={false}\n                        isClearable={false}\n                        isSearchable={false}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfSendMobileNotificationWhenSelect(pushStatus)}\n                        onChange={handleChangeForTriggerMobileNotificationsSelect}\n                    />\n                </React.Fragment>\n            );\n            maximizedSettingInputs.push(triggerMobileNotificationsSection);\n        }\n\n        if (!sendPushNotifications) {\n            const disabledPushNotificationsSection = (\n                <>\n                    <br/>\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopAndMobile.pushNotificationsDisabled'\n                        defaultMessage={'Mobile push notifications haven\\'t been enabled by your system administrator.'}\n                    />\n                </>\n            );\n            maximizedSettingInputs.push(disabledPushNotificationsSection);\n        }\n\n        return maximizedSettingInputs;\n    },\n    [\n        desktopActivity,\n        handleChangeForSendDesktopNotificationsRadio,\n        isCollapsedThreadsEnabled,\n        desktopThreads,\n        handleChangeForDesktopThreadsCheckbox,\n        sendPushNotifications,\n        desktopAndMobileSettingsDifferent,\n        handleChangeForDifferentMobileNotificationsCheckbox,\n        pushActivity,\n        handleChangeForSendMobileNotificationsSelect,\n        pushThreads,\n        handleChangeForMobileThreadsCheckbox,\n        pushStatus,\n        handleChangeForTriggerMobileNotificationsSelect,\n    ]);\n\n    function handleChangeForMaxSection(section: string) {\n        updateSection(section);\n    }\n\n    function handleChangeForMinSection(section: string) {\n        updateSection(section);\n        onCancel();\n    }\n\n    if (active) {\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id={'user.settings.notifications.desktopAndMobile.title'}\n                        defaultMessage='Desktop and mobile notifications'\n                    />\n                }\n                inputs={maximizedSettingsInputs}\n                submit={onSubmit}\n                saving={saving}\n                serverError={error}\n                updateSection={handleChangeForMaxSection}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            ref={editButtonRef}\n            title={\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.title'\n                    defaultMessage='Desktop and mobile notifications'\n                />\n            }\n            describe={getCollapsedText(desktopActivity, pushActivity)}\n            section={UserSettingsNotificationSections.DESKTOP_AND_MOBILE}\n            updateSection={handleChangeForMinSection}\n        />\n    );\n}\n\nfunction NoIndicatorSeparatorComponent() {\n    return null;\n}\n\nconst optionsOfSendNotifications = [\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.allNewMessages'\n                defaultMessage='All new messages'\n            />\n        ),\n        value: NotificationLevels.ALL,\n    },\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.onlyMentions'\n                defaultMessage='Mentions, direct messages, and group messages'\n            />\n        ),\n        value: NotificationLevels.MENTION,\n    },\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.nothing'\n                defaultMessage='Nothing'\n            />\n        ),\n        value: NotificationLevels.NONE,\n    },\n];\n\nexport function shouldShowDesktopThreadsSection(isCollapsedThreadsEnabled: boolean, desktopActivity: UserNotifyProps['desktop']) {\n    if (!isCollapsedThreadsEnabled) {\n        return false;\n    }\n\n    if (desktopActivity === NotificationLevels.ALL || desktopActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function shouldShowMobileThreadsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], isCollapsedThreadsEnabled: boolean, desktopAndMobileSettingsDifferent: boolean, pushActivity: UserNotifyProps['push']) {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (!isCollapsedThreadsEnabled) {\n        return false;\n    }\n\n    if (!desktopAndMobileSettingsDifferent) {\n        return false;\n    }\n\n    if (pushActivity === NotificationLevels.ALL || pushActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction shouldShowSendMobileNotificationsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], desktopAndMobileSettingsDifferent: boolean) {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (desktopAndMobileSettingsDifferent) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function getValueOfSendMobileNotificationForSelect(pushActivity: UserNotifyProps['push']): ValueType<SelectOption> {\n    if (!pushActivity) {\n        return optionsOfSendNotifications[1];\n    }\n\n    const option = optionsOfSendNotifications.find((option) => option.value === pushActivity);\n    if (!option) {\n        return optionsOfSendNotifications[1];\n    }\n\n    return option;\n}\n\nexport function shouldShowTriggerMobileNotificationsSection(sendPushNotifications: UserSettingsNotificationsProps['sendPushNotifications'], desktopActivity: UserNotifyProps['desktop'], pushActivity: UserNotifyProps['push'], desktopAndMobileSettingsDifferent: boolean): boolean {\n    if (!sendPushNotifications) {\n        return false;\n    }\n\n    if (!desktopActivity || !pushActivity) {\n        return true;\n    }\n\n    if (!desktopAndMobileSettingsDifferent) {\n        if (desktopActivity === NotificationLevels.NONE) {\n            return false;\n        }\n        return true;\n    }\n\n    if (pushActivity === NotificationLevels.NONE) {\n        return false;\n    }\n\n    return true;\n}\n\nconst optionsOfSendMobileNotificationsWhenSelect: OptionsType<SelectOption> = [\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.online'\n                defaultMessage='Online, away, or offline'\n            />\n        ),\n        value: Constants.UserStatuses.ONLINE,\n    },\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.away'\n                defaultMessage='Away or offline'\n            />\n        ),\n        value: Constants.UserStatuses.AWAY,\n    },\n    {\n        label: (\n            <FormattedMessage\n                id='user.settings.notifications.desktopAndMobile.offline'\n                defaultMessage='Offline'\n            />\n        ),\n        value: Constants.UserStatuses.OFFLINE,\n    },\n];\n\nexport function getValueOfSendMobileNotificationWhenSelect(pushStatus?: UserNotifyProps['push_status']): ValueType<SelectOption> {\n    if (!pushStatus) {\n        return optionsOfSendMobileNotificationsWhenSelect[2];\n    }\n\n    const option = optionsOfSendMobileNotificationsWhenSelect.find((option) => option.value === pushStatus);\n    if (!option) {\n        return optionsOfSendMobileNotificationsWhenSelect[2];\n    }\n\n    return option;\n}\n\nfunction getCollapsedText(desktopActivity: UserNotifyProps['desktop'], pushActivity: UserNotifyProps['push']): ReactNode {\n    if (desktopActivity === NotificationLevels.ALL) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allForDesktopAndMobile'\n                    defaultMessage='All new messages'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allDesktopButMobileMentions'\n                    defaultMessage='All new messages on desktop; mentions, direct messages, and group messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.allDesktopButMobileNone'\n                    defaultMessage='All new messages on desktop; never on mobile'\n                />\n            );\n        }\n    } else if (desktopActivity === NotificationLevels.MENTION) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsDesktopButMobileAll'\n                    defaultMessage='Mentions, direct messages, and group messages on desktop; all new messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsForDesktopAndMobile'\n                    defaultMessage='Mentions, direct messages, and group messages'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.mentionsForDesktopButMobileNone'\n                    defaultMessage='Mentions, direct messages, and group messages on desktop; never on mobile'\n                />\n            );\n        }\n    } else if (desktopActivity === NotificationLevels.NONE) {\n        if (pushActivity === NotificationLevels.ALL) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneDesktopButMobileAll'\n                    defaultMessage='Never on desktop; all new messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.MENTION) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneDesktopButMobileMentions'\n                    defaultMessage='Never on desktop; mentions, direct messages, and group messages on mobile'\n                />\n            );\n        } else if (pushActivity === NotificationLevels.NONE) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopAndMobile.noneForDesktopAndMobile'\n                    defaultMessage='Never'\n                />\n            );\n        }\n    }\n\n    return (\n        <FormattedMessage\n            id='user.settings.notifications.desktopAndMobile.noValidSettings'\n            defaultMessage='Configure desktop and mobile settings'\n        />\n    );\n}\n\nexport default memo(DesktopAndMobileNotificationSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ChangeEvent, ReactNode} from 'react';\nimport React, {memo, useEffect, useRef, Fragment, useMemo, useCallback} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport type {ValueType} from 'react-select';\nimport ReactSelect from 'react-select';\n\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {UserSettingsNotificationSections} from 'utils/constants';\nimport {\n    notificationSoundKeys,\n    stopTryNotificationRing,\n    tryNotificationSound,\n    tryNotificationRing,\n    getValueOfNotificationSoundsSelect,\n    getValueOfIncomingCallSoundsSelect,\n    optionsOfMessageNotificationSoundsSelect,\n    optionsOfIncomingCallSoundsSelect,\n    callNotificationSoundKeys,\n} from 'utils/notification_sounds';\n\nimport type {Props as UserSettingsNotificationsProps} from '../user_settings_notifications';\n\nexport type SelectOption = {\n    value: string;\n    label: ReactNode;\n};\n\nexport type Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving: boolean;\n    error: string;\n    setParentState: (key: string, value: string | boolean) => void;\n    areAllSectionsInactive: boolean;\n    desktopSound: UserNotifyProps['desktop_sound'];\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'];\n    isCallsRingingEnabled: UserSettingsNotificationsProps['isCallsRingingEnabled'];\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'];\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'];\n};\n\nfunction DesktopNotificationSoundsSettings({\n    active,\n    updateSection,\n    onSubmit,\n    onCancel,\n    saving,\n    error,\n    setParentState,\n    areAllSectionsInactive,\n    desktopSound,\n    desktopNotificationSound,\n    isCallsRingingEnabled,\n    callsDesktopSound,\n    callsNotificationSound,\n}: Props) {\n    const intl = useIntl();\n\n    const editButtonRef = useRef<SettingItemMinComponent>(null);\n    const previousActiveRef = useRef(active);\n\n    // Focus back on the edit button, after this section was closed after it was opened\n    useEffect(() => {\n        if (previousActiveRef.current && !active && areAllSectionsInactive) {\n            editButtonRef.current?.focus();\n        }\n\n        previousActiveRef.current = active;\n    }, [active, areAllSectionsInactive]);\n\n    const handleChangeForMessageNotificationSoundCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? 'true' : 'false';\n        setParentState('desktopSound', value);\n\n        if (value === 'false') {\n            stopTryNotificationRing();\n        }\n    }, [setParentState]);\n\n    const handleChangeForIncomginCallSoundCheckbox = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n        const value = event.target.checked ? 'true' : 'false';\n        setParentState('callsDesktopSound', value);\n\n        if (value === 'false') {\n            stopTryNotificationRing();\n        }\n    }, [setParentState]);\n\n    const handleChangeForMessageNotificationSoundSelect = useCallback((selectedOption: ValueType<SelectOption>) => {\n        stopTryNotificationRing();\n\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('desktopNotificationSound', selectedOption.value);\n            tryNotificationSound(selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const handleChangeForIncomingCallSoundSelect = useCallback((selectedOption: ValueType<SelectOption>) => {\n        stopTryNotificationRing();\n\n        if (selectedOption && 'value' in selectedOption) {\n            setParentState('callsNotificationSound', selectedOption.value);\n            tryNotificationRing(selectedOption.value);\n        }\n    }, [setParentState]);\n\n    const maximizedSettingInputs = useMemo(() => {\n        const maximizedSettingInputs = [];\n\n        const isMessageNotificationSoundChecked = desktopSound === 'true';\n        const messageSoundSection = (\n            <Fragment key='messageSoundSection'>\n                <div className='checkbox inlineCheckboxSelect'>\n                    <label>\n                        <input\n                            type='checkbox'\n                            checked={desktopSound === 'true'}\n                            onChange={handleChangeForMessageNotificationSoundCheckbox}\n                        />\n                        <FormattedMessage\n                            id='user.settings.notifications.desktopNotificationSound.messageNotificationSound'\n                            defaultMessage='Message notification sound'\n                        />\n                    </label>\n                    <ReactSelect\n                        id='messageNotificationSoundSelect'\n                        inputId='messageNotificationSoundSelectInput'\n                        className='react-select inlineSelect'\n                        classNamePrefix='react-select'\n                        options={optionsOfMessageNotificationSoundsSelect}\n                        clearable={false}\n                        isClearable={false}\n                        isSearchable={false}\n                        isDisabled={!isMessageNotificationSoundChecked}\n                        placeholder={intl.formatMessage({\n                            id: 'user.settings.notifications.desktopNotificationSound.soundSelectPlaceholder',\n                            defaultMessage: 'Select a sound',\n                        })}\n                        components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                        value={getValueOfNotificationSoundsSelect(desktopNotificationSound)}\n                        onChange={handleChangeForMessageNotificationSoundSelect}\n                    />\n                </div>\n            </Fragment>\n        );\n        maximizedSettingInputs.push(messageSoundSection);\n\n        if (isCallsRingingEnabled) {\n            const isIncomingCallSoundChecked = callsDesktopSound === 'true';\n            const callSoundSection = (\n                <Fragment key='callSoundSection'>\n                    <br/>\n                    <div className='checkbox inlineCheckboxSelect'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                checked={isIncomingCallSoundChecked}\n                                onChange={handleChangeForIncomginCallSoundCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.desktopNotificationSound.incomingCallSound'\n                                defaultMessage='Incoming call sound'\n                            />\n                        </label>\n                        <ReactSelect\n                            id='incomingCallSoundNotificationSelect'\n                            inputId='incomingCallSoundNotificationSelectInput'\n                            className='react-select inlineSelect'\n                            classNamePrefix='react-select'\n                            options={optionsOfIncomingCallSoundsSelect}\n                            clearable={false}\n                            isClearable={false}\n                            isSearchable={false}\n                            isDisabled={!isIncomingCallSoundChecked}\n                            components={{IndicatorSeparator: NoIndicatorSeparatorComponent}}\n                            placeholder={intl.formatMessage({\n                                id: 'user.settings.notifications.desktopNotificationSound.soundSelectPlaceholder',\n                                defaultMessage: 'Select a sound',\n                            })}\n                            value={getValueOfIncomingCallSoundsSelect(callsNotificationSound)}\n                            onChange={handleChangeForIncomingCallSoundSelect}\n                        />\n                    </div>\n                </Fragment>\n            );\n            maximizedSettingInputs.push(callSoundSection);\n        }\n        return maximizedSettingInputs;\n    },\n    [\n        desktopSound,\n        handleChangeForMessageNotificationSoundCheckbox,\n        handleChangeForMessageNotificationSoundSelect,\n        desktopNotificationSound,\n        isCallsRingingEnabled,\n        callsDesktopSound,\n        handleChangeForIncomginCallSoundCheckbox,\n        callsNotificationSound,\n        handleChangeForIncomingCallSoundSelect,\n    ]);\n\n    function handleChangeForMaxSection(section: string) {\n        stopTryNotificationRing();\n        updateSection(section);\n    }\n\n    function handleChangeForMinSection(section: string) {\n        stopTryNotificationRing();\n        updateSection(section);\n        onCancel();\n    }\n\n    function handleSubmit() {\n        stopTryNotificationRing();\n        onSubmit();\n    }\n\n    if (active) {\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.desktopNotificationSounds.title'\n                        defaultMessage='Desktop notification sounds'\n                    />\n                }\n                inputs={maximizedSettingInputs}\n                submit={handleSubmit}\n                saving={saving}\n                serverError={error}\n                updateSection={handleChangeForMaxSection}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            ref={editButtonRef}\n            title={\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSounds.title'\n                    defaultMessage='Desktop notification sounds'\n                />\n            }\n            describe={getCollapsedText(isCallsRingingEnabled, desktopSound, desktopNotificationSound, callsDesktopSound, callsNotificationSound)}\n            section={UserSettingsNotificationSections.DESKTOP_NOTIFICATION_SOUND}\n            updateSection={handleChangeForMinSection}\n        />\n    );\n}\n\nfunction NoIndicatorSeparatorComponent() {\n    return null;\n}\n\nfunction getCollapsedText(\n    isCallsRingingEnabled: UserSettingsNotificationsProps['isCallsRingingEnabled'],\n    desktopSound: UserNotifyProps['desktop_sound'],\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'],\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'],\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'],\n) {\n    const desktopNotificationSoundIsSelected = notificationSoundKeys.includes(desktopNotificationSound as string);\n    const callNotificationSoundIsSelected = callNotificationSoundKeys.includes(callsNotificationSound as string);\n\n    let hasCallsSound: boolean | null = null;\n    if (isCallsRingingEnabled && callNotificationSoundIsSelected) {\n        if (callsDesktopSound === 'true') {\n            hasCallsSound = true;\n        } else {\n            hasCallsSound = false;\n        }\n    }\n\n    let hasDesktopSound: boolean | null = null;\n    if (desktopNotificationSoundIsSelected) {\n        if (desktopSound === 'true') {\n            hasDesktopSound = true;\n        } else {\n            hasDesktopSound = false;\n        }\n    }\n\n    if (hasDesktopSound !== null && hasCallsSound !== null) {\n        if (hasDesktopSound && hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopAndCallsSound'\n                    defaultMessage='\"{desktopSound}\" for messages, \"{callsSound}\" for calls'\n                    values={{\n                        desktopSound: desktopNotificationSound,\n                        callsSound: callsNotificationSound,\n                    }}\n                />\n            );\n        } else if (!hasDesktopSound && hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.noDesktopAndhasCallsSound'\n                    defaultMessage='No sound for messages, \"{callsSound}\" for calls'\n                    values={{callsSound: callsNotificationSound}}\n                />\n            );\n        } else if (hasDesktopSound && !hasCallsSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopAndNoCallsSound'\n                    defaultMessage='\"{desktopSound}\" for messages, no sound for calls'\n                    values={{desktopSound: desktopNotificationSound}}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.notifications.desktopNotificationSound.noDesktopAndNoCallsSound'\n                defaultMessage='No sound'\n            />\n        );\n    } else if (hasDesktopSound !== null && hasCallsSound === null) {\n        if (hasDesktopSound) {\n            return (\n                <FormattedMessage\n                    id='user.settings.notifications.desktopNotificationSound.hasDesktopSound'\n                    defaultMessage='\"{desktopSound}\" for messages'\n                    values={{desktopSound: desktopNotificationSound}}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.notifications.desktopNotificationSound.noDesktopSound'\n                defaultMessage='No sound'\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id='user.settings.notifications.desktopNotificationSound.noValidSound'\n            defaultMessage='Configure desktop notification sounds'\n        />\n    );\n}\n\nexport default memo(DesktopNotificationSoundsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Preferences} from '../constants';\nexport function getEmailInterval(enableEmailNotification: boolean, enableEmailBatching: boolean, emailIntervalPreference: number): number {\n    const {\n        INTERVAL_NEVER,\n        INTERVAL_IMMEDIATE,\n        INTERVAL_FIFTEEN_MINUTES,\n        INTERVAL_HOUR,\n    } = Preferences;\n\n    const validValuesWithEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER, INTERVAL_FIFTEEN_MINUTES, INTERVAL_HOUR];\n    const validValuesWithoutEmailBatching = [INTERVAL_IMMEDIATE, INTERVAL_NEVER];\n\n    if (!enableEmailNotification) {\n        return INTERVAL_NEVER;\n    } else if (enableEmailBatching && validValuesWithEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is enabled, the default interval is 15 minutes\n        return INTERVAL_FIFTEEN_MINUTES;\n    } else if (!enableEmailBatching && validValuesWithoutEmailBatching.indexOf(emailIntervalPreference) === -1) {\n        // When email batching is not enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    } else if (enableEmailNotification && emailIntervalPreference === INTERVAL_NEVER) {\n        // When email notification is enabled, the default interval is immediately\n        return INTERVAL_IMMEDIATE;\n    }\n\n    return emailIntervalPreference;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferenceType} from '@mattermost/types/preferences';\nimport type {UserNotifyProps} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {Preferences, NotificationLevels} from 'utils/constants';\nimport {a11yFocus} from 'utils/utils';\n\nconst SECONDS_PER_MINUTE = 60;\n\ntype Props = {\n    active: boolean;\n    updateSection: (section: string) => void;\n    onSubmit: () => void;\n    onCancel: () => void;\n    saving?: boolean;\n    error?: string;\n    setParentState: (key: string, value: any) => void;\n    areAllSectionsInactive: boolean;\n    isCollapsedThreadsEnabled: boolean;\n    enableEmail: boolean;\n    onChange: (enableEmail: UserNotifyProps['email']) => void;\n    threads: string;\n    currentUserId: string;\n    emailInterval: number;\n    sendEmailNotifications: boolean;\n    enableEmailBatching: boolean;\n    actions: {\n        savePreferences: (currentUserId: string, emailIntervalPreference: PreferenceType[]) => Promise<ActionResult>;\n    };\n};\n\ntype State = {\n    active: boolean;\n    emailInterval: number;\n    enableEmail: boolean;\n    enableEmailBatching: boolean;\n    sendEmailNotifications: boolean;\n    newInterval: number;\n};\n\nexport default class EmailNotificationSetting extends React.PureComponent<Props, State> {\n    editButtonRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            active,\n        } = props;\n\n        this.state = {\n            active,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n\n        this.editButtonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            active,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (active && !prevState.active) {\n            return {\n                active,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            active !== prevState.active\n        ) {\n            return {\n                active,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.editButtonRef.current?.focus();\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email')!;\n        const newInterval = parseInt(e.currentTarget.getAttribute('data-email-interval')!, 10);\n\n        this.setState({\n            enableEmail: enableEmail === 'true',\n            newInterval,\n        });\n\n        a11yFocus(e.currentTarget);\n\n        this.props.onChange(enableEmail as UserNotifyProps['email']);\n    };\n\n    handleThreadsOnChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.checked ? NotificationLevels.ALL : NotificationLevels.MENTION;\n        this.props.setParentState('emailThreads', value);\n    };\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n        }\n\n        this.props.onSubmit();\n    };\n\n    handleUpdateSection = (section?: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    };\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                ref={this.editButtonRef}\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.emailNotifications'\n                        defaultMessage='Email notifications'\n                    />\n                }\n                describe={description}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.notifications.emailNotifications'\n                            defaultMessage='Email notifications'\n                        />\n                    }\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='pt-2'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    serverError={this.props.error}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        let threadsNotificationSelection = null;\n        if (this.props.isCollapsedThreadsEnabled && this.props.enableEmail) {\n            threadsNotificationSelection = (\n                <React.Fragment key='userNotificationEmailThreadsOptions'>\n                    <hr/>\n                    <fieldset>\n                        <div className='checkbox single-checkbox'>\n                            <label>\n                                <input\n                                    id='desktopThreadsNotificationAllActivity'\n                                    type='checkbox'\n                                    name='desktopThreadsNotificationLevel'\n                                    checked={this.props.threads === NotificationLevels.ALL}\n                                    onChange={this.handleThreadsOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.notifyForthreads'\n                                    defaultMessage={'Notify me about replies to threads I’m following'}\n                                />\n                            </label>\n                        </div>\n                    </fieldset>\n                </React.Fragment>\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.emailNotifications'\n                        defaultMessage='Email notifications'\n                    />\n                }\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='mt-3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                    threadsNotificationSelection,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                serverError={this.props.error}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.renderMaxSettingView();\n        }\n\n        return this.renderMinSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {ChangeEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\n\nimport {localizeMessage} from 'utils/utils';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\ntype Props = {\n    autoResponderActive: boolean;\n    autoResponderMessage: string;\n    updateSection: (section: string) => void;\n    setParentState: (key: string, value: string | boolean) => void;\n    submit: () => void;\n    saving: boolean;\n    error?: string;\n}\n\nexport default class ManageAutoResponder extends React.PureComponent<Props> {\n    handleAutoResponderChecked = (e: ChangeEvent<HTMLInputElement>) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e: ChangeEvent<HTMLTextAreaElement>) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='pt-2'>\n                    <textarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows={5}\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='mt-5'\n            >\n                <FormattedMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic direct message replies'\n                    />\n                }\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {ChangeEvent} from 'react';\nimport type {WrappedComponentProps} from 'react-intl';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {Styles as ReactSelectStyles, ValueType} from 'react-select';\nimport CreatableReactSelect from 'react-select/creatable';\n\nimport {LightbulbOutlineIcon} from '@mattermost/compass-icons/components';\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserNotifyProps, UserProfile} from '@mattermost/types/users';\n\nimport ExternalLink from 'components/external_link';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport RestrictedIndicator from 'components/widgets/menu/menu_items/restricted_indicator';\n\nimport Constants, {NotificationLevels, MattermostFeatures, LicenseSkus, UserSettingsNotificationSections} from 'utils/constants';\nimport {notificationSoundKeys, stopTryNotificationRing} from 'utils/notification_sounds';\nimport {a11yFocus} from 'utils/utils';\n\nimport DesktopAndMobileNotificationSettings from './desktop_and_mobile_notification_setting';\nimport DesktopNotificationSoundsSettings from './desktop_notification_sounds_setting';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder/manage_auto_responder';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nimport type {PropsFromRedux} from './index';\n\nconst WHITE_SPACE_REGEX = /\\s+/g;\nconst COMMA_REGEX = /,/g;\n\ntype MultiInputValue = {\n    label: string;\n    value: string;\n}\n\nexport type OwnProps = {\n    user: UserProfile;\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    adminMode?: boolean;\n    userPreferences?: PreferencesType;\n}\n\nexport type Props = PropsFromRedux & OwnProps & WrappedComponentProps;\n\ntype State = {\n    enableEmail: UserNotifyProps['email'];\n    desktopActivity: UserNotifyProps['desktop'];\n    desktopThreads: UserNotifyProps['desktop_threads'];\n    pushThreads: UserNotifyProps['push_threads'];\n    emailThreads: UserNotifyProps['email_threads'];\n    pushActivity: UserNotifyProps['push'];\n    pushStatus: UserNotifyProps['push_status'];\n    desktopSound: UserNotifyProps['desktop_sound'];\n    callsDesktopSound: UserNotifyProps['calls_desktop_sound'];\n    desktopNotificationSound: UserNotifyProps['desktop_notification_sound'];\n    callsNotificationSound: UserNotifyProps['calls_notification_sound'];\n    usernameKey: boolean;\n    isCustomKeysWithNotificationInputChecked: boolean;\n    customKeysWithNotification: MultiInputValue[];\n    customKeysWithNotificationInputValue: string;\n    customKeysWithHighlight: MultiInputValue[];\n    customKeysWithHighlightInputValue: string;\n    firstNameKey: boolean;\n    channelKey: boolean;\n    autoResponderActive: boolean;\n    autoResponderMessage: UserNotifyProps['auto_responder_message'];\n    notifyCommentsLevel: UserNotifyProps['comments'];\n    isSaving: boolean;\n    serverError: string;\n    desktopAndMobileSettingsDifferent: boolean;\n};\n\nfunction getDefaultStateFromProps(props: Props): State {\n    let desktop: UserNotifyProps['desktop'] = NotificationLevels.MENTION;\n    let desktopThreads: UserNotifyProps['desktop_threads'] = NotificationLevels.ALL;\n    let pushThreads: UserNotifyProps['push_threads'] = NotificationLevels.ALL;\n    let emailThreads: UserNotifyProps['email_threads'] = NotificationLevels.ALL;\n    let sound: UserNotifyProps['desktop_sound'] = 'true';\n    let callsSound: UserNotifyProps['calls_desktop_sound'] = 'true';\n    let desktopNotificationSound: UserNotifyProps['desktop_notification_sound'] = notificationSoundKeys[0] as UserNotifyProps['desktop_notification_sound'];\n    let callsNotificationSound: UserNotifyProps['calls_notification_sound'] = 'Calm';\n    let comments: UserNotifyProps['comments'] = 'never';\n    let enableEmail: UserNotifyProps['email'] = 'true';\n    let pushActivity: UserNotifyProps['push'] = NotificationLevels.MENTION;\n    let pushStatus: UserNotifyProps['push_status'] = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage: UserNotifyProps['auto_responder_message'] = props.intl.formatMessage({\n        id: 'user.settings.notifications.autoResponderDefault',\n        defaultMessage: 'Hello, I am out of office and unable to respond to messages.',\n    });\n    let desktopAndMobileSettingsDifferent = true;\n\n    if (props.user.notify_props) {\n        if (props.user.notify_props.desktop) {\n            desktop = props.user.notify_props.desktop;\n        }\n        if (props.user.notify_props.desktop_threads) {\n            desktopThreads = props.user.notify_props.desktop_threads;\n        }\n        if (props.user.notify_props.push_threads) {\n            pushThreads = props.user.notify_props.push_threads;\n        }\n        if (props.user.notify_props.email_threads) {\n            emailThreads = props.user.notify_props.email_threads;\n        }\n        if (props.user.notify_props.desktop_sound) {\n            sound = props.user.notify_props.desktop_sound;\n        }\n        if (props.user.notify_props.calls_desktop_sound) {\n            callsSound = props.user.notify_props.calls_desktop_sound;\n        }\n        if (props.user.notify_props.desktop_notification_sound) {\n            desktopNotificationSound = props.user.notify_props.desktop_notification_sound;\n        }\n        if (props.user.notify_props.calls_notification_sound) {\n            callsNotificationSound = props.user.notify_props.calls_notification_sound;\n        }\n        if (props.user.notify_props.comments) {\n            comments = props.user.notify_props.comments;\n        }\n        if (props.user.notify_props.email) {\n            enableEmail = props.user.notify_props.email;\n        }\n        if (props.user.notify_props.push) {\n            pushActivity = props.user.notify_props.push;\n        }\n        if (props.user.notify_props.push_status) {\n            pushStatus = props.user.notify_props.push_status;\n        }\n\n        if (props.user.notify_props.auto_responder_active) {\n            autoResponderActive = props.user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (props.user.notify_props.auto_responder_message) {\n            autoResponderMessage = props.user.notify_props.auto_responder_message;\n        }\n\n        if (props.user.notify_props.desktop && props.user.notify_props.push) {\n            desktopAndMobileSettingsDifferent = areDesktopAndMobileSettingsDifferent(props.user.notify_props.desktop, props.user.notify_props.push, props.user.notify_props?.desktop_threads, props.user.notify_props?.push_threads, props.isCollapsedThreadsEnabled);\n        }\n    }\n\n    let usernameKey = false;\n    let firstNameKey = false;\n    let channelKey = false;\n    let isCustomKeysWithNotificationInputChecked = false;\n    const customKeysWithNotification: MultiInputValue[] = [];\n    const customKeysWithHighlight: MultiInputValue[] = [];\n\n    if (props.user.notify_props) {\n        if (props.user.notify_props?.mention_keys?.length > 0) {\n            const mentionKeys = props.user.notify_props.mention_keys.split(',').filter((key) => key.length > 0);\n            mentionKeys.forEach((mentionKey) => {\n                // Remove username(s) from list of keys\n                if (mentionKey !== props.user.username && mentionKey !== `@${props.user.username}`) {\n                    customKeysWithNotification.push({\n                        label: mentionKey,\n                        value: mentionKey,\n                    });\n                }\n            });\n\n            // Check if username is in list of keys, if so, set the checkbox to true\n            usernameKey = mentionKeys.includes(props.user.username);\n\n            // Check if there are any keys in the list, if so, set the checkbox of custom keys to true\n            isCustomKeysWithNotificationInputChecked = customKeysWithNotification.length > 0;\n        }\n\n        if (props.user.notify_props?.highlight_keys?.length > 0) {\n            const highlightKeys = props.user.notify_props.highlight_keys.split(',').filter((key) => key.length > 0);\n            highlightKeys.forEach((highlightKey) => {\n                customKeysWithHighlight.push({\n                    label: highlightKey,\n                    value: highlightKey,\n                });\n            });\n        }\n\n        firstNameKey = props.user.notify_props?.first_name === 'true';\n        channelKey = props.user.notify_props?.channel === 'true';\n    }\n\n    return {\n        desktopActivity: desktop,\n        desktopThreads,\n        pushThreads,\n        emailThreads,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        callsDesktopSound: callsSound,\n        desktopNotificationSound,\n        callsNotificationSound,\n        usernameKey,\n        customKeysWithNotification,\n        isCustomKeysWithNotificationInputChecked,\n        customKeysWithNotificationInputValue: '',\n        customKeysWithHighlight,\n        customKeysWithHighlightInputValue: '',\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n        serverError: '',\n        desktopAndMobileSettingsDifferent,\n    };\n}\n\nclass NotificationsTab extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        activeSection: '',\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = getDefaultStateFromProps(props);\n    }\n\n    handleSubmit = async () => {\n        const data: UserNotifyProps = {...this.props.user.notify_props};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.calls_desktop_sound = this.state.callsDesktopSound;\n        data.desktop_notification_sound = this.state.desktopNotificationSound;\n        data.calls_notification_sound = this.state.callsNotificationSound;\n        data.desktop = this.state.desktopActivity;\n        data.desktop_threads = this.state.desktopThreads;\n        data.email_threads = this.state.emailThreads;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive ? 'true' : 'false';\n        data.auto_responder_message = this.state.autoResponderMessage;\n        data.first_name = this.state.firstNameKey ? 'true' : 'false';\n        data.channel = this.state.channelKey ? 'true' : 'false';\n\n        if (this.state.desktopAndMobileSettingsDifferent) {\n            data.push = this.state.pushActivity;\n            data.push_threads = this.state.pushThreads;\n        } else {\n            data.push = this.state.desktopActivity;\n            data.push_threads = this.state.desktopThreads;\n        }\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = this.props.intl.formatMessage({\n                id: 'user.settings.notifications.autoResponderDefault',\n                defaultMessage: 'Hello, I am out of office and unable to respond to messages.',\n            });\n        }\n\n        const mentionKeys: string[] = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n        if (this.state.isCustomKeysWithNotificationInputChecked && this.state.customKeysWithNotification.length > 0) {\n            this.state.customKeysWithNotification.forEach((key) => {\n                mentionKeys.push(key.value);\n            });\n        }\n        data.mention_keys = mentionKeys.join(',');\n\n        const highlightKeys: string[] = [];\n        if (this.state.customKeysWithHighlight.length > 0) {\n            this.state.customKeysWithHighlight.forEach((key) => {\n                highlightKeys.push(key.value);\n            });\n        }\n        data.highlight_keys = highlightKeys.join(',');\n\n        this.setState({isSaving: true});\n        stopTryNotificationRing();\n\n        let updatedUser: UserProfile | undefined;\n        let error;\n\n        if (this.props.adminMode) {\n            const payloadUser = {...this.props.user, notify_props: data};\n            const response = await this.props.patchUser(payloadUser);\n            updatedUser = response.data;\n            error = response.error;\n        } else {\n            const response = await this.props.updateMe({notify_props: data});\n            updatedUser = response.data;\n            error = response.error;\n        }\n\n        if (updatedUser) {\n            this.handleUpdateSection('');\n            this.setState(getDefaultStateFromProps(this.props));\n        } else if (error) {\n            this.setState({serverError: error.message, isSaving: false});\n        } else {\n            this.setState({serverError: '', isSaving: false});\n        }\n    };\n\n    handleCancel = (): void => {\n        this.setState(getDefaultStateFromProps(this.props));\n        stopTryNotificationRing();\n    };\n\n    handleUpdateSection = (section: string): void => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key: string, value: string | boolean): void => {\n        const data: {[key: string]: string | boolean } = {};\n        data[key] = value;\n        this.setState((prevState) => ({...prevState, ...data}));\n    };\n\n    handleNotifyCommentsRadio = (notifyCommentsLevel: UserNotifyProps['comments'], e?: React.ChangeEvent): void => {\n        this.setState({notifyCommentsLevel});\n        a11yFocus(e?.currentTarget as HTMLElement);\n    };\n\n    handleEmailRadio = (enableEmail: UserNotifyProps['email']): void => {\n        this.setState({enableEmail});\n    };\n\n    handleChangeForUsernameKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({usernameKey: checked});\n    };\n\n    handleChangeForFirstNameKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({firstNameKey: checked});\n    };\n\n    handleChangeForChannelKeyCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({channelKey: checked});\n    };\n\n    handleChangeForCustomKeysWithNotificationCheckbox = (event: ChangeEvent<HTMLInputElement>) => {\n        const {target: {checked}} = event;\n        this.setState({isCustomKeysWithNotificationInputChecked: checked});\n    };\n\n    handleChangeForCustomKeysWithNotificationInput = (values: ValueType<{ value: string }>) => {\n        if (values && Array.isArray(values) && values.length > 0) {\n            // Check the custom keys input checkbox when atleast a single key is entered\n            if (this.state.isCustomKeysWithNotificationInputChecked === false) {\n                this.setState({\n                    isCustomKeysWithNotificationInputChecked: true,\n                });\n            }\n\n            const customKeysWithNotification = values.\n                map((value: MultiInputValue) => {\n                    // Remove all spaces from the value\n                    const formattedValue = value.value.trim().replace(WHITE_SPACE_REGEX, '');\n                    return {value: formattedValue, label: formattedValue};\n                }).\n                filter((value) => value.value.length > 0);\n            this.setState({customKeysWithNotification});\n        } else {\n            this.setState({\n                isCustomKeysWithNotificationInputChecked: false,\n                customKeysWithNotification: [],\n            });\n        }\n    };\n\n    updateCustomKeysWithNotificationWithInputValue = (newValue: string) => {\n        const customKeysWithNotification = [\n            ...this.state.customKeysWithNotification,\n            {\n                value: newValue,\n                label: newValue,\n            },\n        ];\n\n        this.setState({\n            customKeysWithNotification,\n            customKeysWithNotificationInputValue: '', // Clear the input field\n        });\n\n        if (!this.state.isCustomKeysWithNotificationInputChecked) {\n            this.setState({isCustomKeysWithNotificationInputChecked: true});\n        }\n    };\n\n    handleOnKeydownForCustomKeysWithNotificationInput = (event: React.KeyboardEvent) => {\n        if (event.key === Constants.KeyCodes.COMMA[0] || event.key === Constants.KeyCodes.TAB[0]) {\n            const unsavedCustomKeyWithNotification = this.state.customKeysWithNotificationInputValue?.trim()?.replace(WHITE_SPACE_REGEX, '')?.replace(COMMA_REGEX, '') ?? '';\n            if (unsavedCustomKeyWithNotification.length > 0) {\n                this.updateCustomKeysWithNotificationWithInputValue(unsavedCustomKeyWithNotification);\n            }\n        }\n    };\n\n    handleChangeForCustomKeysWithNotificationInputValue = (value: string) => {\n        // Check if input contains comma, if so, add the value to the list of custom keys\n        if (!value.includes(Constants.KeyCodes.COMMA[0])) {\n            const formattedValue = value.trim().replace(WHITE_SPACE_REGEX, '');\n            this.setState({customKeysWithNotificationInputValue: formattedValue});\n        }\n    };\n\n    handleBlurForCustomKeysWithNotificationInput = () => {\n        const unsavedCustomKeyWithNotification = this.state.customKeysWithNotificationInputValue?.trim()?.replace(WHITE_SPACE_REGEX, '')?.replace(COMMA_REGEX, '') ?? '';\n        if (unsavedCustomKeyWithNotification.length > 0) {\n            this.updateCustomKeysWithNotificationWithInputValue(unsavedCustomKeyWithNotification);\n        }\n    };\n\n    handleChangeForCustomKeysWithHightlightInput = (values: ValueType<{ value: string }>) => {\n        if (values && Array.isArray(values) && values.length > 0) {\n            const customKeysWithHighlight = values.\n                map((value: MultiInputValue) => {\n                    const formattedValue = value.value.trim();\n                    return {value: formattedValue, label: formattedValue};\n                }).\n                filter((value) => value.value.length > 0);\n            this.setState({customKeysWithHighlight});\n        } else {\n            this.setState({\n                customKeysWithHighlight: [],\n            });\n        }\n    };\n\n    handleChangeForCustomKeysWithHighlightInputValue = (value: string) => {\n        if (!value.includes(Constants.KeyCodes.COMMA[0])) {\n            this.setState({customKeysWithHighlightInputValue: value});\n        }\n    };\n\n    updateCustomKeysWithHighlightWithInputValue = (newValue: State['customKeysWithHighlightInputValue']) => {\n        const unsavedCustomKeyWithHighlight = newValue?.trim()?.replace(COMMA_REGEX, '') ?? '';\n\n        if (unsavedCustomKeyWithHighlight.length > 0) {\n            const customKeysWithHighlight = [\n                ...this.state.customKeysWithHighlight,\n                {\n                    value: unsavedCustomKeyWithHighlight,\n                    label: unsavedCustomKeyWithHighlight,\n                },\n            ];\n\n            this.setState({\n                customKeysWithHighlight,\n                customKeysWithHighlightInputValue: '',\n            });\n        }\n    };\n\n    handleBlurForCustomKeysWithHighlightInput = () => {\n        this.updateCustomKeysWithHighlightWithInputValue(this.state.customKeysWithHighlightInputValue);\n    };\n\n    handleOnKeydownForCustomKeysWithHighlightInput = (event: React.KeyboardEvent) => {\n        if (event.key === Constants.KeyCodes.COMMA[0] || event.key === Constants.KeyCodes.TAB[0]) {\n            this.updateCustomKeysWithHighlightWithInputValue(this.state.customKeysWithHighlightInputValue);\n        }\n    };\n\n    handleCloseSettingsModal = () => {\n        this.props.closeModal();\n    };\n\n    createKeywordsWithNotificationSection = () => {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n        const isSectionExpanded = this.props.activeSection === UserSettingsNotificationSections.KEYWORDS_MENTIONS;\n\n        let expandedSection = null;\n        if (isSectionExpanded) {\n            const inputs = [];\n\n            if (user.first_name) {\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={this.handleChangeForFirstNameKeyCheckbox}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case-sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>,\n                );\n            }\n\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={this.handleChangeForUsernameKeyCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non case-sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={this.handleChangeForChannelKeyCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>,\n            );\n\n            inputs.push(\n                <div\n                    key='userNotificationCustomOption'\n                    className='customKeywordsWithNotificationSubsection'\n                >\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                type='checkbox'\n                                checked={this.state.isCustomKeysWithNotificationInputChecked}\n                                onChange={this.handleChangeForCustomKeysWithNotificationCheckbox}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveCustomWords'\n                                defaultMessage='Other non case-sensitive words, press Tab or use commas to separate keywords:'\n                            />\n                        </label>\n                    </div>\n                    <CreatableReactSelect\n                        inputId='notificationTriggerCustomText'\n                        autoFocus={true}\n                        isClearable={false}\n                        isMulti={true}\n                        styles={customKeywordsSelectorStyles}\n                        placeholder=''\n                        components={{\n                            DropdownIndicator: () => null,\n                            Menu: () => null,\n                            MenuList: () => null,\n                        }}\n                        aria-labelledby='notificationTriggerCustom'\n                        onChange={this.handleChangeForCustomKeysWithNotificationInput}\n                        value={this.state.customKeysWithNotification}\n                        inputValue={this.state.customKeysWithNotificationInputValue}\n                        onInputChange={this.handleChangeForCustomKeysWithNotificationInputValue}\n                        onBlur={this.handleBlurForCustomKeysWithNotificationInput}\n                        onKeyDown={this.handleOnKeydownForCustomKeysWithNotificationInput}\n                    />\n                </div>,\n            );\n\n            const extraInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.keywordsWithNotification.extraInfo'\n                    defaultMessage='Notifications are triggered when someone sends a message that includes your username (\"@{username}\") or any of the options selected above.'\n                    values={{\n                        username: user.username,\n                    }}\n                />\n            );\n\n            expandedSection = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithNotification.title', defaultMessage: 'Keywords that trigger notifications'})}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const selectedMentionKeys = ['@' + user.username];\n        if (this.state.firstNameKey) {\n            selectedMentionKeys.push(user.first_name);\n        }\n        if (this.state.usernameKey) {\n            selectedMentionKeys.push(user.username);\n        }\n        if (this.state.channelKey) {\n            selectedMentionKeys.push('@channel');\n            selectedMentionKeys.push('@all');\n            selectedMentionKeys.push('@here');\n        }\n        if (this.state.customKeysWithNotification.length > 0) {\n            const customKeysWithNotificationStringArray = this.state.customKeysWithNotification.map((key) => key.value);\n            selectedMentionKeys.push(...customKeysWithNotificationStringArray);\n        }\n        const collapsedDescription = selectedMentionKeys.filter((key) => key.trim().length !== 0).map((key) => `\"${key}\"`).join(', ');\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithNotification.title', defaultMessage: 'Keywords that trigger notifications'})}\n                section={UserSettingsNotificationSections.KEYWORDS_MENTIONS}\n                active={isSectionExpanded}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                describe={collapsedDescription}\n                updateSection={this.handleUpdateSection}\n                max={expandedSection}\n            />);\n    };\n\n    createKeywordsWithHighlightSection = () => {\n        const isSectionExpanded = this.props.activeSection === UserSettingsNotificationSections.KEYWORDS_HIGHLIGHT;\n\n        let expandedSection = null;\n        if (isSectionExpanded) {\n            const inputs = [(\n                <div\n                    key='userNotificationHighlightOption'\n                    className='customKeywordsWithNotificationSubsection'\n                >\n                    <label htmlFor='mentionKeysWithHighlightInput'>\n                        <FormattedMessage\n                            id='user.settings.notifications.keywordsWithHighlight.inputTitle'\n                            defaultMessage='Enter non case-sensitive keywords, press Tab or use commas to separate them:'\n                        />\n                    </label>\n                    <CreatableReactSelect\n                        inputId='mentionKeysWithHighlightInput'\n                        autoFocus={true}\n                        isClearable={false}\n                        isMulti={true}\n                        styles={customKeywordsSelectorStyles}\n                        placeholder=''\n                        components={{\n                            DropdownIndicator: () => null,\n                            Menu: () => null,\n                            MenuList: () => null,\n                        }}\n                        aria-labelledby='mentionKeysWithHighlightInput'\n                        onChange={this.handleChangeForCustomKeysWithHightlightInput}\n                        value={this.state.customKeysWithHighlight}\n                        inputValue={this.state.customKeysWithHighlightInputValue}\n                        onInputChange={this.handleChangeForCustomKeysWithHighlightInputValue}\n                        onBlur={this.handleBlurForCustomKeysWithHighlightInput}\n                        onKeyDown={this.handleOnKeydownForCustomKeysWithHighlightInput}\n                    />\n                </div>\n            )];\n\n            const extraInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.keywordsWithHighlight.extraInfo'\n                    defaultMessage='These keywords will be shown to you with a highlight when anyone sends a message that includes them.'\n                />\n            );\n\n            expandedSection = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.title', defaultMessage: 'Keywords that get highlighted (without notifications)'})}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={this.state.serverError}\n                    extraInfo={extraInfo}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let collapsedDescription = this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.none', defaultMessage: 'None'});\n        if (!this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady && this.state.customKeysWithHighlight.length > 0) {\n            const customKeysWithHighlightStringArray = this.state.customKeysWithHighlight.map((key) => key.value);\n            collapsedDescription = customKeysWithHighlightStringArray.map((key) => `\"${key}\"`).join(', ');\n        }\n\n        const collapsedEditButtonWhenDisabled = (\n            <RestrictedIndicator\n                blocked={this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady}\n                feature={MattermostFeatures.HIGHLIGHT_WITHOUT_NOTIFICATION}\n                minimumPlanRequiredForFeature={LicenseSkus.Professional}\n                tooltipTitle={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.disabledTooltipTitle',\n                    defaultMessage: 'Professional feature',\n                })}\n                tooltipMessageBlocked={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.disabledTooltipMessage',\n                    defaultMessage:\n                    'This feature is available on the Professional plan',\n                })}\n                titleAdminPreTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleAdminPreTrial',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageAdminPreTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageAdminPreTrial',\n                    defaultMessage: 'Get the ability to passively highlight keywords that you care about. Upgrade to Professional plan to unlock this feature.',\n                })}\n                titleAdminPostTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleAdminPostTrial',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageAdminPostTrial={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageAdminPostTrial',\n                    defaultMessage: 'Get the ability to passively highlight keywords that you care about. Upgrade to Professional plan to unlock this feature.',\n                },\n                )}\n                titleEndUser={this.props.intl.formatMessage({\n                    id: 'user.settings.notifications.keywordsWithHighlight.userModal.titleEndUser',\n                    defaultMessage: 'Highlight keywords without notifications with Mattermost Professional',\n                })}\n                messageEndUser={this.props.intl.formatMessage(\n                    {\n                        id: 'user.settings.notifications.keywordsWithHighlight.userModal.messageEndUser',\n                        defaultMessage: 'Get the ability to passively highlight keywords that you care about.{br}{br}Request your admin to upgrade to Mattermost Professional to access this feature.',\n                    },\n                    {\n                        br: <br/>,\n                    },\n                )}\n                ctaExtraContent={\n                    <FormattedMessage\n                        id='user.settings.notifications.keywordsWithHighlight.professional'\n                        defaultMessage='Professional'\n                    />\n                }\n                clickCallback={this.handleCloseSettingsModal}\n            />\n        );\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.keywordsWithHighlight.title', defaultMessage: 'Keywords that get highlighted (without notifications)'})}\n                section={UserSettingsNotificationSections.KEYWORDS_HIGHLIGHT}\n                active={isSectionExpanded}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                describe={collapsedDescription}\n                updateSection={this.handleUpdateSection}\n                max={expandedSection}\n                isDisabled={this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady}\n                collapsedEditButtonWhenDisabled={collapsedEditButtonWhenDisabled}\n            />);\n    };\n\n    createCommentsSection = () => {\n        const serverError = this.state.serverError;\n\n        let max = null;\n        if (this.props.activeSection === UserSettingsNotificationSections.REPLY_NOTIFCATIONS) {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage\n                            id='user.settings.notifications.comments'\n                            defaultMessage='Reply notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({id: 'user.settings.notifications.comments', defaultMessage: 'Reply notifications'})}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    serverError={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe: JSX.Element;\n        if (this.state.notifyCommentsLevel === 'never') {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsNever'\n                    defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                />\n            );\n        } else if (this.state.notifyCommentsLevel === 'root') {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsRoot'\n                    defaultMessage='Trigger notifications on messages in threads that I start'\n                />\n            );\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.commentsAny'\n                    defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                title={this.props.intl.formatMessage({id: 'user.settings.notifications.comments', defaultMessage: 'Reply notifications'})}\n                active={this.props.activeSection === UserSettingsNotificationSections.REPLY_NOTIFCATIONS}\n                describe={describe}\n                section={UserSettingsNotificationSections.REPLY_NOTIFCATIONS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n                areAllSectionsInactive={this.props.activeSection === ''}\n            />\n        );\n    };\n\n    createAutoResponderSection = () => {\n        const describe = this.state.autoResponderActive ? (\n            <FormattedMessage\n                id='user.settings.notifications.autoResponderEnabled'\n                defaultMessage='Enabled'\n            />\n        ) : (\n            <FormattedMessage\n                id='user.settings.notifications.autoResponderDisabled'\n                defaultMessage='Disabled'\n            />\n        );\n\n        return (\n            <SettingItem\n                active={this.props.activeSection === UserSettingsNotificationSections.AUTO_RESPONDER}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic direct message replies'\n                    />\n                }\n                describe={describe}\n                section={UserSettingsNotificationSections.AUTO_RESPONDER}\n                updateSection={this.handleUpdateSection}\n                max={(\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage || ''}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                )}\n            />\n        );\n    };\n\n    render() {\n        const keywordsWithNotificationSection = this.createKeywordsWithNotificationSection();\n        const keywordsWithHighlightSection = this.createKeywordsWithHighlightSection();\n        const commentsSection = this.createCommentsSection();\n        const autoResponderSection = this.createAutoResponderSection();\n\n        const areAllSectionsInactive = this.props.activeSection === '';\n\n        return (\n            <div id='notificationSettings'>\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification settings'\n                        />\n                    }\n                />\n                <div\n                    className='user-settings'\n                >\n                    <SettingDesktopHeader\n                        id='notificationSettingsTitle'\n                        text={\n                            <FormattedMessage\n                                id='user.settings.notifications.header'\n                                defaultMessage='Notifications'\n                            />\n                        }\n                        info={\n                            <FormattedMessage\n                                id='user.settings.notifications.learnMore'\n                                defaultMessage='<a>Learn more about notifications</a>'\n                                values={{\n                                    a: (chunks: string) => ((\n                                        <ExternalLink\n                                            location='user_settings_notifications'\n                                            href='https://mattermost.com/pl/about-notifications'\n                                            className='btn btn-link'\n                                        >\n                                            <LightbulbOutlineIcon className='circular-border'/>\n                                            <span>{chunks}</span>\n                                        </ExternalLink>\n                                    )),\n                                }}\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    <DesktopAndMobileNotificationSettings\n                        active={this.props.activeSection === UserSettingsNotificationSections.DESKTOP_AND_MOBILE}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        desktopActivity={this.state.desktopActivity}\n                        pushActivity={this.state.pushActivity}\n                        sendPushNotifications={this.props.sendPushNotifications}\n                        pushStatus={this.state.pushStatus}\n                        desktopThreads={this.state.desktopThreads}\n                        pushThreads={this.state.pushThreads}\n                        desktopAndMobileSettingsDifferent={this.state.desktopAndMobileSettingsDifferent}\n                    />\n                    <div className='divider-light'/>\n                    <DesktopNotificationSoundsSettings\n                        active={this.props.activeSection === UserSettingsNotificationSections.DESKTOP_NOTIFICATION_SOUND}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        desktopSound={this.state.desktopSound}\n                        desktopNotificationSound={this.state.desktopNotificationSound}\n                        isCallsRingingEnabled={this.props.isCallsRingingEnabled}\n                        callsDesktopSound={this.state.callsDesktopSound}\n                        callsNotificationSound={this.state.callsNotificationSound}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        active={this.props.activeSection === UserSettingsNotificationSections.EMAIL}\n                        updateSection={this.handleUpdateSection}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        saving={this.state.isSaving}\n                        error={this.state.serverError}\n                        setParentState={this.setStateValue}\n                        areAllSectionsInactive={areAllSectionsInactive}\n                        isCollapsedThreadsEnabled={this.props.isCollapsedThreadsEnabled}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onChange={this.handleEmailRadio}\n                        threads={this.state.emailThreads || ''}\n                    />\n                    <div className='divider-light'/>\n                    {keywordsWithNotificationSection}\n                    {(!this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady) && (\n                        <>\n                            <div className='divider-light'/>\n                            {keywordsWithHighlightSection}\n                        </>\n                    )}\n                    <div className='divider-light'/>\n                    {!this.props.isCollapsedThreadsEnabled && (\n                        <>\n                            <div className='divider-light'/>\n                            {commentsSection}\n                        </>\n                    )}\n                    {this.props.enableAutoResponder && (\n                        <>\n                            <div className='divider-light'/>\n                            {autoResponderSection}\n                        </>\n                    )}\n\n                    {/*  We placed the disabled items in the last */}\n                    {(this.props.isEnterpriseOrCloudOrSKUStarterFree && this.props.isEnterpriseReady) && (\n                        <>\n                            <div className='divider-light'/>\n                            {keywordsWithHighlightSection}\n                        </>\n                    )}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nconst customKeywordsSelectorStyles: ReactSelectStyles = {\n    container: ((baseStyle) => ({\n        ...baseStyle,\n        marginBlockStart: '10px',\n    })),\n    control: ((baseStyles) => ({\n        ...baseStyles,\n        backgroundColor: 'var(--center-channel-bg)',\n        border: '1px solid rgba(var(--center-channel-color-rgb), 0.16);',\n        ':hover': {\n            borderColor: 'rgba(var(--center-channel-color-rgb), 0.48);',\n        },\n    })),\n    multiValue: ((baseStyles) => ({\n        ...baseStyles,\n        background: 'rgba(var(--center-channel-color-rgb), 0.08)',\n    })),\n    multiValueLabel: ((baseStyles) => ({\n        ...baseStyles,\n        color: 'var(--center-channel-color);',\n    })),\n    input: ((baseStyles) => ({\n        ...baseStyles,\n        color: 'var(--center-channel-color)',\n    })),\n    indicatorSeparator: ((indicatorSeperatorStyles) => ({\n        ...indicatorSeperatorStyles,\n        display: 'none',\n    })),\n    multiValueRemove: ((multiValueRemoveStyles) => ({\n        ...multiValueRemoveStyles,\n        cursor: 'pointer',\n        color: 'rgba(var(--center-channel-color-rgb),0.32);',\n        ':hover': {\n            backgroundColor: 'rgba(var(--center-channel-color-rgb), 0.16)',\n            color: 'rgba(var(--center-channel-color-rgb), 0.56);',\n        },\n    })),\n};\n\nconst validNotificationLevels = Object.values(NotificationLevels);\n\nexport function areDesktopAndMobileSettingsDifferent(\n    desktopActivity: UserNotifyProps['desktop'],\n    pushActivity: UserNotifyProps['push'],\n    desktopThreads?: UserNotifyProps['desktop_threads'],\n    pushThreads?: UserNotifyProps['push_threads'],\n    isCollapsedThreadsEnabled?: boolean,\n): boolean {\n    if (!desktopActivity || !pushActivity || !desktopThreads || !pushThreads) {\n        return true;\n    }\n\n    if (\n        !validNotificationLevels.includes(desktopActivity) ||\n        !validNotificationLevels.includes(pushActivity) ||\n        !validNotificationLevels.includes(desktopThreads) ||\n        !validNotificationLevels.includes(pushThreads)\n    ) {\n        return true;\n    }\n\n    if (desktopActivity === pushActivity) {\n        if (isCollapsedThreadsEnabled) {\n            if (desktopThreads === pushThreads) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    return true;\n}\n\nexport default injectIntl(NotificationsTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect, type ConnectedProps} from 'react-redux';\n\nimport {patchUser, updateMe} from 'mattermost-redux/actions/users';\nimport {getSubscriptionProduct} from 'mattermost-redux/selectors/entities/cloud';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {\n    isCollapsedThreadsEnabled,\n    isCollapsedThreadsEnabledForUser,\n} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {isCallsEnabled, isCallsRingingEnabledOnServer} from 'selectors/calls';\n\nimport {isEnterpriseOrCloudOrSKUStarterFree} from 'utils/license_utils';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './user_settings_notifications';\nimport UserSettingsNotifications from './user_settings_notifications';\n\nconst mapStateToProps = (state: GlobalState, props: OwnProps) => {\n    // server config, related to server configuration, not the user\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    const license = getLicense(state);\n    const subscriptionProduct = getSubscriptionProduct(state);\n\n    const isEnterpriseReady = config.BuildEnterpriseReady === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n        isCollapsedThreadsEnabled: props.adminMode && props.userPreferences ? isCollapsedThreadsEnabledForUser(state, props.userPreferences) : isCollapsedThreadsEnabled(state),\n        isCallsRingingEnabled: isCallsEnabled(state, '0.17.0') && isCallsRingingEnabledOnServer(state),\n        isEnterpriseOrCloudOrSKUStarterFree: isEnterpriseOrCloudOrSKUStarterFree(license, subscriptionProduct, isEnterpriseReady),\n        isEnterpriseReady,\n    };\n};\n\nconst mapDispatchToProps = {\n    updateMe,\n    patchUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport type {ComponentProps} from 'react';\nimport React, {useMemo} from 'react';\n\nimport SectionNotice from 'components/section_notice';\n\nimport type {PluginConfigurationAction} from 'types/plugins/user_settings';\n\nimport './plugin_action.scss';\n\ntype Props = {\n    action?: PluginConfigurationAction;\n};\n\nconst PluginAction = ({\n    action,\n}: Props) => {\n    const props = useMemo<ComponentProps<typeof SectionNotice>>(() => {\n        return action ? {\n            text: action.text,\n            title: action.title,\n            primaryButton: {\n                onClick: action?.onClick,\n                text: action?.buttonText,\n            },\n        } : {\n            text: '',\n            title: '',\n        };\n    }, [action]);\n\n    if (!action) {\n        return null;\n    }\n\n    return (\n        <div className={'pluginActionContainer'}>\n            <SectionNotice {...props}/>\n        </div>\n    );\n};\n\nexport default PluginAction;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport function getPluginPreferenceKey(pluginId: string) {\n    return `pp_${pluginId}`.slice(0, 32);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback} from 'react';\n\nimport Markdown from 'components/markdown';\n\nimport type {PluginConfigurationRadioSettingOption} from 'types/plugins/user_settings';\n\ntype Props = {\n    selectedValue: string;\n    name: string;\n    option: PluginConfigurationRadioSettingOption;\n    onSelected: (v: string) => void;\n}\n\nconst markdownOptions = {mentionHighlight: false};\n\nconst RadioOption = ({\n    selectedValue,\n    name,\n    option,\n    onSelected,\n}: Props) => {\n    const onChange = useCallback(() => onSelected(option.value), [option.value]);\n    return (\n        <div className={'radio'}>\n            <label >\n                <input\n                    type='radio'\n                    name={name}\n                    checked={selectedValue === option.value}\n                    onChange={onChange}\n                />\n                {option.text}\n            </label>\n            <br/>\n            {option.helpText && (\n                <Markdown\n                    message={option.helpText}\n                    options={markdownOptions}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default RadioOption;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useState} from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport Markdown from 'components/markdown';\n\nimport {getPluginPreferenceKey} from 'utils/plugins/preferences';\n\nimport type {PluginConfigurationRadioSetting} from 'types/plugins/user_settings';\nimport type {GlobalState} from 'types/store';\n\nimport RadioOption from './radio_option';\n\ntype Props = {\n    setting: PluginConfigurationRadioSetting;\n    pluginId: string;\n    informChange: (name: string, value: string) => void;\n}\n\nconst RadioInput = ({\n    setting,\n    pluginId,\n    informChange,\n}: Props) => {\n    const preference = useSelector<GlobalState, string>((state: GlobalState) => getPreference(state, getPluginPreferenceKey(pluginId), setting.name, setting.default));\n    const [selectedValue, setSelectedValue] = useState(preference);\n\n    const onSelected = useCallback((value: string) => {\n        setSelectedValue(value);\n        informChange(setting.name, value);\n    }, [setting.name]);\n\n    return (\n        <fieldset key={setting.name}>\n            <legend className='form-legend hidden-label'>\n                {setting.title || setting.name}\n            </legend>\n            {setting.options.map((option) => (\n                <RadioOption\n                    key={option.value}\n                    name={setting.name}\n                    option={option}\n                    selectedValue={selectedValue}\n                    onSelected={onSelected}\n                />\n            ))}\n            {setting.helpText && (\n                <div className='mt-5'>\n                    <Markdown\n                        message={setting.helpText}\n                        options={{mentionHighlight: false}}\n                    />\n                </div>\n            )}\n        </fieldset>\n    );\n};\n\nexport default RadioInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useMemo, useRef} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport PluggableErrorBoundary from 'plugins/pluggable/error_boundary';\nimport {getPluginPreferenceKey} from 'utils/plugins/preferences';\n\nimport type {PluginConfigurationSection} from 'types/plugins/user_settings';\nimport type {GlobalState} from 'types/store';\n\nimport RadioInput from './radio';\n\ntype Props = {\n    pluginId: string;\n    updateSection: (section: string) => void;\n    activeSection: string;\n    section: PluginConfigurationSection;\n}\n\nconst PluginSetting = ({\n    pluginId,\n    section,\n    activeSection,\n    updateSection,\n}: Props) => {\n    const dispatch = useDispatch();\n    const userId = useSelector(getCurrentUserId);\n    const preferenceMin = useSelector<GlobalState, string>((state: GlobalState) => getPreference(state, getPluginPreferenceKey(pluginId), section.settings[0].name, section.settings[0].default));\n    const toUpdate = useRef<{[name: string]: string}>({});\n\n    const minDescribe = useMemo(() => {\n        const setting = section.settings[0];\n        if (setting.type === 'radio') {\n            return setting.options.find((v) => v.value === preferenceMin)?.text;\n        }\n\n        return undefined;\n    }, [section, preferenceMin]);\n\n    const onSettingChanged = useCallback((name: string, value: string) => {\n        toUpdate.current[name] = value;\n    }, []);\n\n    const updateSetting = useCallback(async () => {\n        const preferences = [];\n        for (const key of Object.keys(toUpdate.current)) {\n            preferences.push({\n                user_id: userId,\n                category: getPluginPreferenceKey(pluginId),\n                name: key,\n                value: toUpdate.current[key],\n            });\n        }\n\n        if (preferences.length) {\n            // Save preferences does not offer any await strategy or error handling\n            // so I am leaving this as is for now. We probably should update save\n            // preferences and handle any kind of error or network delay here.\n            dispatch(savePreferences(userId, preferences));\n            section.onSubmit?.(toUpdate.current);\n        }\n\n        updateSection('');\n    }, [pluginId, dispatch, section.onSubmit]);\n\n    useEffect(() => {\n        if (activeSection !== section.title) {\n            toUpdate.current = {};\n        }\n    }, [activeSection, section.title]);\n\n    const inputs = [];\n    for (const setting of section.settings) {\n        if (setting.type === 'radio') {\n            inputs.push(\n                <RadioInput\n                    key={setting.name}\n                    setting={setting}\n                    informChange={onSettingChanged}\n                    pluginId={pluginId}\n                />);\n        } else if (setting.type === 'custom') {\n            const CustomComponent = setting.component;\n            const inputEl = (\n                <PluggableErrorBoundary\n                    key={setting.name}\n                    pluginId={pluginId}\n                >\n                    <CustomComponent informChange={onSettingChanged}/>\n                </PluggableErrorBoundary>\n            );\n            inputs.push(inputEl);\n        }\n    }\n\n    if (!inputs.length) {\n        return null;\n    }\n\n    if (section.title === activeSection) {\n        return (\n            <SettingItemMax\n                title={section.title}\n                inputs={inputs}\n                submit={updateSetting}\n                updateSection={updateSection}\n            />\n        );\n    }\n\n    return (\n        <SettingItemMin\n            section={section.title}\n            title={section.title}\n            updateSection={updateSection}\n            describe={minDescribe}\n            isDisabled={section.disabled}\n        />\n    );\n};\n\nexport default PluginSetting;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nimport PluggableErrorBoundary from 'plugins/pluggable/error_boundary';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nimport PluginAction from './plugin_action';\nimport PluginSetting from './plugin_setting';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\ntype Props = {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    settings: PluginConfiguration;\n}\n\nconst PluginTab = ({\n    activeSection,\n    closeModal,\n    collapseModal,\n    settings,\n    updateSection,\n}: Props) => {\n    const intl = useIntl();\n\n    const headerText = intl.formatMessage(\n        {id: 'user.settings.plugins.title', defaultMessage: '{pluginName} Settings'},\n        {pluginName: settings.uiName},\n    );\n\n    return (\n        <div>\n            <SettingMobileHeader\n                closeModal={closeModal}\n                collapseModal={collapseModal}\n                text={headerText}\n            />\n            <div className='user-settings'>\n                <SettingDesktopHeader text={headerText}/>\n                <PluginAction action={settings.action}/>\n                <div className='divider-dark first'/>\n                {settings.sections.map((v) => {\n                    let sectionEl;\n                    if ('component' in v) {\n                        const CustomComponent = v.component;\n                        sectionEl = (\n                            <PluggableErrorBoundary\n                                pluginId={settings.id}\n                            >\n                                <CustomComponent/>\n                            </PluggableErrorBoundary>\n                        );\n                    } else {\n                        sectionEl = (\n                            <PluginSetting\n                                pluginId={settings.id}\n                                activeSection={activeSection}\n                                section={v}\n                                updateSection={updateSection}\n                            />\n                        );\n                    }\n\n                    return (\n                        <React.Fragment key={v.title}>\n                            {sectionEl}\n                            <div className='divider-light'/>\n                        </React.Fragment>\n                    );\n                },\n                )}\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n};\n\nexport default PluginTab;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useCallback, useEffect, useState} from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Audit} from '@mattermost/types/audits';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\nimport './access_history_modal.scss';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: Audit[];\n    currentUserId: string;\n}\n\nconst AccessHistoryModal = ({\n    actions: {\n        getUserAudits,\n    },\n    currentUserId,\n    onHide,\n    userAudits,\n}: Props) => {\n    const [show, setShow] = useState(true);\n\n    const onCloseClick = useCallback(() => {\n        setShow(false);\n    }, []);\n\n    useEffect(() => {\n        getUserAudits(currentUserId, 0, 200);\n    }, []);\n\n    let content;\n    if (userAudits.length === 0) {\n        content = (<LoadingScreen/>);\n    } else {\n        content = (\n            <AuditTable\n                audits={userAudits}\n                showIp={true}\n                showSession={true}\n            />\n        );\n    }\n\n    return (\n        <Modal\n            dialogClassName='a11y__modal modal--scroll access-history-modal'\n            show={show}\n            onHide={onCloseClick}\n            onExited={onHide}\n            bsSize='large'\n            role='dialog'\n            aria-labelledby='accessHistoryModalLabel'\n        >\n            <Modal.Header closeButton={true}>\n                <Modal.Title\n                    componentClass='h1'\n                    id='accessHistoryModalLabel'\n                >\n                    <FormattedMessage\n                        id='access_history.title'\n                        defaultMessage='Access History'\n                    />\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                {content}\n            </Modal.Body>\n            <Modal.Footer className='modal-footer--invisible'>\n                <button\n                    id='closeModalButton'\n                    type='button'\n                    className='btn btn-tertiary'\n                >\n                    <FormattedMessage\n                        id='general_button.close'\n                        defaultMessage='Close'\n                    />\n                </button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default React.memo(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {useIntl} from 'react-intl';\n\nimport {isMessageDescriptor} from 'utils/i18n';\n\ntype Props = {\n    devicePicture?: string;\n    deviceTitle: MessageDescriptor | string;\n}\n\nexport default function DeviceIcon(props: Props) {\n    const intl = useIntl();\n\n    let title;\n    if (isMessageDescriptor(props.deviceTitle)) {\n        title = intl.formatMessage(props.deviceTitle);\n    } else {\n        title = props.deviceTitle;\n    }\n\n    return (\n        <i\n            className={props.devicePicture}\n            title={title}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport type {Session} from '@mattermost/types/sessions';\n\nimport {getMonthLong} from 'utils/i18n';\n\ntype Props = {\n    locale: string;\n    currentSession: Session;\n    handleMoreInfo: () => void;\n    moreInfo: boolean;\n};\n\nexport default function MoreInfo(props: Props) {\n    const {locale, currentSession, handleMoreInfo, moreInfo} = props;\n\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {MessageDescriptor} from 'react-intl';\nimport {FormattedDate, FormattedMessage, FormattedTime, defineMessages} from 'react-intl';\n\nimport type {Session} from '@mattermost/types/sessions';\n\nimport {General} from 'mattermost-redux/constants';\n\nimport {getMonthLong} from 'utils/i18n';\n\nimport DeviceIcon from './device_icon';\nimport MoreInfo from './more_info';\n\ntype Props = {\n\n    /**\n     * The index of this instance within the list\n     */\n    index: number;\n\n    /**\n     * The current locale of the user\n     */\n    locale: string;\n\n    /**\n     * The session that's to be displayed\n     */\n    currentSession: Session;\n\n    /**\n     * Function to revoke session\n     */\n    submitRevoke: (sessionId: string, event: React.MouseEvent) => void;\n};\n\ntype State = {\n    moreInfo: boolean;\n};\n\ntype MobileSessionInfo = {\n    devicePicture?: string;\n    deviceTitle?: MessageDescriptor;\n    devicePlatform?: JSX.Element;\n};\n\nexport default class ActivityLog extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = (): void => {\n        this.setState({moreInfo: true});\n    };\n\n    submitRevoke = (e: React.MouseEvent): void => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    };\n\n    isMobileSession = (session: Session): boolean => {\n        return Boolean(session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android')));\n    };\n\n    mobileSessionInfo = (session: Session): MobileSessionInfo => {\n        let devicePlatform;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = messages.appleIcon;\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.iphoneNativeClassicApp'\n                    defaultMessage='iPhone Native Classic App'\n                />\n            );\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.iphoneNativeApp'\n                        defaultMessage='iPhone Native App'\n                    />\n                );\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = messages.androidIcon;\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.androidNativeClassicApp'\n                    defaultMessage='Android Native Classic App'\n                />\n            );\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.androidNativeApp'\n                        defaultMessage='Android Native App'\n                    />\n                );\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform,\n        };\n    };\n\n    render(): React.ReactNode {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture: string | undefined = '';\n        let deviceTitle: MessageDescriptor | string = '';\n\n        if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n            deviceTitle = sessionInfo.deviceTitle || deviceTitle;\n        } else {\n            if (currentSession.props.platform === 'Windows') {\n                devicePicture = 'fa fa-windows';\n                deviceTitle = messages.windowsIcon;\n            } else if (currentSession.props.platform === 'Macintosh' ||\n                currentSession.props.platform === 'iPhone') {\n                devicePicture = 'fa fa-apple';\n                deviceTitle = messages.appleIcon;\n            } else if (currentSession.props.platform === 'Linux') {\n                if (currentSession.props.os.indexOf('Android') >= 0) {\n                    devicePlatform = (\n                        <FormattedMessage\n                            id='activity_log_modal.android'\n                            defaultMessage='Android'\n                        />\n                    );\n                    devicePicture = 'fa fa-android';\n                    deviceTitle = messages.androidIcon;\n                } else {\n                    devicePicture = 'fa fa-linux';\n                    deviceTitle = messages.linuxIcon;\n                }\n            } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = messages.linuxIcon;\n            }\n\n            if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.desktop'\n                        defaultMessage='Native Desktop App'\n                    />\n                );\n            }\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <DeviceIcon\n                            devicePicture={devicePicture}\n                            deviceTitle={deviceTitle}\n                        />\n                        {devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst messages = defineMessages({\n    androidIcon: {\n        id: 'device_icons.android',\n        defaultMessage: 'Android Icon',\n    },\n    appleIcon: {\n        id: 'device_icons.apple',\n        defaultMessage: 'Apple Icon',\n    },\n    linuxIcon: {\n        id: 'device_icons.linux',\n        defaultMessage: 'Linux Icon',\n    },\n    windowsIcon: {\n        id: 'device_icons.windows',\n        defaultMessage: 'Windows Icon',\n    },\n});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {Session} from '@mattermost/types/sessions';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log';\n\nexport type Props = {\n\n    /**\n     * The current user id\n     */\n    currentUserId: string;\n\n    /**\n     * Current user's sessions\n     */\n    sessions: Session[];\n\n    /**\n     * Current user's locale\n     */\n    locale: string;\n\n    /**\n     * Function that's called when user closes the modal\n     */\n    onHide: () => void;\n\n    actions: {\n\n        /**\n         * Function to refresh sessions from server\n         */\n        getSessions: (userId: string) => void;\n\n        /**\n         * Function to revoke a particular session\n         */\n        revokeSession: (userId: string, sessionId: string) => Promise<ActionResult>;\n    };\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class ActivityLogModal extends React.PureComponent<Props, State> {\n    static propTypes = {\n\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId: string, e: React.MouseEvent) => {\n        e.preventDefault();\n        const modalContent = (e.target as Element)?.closest('.modal-content');\n        modalContent?.classList.add('animation--highlight');\n        setTimeout(() => {\n            modalContent?.classList.remove('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    };\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    };\n\n    onHide = () => {\n        this.setState({show: false});\n    };\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        const activityList = this.props.sessions.reduce((array: JSX.Element[], currentSession, index) => {\n            if (currentSession.props.type === 'UserAccessToken') {\n                return array;\n            }\n\n            array.push(\n                <ActivityLog\n                    key={currentSession.id}\n                    index={index}\n                    locale={this.props.locale}\n                    currentSession={currentSession}\n                    submitRevoke={this.submitRevoke}\n                />,\n            );\n            return array;\n        }, []);\n\n        const content = <form role='form'>{activityList}</form>;\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in through a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the system administrator. To end the session sooner, use the 'Log Out' button.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-tertiary'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport type {GlobalState} from 'types/store';\n\nimport ActivityLogModal from './activity_log_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {getHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\ntype Props = {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n\n    // Whether or not the current user has MFA enabled\n    mfaActive: boolean;\n\n    // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n    mfaAvailable: boolean;\n\n    // Whether or not this server enforces that all users have MFA\n    mfaEnforced: boolean;\n\n    updateSection: (section: string) => void;\n    actions: {deactivateMfa: () => Promise<{error?: {message: string}}>};\n}\n\ntype State = {\n    serverError: string|null;\n}\n\nexport default class MfaSection extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            serverError: null,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    public setupMfa = (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        getHistory().push('/mfa/setup');\n    };\n\n    public removeMfa = async (e: React.MouseEvent<HTMLElement>) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            getHistory().push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    private renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    private renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    private renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='pt-2'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    private renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    public render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {deactivateMfa} from 'actions/views/mfa';\n\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n    const user: UserProfile = getCurrentUser(state);\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = (user as any).mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {UserAccessToken, UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport ExternalLink from 'components/external_link';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport SaveButton from 'components/save_button';\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport {Constants, DeveloperLinks} from 'utils/constants';\nimport * as Keyboard from 'utils/keyboard';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\ntype Props = {\n    user: UserProfile;\n    active?: boolean;\n    areAllSectionsInactive: boolean;\n    updateSection: (section: string) => void;\n    userAccessTokens: {[tokenId: string]: {description: string; id: string; is_active: boolean}};\n    setRequireConfirm: (isRequiredConfirm: boolean, confirmCopyToken: (confirmAction: () => void) => void) => void;\n    actions: {\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => void;\n        createUserAccessToken: (userId: string, description: string) => Promise<ActionResult<UserAccessToken>>;\n        revokeUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        enableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        disableUserAccessToken: (tokenId: string) => Promise<ActionResult>;\n        clearUserAccessTokens: () => void;\n    };\n}\n\ntype State = {\n    active?: boolean;\n    showConfirmModal: boolean;\n    newToken?: UserAccessToken | null;\n    tokenCreationState?: string;\n    tokenError?: string;\n    serverError?: string|null;\n    saving?: boolean;\n    confirmTitle?: React.ReactNode;\n    confirmMessage?: ((state: State) => JSX.Element)|null;\n    confirmButton?: React.ReactNode;\n    confirmComplete?: (() => void)|null;\n    confirmHideCancel?: boolean;\n}\n\nexport default class UserAccessTokenSection extends React.PureComponent<Props, State> {\n    private minRef: React.RefObject<SettingItemMinComponent>;\n    private newtokendescriptionRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: this.props.active,\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n        this.newtokendescriptionRef = React.createRef();\n        this.minRef = React.createRef();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (!nextProps.active && prevState.active) {\n            return {\n                active: nextProps.active,\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            };\n        }\n        return {active: nextProps.active};\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    };\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    };\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.newtokendescriptionRef ? this.newtokendescriptionRef.current!.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    };\n\n    confirmCopyToken = (confirmAction: () => void) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Copied Your Token?'\n                />\n            ),\n            confirmMessage: (state: State) => (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken!.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    };\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    };\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user!.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    };\n\n    saveTokenKeyPress = (e: React.KeyboardEvent) => {\n        if (Keyboard.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    };\n\n    confirmRevokeToken = (tokenId: string) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    };\n\n    revokeToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    };\n\n    activateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    };\n\n    deactivateToken = async (tokenId: string) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    };\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        const tokenList: JSX.Element[] = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink: JSX.Element;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        id={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        id={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            id={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='mb-3 mt-3'/>\n                </div>,\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>. Create new tokens on your desktop.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href={DeveloperLinks.PERSONAL_ACCESS_TOKENS}\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='<linkTokens>Personal access tokens</linkTokens> function similarly to session tokens and can be used by integrations to <linkAPI>authenticate against the REST API</linkAPI>.'\n                        values={{\n                            linkTokens: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href={DeveloperLinks.PERSONAL_ACCESS_TOKENS}\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                            linkAPI: (msg: React.ReactNode) => (\n                                <ExternalLink\n                                    href='https://api.mattermost.com/#tag/authentication'\n                                    location='user_access_token_section'\n                                >\n                                    {msg}\n                                </ExternalLink>\n                            ),\n                        }}\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='pl-3'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label pr-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref={this.newtokendescriptionRef}\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='pt-3'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error mt-2 mb-2'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-tertiary'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='mr-2'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken!.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken!.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken!.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='pt-2'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>,\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    isFullWidth={true}\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\n\nimport {\n    clearUserAccessTokens,\n    createUserAccessToken,\n    getUserAccessTokensForUser,\n    revokeUserAccessToken,\n    enableUserAccessToken,\n    disableUserAccessToken,\n} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\n/* eslint-disable max-lines */\n\nimport React from 'react';\nimport type {IntlShape} from 'react-intl';\nimport {FormattedDate, FormattedMessage, FormattedTime, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport type {OAuthApp} from '@mattermost/types/integrations';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {PasswordConfig} from 'mattermost-redux/selectors/entities/general';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport ExternalLink from 'components/external_link';\nimport SettingItem from 'components/setting_item';\nimport SettingItemMax from 'components/setting_item_max';\nimport ToggleModalButton from 'components/toggle_modal_button';\n\nimport icon50 from 'images/icon50x50.png';\nimport Constants from 'utils/constants';\nimport {isValidPassword} from 'utils/password';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\ntype Actions = {\n    getMe: () => void;\n    updateUserPassword: (\n        userId: string,\n        currentPassword: string,\n        newPassword: string\n    ) => Promise<ActionResult>;\n    getAuthorizedOAuthApps: () => Promise<ActionResult>;\n    deauthorizeOAuthApp: (clientId: string) => Promise<ActionResult>;\n};\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n    canUseAccessTokens: boolean;\n    enableOAuthServiceProvider: boolean;\n    allowedToSwitchToEmail: boolean;\n    enableSignUpWithGitLab: boolean;\n    enableSignUpWithGoogle: boolean;\n    enableSignUpWithOpenId: boolean;\n    enableLdap: boolean;\n    enableSaml: boolean;\n    enableSignUpWithOffice365: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    passwordConfig: PasswordConfig;\n    militaryTime: boolean;\n    actions: Actions;\n    intl: IntlShape;\n};\n\ntype State = {\n    currentPassword: string;\n    newPassword: string;\n    confirmPassword: string;\n    passwordError: React.ReactNode;\n    serverError: string | null;\n    tokenError: string;\n    savingPassword: boolean;\n    authorizedApps: OAuthApp[];\n};\n\nexport class SecurityTab extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n            authorizedApps: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const res = await this.props.actions.getAuthorizedOAuthApps();\n        if ('data' in res) {\n            const {data} = res;\n            this.setState({authorizedApps: data, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({\n                passwordError: this.props.intl.formatMessage({\n                    id: 'user.settings.security.currentPasswordError',\n                    defaultMessage: 'Please enter your current password.',\n                }),\n                serverError: '',\n            });\n            return;\n        }\n\n        const {valid, error} = isValidPassword(\n            newPassword,\n            this.props.passwordConfig,\n        );\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {\n                passwordError: this.props.intl.formatMessage({\n                    id: 'user.settings.security.passwordMatchError',\n                    defaultMessage:\n                        'The new passwords you entered do not match.',\n                }),\n                serverError: '',\n            });\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const res = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword,\n        );\n        if ('data' in res) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if ('error' in res) {\n            const {error: err} = res;\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    };\n\n    updateCurrentPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({currentPassword: e.target.value});\n    };\n\n    updateNewPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({newPassword: e.target.value});\n    };\n\n    updateConfirmPassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({confirmPassword: e.target.value});\n    };\n\n    deauthorizeApp = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app') as string;\n\n        const res = await this.props.actions.deauthorizeOAuthApp(appId);\n        if ('data' in res) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if ('error' in res) {\n            const {error} = res;\n            this.setState({serverError: error.message});\n        }\n    };\n\n    handleUpdateSection = (section: string) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    };\n\n    createPasswordSection = () => {\n        const inputs = [];\n        let submit;\n\n        const active = this.props.activeSection === SECTION_PASSWORD;\n        let max = null;\n        if (active) {\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.currentPassword',\n                                    defaultMessage: 'Current Password',\n                                })}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.newPassword',\n                                    defaultMessage: 'New Password',\n                                })}\n                            />\n                        </div>\n                    </div>,\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={this.props.intl.formatMessage({\n                                    id: 'user.settings.security.retypePassword',\n                                    defaultMessage: 'Retype New Password',\n                                })}\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GITLAB_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.LDAP_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.SAML_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.GOOGLE_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            } else if (\n                this.props.user.auth_service === Constants.OFFICE365_SERVICE\n            ) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='pb-3'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Entra ID. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>,\n                );\n            }\n\n            max = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Entra ID'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        const active = this.props.activeSection === SECTION_SIGNIN;\n        let max = null;\n        if (active) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let openidOption;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GITLAB_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.GOOGLE_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OFFICE365_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Entra ID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOpenId) {\n                    openidOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.OPENID_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOpenId'\n                                    defaultMessage='Switch to Using OpenID SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_ldap?email=' +\n                                    encodeURIComponent(user.email)\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='pb-3'>\n                            <Link\n                                className='btn btn-primary'\n                                to={\n                                    '/claim/email_to_oauth?email=' +\n                                    encodeURIComponent(user.email) +\n                                    '&old_type=' +\n                                    user.auth_service +\n                                    '&new_type=' +\n                                    Constants.SAML_SERVICE\n                                }\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.allowedToSwitchToEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link =\n                        '/claim/ldap_to_email?email=' +\n                        encodeURIComponent(user.email);\n                } else {\n                    link =\n                        '/claim/oauth_to_email?email=' +\n                        encodeURIComponent(user.email) +\n                        '&old_type=' +\n                        user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='pb-3'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {openidOption}\n                    {ldapOption}\n                    {samlOption}\n                </div>,\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={this.props.intl.formatMessage({\n                        id: 'user.settings.security.method',\n                        defaultMessage: 'Sign-in Method',\n                    })}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OFFICE365_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Entra ID'\n                />\n            );\n        } else if (\n            this.props.user.auth_service === Constants.OPENID_SERVICE\n        ) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.openid'\n                    defaultMessage='OpenID'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={this.props.intl.formatMessage({\n                    id: 'user.settings.security.method',\n                    defaultMessage: 'Sign-in Method',\n                })}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    createOAuthAppsSection = () => {\n        const active = this.props.activeSection === SECTION_APPS;\n        let max = null;\n        if (active) {\n            let apps;\n            if (\n                this.state.authorizedApps &&\n                this.state.authorizedApps.length > 0\n            ) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <ExternalLink\n                            href={app.homepage}\n                            location='user_settings_security'\n                        >\n                            {app.homepage}\n                        </ExternalLink>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='pb-3 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>\n                                    {app.description}\n                                </div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='pb-3 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>,\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            max = (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    isFullWidth={true}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItem\n                active={active}\n                areAllSectionsInactive={this.props.activeSection === ''}\n                title={this.props.intl.formatMessage({\n                    id: 'user.settings.security.oauthApps',\n                    defaultMessage: 'OAuth 2.0 Applications',\n                })}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n                max={max}\n            />\n        );\n    };\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOpenId ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if (\n            (this.props.allowedToSwitchToEmail || user.auth_service === '') &&\n            numMethods > 0 &&\n            this.props.experimentalEnableAuthenticationTransfer\n        ) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    areAllSectionsInactive={this.props.activeSection === ''}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <SettingMobileHeader\n                    closeModal={this.props.closeModal}\n                    collapseModal={this.props.collapseModal}\n                    text={\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    }\n                />\n                <div className='user-settings'>\n                    <SettingDesktopHeader\n                        text={\n                            <FormattedMessage\n                                id='user.settings.security.title'\n                                defaultMessage='Security Settings'\n                            />\n                        }\n                    />\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        areAllSectionsInactive={this.props.activeSection === ''}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        modalId='access_history'\n                        dialogType={AccessHistoryModal}\n                        id='viewAccessHistory'\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={this.props.intl.formatMessage({\n                                id: 'user.settings.security.viewHistory.icon',\n                                defaultMessage: 'Access History Icon',\n                            })}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link mt-2'\n                        modalId='activity_log'\n                        dialogType={ActivityLogModal}\n                        id='viewAndLogOutOfActiveSessions'\n                    >\n                        <i\n                            className='fa fa-clock-o'\n                            title={this.props.intl.formatMessage({\n                                id: 'user.settings.security.logoutActiveSessions.icon',\n                                defaultMessage: 'Active Sessions Icon',\n                            })}\n                        />\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport type {Dispatch} from 'redux';\n\nimport type {GlobalState} from '@mattermost/types/store';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getConfig, getPasswordConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security';\n\ntype Props = {\n    user: UserProfile;\n    activeSection?: string;\n    updateSection: (section: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setRequireConfirm: () => void;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const allowedToSwitchToEmail = config.EnableSignUpWithEmail === 'true' && (config.EnableSignInWithEmail === 'true' || config.EnableSignInWithUsername === 'true');\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        allowedToSwitchToEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOpenId,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(state),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\nimport type {ValueType} from 'react-select';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\ntype Limit = {\n    value: number;\n    label: string;\n};\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n    dmGmLimit: number;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    limit: Limit;\n    isSaving: boolean;\n}\n\nconst limits: Limit[] = [\n    {value: 10, label: '10'},\n    {value: 15, label: '15'},\n    {value: 20, label: '20'},\n    {value: 40, label: '40'},\n];\n\nexport default class LimitVisibleGMsDMs extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            limit: {value: 20, label: '20'},\n            isSaving: false,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    limit: limits.find((l) => l.value === props.dmGmLimit),\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        } else if (!props.active) {\n            return {\n                limit: limits.find((l) => l.value === props.dmGmLimit),\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    handleChange = (selected: ValueType<Limit>) => {\n        if (selected && 'value' in selected) {\n            this.setState({limit: selected});\n        }\n    };\n\n    handleSubmit = async () => {\n        if (!this.props.userId) {\n            return;\n        }\n\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.userId, [{\n            user_id: this.props.userId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.LIMIT_VISIBLE_DMS_GMS,\n            value: this.state.limit.value.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    };\n\n    renderDescription = () => {\n        return (\n            <span>{this.state.limit.label}</span>\n        );\n    };\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.limitVisibleGMsDMsTitle'\n                defaultMessage='Number of direct messages to show'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='limitVisibleGMsDMs'\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <ReactSelect\n                            className='react-select'\n                            classNamePrefix='react-select'\n                            id='limitVisibleGMsDMs'\n                            options={limits}\n                            clearable={false}\n                            onChange={this.handleChange}\n                            value={this.state.limit}\n                            isSearchable={false}\n                            menuPortalTarget={document.body}\n                            styles={reactStyles}\n                        />\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.limitVisibleGMsDMsDesc'\n                                defaultMessage='You can also change these settings in the direct messages sidebar menu.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\nconst reactStyles = {\n    menuPortal: (provided: React.CSSProperties) => ({\n        ...provided,\n        zIndex: 9999,\n    }),\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getVisibleDmGmLimit} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './limit_visible_gms_dms';\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const userPreferences = ownProps.adminMode && ownProps.userPreferences ? ownProps.userPreferences : undefined;\n    return {\n        userId: ownProps.adminMode ? ownProps.userId : getCurrentUserId(state),\n        dmGmLimit: getVisibleDmGmLimit(state, userPreferences),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LimitVisibleGMsDMs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport type {RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType, PreferenceType} from '@mattermost/types/preferences';\n\nimport {Preferences} from 'mattermost-redux/constants';\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport SettingItemMax from 'components/setting_item_max';\nimport SettingItemMin from 'components/setting_item_min';\nimport type SettingItemMinComponent from 'components/setting_item_min';\n\nimport {a11yFocus} from 'utils/utils';\n\nexport type OwnProps = {\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\ntype Props = OwnProps & {\n    active: boolean;\n    areAllSectionsInactive: boolean;\n    savePreferences: (userId: string, preferences: PreferenceType[]) => Promise<ActionResult>;\n    showUnreadsCategory: boolean;\n    updateSection: (section: string) => void;\n}\n\ntype State = {\n    active: boolean;\n    checked: boolean;\n    isSaving: boolean;\n}\n\nexport default class ShowUnreadsCategory extends React.PureComponent<Props, State> {\n    minRef: RefObject<SettingItemMinComponent>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active: false,\n            checked: false,\n            isSaving: false,\n        };\n\n        this.minRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.active !== state.active) {\n            if (props.active && !state.active) {\n                return {\n                    checked: props.showUnreadsCategory,\n                    active: props.active,\n                };\n            }\n\n            return {\n                active: props.active,\n            };\n        }\n\n        return null;\n    }\n\n    focusEditButton(): void {\n        this.minRef.current?.focus();\n    }\n\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            checked: e.target.value === 'true',\n        });\n        a11yFocus(e.target);\n    };\n\n    handleSubmit = async () => {\n        if (!this.props.userId) {\n            // Only for type safety, won't actually happen\n            return;\n        }\n\n        this.setState({isSaving: true});\n\n        await this.props.savePreferences(this.props.userId, [{\n            user_id: this.props.userId,\n            category: Preferences.CATEGORY_SIDEBAR_SETTINGS,\n            name: Preferences.SHOW_UNREAD_SECTION,\n            value: this.state.checked.toString(),\n        }]);\n\n        this.setState({isSaving: false});\n\n        this.props.updateSection('');\n    };\n\n    renderDescription = () => {\n        if (this.props.showUnreadsCategory) {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.active && !this.props.active && this.props.areAllSectionsInactive) {\n            this.focusEditButton();\n        }\n    }\n\n    render() {\n        const title = (\n            <FormattedMessage\n                id='user.settings.sidebar.showUnreadsCategoryTitle'\n                defaultMessage='Group unread channels separately'\n            />\n        );\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section='showUnreadsCategory'\n                    updateSection={this.props.updateSection}\n                    ref={this.minRef}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={\n                    <fieldset>\n                        <legend className='form-legend hidden-label'>\n                            {title}\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOn'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={this.state.checked}\n                                    onChange={() => this.setState({checked: true})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    data-testid='showUnreadsCategoryOff'\n                                    type='radio'\n                                    name='showUnreadsCategory'\n                                    checked={!this.state.checked}\n                                    onChange={() => this.setState({checked: false})}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.sidebar.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='mt-5'>\n                            <FormattedMessage\n                                id='user.settings.sidebar.showUnreadsCategoryDesc'\n                                defaultMessage='When enabled, all unread channels and direct messages will be grouped together in the sidebar.'\n                            />\n                        </div>\n                    </fieldset>\n                }\n                submit={this.handleSubmit}\n                saving={this.state.isSaving}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {\n    shouldShowUnreadsCategory,\n} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport type {GlobalState} from 'types/store';\n\nimport type {OwnProps} from './show_unreads_category';\nimport ShowUnreadsCategory from './show_unreads_category';\n\nfunction mapStateToProps(state: GlobalState, props: OwnProps) {\n    const userPreferences = props.adminMode && props.userPreferences ? props.userPreferences : undefined;\n    return {\n        userId: props.adminMode ? props.userId : getCurrentUserId(state),\n        showUnreadsCategory: shouldShowUnreadsCategory(state, userPreferences),\n    };\n}\n\nconst mapDispatchToProps = {\n    savePreferences,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShowUnreadsCategory);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport type {PreferencesType} from '@mattermost/types/preferences';\n\nimport LimitVisibleGMsDMs from './limit_visible_gms_dms';\nimport ShowUnreadsCategory from './show_unreads_category';\n\nimport SettingDesktopHeader from '../headers/setting_desktop_header';\nimport SettingMobileHeader from '../headers/setting_mobile_header';\n\nexport interface Props {\n    updateSection: (section: string) => void;\n    activeSection: string;\n    closeModal: () => void;\n    collapseModal: () => void;\n    adminMode?: boolean;\n    userId: string;\n    userPreferences?: PreferencesType;\n}\n\nexport default function UserSettingsSidebar(props: Props): JSX.Element {\n    return (\n        <div>\n            <SettingMobileHeader\n                closeModal={props.closeModal}\n                collapseModal={props.collapseModal}\n                text={\n                    <FormattedMessage\n                        id='user.settings.sidebar.title'\n                        defaultMessage='Sidebar Settings'\n                    />\n                }\n            />\n            <div\n                id='sidebarTitle'\n                className='user-settings'\n            >\n                <SettingDesktopHeader\n                    text={\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    }\n                />\n\n                <div className='divider-dark first'/>\n                <ShowUnreadsCategory\n                    active={props.activeSection === 'showUnreadsCategory'}\n                    updateSection={props.updateSection}\n                    areAllSectionsInactive={props.activeSection === ''}\n                    adminMode={props.adminMode}\n                    userId={props.userId}\n                    userPreferences={props.userPreferences}\n                />\n                <div className='divider-dark'/>\n                <LimitVisibleGMsDMs\n                    active={props.activeSection === 'limitVisibleGMsDMs'}\n                    updateSection={props.updateSection}\n                    areAllSectionsInactive={props.activeSection === ''}\n                    adminMode={props.adminMode}\n                    userId={props.userId}\n                    userPreferences={props.userPreferences}\n                />\n                <div className='divider-dark'/>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport UserSettingsSidebar from './user_settings_sidebar';\n\nexport default UserSettingsSidebar;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport PluginTab from './plugin';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport type Props = {\n    user: UserProfile;\n    activeTab?: string;\n    activeSection: string;\n    updateSection: (section?: string) => void;\n    updateTab: (notifications: string) => void;\n    closeModal: () => void;\n    collapseModal: () => void;\n    setEnforceFocus: () => void;\n    setRequireConfirm: () => void;\n    pluginSettings: {[tabName: string]: PluginConfiguration};\n    userPreferences?: PreferencesType;\n    adminMode?: boolean;\n};\n\nexport default function UserSettings(props: Props) {\n    if (props.activeTab === 'profile') {\n        return (\n            <div>\n                <GeneralTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    updateTab={props.updateTab}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'security') {\n        return (\n            <div>\n                <SecurityTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    setRequireConfirm={props.setRequireConfirm}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'notifications') {\n        return (\n            <div>\n                <NotificationsTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'display') {\n        return (\n            <div>\n                <DisplayTab\n                    user={props.user}\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    setEnforceFocus={props.setEnforceFocus}\n                    setRequireConfirm={props.setRequireConfirm}\n                    adminMode={props.adminMode}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'sidebar') {\n        return (\n            <div>\n                <SidebarTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    userId={props.user.id}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab === 'advanced') {\n        return (\n            <div>\n                <AdvancedTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    adminMode={props.adminMode}\n                    user={props.user}\n                    userPreferences={props.userPreferences}\n                />\n            </div>\n        );\n    } else if (props.activeTab && props.pluginSettings[props.activeTab]) {\n        return (\n            <div>\n                <PluginTab\n                    activeSection={props.activeSection}\n                    updateSection={props.updateSection}\n                    closeModal={props.closeModal}\n                    collapseModal={props.collapseModal}\n                    settings={props.pluginSettings[props.activeTab]}\n                />\n            </div>\n        );\n    }\n\n    return null;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {type ReactNode, useEffect, useState} from 'react';\n\nconst DEFAULT_MIN_LOADER_DURATION = 1000;\n\ntype Props = {\n    loading: boolean;\n    children: ReactNode;\n    className?: string;\n    onLoaded: () => void;\n}\n\nconst SmartLoader = ({loading, children, className, onLoaded}: Props) => {\n    const [timeoutFinished, setTimeoutFinished] = useState(false);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setTimeoutFinished(true);\n        }, DEFAULT_MIN_LOADER_DURATION);\n    }, []);\n\n    useEffect(() => {\n        if (!loading && timeoutFinished) {\n            onLoaded();\n        }\n    }, [loading, timeoutFinished, onLoaded]);\n\n    return loading || !timeoutFinished ? (\n        <div className={`SmartLoader ${className}`}>\n            {children}\n        </div>\n    ) : null;\n};\n\nexport default SmartLoader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport type {IntlShape} from 'react-intl';\n\nimport type {PreferencesType} from '@mattermost/types/preferences';\nimport type {UserProfile} from '@mattermost/types/users';\n\nimport type {ActionResult} from 'mattermost-redux/types/actions';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport SettingsSidebar from 'components/settings_sidebar';\nimport UserSettings from 'components/user_settings';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport SmartLoader from 'components/widgets/smart_loader';\n\nimport Constants from 'utils/constants';\nimport {cmdOrCtrlPressed, isKeyPressed} from 'utils/keyboard';\nimport {stopTryNotificationRing} from 'utils/notification_sounds';\nimport {isValidUrl} from 'utils/url';\nimport {getDisplayName} from 'utils/utils';\n\nimport type {PluginConfiguration} from 'types/plugins/user_settings';\n\nexport type OwnProps = {\n    userID?: string;\n    adminMode?: boolean;\n    isContentProductSettings: boolean;\n    userPreferences?: PreferencesType;\n    activeTab?: string;\n}\n\nexport type Props = OwnProps & {\n    onExited: () => void;\n    intl: IntlShape;\n    actions: {\n        sendVerificationEmail: (email: string) => Promise<ActionResult>;\n        getUserPreferences: (userID: string) => Promise<unknown>;\n        getUser: (userID: string) => Promise<unknown>;\n    };\n    pluginSettings: {[pluginId: string]: PluginConfiguration};\n    user?: UserProfile;\n}\n\ntype State = {\n    active_tab?: string;\n    active_section: string;\n    showConfirmModal: boolean;\n    enforceFocus?: boolean;\n    show: boolean;\n    resendStatus: string;\n    loading: boolean;\n}\n\nclass UserSettingsModal extends React.PureComponent<Props, State> {\n    private requireConfirm: boolean;\n    private customConfirmAction: ((handleConfirm: () => void) => void) | null;\n    private modalBodyRef: React.RefObject<Modal>;\n    private afterConfirm: (() => void) | null;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            active_tab: props.activeTab ?? (props.isContentProductSettings ? 'notifications' : 'profile'),\n            active_section: '',\n            showConfirmModal: false,\n            enforceFocus: true,\n            show: true,\n            resendStatus: '',\n            loading: false,\n        };\n\n        this.requireConfirm = false;\n\n        // Used when settings want to override the default confirm modal with their own\n        // If set by a child, it will be called in place of showing the regular confirm\n        // modal. It will be passed a function to call on modal confirm\n        this.customConfirmAction = null;\n        this.afterConfirm = null;\n\n        this.modalBodyRef = React.createRef();\n    }\n\n    handleResend = (email: string) => {\n        this.setState({resendStatus: 'sending'});\n\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    };\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyDown);\n\n        if (this.props.adminMode && this.props.userID) {\n            this.setState({loading: true});\n\n            if (!this.props.userPreferences) {\n                this.props.actions.getUserPreferences(this.props.userID);\n            }\n\n            if (!this.props.user) {\n                this.props.actions.getUser(this.props.userID);\n            }\n        }\n\n        if (!this.props.adminMode) {\n            this.setState({loading: false});\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyDown);\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        if (this.state.active_tab !== prevState.active_tab) {\n            const el = ReactDOM.findDOMNode(this.modalBodyRef.current) as any;\n            el.scrollTop = 0;\n        }\n    }\n\n    setLoadingFinished = () => {\n        this.setState({loading: false});\n    };\n\n    handleKeyDown = (e: KeyboardEvent) => {\n        if (cmdOrCtrlPressed(e) && e.shiftKey && isKeyPressed(e, Constants.KeyCodes.A)) {\n            e.preventDefault();\n            this.handleHide();\n        }\n    };\n\n    // Called when the close button is pressed on the main modal\n    handleHide = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(() => this.handleHide());\n            return;\n        }\n\n        // Cancel any ongoing notification sound, if any (from DesktopNotificationSettings)\n        stopTryNotificationRing();\n\n        this.setState({\n            show: false,\n        });\n    };\n\n    // called after the dialog is fully hidden and faded out\n    handleHidden = () => {\n        this.setState({\n            active_tab: this.props.isContentProductSettings ? 'notifications' : 'profile',\n            active_section: '',\n        });\n        this.props.onExited();\n    };\n\n    // Called to hide the settings pane when on mobile\n    handleCollapse = () => {\n        const el = ReactDOM.findDOMNode(this.modalBodyRef.current) as HTMLDivElement;\n        el.closest('.modal-dialog')!.classList.remove('display--content');\n\n        this.setState({\n            active_tab: '',\n            active_section: '',\n        });\n    };\n\n    handleConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n\n        this.requireConfirm = false;\n        this.customConfirmAction = null;\n\n        if (this.afterConfirm) {\n            this.afterConfirm();\n            this.afterConfirm = null;\n        }\n    };\n\n    handleCancelConfirmation = () => {\n        this.setState({\n            showConfirmModal: false,\n            enforceFocus: true,\n        });\n\n        this.afterConfirm = null;\n    };\n\n    showConfirmModal = (afterConfirm: () => void) => {\n        if (afterConfirm) {\n            this.afterConfirm = afterConfirm;\n        }\n\n        if (this.customConfirmAction) {\n            this.customConfirmAction(this.handleConfirm);\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            enforceFocus: false,\n        });\n    };\n\n    // Called by settings tabs when their close button is pressed\n    closeModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.closeModal);\n        } else {\n            this.handleHide();\n        }\n    };\n\n    // Called by settings tabs when their back button is pressed\n    collapseModal = () => {\n        if (this.requireConfirm) {\n            this.showConfirmModal(this.collapseModal);\n        } else {\n            this.handleCollapse();\n        }\n    };\n\n    updateTab = (tab?: string, skipConfirm?: boolean) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateTab(tab, true));\n        } else {\n            this.setState({\n                active_tab: tab,\n                active_section: '',\n            });\n        }\n    };\n\n    updateSection = (section?: string, skipConfirm?: boolean) => {\n        if (!skipConfirm && this.requireConfirm) {\n            this.showConfirmModal(() => this.updateSection(section, true));\n        } else {\n            this.setState({\n                active_section: section ?? '',\n            });\n        }\n    };\n\n    getUserSettingsTabs = () => {\n        return [\n            {\n                name: 'notifications',\n                uiName: this.props.intl.formatMessage({id: 'user.settings.modal.notifications', defaultMessage: 'Notifications'}),\n                icon: 'icon icon-bell-outline',\n                iconTitle: this.props.intl.formatMessage({id: 'user.settings.notifications.icon', defaultMessage: 'Notification Settings Icon'}),\n            },\n            {\n                name: 'display',\n                uiName: this.props.intl.formatMessage({id: 'user.settings.modal.display', defaultMessage: 'Display'}),\n                icon: 'icon icon-eye-outline',\n                iconTitle: this.props.intl.formatMessage({id: 'user.settings.display.icon', defaultMessage: 'Display Settings Icon'}),\n            },\n            {\n                name: 'sidebar',\n                uiName: this.props.intl.formatMessage({id: 'user.settings.modal.sidebar', defaultMessage: 'Sidebar'}),\n                icon: 'icon icon-dock-left',\n                iconTitle: this.props.intl.formatMessage({id: 'user.settings.sidebar.icon', defaultMessage: 'Sidebar Settings Icon'}),\n            },\n            {\n                name: 'advanced',\n                uiName: this.props.intl.formatMessage({id: 'user.settings.modal.advanced', defaultMessage: 'Advanced'}),\n                icon: 'icon icon-tune',\n                iconTitle: this.props.intl.formatMessage({id: 'user.settings.advance.icon', defaultMessage: 'Advanced Settings Icon'}),\n            },\n        ];\n    };\n\n    getProfileSettingsTab = () => {\n        return [\n            {\n                name: 'profile',\n                uiName: this.props.intl.formatMessage({id: 'user.settings.modal.profile', defaultMessage: 'Profile'}),\n                icon: 'icon icon-settings-outline',\n                iconTitle: this.props.intl.formatMessage({id: 'user.settings.profile.icon', defaultMessage: 'Profile Settings Icon'}),\n            },\n            {\n                name: 'security',\n                uiName: this.props.intl.formatMessage({id: 'user.settings.modal.security', defaultMessage: 'Security'}),\n                icon: 'icon icon-lock-outline',\n                iconTitle: this.props.intl.formatMessage({id: 'user.settings.security.icon', defaultMessage: 'Security Settings Icon'}),\n            },\n        ];\n    };\n\n    getPluginsSettingsTab = () => {\n        return Object.values(this.props.pluginSettings).map((v) => {\n            const className = v.icon ? `icon ${v.icon}` : 'icon icon-power-plug-outline';\n            const useURL = v.icon && (isValidUrl(v.icon) || v.icon.startsWith('/'));\n            return {\n                name: v.id,\n                uiName: v.uiName,\n                icon: useURL ? {url: v.icon!} : className,\n                iconTitle: v.uiName,\n            };\n        });\n    };\n\n    render() {\n        const {formatMessage} = this.props.intl;\n\n        let modalTitle: string;\n\n        if (this.props.adminMode && this.props.user) {\n            modalTitle = formatMessage({\n                id: 'userSettings.adminMode.modal_header',\n                defaultMessage: \"{userDisplayName}'s Settings\",\n            }, {\n                userDisplayName: getDisplayName(this.props.user),\n            });\n        } else {\n            modalTitle = this.props.isContentProductSettings ? formatMessage({\n                id: 'global_header.productSettings',\n                defaultMessage: 'Settings',\n            }) : formatMessage({\n                id: 'user.settings.modal.title',\n                defaultMessage: 'Profile',\n            });\n        }\n\n        return (\n            <Modal\n                id='accountSettingsModal'\n                dialogClassName='a11y__modal settings-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleHidden}\n                enforceFocus={this.state.enforceFocus}\n                role='dialog'\n                aria-label={modalTitle}\n            >\n                <Modal.Header\n                    id='accountSettingsHeader'\n                    closeButton={true}\n                >\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accountSettingsModalLabel'\n                    >\n                        {modalTitle}\n                    </Modal.Title>\n\n                    {\n                        this.props.adminMode &&\n                        <div className='adminModeBadge'>\n                            <FormattedMessage\n                                id='userSettings.adminMode.admin_mode_badge'\n                                defaultMessage='Admin Mode'\n                            />\n                        </div>\n                    }\n                </Modal.Header>\n                <Modal.Body ref={this.modalBodyRef}>\n                    {\n                        this.props.adminMode &&\n                        <SmartLoader\n                            loading={this.props.adminMode && (!this.props.userPreferences || !this.props.user)}\n                            className='loadingIndicator'\n                            onLoaded={this.setLoadingFinished}\n                        >\n                            <LoadingSpinner/>\n                        </SmartLoader>\n                    }\n\n                    {\n                        !this.state.loading && this.props.user &&\n                        <div className='settings-table'>\n                            <div className='settings-links'>\n                                <SettingsSidebar\n                                    tabs={this.props.isContentProductSettings ? this.getUserSettingsTabs() : this.getProfileSettingsTab()}\n                                    pluginTabs={this.props.isContentProductSettings ? this.getPluginsSettingsTab() : []}\n                                    activeTab={this.state.active_tab}\n                                    updateTab={this.updateTab}\n                                />\n                            </div>\n                            <div className='settings-content minimize-settings'>\n                                <UserSettings\n                                    activeTab={this.state.active_tab}\n                                    activeSection={this.state.active_section}\n                                    updateSection={this.updateSection}\n                                    updateTab={this.updateTab}\n                                    closeModal={this.closeModal}\n                                    collapseModal={this.collapseModal}\n                                    setEnforceFocus={(enforceFocus?: boolean) => this.setState({enforceFocus})}\n                                    setRequireConfirm={\n                                        (requireConfirm?: boolean, customConfirmAction?: () => () => void) => {\n                                            this.requireConfirm = requireConfirm!;\n                                            this.customConfirmAction = customConfirmAction!;\n                                        }\n                                    }\n                                    pluginSettings={this.props.pluginSettings}\n                                    user={this.props.user}\n                                    adminMode={this.props.adminMode}\n                                    userPreferences={this.props.userPreferences}\n                                />\n                            </div>\n                        </div>\n                    }\n                </Modal.Body>\n                <ConfirmModal\n                    title={formatMessage({id: 'user.settings.modal.confirmTitle', defaultMessage: 'Discard Changes?'})}\n                    message={formatMessage({\n                        id: 'user.settings.modal.confirmMsg',\n                        defaultMessage: 'You have unsaved changes, are you sure you want to discard them?',\n                    })}\n                    confirmButtonText={formatMessage({\n                        id: 'user.settings.modal.confirmBtns',\n                        defaultMessage: 'Yes, Discard',\n                    })}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.handleConfirm}\n                    onCancel={this.handleCancelConfirmation}\n                />\n            </Modal>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsModal);\n"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","iconByType","info","success","danger","warning","welcome","undefined","SectionNotice","_ref","title","text","primaryButton","secondaryButton","linkButton","type","isDismissable","onDismissClick","intl","useIntl","icon","showDismiss","Boolean","buttonClass","React","className","classNames","Markdown","message","onClick","formatMessage","id","defaultMessage","propTypes","_pt","SettingsSidebar","constructor","props","super","_defineProperty","tab","e","_closest","preventDefault","this","updateTab","name","target","closest","classList","add","index","isKeyPressed","Constants","tabs","a11yFocus","buttonRefs","current","length","map","renderTab","key","concat","isActive","activeTab","iconTitle","src","url","alt","role","ref","handleClick","bind","onKeyUp","handleKeyUp","uiName","toLowerCase","tabIndex","isMobileView","render","_this$props$pluginTab","tabList","pluginTabList","pluginTabs","FormattedMessage","connect","state","getIsMobileView","SettingItemMin","arguments","node","edit","isDisabled","updateSection","section","focus","editButtonComponent","collapsedEditButtonWhenDisabled","getEdit","EditIcon","describe","SettingItem","active","areAllSectionsInactive","max","minRef","useRef","useDidUpdate","_minRef$current","SettingItemMax","shiftEnter","shiftKey","disableEnterSubmit","submit","tagName","parentElement","contains","settingList","handleSubmit","setting","componentDidMount","focusableElements","querySelectorAll","document","addEventListener","onKeyDown","componentWillUnmount","removeEventListener","clientError","serverError","extraInfo","hintClass","infoPosition","SaveButton","saveButtonText","saving","disabled","btnClass","saveButtonClassName","inputs","cancelButtonText","listContent","containerStyle","isFullWidth","submitExtra","handleUpdateSection","JoinLeaveSection","value","currentTarget","setState","joinLeaveState","joinLeave","onUpdateSection","actions","userId","joinLeavePreference","category","Preferences","user_id","savePreferences","focusEditButton","_this$minRef$current","componentDidUpdate","prevProps","AdvancedSections","checked","onChange","handleOnChange","isSaving","renderOnOffLabel","enableJoinLeaveMessage","getConfig","EnableJoinLeaveMessageByDefault","userPreference","adminMode","userPreferences","get","toString","bindActionCreators","PerformanceDebuggingSection","prevActiveRef","useEffect","performanceDebuggingEnabled","settings","PerformanceDebuggingSectionExpanded","PerformanceDebuggingSectionCollapsed","Object","assign","description","settingsEnabled","disableClientPlugins","disableTelemetry","disableTypingMessages","values","count","setDisableClientPlugins","useState","setDisableTelemetry","setDisableTypingMessages","useCallback","preferences","push","mapDispatchToProps","getUserPreferences","getBool","isPerformanceDebuggingEnabled","SettingDesktopHeader","SettingMobileHeader","closeModal","collapseModal","AdvancedSettingsDisplay","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","sync_drafts","syncDrafts","unreadScrollPosition","showDeactivateAccountModal","prevState","_objectSpread","async","user","Array","isArray","forEach","updateUserActive","then","error","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","defineMessages","default","mac","isMac","ctrlSendTitle","ctrlSendDesc","activeSection","updateSetting","unread_scroll_position","renderUnreadScrollPositionLabel","getCtrlSendText","ctrlSendActive","renderCtrlEnterLabel","enabled","option","ctrlEnter","codeBlockCtrlEnter","ctrlSendSection","renderCtrlSendSection","formattingSection","renderFormattingSection","formattingSectionDivider","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","ConfirmModal","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","unreadScrollPositionSection","renderUnreadScrollPositionSection","unreadScrollPositionSectionDivider","syncDraftsSection","syncDraftsSectionDivider","syncedDraftsAreAllowed","renderSyncDraftsSection","getAdvancedSettingsCategory","makeGetCategory","getUserAdvancedSettingsCategory","makeGetUserCategory","config","EnableUserDeactivation","advancedSettingsCategory","getCurrentUser","getUnreadScrollPositionPreference","ImportThemeModal","_this$props$callback","_this$props","isInputValid","inputError","sidebarBg","sidebarHeaderBg","sidebarTextActiveBorder","sidebarTextActiveColor","sidebarTextHoverBg","sidebarText","onlineIndicator","mentionBg","split","theme","setThemeDefaults","sidebarUnreadText","sidebarHeaderTextColor","callback","call","handleOnHide","indexOf","colors","i","charAt","Modal","dialogClassName","onHide","onExited","closeButton","componentClass","handleChange","injectIntl","ColorChooser","label","ColorInput","newColor","_props$onChange","messages","sidebarTeamBarBg","awayIndicator","dndIndicator","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","color","updateTheme","newTheme","mentionBj","copyTheme","setCopyTheme","window","clipboardData","getData","JSON","parse","err","stringify","stopPropagation","_this$textareaRef$cur","_this$textareaRef$cur2","textareaRef","setSelectionRange","_this$sidebarStylesHe","sidebarStylesHeaderRef","toggle","toggleSection","sidebarStylesRef","_this$centerChannelSt","centerChannelStylesHeaderRef","centerChannelStylesRef","_this$linkAndButtonSt","linkAndButtonStylesHeaderRef","linkAndButtonStylesRef","selectTheme","execCommand","showCopySuccess","copySuccess","querySelector","style","display","setTimeout","createRef","image","ontransitionend","overflowY","sidebarElements","centerChannelElements","linkAndButtonElements","element","_element$themes","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","defaultValue","onCodeThemeChange","WithTooltip","placement","width","group","handleColorChange","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","ThemeThumbnail","themeName","themeKey","height","viewBox","fill","xmlns","x","y","rx","cx","cy","r","PremadeThemeChooser","allowedThemes","premadeThemes","hasAllowedThemes","trim","k","_premadeTheme$type","premadeTheme","activeClass","replace","changeOpacity","toTitleCase","isRequired","AllowedThemes","ThemeSetting","_this$props$setRequir","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","_this$props$setRequir2","_this$props2","themeChanged","field","hasOwnProperty","applyTheme","_this$props$setRequir3","_this$props3","_this$props$setEnforc","_this$props4","openModal","modalId","ModalIdentifiers","dialogType","dialogProps","setEnforceFocus","selected","resetFields","showAllTeamsCheckbox","displayCustom","custom","premade","themeUI","allowCustomThemes","updateType","ExternalLink","href","location","handleImportModal","allTeamsCheckbox","submitTheme","getCurrentTeamId","getTheme","getThemePreferences","getMyTeamsCount","UserSettingsTheme","ManageLanguage","modalBody","openMenu","remove","selectedOption","locale","submitUser","patchUser","updateMe","res","Error","userLocale","locales","reactSelectContainer","handleContainerKeyDown","options","keys","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","interfaceLanguageLabelAria","input","ReactSelect","classNamePrefix","menuIsOpen","menuPortalTarget","body","styles","clearable","setLanguage","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","link","msg","changeLanguage","getLanguages","ManageLanguages","ManageTimezones","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","timezone","updatedUser","timezoneLabel","selectedOptionValue","getBrowserTimezone","getTimezoneLabel","timezones","timeOptions","timeObject","utc","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","manualTimezoneInput","changeTimezone","getCurrentTimezoneLabel","getDisplayStateFromProps","militaryTime","teammateNameDisplay","availabilityStatusOnPosts","channelDisplayMode","messageDisplay","colorizeUsernames","collapseDisplay","collapsedReplyThreads","linkPreviewDisplay","lastActiveDisplay","oneClickReactionsOnPosts","clickToReply","UserSettingsDisplay","show_last_active","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","availabilityStatusOnPostsPreference","AVAILABILITY_STATUS_ON_POSTS","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","colorizeUsernamesPreference","COLORIZE_USERNAMES","collapseDisplayPreference","COLLAPSE_DISPLAY","collapsedReplyThreadsPreference","COLLAPSED_REPLY_THREADS","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","oneClickReactionsOnPostsPreference","ONE_CLICK_REACTIONS_ENABLED","clickToReplyPreference","CLICK_TO_REPLY","trackChangeIfNecessary","updateState","newState","deepEqual","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","shouldAutoUpdateTimezone","autoUpdateTimezone","preference","oldValue","trackEvent","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleCollapseReplyThreadsRadio","handleLastActiveRadio","handleLinkPreviewRadio","createSection","_firstOption$radionBu","_secondOption$radionB","firstOption","secondOption","thirdOption","onSubmit","firstMessage","radionButtonText","moreColon","firstMessageMore","more","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","childOptionToShow","childOption","firstDisplay","secondDisplay","thirdSection","childOptionSection","thirdDisplay","childDisplay","collapseSection","defaultDisplay","defineMessage","linkPreviewSection","enableLinkPreviews","lastActiveSection","lastActiveTimeEnabled","submitLastActive","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","availabilityStatusOnPostsSection","timezoneSelection","userTimezone","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","collapsedReplyThreadsAllowUserPreference","COLLAPSED_REPLY_THREADS_FALLBACK_DEFAULT","COLLAPSED_REPLY_THREADS_ON","COLLAPSED_REPLY_THREADS_OFF","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","localeName","getLanguageInfo","themeSection","oneClickReactionsOnPostsSection","enableThemeSelection","emojiPickerEnabled","_user$props","getTimezoneForUserProfile","getCurrentTimezoneFull","automaticTimezoneNotSet","generateCurrentTimezoneLabel","getUserCurrentTimezone","AllowCustomThemes","EnableLinkPreviews","EnableThemeSelection","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","EnableEmojiPicker","EnableLastActiveTime","getUser","isLanguageAvailable","DefaultClientLocale","isCollapsedThreadsAllowed","CollapsedThreads","getCollapsedThreadsPreference","SettingPicture","Component","_this$props$updateSec","removeSrc","setDefaultSrc","confirmButton","_this$props$onRemove","loadingPicture","onRemove","_this$props$onSetDefa","onSetDefault","_this$props$onSubmit","focusFirstElement","_this$props$onFileCha","_this$props5","onFileChange","selectInput","click","file","previewBlob","URL","createObjectURL","reader","FileReader","onload","orientation","FileUtils","result","orientationStyles","readAsArrayBuffer","imageContext","imageStyles","backgroundImage","defaultImageSrc","_title","imageElement","handler","handleRemoveSrc","handleSetDefaultSrc","_this$settingList$cur","handleFileSelected","setPicture","revokeObjectURL","img","renderImg","imgRender","buttonRender","disableSaveButtonFocus","submitActive","accept","handleFileChange","handleInputFile","localizeMessage","handleSave","LoadingWrapper","loading","helpText","FormError","errors","handleCancel","holders","usernameReserved","usernameGroupNameUniqueness","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","username","profilePicture","close","position","UserSettingsGeneralTab","PureComponent","email","resendStatus","showSpinner","sendVerificationEmail","Utils","handleEmailResend","usernameError","errObj","ValidationErrors","min","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","_ref2","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","AnnouncementBarTypes","server_error_id","setDefaultProfileImage","pictureFile","AcceptedProfileImageTypes","size","maxFileSize","uploadProfileImage","_ref3","setupInitialState","files","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","autoFocus","updateFirstName","maxLength","onFocus","updateLastName","notifClick","notifLink","notify","submitName","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","submitPosition","setDefault","imgSrc","ldapPictureAttributeSet","submitPicture","last_picture_update","setDefaultProfilePicture","updatePicture","minMessage","date","FormattedDate","Date","day","month","year","originalEmail","createEmailSection","emailVerificationEnabled","updateEmail","updateConfirmEmail","updateCurrentPassword","submitEmail","nameSection","createNameSection","nicknameSection","createNicknameSection","usernameSection","createUsernameSection","positionSection","createPositionSection","emailSection","pictureSection","createPictureSection","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","LdapPictureAttributeSet","DesktopAndMobileNotificationSettings","setParentState","isCollapsedThreadsEnabled","desktopActivity","sendPushNotifications","pushActivity","pushStatus","desktopThreads","pushThreads","desktopAndMobileSettingsDifferent","editButtonRef","previousActiveRef","_editButtonRef$curren","handleChangeForSendDesktopNotificationsRadio","event","handleChangeForDesktopThreadsCheckbox","NotificationLevels","handleChangeForDifferentMobileNotificationsCheckbox","handleChangeForSendMobileNotificationsSelect","handleChangeForMobileThreadsCheckbox","handleChangeForTriggerMobileNotificationsSelect","maximizedSettingsInputs","useMemo","maximizedSettingInputs","sendDesktopNotificationsSection","optionsOfSendNotifications","optionOfSendNotifications","shouldShowDesktopThreadsSection","desktopThreadNotificationSection","Fragment","differentMobileNotificationsSection","shouldShowSendMobileNotificationsSection","sendMobileNotificationsSection","htmlFor","inputId","isClearable","isSearchable","components","IndicatorSeparator","NoIndicatorSeparatorComponent","getValueOfSendMobileNotificationForSelect","shouldShowMobileThreadsSection","threadNotificationSection","shouldShowTriggerMobileNotificationsSection","triggerMobileNotificationsSection","optionsOfSendMobileNotificationsWhenSelect","getValueOfSendMobileNotificationWhenSelect","disabledPushNotificationsSection","getCollapsedText","UserSettingsNotificationSections","find","memo","DesktopNotificationSoundsSettings","desktopSound","desktopNotificationSound","isCallsRingingEnabled","callsDesktopSound","callsNotificationSound","handleChangeForMessageNotificationSoundCheckbox","stopTryNotificationRing","handleChangeForIncomginCallSoundCheckbox","handleChangeForMessageNotificationSoundSelect","tryNotificationSound","handleChangeForIncomingCallSoundSelect","tryNotificationRing","isMessageNotificationSoundChecked","messageSoundSection","optionsOfMessageNotificationSoundsSelect","placeholder","getValueOfNotificationSoundsSelect","isIncomingCallSoundChecked","callSoundSection","optionsOfIncomingCallSoundsSelect","getValueOfIncomingCallSoundsSelect","desktopNotificationSoundIsSelected","notificationSoundKeys","callNotificationSoundIsSelected","callNotificationSoundKeys","hasCallsSound","hasDesktopSound","callsSound","getEmailInterval","enableEmailNotification","enableEmailBatching","emailIntervalPreference","INTERVAL_NEVER","INTERVAL_IMMEDIATE","INTERVAL_FIFTEEN_MINUTES","INTERVAL_HOUR","validValuesWithoutEmailBatching","EmailNotificationSetting","enableEmail","getAttribute","newInterval","emailInterval","sendEmailNotifications","batchingOptions","batchingInfo","threadsNotificationSelection","threads","handleThreadsOnChange","getDerivedStateFromProps","nextProps","_this$editButtonRef$c","renderMaxSettingView","renderMinSettingView","getPreference","EnableEmailBatching","SendEmailNotifications","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","rows","onMessageChanged","WHITE_SPACE_REGEX","COMMA_REGEX","getDefaultStateFromProps","desktop","emailThreads","sound","comments","_props$user$notify_pr","_props$user$notify_pr2","notify_props","desktop_threads","push_threads","email_threads","desktop_sound","calls_desktop_sound","desktop_notification_sound","calls_notification_sound","push_status","auto_responder_active","auto_responder_message","validNotificationLevels","includes","areDesktopAndMobileSettingsDifferent","usernameKey","firstNameKey","channelKey","isCustomKeysWithNotificationInputChecked","customKeysWithNotification","customKeysWithHighlight","_props$user$notify_pr3","_props$user$notify_pr4","_props$user$notify_pr5","_props$user$notify_pr6","_props$user$notify_pr7","_props$user$notify_pr8","mention_keys","mentionKeys","filter","mentionKey","highlight_keys","highlightKey","channel","customKeysWithNotificationInputValue","customKeysWithHighlightInputValue","notifyCommentsLevel","NotificationsTab","join","highlightKeys","payloadUser","response","formattedValue","newValue","_this$state$customKey","_this$state$customKey2","_this$state$customKey3","_this$state$customKey4","unsavedCustomKeyWithNotification","updateCustomKeysWithNotificationWithInputValue","_this$state$customKey5","_this$state$customKey6","_this$state$customKey7","_this$state$customKey8","_newValue$trim$replac","_newValue$trim","unsavedCustomKeyWithHighlight","updateCustomKeysWithHighlightWithInputValue","isSectionExpanded","expandedSection","handleChangeForFirstNameKeyCheckbox","handleChangeForUsernameKeyCheckbox","handleChangeForChannelKeyCheckbox","handleChangeForCustomKeysWithNotificationCheckbox","CreatableReactSelect","isMulti","customKeywordsSelectorStyles","DropdownIndicator","Menu","MenuList","handleChangeForCustomKeysWithNotificationInput","inputValue","onInputChange","handleChangeForCustomKeysWithNotificationInputValue","onBlur","handleBlurForCustomKeysWithNotificationInput","handleOnKeydownForCustomKeysWithNotificationInput","selectedMentionKeys","customKeysWithNotificationStringArray","collapsedDescription","handleChangeForCustomKeysWithHightlightInput","handleChangeForCustomKeysWithHighlightInputValue","handleBlurForCustomKeysWithHighlightInput","handleOnKeydownForCustomKeysWithHighlightInput","isEnterpriseOrCloudOrSKUStarterFree","isEnterpriseReady","RestrictedIndicator","blocked","feature","MattermostFeatures","minimumPlanRequiredForFeature","LicenseSkus","tooltipTitle","tooltipMessageBlocked","titleAdminPreTrial","messageAdminPreTrial","titleAdminPostTrial","messageAdminPostTrial","titleEndUser","messageEndUser","br","ctaExtraContent","clickCallback","handleCloseSettingsModal","commentsActive","handleNotifyCommentsRadio","setStateValue","keywordsWithNotificationSection","createKeywordsWithNotificationSection","keywordsWithHighlightSection","createKeywordsWithHighlightSection","commentsSection","createCommentsSection","autoResponderSection","createAutoResponderSection","chunks","LightbulbOutlineIcon","handleEmailRadio","enableAutoResponder","container","baseStyle","marginBlockStart","control","baseStyles","backgroundColor","border","borderColor","multiValue","background","multiValueLabel","indicatorSeparator","indicatorSeperatorStyles","multiValueRemove","multiValueRemoveStyles","cursor","mapStateToProps","SendPushNotifications","ExperimentalEnableAutomaticReplies","license","subscriptionProduct","getSubscriptionProduct","BuildEnterpriseReady","isCollapsedThreadsEnabledForUser","isCallsEnabled","isCallsRingingEnabledOnServer","UserSettingsNotifications","action","buttonText","getPluginPreferenceKey","pluginId","slice","markdownOptions","mentionHighlight","RadioOption","selectedValue","onSelected","RadioInput","informChange","useSelector","setSelectedValue","PluginSetting","useDispatch","preferenceMin","toUpdate","minDescribe","_setting$options$find","v","onSettingChanged","_section$onSubmit","CustomComponent","component","inputEl","PluggableErrorBoundary","PluginTab","headerText","pluginName","PluginAction","sections","sectionEl","AccessHistoryModal","getUserAudits","userAudits","setShow","onCloseClick","content","LoadingScreen","AuditTable","audits","showIp","showSession","bsSize","getCurrentUserAudits","DeviceIcon","isMessageDescriptor","deviceTitle","devicePicture","MoreInfo","currentSession","handleMoreInfo","moreInfo","firstAccessTime","create_at","getMonthLong","time","FormattedTime","hour","minute","os","browser","ActivityLog","submitRevoke","session","device_id","devicePlatform","appleIcon","General","androidIcon","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","windowsIcon","linuxIcon","ActivityLogModal","altId","_e$target","modalContent","revokeSession","getSessions","onShow","activityList","sessions","reduce","array","getUserSessions","getCurrentLocale","MfaSection","getHistory","mfaEnforced","mfaActive","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescriptionRef","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","token","confirmComplete","confirmHideCancel","UserUtils","roles","handleCreateToken","Keyboard","confirmCreateToken","tokenId","userAccessTokens","FormattedMarkdownMessage","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","linkTokens","DeveloperLinks","linkAPI","onKeyPress","saveTokenKeyPress","savingMessage","stopCreatingToken","WarningIcon","additionalClassName","startCreatingToken","hideCancel","entities","users","myUserAccessTokens","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SECTION_TOKENS","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","isValidPassword","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","getMe","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","openidOption","ldapOption","samlOption","enableSignUpWithGitLab","Link","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","enableLdap","enableSaml","allowedToSwitchToEmail","apps","homepage","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ToggleModalButton","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOpenId","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","limits","LimitVisibleGMsDMs","limit","dmGmLimit","getVisibleDmGmLimit","ShowUnreadsCategory","showUnreadsCategory","shouldShowUnreadsCategory","UserSettingsSidebar","UserSettings","GeneralTab","DisplayTab","SidebarTab","AdvancedTab","pluginSettings","SmartLoader","children","onLoaded","timeoutFinished","setTimeoutFinished","UserSettingsModal","_props$activeTab","cmdOrCtrlPressed","handleHide","requireConfirm","active_tab","isContentProductSettings","active_section","ReactDOM","modalBodyRef","enforceFocus","customConfirmAction","afterConfirm","handleConfirm","handleCollapse","skipConfirm","useURL","isValidUrl","startsWith","userID","scrollTop","modalTitle","userDisplayName","getDisplayName","handleHidden","setLoadingFinished","LoadingSpinner","getUserSettingsTabs","getProfileSettingsTab","getPluginsSettingsTab","handleCancelConfirmation"],"sourceRoot":""}